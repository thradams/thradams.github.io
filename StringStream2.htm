<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>StringStream.h</p>

<p>{{{cpp</p>

<h1>pragma once</h1>
<h1>include <cassert></h1>

<p>struct StringStream{  const wchar  const wchar  size  size  bool           m  wchar  bool           m</p>

<p>  bool GetCharCore(wchar  {    if (m    {      ch = m      m      m      return true;    }</p>

<p>    if (m      return false;</p>

<p>    ch = </p>

<p>    if (ch == L'\0')    {      ch = '\0';      m    }</p>

<p>    return true;  }</p>

<p>public:</p>

<p>  StringStream(const wchar    : m    , m    , m    , m    , m    , m  {    m  }</p>

<p>  friend void PutBack(StringStream&amp; stream,  wchar  {    assert(stream.m</p>

<p>    if (ch == L'\n')    {      if (stream.m      {        stream.m      }    }    else    {      if (stream.m      {        stream.m      }    }</p>

<p>    stream.m    stream.m  }</p>

<p>  friend bool GetChar(StringStream&amp; stream, wchar  {    bool b = stream.GetCharCore(ch);</p>

<p>    if (b &amp;&amp; ch == L'\n')    {      stream.m      stream.m    }    else    {      stream.m    }</p>

<p>    return b;  }</p>

<p>  size  {    return stream.m  }</p>

<p>  size  {    return stream.m  }};</p>

<p>}}}</p>


<p>Sample:</p>

<p>{{{cpp</p>
<h1>include "stdafx.h"</h1>

<h1>include <iostream></h1>
<h1>include "StringStream.h"</h1>

<p>const wchar{  switch (i)  {    case L'\0': return L&quot;\\0&quot;;    case L'\r':return L&quot;\\r&quot;;    case L'\n': return L&quot;\\n&quot;;    case L'\t': return L&quot;\\t&quot;;    case L'\'':return L&quot;\\'&quot;;    case L'\&quot;':return L&quot;\\\&quot;&quot;;    case L'\?':return L&quot;\\?&quot;;    case L'\\':return L&quot;\\\\&quot;;    case L'\a':return L&quot;\\a&quot;;    case L'\b':return L&quot;\\b&quot;;    case L'\f':return L&quot;\\f&quot;;    case L'\v':return L&quot;\\v&quot;;  }</p>

<p>  static wchar  ch  return ch;}</p>

<p>template&lt;class T&gt;void PrintAll(T&amp; filestream){  wchar</p>

<p>  while (GetChar(filestream, ch))  {    std::wcout &lt;&lt; IntToLiteral(ch) &lt;&lt; std::endl;  }}</p>

<p>int {  StringStream filestream(L&quot;test\n&quot;);  PrintAll(filestream);  PutBack(filestream, '\0');  PrintAll(filestream);  return 0;}}}}</p>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  