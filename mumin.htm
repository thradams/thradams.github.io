
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 




<p>Given a unsigned number, the template return the minimum unsigned type that can be used to store the value informed.</p>

<pre>
<span class="keyword">#include</span> &lt;climits&gt;
<span class="keyword">#include</span> &lt;iostream&gt;

<span class="keyword">template</span>&lt;<span class="keyword">bool</span> cond, <span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;
<span class="keyword">struct</span> static_if {
    <span class="keyword">typedef</span> T1 type;
};

<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;
<span class="keyword">struct</span> static_if&lt;<span class="keyword">false</span>, T1, T2&gt; {
    <span class="keyword">typedef</span> T2 type;
}; 

<span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> umax&gt;
<span class="keyword">struct</span> make_unsigned_min
{
    <span class="keyword">typedef</span> <span class="keyword">typename</span> static_if&lt;umax &lt;= UCHAR_MAX, <span class="keyword">unsigned</span> <span class="keyword">char</span>, 
        <span class="keyword">typename</span> static_if&lt;umax &lt;= USHRT_MAX, <span class="keyword">unsigned</span> <span class="keyword">short</span>,
        <span class="keyword">typename</span> static_if&lt;umax &lt;= UINT_MAX, <span class="keyword">unsigned</span> <span class="keyword">int</span>, 
        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt;::type &gt;::type&gt;::type type;

};

<span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])
{

    std::cout &lt;&lt; <span class="keyword">typeid</span>(make_unsigned_min&lt;<span class="number">10</span>&gt;::type).name() &lt;&lt; std::endl;
    std::cout &lt;&lt; <span class="keyword">typeid</span>(make_unsigned_min&lt;<span class="number">255</span>&gt;::type).name()&lt;&lt; std::endl;
    std::cout &lt;&lt; <span class="keyword">typeid</span>(make_unsigned_min&lt;<span class="number">256</span>&gt;::type).name()&lt;&lt; std::endl;
    std::cout &lt;&lt; <span class="keyword">typeid</span>(make_unsigned_min&lt;<span class="number">4294967295</span>&gt;::type).name()&lt;&lt; std::endl;
    std::cout &lt;&lt; <span class="keyword">typeid</span>(make_unsigned_min&lt;<span class="number">4294967296</span>&gt;::type).name()&lt;&lt; std::endl;

    <span class="keyword">return</span> <span class="number">0</span>;
}

</pre>



<p>Output:</p>

<pre>
unsigned char
unsigned char
unsigned short
unsigned int
unsigned __int64
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  