<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>Some ideas about dot operator overloding.</p>


<h3>Sample 1:</h3>
<pre>
<span class="keyword">class</span> C { 
<span class="keyword">public</span>:
 <span class="keyword">int</span> get() { <span class="keyword">return</span> <span class="number">1</span>; }
};

<span class="keyword">int</span> <span class="keyword">operator</span> . square(<span class="keyword">const</span> C&amp; r) 
{
     <span class="keyword">return</span> r.get() * r.get();   
}

<span class="keyword">int</span> main()
{
  C c;
  c.square(); <span class="comment">//ok
</span>  square(c);  <span class="comment">//ok
</span>}
</pre>


<h3>Sample 2:</h3>
<p>What happens if C::square exists?</p>
<pre>
<span class="keyword">class</span> C { 
<span class="keyword">public</span>:
 <span class="keyword">int</span> get() { <span class="keyword">return</span> <span class="number">1</span>; }

  <span class="keyword">int</span> square() <span class="keyword">const</span>
  {
     <span class="keyword">return</span> r.get() * r.get();   
  }
};

<span class="comment">//Error, ambiguous C already have C::square
</span><span class="keyword">int</span> <span class="keyword">operator</span> . square(<span class="keyword">const</span> C&amp; r) 
{
     <span class="keyword">return</span> r.get() * r.get();   
}
</pre>



<h3>Sample 3:</h3>
<p>Enabling uniform call.</p>

<pre>
<span class="keyword">class</span> C { 
<span class="keyword">public</span>:
 <span class="keyword">int</span> get() { <span class="keyword">return</span> <span class="number">1</span>; }

  <span class="keyword">int</span> square() <span class="keyword">const</span>
  {
     <span class="keyword">return</span> r.get() * r.get();   
  }
};

<span class="keyword">using</span> <span class="keyword">int</span> <span class="keyword">operator</span> . square(<span class="keyword">const</span> C&amp; r);

<span class="keyword">int</span> main()
{
  C c;
  c.square(); <span class="comment">//ok
</span>  square(c);  <span class="comment">//ok
</span>}
</pre>


<h3>Sample 3:</h3>
<p>Uniform call not enabled.</p>

<pre>
<span class="keyword">class</span> C { 
<span class="keyword">public</span>:
 <span class="keyword">int</span> get() { <span class="keyword">return</span> <span class="number">1</span>; }

  <span class="keyword">int</span> square() <span class="keyword">const</span>
  {
     <span class="keyword">return</span> r.get() * r.get();   
  }
};

<span class="keyword">int</span> main()
{
  C c;
  c.square(); <span class="comment">//ok
</span>  square(c);  <span class="comment">//error
</span>}
</pre>


<h3>Sample 4:</h3>

<p>For non-class types.</p>

<pre>
std::<span class="keyword2">string</span> <span class="keyword">operator</span> . tostring(<span class="keyword">int</span> i)
{
...
}

<span class="keyword">int</span> main()
{
  <span class="keyword">int</span> i = <span class="number">1</span>;
  std::<span class="keyword2">string</span> s = i.tostring();
}

</pre>



<h3>Sample 5:</h3>
<p>Syntax alternatives</p>

<pre>
<span class="keyword">class</span> C { 
<span class="keyword">public</span>:
 <span class="keyword">int</span> get() { <span class="keyword">return</span> <span class="number">1</span>; }
};

<span class="keyword">int</span> <span class="keyword">operator</span> C::square() <span class="keyword">const</span>
{
     <span class="keyword">return</span> <span class="keyword">this</span>.get() * <span class="keyword">this</span>.get();   
}
</pre>




<h2>References</h2>

<p><a href="http://drdobbs.com/184401197">How Non-Member Functions Improve Encapsulation - Scott Meyers</a></p>

<p><a href="http://drdobbs.com/blogs/cpp/232700394">Uniform Function Call Syntax - Walter Bright</a></p>

<p><a href="https://groups.google.com/group/comp.lang.c++.moderated/browse_frm/thread/70bee02fdf74fb81/cb54bcba598c4a12?hl=pt&amp;lnk=gst&amp;q=dot+overloding#cb54bcba598c4a12">comp.lang.c++.moderated</a></p>

<p><a href="http://www2.research.att.com/~bs/bs_faq2.html">FAQ Stroustrup</a></p>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  