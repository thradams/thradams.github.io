
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>Given a list of periods (begin-end) this algorithm will join and merge periods that have intersection.</p>


<pre>


<span class="keyword">#include</span> &lt;<span class="keyword2">vector</span>&gt;
<span class="keyword">#include</span> &lt;algorithm&gt;
<span class="keyword">#include</span> &lt;cassert&gt;

<span class="keyword">using</span> <span class="keyword">namespace</span> std;


<span class="keyword">typedef</span> <span class="keyword">int</span> DateTime;

<span class="keyword">struct</span> Period
{
  DateTime begin = <span class="number">0</span>;
  DateTime end = <span class="number">0</span>;
  <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Period&amp; other) <span class="keyword">const</span>
  {
    <span class="keyword">return</span> begin == other.begin &amp;&amp; end == other.end;
  }
  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Period&amp; other) <span class="keyword">const</span>
  {
    <span class="comment">//only begin is used on purpouse
</span>    <span class="keyword">return</span> begin &lt; other.begin;
  }
};

<span class="comment">// This algorithm build a new version of v 
</span><span class="comment">// adding a new period
</span><span class="comment">// v is always in a final state (no orverlapping)
</span><span class="keyword">void</span> AddPeriod(<span class="keyword2">vector</span>&lt;Period&gt;&amp; v, Period period)
{
  <span class="keyword">if</span> (v.empty())
  {
    v.push_back(period);
  }
  <span class="keyword">else</span>
  {
    <span class="comment">//it points to the period that has begin &gt;= period.begin
</span>    <span class="keyword">auto</span> it = lower_bound(v.begin(), v.end(), period);
    <span class="keyword">const</span> <span class="keyword">int</span> index = it == v.end() ? <span class="number">-1</span> : it - v.begin();

    <span class="keyword">if</span> (it == v.end())
    {
      <span class="comment">//The added period  is represented as { } 
</span>      <span class="comment">// 1 - ... [ { ] }
</span>      <span class="comment">// 2 - ... [ { } ] 
</span>      <span class="comment">// 3 - ... [  ] { }
</span>
      <span class="keyword">if</span> (period.begin &lt; v.back().end)
      {
        <span class="comment">// 1 - ... [ { ] }
</span>        <span class="comment">// 2 - ... [ { } ] 
</span>
        <span class="keyword">if</span> (period.end &gt; v.back().end)
        {
          <span class="comment">// 1 - ... [ { ] }
</span>          v.back().end = period.end; <span class="comment">//ok
</span>        }
        <span class="keyword">else</span>
        {
          <span class="comment">// 2 - ... [ { } ]  or exactly the same
</span>        }
      }
      <span class="keyword">else</span>
      {
        <span class="comment">// 3 - ... [  ] { }
</span>        v.push_back(period); <span class="comment">//ok
</span>      }
    }
    <span class="keyword">else</span>
    {
      <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; v[index - <span class="number">1</span>].end &gt; period.begin)
      {
        <span class="comment">//  ..[ { ] [ ] [ ] ...
</span>        <span class="comment">//          ^            
</span>
        it = v.begin() + (index - <span class="number">1</span>);

        <span class="comment">// it now points to the previous period
</span>
        <span class="comment">//  ..[ { ] [ ] [ ] ...
</span>        <span class="comment">//    ^            
</span>      }
      <span class="keyword">else</span>
      {
        <span class="comment">//  ... [ ] { [ ] [ ] ...
</span>        <span class="comment">//            ^          
</span>
        <span class="comment">//fixing the current period begin
</span>        it-&gt;begin = period.begin;
      }

      <span class="comment">//finding the last period and remove
</span>      <span class="comment">//periods in between
</span>
      DateTime last = period.end &gt; it-&gt;end ? period.end : it-&gt;end;

      <span class="keyword">auto</span> it2 = it + <span class="number">1</span>;
      <span class="keyword">for</span> (; it2 != v.end() &amp;&amp; it2-&gt;begin &lt;= period.end; it2++)
      {
        last = period.end &gt; it2-&gt;end ? period.end : it2-&gt;end;
      }

      <span class="comment">//fix end
</span>      it-&gt;end = last;

      <span class="comment">//remove periods in between
</span>      v.erase(it + <span class="number">1</span>, it2);
    }
  }
}

<span class="comment">//This function is used in tests. It builds
</span><span class="comment">//the period given the string representation
</span><span class="comment">//For instance &quot; [ ] &quot; the period is 1 - 3
</span><span class="comment">//             &quot; |   &quot; the period is 1 - 1
</span><span class="keyword">static</span> <span class="keyword">void</span> BuildVectorForTest(<span class="keyword2">vector</span>&lt;Period&gt;&amp; v, <span class="keyword">const</span> <span class="keyword">char</span>* s)
{
  DateTime begin = <span class="number">0</span>;
  <span class="keyword">int</span> i = <span class="number">0</span>;
  <span class="keyword">while</span> (s[i] != <span class="number">0</span>)
  {
    <span class="keyword">if</span> (s[i] == <span class="string">'['</span>)
    {
      <span class="comment">//start
</span>      begin = i;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">']'</span>)
    {
      <span class="comment">//end
</span>      AddPeriod(v, { begin, (DateTime)i });
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'|'</span>)
    {
      <span class="comment">//start==end
</span>      AddPeriod(v, { (DateTime)i, (DateTime)i });
    }
    i++;
  }
}

<span class="keyword">void</span> Test1()
{
  <span class="comment">//[ ]
</span>  <span class="keyword2">vector</span>&lt;Period&gt; v;
  AddPeriod(v, { <span class="number">1</span>, <span class="number">3</span> });
  AddPeriod(v, { <span class="number">2</span>, <span class="number">6</span> });
  AddPeriod(v, { <span class="number">7</span>, <span class="number">10</span> });
  AddPeriod(v, { <span class="number">8</span>, <span class="number">16</span> });
  <span class="keyword2">vector</span>&lt;Period&gt; v2 = { { <span class="number">1</span>, <span class="number">6</span> },{ <span class="number">7</span>, <span class="number">16</span> } };
  assert(equal(v.begin(), v.end(), v2.begin()));
}


<span class="keyword">void</span> Test(<span class="keyword">const</span> <span class="keyword">char</span>* periods[], <span class="keyword">int</span> size)
{
  <span class="keyword2">vector</span>&lt;Period&gt; v;
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)
  {
    <span class="keyword2">vector</span>&lt;Period&gt; v2;
    BuildVectorForTest(v2, periods[i]);
    AddPeriod(v, v2.back());
  }

  <span class="keyword2">vector</span>&lt;Period&gt; v2;
  BuildVectorForTest(v2, periods[size - <span class="number">1</span>]);
  <span class="keyword">if</span> (v2.size() == v.size())
  {
    assert(equal(v.begin(), v.end(), v2.begin()));
  }
  <span class="keyword">else</span>
  {
    assert(<span class="keyword">false</span>);
  }
}


<span class="keyword">void</span> Test2()
{
  <span class="keyword">const</span> <span class="keyword">char</span>* periods[] =
  {
    <span class="string">&quot; | &quot;</span>,
    <span class="string">&quot;   | &quot;</span>,
    <span class="string">&quot; | | &quot;</span> <span class="comment">//aswer
</span>  };
  Test(periods, <span class="keyword">sizeof</span>(periods) / <span class="keyword">sizeof</span>(periods[<span class="number">0</span>]));
}


<span class="keyword">void</span> Test3()
{
  <span class="keyword">const</span> <span class="keyword">char</span>* periods[] =
  {
    <span class="string">&quot; [ ]&quot;</span>,
    <span class="string">&quot;     [ ]&quot;</span>,
    <span class="string">&quot; [       ]&quot;</span>,
    <span class="string">&quot; [       ]&quot;</span> <span class="comment">//aswer
</span>  };
  Test(periods, <span class="keyword">sizeof</span>(periods) / <span class="keyword">sizeof</span>(periods[<span class="number">0</span>]));
}

<span class="keyword">void</span> Test4()
{
  <span class="keyword">const</span> <span class="keyword">char</span>* periods[] =
  {
    <span class="string">&quot; [ ]&quot;</span>,
    <span class="string">&quot;      |&quot;</span>,
    <span class="string">&quot; [ ]  |&quot;</span> <span class="comment">//aswer
</span>  };
  Test(periods, <span class="keyword">sizeof</span>(periods) / <span class="keyword">sizeof</span>(periods[<span class="number">0</span>]));
}

<span class="keyword">void</span> Test5()
{
  <span class="keyword">const</span> <span class="keyword">char</span>* periods[] =
  {
    <span class="string">&quot; |    &quot;</span>,
    <span class="string">&quot;     |&quot;</span>,
    <span class="string">&quot; [   ] &quot;</span>,
    <span class="string">&quot; [   ] &quot;</span> <span class="comment">//asnwer
</span>  };
  Test(periods, <span class="keyword">sizeof</span>(periods) / <span class="keyword">sizeof</span>(periods[<span class="number">0</span>]));
}
<span class="keyword">void</span> Test6()
{
  <span class="keyword">const</span> <span class="keyword">char</span>* periods[] =
  {
    <span class="string">&quot; [   ]             &quot;</span>,
    <span class="string">&quot;       [   ]       &quot;</span>,
    <span class="string">&quot;             [   ] &quot;</span>,
    <span class="string">&quot;   [           ]   &quot;</span>,
    <span class="string">&quot; [               ]   &quot;</span> <span class="comment">//asnwer
</span>  };
  Test(periods, <span class="keyword">sizeof</span>(periods) / <span class="keyword">sizeof</span>(periods[<span class="number">0</span>]));
}


<span class="keyword">int</span> main()
{
  Test6();
  Test5();
  Test4();

  Test1();
  Test2();
  Test3();

  <span class="keyword">return</span> <span class="number">0</span>;
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  