
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 




<pre>

#ifndef  _WSTR_H_
#define _WSTR_H_

struct wstr
{
  wchar_t* psz;
  size_t size;
  size_t capacity;
};

#define WSTR_INIT { 0, 0, 0 }

void wstr_init(struct wstr* wstr);

int wstr_reserve(struct wstr* p, size_t nelements);

void wstr_destroy(struct wstr* wstr);

void wstr_clear(struct wstr* wstr);

int wstr_set_n(struct wstr* p,
               const wchar_t * source,
               size_t nelements);

int wstr_set(struct wstr* p,
             const wchar_t * source);

int wstr_append_n(struct wstr* p,
                  const wchar_t * source,
                  size_t nelements);

int wstr_append(struct wstr* p,
                const wchar_t * source);

#endif  /*_WSTR_H_*/


</pre>


<pre>

<span class="keyword">#include</span> <span class="string">&quot;stdafx.h&quot;</span>

<span class="keyword">#include</span> <span class="string">&quot;wstr.h&quot;</span>
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;

<span class="keyword">void</span> wstr_init(<span class="keyword">struct</span> wstr* wstr)
{
  wstr-&gt;psz = NULL;
  wstr-&gt;size = <span class="number">0</span>;
  wstr-&gt;capacity = <span class="number">0</span>;
}

<span class="keyword">void</span> wstr_destroy(<span class="keyword">struct</span> wstr* wstr)
{
  <span class="keyword">if</span> (wstr)
  {
    free(wstr-&gt;psz);
    wstr-&gt;size = <span class="number">0</span>;
    wstr-&gt;capacity = <span class="number">0</span>;
  }
}

<span class="keyword">static</span> <span class="keyword">int</span> reserve(<span class="keyword">struct</span> wstr* p, size_t nelements)
{
  <span class="keyword">int</span> r = <span class="number">0</span>;
  <span class="keyword">if</span> (nelements &gt; p-&gt;capacity)
  {
    <span class="keyword">wchar_t</span>* pnew = (<span class="keyword">wchar_t</span>*)realloc(p-&gt;psz, nelements * <span class="keyword">sizeof</span>(p-&gt;psz[<span class="number">0</span>]));
    <span class="keyword">if</span> (pnew)
    {
      p-&gt;psz = pnew;
      p-&gt;capacity = nelements;
    }
    <span class="keyword">else</span>
    {
      r = <span class="number">1</span>;
    }
  }
  <span class="keyword">return</span> r;
}

<span class="keyword">int</span> wstr_reserve(<span class="keyword">struct</span> wstr* p, size_t nelements)
{
  <span class="keyword">return</span> reserve(p, nelements + <span class="number">1</span>);
}

<span class="keyword">static</span> <span class="keyword">int</span> wstr_grow(<span class="keyword">struct</span> wstr* p, size_t nelements)
{
  <span class="keyword">int</span> r = <span class="number">0</span>;
  <span class="keyword">if</span> (nelements &gt; p-&gt;capacity)
  {
    size_t new_nelements = p-&gt;capacity + p-&gt;capacity / <span class="number">2</span>;
    <span class="keyword">if</span> (new_nelements &lt; nelements)
    {
      new_nelements = nelements;
    }
    r = reserve(p, new_nelements);
  }
  <span class="keyword">return</span> r;
}

<span class="keyword">int</span> wstr_set_n(<span class="keyword">struct</span> wstr* p,
               <span class="keyword">const</span> <span class="keyword">wchar_t</span> * source,
               size_t nelements)
{
  <span class="keyword">int</span> r = wstr_grow(p, nelements + <span class="number">1</span>);
  <span class="keyword">if</span> (r == <span class="number">0</span>)
  {
    wcsncpy(p-&gt;psz, source, nelements);
    p-&gt;psz[nelements] = <span class="number">0</span>;
    p-&gt;size = nelements;
  }
  <span class="keyword">return</span> r;
}

<span class="keyword">int</span> wstr_set(<span class="keyword">struct</span> wstr* p,
               <span class="keyword">const</span> <span class="keyword">wchar_t</span> * source)
{
  <span class="keyword">return</span> wstr_set_n(p, source, wcslen(source));
}

<span class="keyword">int</span> wstr_append_n(<span class="keyword">struct</span> wstr* p, 
                  <span class="keyword">const</span> <span class="keyword">wchar_t</span> * source,
                  size_t nelements)
{
  <span class="keyword">int</span> r = wstr_grow(p, p-&gt;size + nelements + <span class="number">1</span>);
  <span class="keyword">if</span> (r == <span class="number">0</span>)
  {    
    wcsncpy(p-&gt;psz + p-&gt;size, source, nelements);
    p-&gt;psz[p-&gt;size + nelements] = <span class="number">0</span>;
    p-&gt;size += nelements;
  }
  <span class="keyword">return</span> r;
}

<span class="keyword">int</span> wstr_append(<span class="keyword">struct</span> wstr* p,
                <span class="keyword">const</span> <span class="keyword">wchar_t</span> * source)
{
  <span class="keyword">return</span> wstr_append_n(p, source, wcslen(source));
}


<span class="keyword">void</span> wstr_clear(<span class="keyword">struct</span> wstr* wstr)
{
  <span class="keyword">if</span> (wstr-&gt;psz)
  {
    wstr-&gt;psz[<span class="number">0</span>] = <span class="number">0</span>;
    wstr-&gt;size = <span class="number">0</span>;
  }
}


</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  