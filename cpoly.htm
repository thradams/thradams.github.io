<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h2> Polymorphism in C style</h2>


<pre>
<span class="keyword">#include</span> &lt;stdlib.h&gt;

<span class="comment">//Public handles
</span><span class="keyword">typedef</span> <span class="keyword">struct</span> THShape {} * HShape;
<span class="keyword">typedef</span> <span class="keyword">struct</span> THBox {} * HBox;
<span class="keyword">typedef</span> <span class="keyword">struct</span> THCircle {} * HCircle;

<span class="comment">//--------------------------------------------------
</span><span class="comment">// Implementation
</span>
<span class="comment">//Private vtable for TShape
</span><span class="keyword">struct</span> TShapeVTable
{
  <span class="keyword">void</span> (*Print)(<span class="keyword">void</span>*);
  <span class="keyword">void</span> (*Delete)(<span class="keyword">void</span>*);  
};

<span class="comment">//Has the vtable pointer
</span><span class="keyword">struct</span> TShape
{
  TShapeVTable *pvtable;
};

<span class="comment">//Private
</span><span class="keyword">struct</span> TBox
{
  TShape base;
  <span class="comment">/////////
</span>  <span class="keyword">int</span> i;
};

<span class="comment">//Private
</span><span class="keyword">struct</span> TCircle
{
  TShape base;
  <span class="comment">/////////
</span>  <span class="keyword">double</span> d;
};

<span class="comment">//Private: Print implementation of Box
</span><span class="keyword">void</span> Print_Box(<span class="keyword">void</span>* p)
{
    TBox *pthis = (TBox*)p;
    printf(<span class="string">&quot;Box %d\n&quot;</span>, pthis-&gt;i);
}

<span class="comment">//Private: Delete implementation of Box
</span><span class="keyword">void</span> Delete_Box(<span class="keyword">void</span>* p)
{
}

<span class="comment">//Only one
</span>TShapeVTable s_TShapeBox = { &amp;Print_Box , &amp;Delete_Box};


<span class="comment">//Public
</span>HBox CreateBox()
{
  TBox* pBox = (TBox*) malloc(<span class="keyword">sizeof</span>(TBox));
  pBox-&gt;i = <span class="number">1</span>;
  pBox-&gt;base.pvtable = &amp;s_TShapeBox;
  <span class="keyword">return</span> (HBox)pBox;
}

<span class="comment">//Private
</span><span class="keyword">void</span> Print_Circle(<span class="keyword">void</span>* p)
{
    TCircle *pthis = (TCircle*)p;
    printf(<span class="string">&quot;Circle %g\n&quot;</span>, pthis-&gt;d);
}

<span class="comment">//Private
</span><span class="keyword">void</span> Delete_Circle(<span class="keyword">void</span>* p)
{
}

<span class="comment">//Only one
</span>TShapeVTable s_TShapeCircle = { &amp;Print_Circle ,  &amp;Delete_Circle};

<span class="comment">//Public
</span><span class="keyword">void</span> Delete(HShape h)
{    
    <span class="keyword">if</span> (h)
    {
        <span class="comment">//h points to TBox or TCircle
</span>        <span class="comment">//TBox and TCircle can be used as TShape
</span>        TShape *pShape = (TShape*)h;
        (pShape-&gt;pvtable-&gt;Delete)(h);    

        free((TShape*)h);
    }
}
<span class="comment">//Public
</span>HCircle CreateCircle()
{
  TCircle* pCircle = (TCircle*) malloc(<span class="keyword">sizeof</span>(TCircle));
  pCircle-&gt;d = <span class="number">2.1</span>;
  pCircle-&gt;base.pvtable = &amp;s_TShapeCircle;
  <span class="keyword">return</span> (HCircle)pCircle;
}

<span class="comment">//Public
</span><span class="keyword">void</span> Print(HShape h)
{
    <span class="comment">//h points to TBox or TCircle
</span>    <span class="comment">//TBox and TCircle can be used as TShape
</span>    TShape *pShape = (TShape*)h;
    (pShape-&gt;pvtable-&gt;Print)(h);    
}

<span class="comment">//Test
</span><span class="keyword">int</span> main()
{
    HShape h = (HShape)CreateBox();
    Print(h);
    Delete(h);

    h = (HShape)CreateCircle();
    Print(h);
    Delete(h);
}
</pre>


<p>Using C++ to compile, a &quot;hidrid&quot; style could be:</p>

<pre>
<span class="keyword">typedef</span> <span class="keyword">struct</span> THShape {} * HShape;
<span class="keyword">typedef</span> <span class="keyword">struct</span> THBox : <span class="keyword">public</span> THShape {} * HBox;
<span class="keyword">typedef</span> <span class="keyword">struct</span> THCircle : <span class="keyword">public</span> THShape {} * HCircle;
</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  