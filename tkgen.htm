<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<p>==TkGen - A Lexical Analyzer ==Generator</p>

<p>===What is tkgen?===</p>

<p>TkGen is a lexical analyzer generator (also known as scanner generator) for C++, written in C++.</p>

<p>===Input format===</p>

<p>Basicaly the input file a list of token names and regular expressions.Input file sample:{{{NUMBERSYMBOLBLANKSOPEN\(CLOSE\)MULTI\*DIV\/PLUS\+MINUS\-}}}</p>

<p>The output is a C++ header file with a DFA (deterministic finite automaton) transitions information. </p>

<p>The generated file is combined with two template classes to create the final scanner which recognizes tokens from a source of characters that can be a file or string for instance.</p>

<p>===Try tkgen online===</p>

<p></p>

<p>===How to use the generated code?===</p>

<p>To create a Tokenizer you will need two more classes</p>
<ul>
<li> <strong>TokenizerStream</strong></li>
<li> <strong>Tokenizer</strong></li>
</ul>

<p>Both can be found </p>

<p>Complete sample{{{cpp</p>

<h1>include "stdafx.h"</h1>

<h1>include <iostream></h1>
<h1>include <fstream></h1>

<p>//download it from <a href="http://www.thradams.com/codeblog/tkgencode.htm">http://www.thradams.com/codeblog/tkgencode.htm</a></p>
<h1>include "tokenizer.h"</h1>

<p>//generated by the compiler. copy from the online tkgen and paste it in your file</p>
<h1>include "statemachine.h"</h1>


<p>int {  std::wifstream ss(argv  FileTokenizerStream&lt;wchar  Tokenizer&lt;StateMachine, FileTokenizerStream&lt;wchar</p>

<p>  std::wstring lexeme;  Tokens token;  while (tk.NextToken(lexeme, token))  {       std::wcout  &lt;&lt; TokensToString(token) &lt;&lt; L&quot;: '&quot; &lt;&lt; lexeme &lt;&lt; L&quot;'&quot; &lt;&lt; std::endl;          }}}}}</p>

<p>Input file details</p>

<p>Tkgen accepts these regex syntax:{{{?  : optional+  : one or more</p>
<ul>
<li>  : zero or more</li>
</ul>
<p>.  : any char\  : escape0-9: range inside groups(Note: ^ is not yet supported)}}}</p>


<p>===Download sample===</p>

<p></p>

<p>===References===</p>

<ul>
<li> &quot;Compilers: Principles, Techniques, and Tools&quot;, Alfred V. Aho , Ravi Sethi , Jeffrey D. Ullman</li>
<li> An Implementation of Regular Expression Parser in C</li>
</ul>

<p>===Acknowledgments===</p>

<ul>
<li> Cesar Mello for the incentive over the years to implement this kind of tokenizer generator based on DFAs. - Marcelo B. for the feedbacks and patience talking about NFA DFA etc.</li>
</ul>

<p>===History===</p>

<ul>
<li> 18 nov 2009 : web page released</li>
<li> 02 dez 2010 : compact version added </li>
</ul>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  