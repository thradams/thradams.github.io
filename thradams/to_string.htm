<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p><a href="algorithms.htm">Algorithms</a></p>

<hr>
<h3>Declaration</h3>
<pre>
<span class="keyword">template</span>&lt;<span class="keyword">class</span> It&gt;
std::<span class="keyword2">string</span> to_string(It first, It last)
</pre>




<hr>
<h3>Sample</h3>

<pre>

<span class="keyword">int</span> main()
{
    <span class="keyword">using</span> <span class="keyword">namespace</span> std;
    <span class="keyword">int</span> u[] = {<span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>};
    std::cout &lt;&lt; std::setw(<span class="number">20</span>) &lt;&lt; to_string(begin(u), end(u)) &lt;&lt; std::endl;
    std::cout &lt;&lt; std::setw(<span class="number">20</span> + <span class="number">2</span>) &lt;&lt; <span class="number">10</span> &lt;&lt; std::endl;
}

Output:
           {<span class="number">0</span> <span class="number">4</span> <span class="number">8</span> <span class="number">9</span>}
                    <span class="number">10</span>

</pre>


<hr>
<h3>Implementation</h3>

<pre>
<span class="keyword">template</span>&lt;<span class="keyword">class</span> It&gt;
std::<span class="keyword2">string</span> to_string(It first, It last)
{
    std::<span class="keyword2">string</span> result;
    result += <span class="string">&quot;{&quot;</span>;

    size_t digits = last -  first ;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = digits - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)
    {
        <span class="keyword">if</span> (i != digits - <span class="number">1</span>)
        {
            result += <span class="string">&quot; &quot;</span>;
        }

        result += std::to_string((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)first[i]);
    }

    result += <span class="string">&quot;}&quot;</span>;
    <span class="keyword">return</span> result;
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  