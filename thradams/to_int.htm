<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p><a href="algorithms.htm">Algorithms</a></p>

<p>Returns true and a value inside a unsigned long long if the conversion is possible (usign this algorithm), otherwise returns false.</p>

<hr>
<h3>Declaration</h3>
<pre>
<span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base, <span class="keyword">class</span> It&gt;
<span class="keyword">bool</span> to_int(It first, It last, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; r);
</pre>

<hr>
<h3>Sample</h3>
<pre>
         {1}     -&gt; 1
            10

         {0}     -&gt; 0
            10

   {0, 0, 0}     -&gt; 0
            10

{0, 0, 1, 2}     -&gt; 12
            10

   {1, 1, 1}     -&gt; 111
            10
</pre>

<hr>
<h3>Sample</h3>
<pre>
<span class="keyword">void</span> to_int_test()
{
  <span class="keyword">using</span> <span class="keyword">namespace</span> std;

  <span class="keyword">int</span> a[] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>};
  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;
  assert(to_int&lt;<span class="number">10</span>&gt;(begin(a), end(a), res) == <span class="keyword">true</span>);
  assert(res == <span class="number">10</span>);

  <span class="comment">//18446744073709551615 + 1
</span>  <span class="keyword">int</span> b[] = {<span class="number">1</span> + <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span> , <span class="number">1</span>};

  res = <span class="number">0</span>;
  assert(to_int&lt;<span class="number">10</span>&gt;(begin(b), end(b), res) == <span class="keyword">false</span>);
  assert(res == <span class="number">0</span>);

  
  <span class="keyword">int</span> c[] = {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>};
  res = <span class="number">0</span>;
  assert(to_int&lt;<span class="number">10</span>&gt;(begin(c), end(c), res) == <span class="keyword">true</span>);
  assert(res == <span class="number">0</span>);
}
</pre>



<hr>
<h3>Implementation</h3>

<pre>

<span class="keyword">bool</span> UnsignedUnsignedSum(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)
{
    <span class="keyword">return</span> y &lt;= LLONG_MAX  - x;
}

<span class="keyword">bool</span> UnsignedUnsignedMulti(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)
{
    <span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>)
    {
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }

    <span class="keyword">return</span> y &lt;= LLONG_MAX / x;
}

<span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base, <span class="keyword">class</span> It&gt;
<span class="keyword">bool</span> to_int(It first, It last, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; r)
{
    <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span>, <span class="string">&quot;base must be &gt; 1&quot;</span>);

    last = sig_digit_end(first, last);

    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> rb = <span class="number">1</span>;
    r = <span class="number">0</span>; <span class="comment">//out
</span>
    <span class="keyword">for</span> (; first != last; first++)
    {
        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> dig = *first;
        <span class="keyword">if</span> (!UnsignedUnsignedMulti(rb, dig) || !UnsignedUnsignedSum(r, rb * dig))
        {
            r = <span class="number">0</span>;<span class="comment">//overflow
</span>            <span class="keyword">return</span> <span class="keyword">false</span>;
        }

        r = r + rb * dig;

        <span class="keyword">if</span> (!UnsignedUnsignedMulti(rb, base))
        {
            r = <span class="number">0</span>;<span class="comment">//overflow
</span>            <span class="keyword">return</span> <span class="keyword">false</span>;
        }

        rb = rb * base;
    }

    <span class="keyword">return</span> <span class="keyword">true</span>;
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  