
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<pre>

<span class="keyword">#include</span> &lt;<span class="keyword2">list</span>&gt;
<span class="keyword">#include</span> <span class="string">&quot;typepointer.h&quot;</span>
<span class="keyword">#include</span> &lt;iostream&gt;

<span class="keyword">using</span> <span class="keyword">namespace</span> std;


<span class="keyword">int</span> main()
{
  std::<span class="keyword2">list</span>&lt;type_pointer&gt; <span class="keyword2">list</span>;

  <span class="keyword2">list</span>.push_back(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>));
  <span class="keyword2">list</span>.push_back(<span class="keyword">new</span> <span class="keyword">double</span>(<span class="number">2</span>));

  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; item : <span class="keyword2">list</span>)
  {
    <span class="keyword">if</span> (<span class="keyword">auto</span> p = item.Is&lt;<span class="keyword">int</span>&gt;())
    {
      cout &lt;&lt; *p;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">auto</span> p = item.Is&lt;<span class="keyword">double</span>&gt;())
    {
      cout &lt;&lt; *p;
    }
    cout &lt;&lt; endl;
  }

  <span class="keyword">return</span> <span class="number">0</span>;
}


}}}


typepointer.h

{{{cpp
<span class="keyword">#pragma</span> once

<span class="keyword">struct</span> type_pointer
{
  <span class="keyword">void</span>* pObject;
  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
  <span class="keyword">static</span> <span class="keyword">void</span> Delete(<span class="keyword">void</span>* p)
  {
    T* pType = (T*) p;
    <span class="keyword">delete</span> pType;
  }

  <span class="keyword">typedef</span> <span class="keyword">void</span>(*ReleaseFunction)(<span class="keyword">void</span>*);
  ReleaseFunction releaseF;
  type_pointer(type_pointer&amp;) ;<span class="comment">//= delete;
</span>  type_pointer&amp; <span class="keyword">operator</span> = (type_pointer&amp;) ;<span class="comment">//= delete;
</span>
<span class="keyword">public</span>:

  <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
  type_pointer(T* p)
  {
    releaseF = &amp;Delete&lt;T&gt;;
    pObject = p;
  }

  type_pointer(type_pointer&amp;&amp; p)
  {
    releaseF = p.releaseF;
    pObject = p.pObject;
    p.pObject = <span class="keyword">nullptr</span>;
    p.releaseF = <span class="keyword">nullptr</span>;
  }
  
  ~type_pointer()
  {
    reset();
  }  

  <span class="keyword">void</span> reset()
  {
    <span class="keyword">if</span> (pObject != <span class="keyword">nullptr</span>)
    {
      releaseF(pObject);
      pObject = <span class="keyword">nullptr</span>;
      releaseF = <span class="keyword">nullptr</span>;
    }
  }

  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
  T* Is()
  {
    <span class="keyword">return</span> releaseF == &amp;Delete&lt;T&gt; ? (T*) pObject : <span class="keyword">nullptr</span>;
  }
};



</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  