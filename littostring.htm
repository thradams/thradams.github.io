
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<p>Converts a string literal like C to a string representation.</p>

<p>For instance:</p>

<pre>
  input  :  &quot;\&quot;&quot;
  output :  &quot;

  input  :  &quot;\\&quot;
  output :  \

  input  :  &quot;a&quot;
  output :  a
</pre>

<pre>


<span class="keyword">int</span> HexToInt(<span class="keyword">const</span> <span class="keyword">wchar_t</span>* value)
{
  <span class="keyword">struct</span> CHexMap
  {
    TCHAR chr;
    <span class="keyword">int</span> value;
  };
  <span class="keyword">const</span> <span class="keyword">int</span> HexMapL = <span class="number">16</span>;
  CHexMap HexMap[HexMapL] =
  {
    {<span class="string">'0'</span>, <span class="number">0</span>}, {<span class="string">'1'</span>, <span class="number">1</span>},
    {<span class="string">'2'</span>, <span class="number">2</span>}, {<span class="string">'3'</span>, <span class="number">3</span>},
    {<span class="string">'4'</span>, <span class="number">4</span>}, {<span class="string">'5'</span>, <span class="number">5</span>},
    {<span class="string">'6'</span>, <span class="number">6</span>}, {<span class="string">'7'</span>, <span class="number">7</span>},
    {<span class="string">'8'</span>, <span class="number">8</span>}, {<span class="string">'9'</span>, <span class="number">9</span>},
    {<span class="string">'A'</span>, <span class="number">10</span>}, {<span class="string">'B'</span>, <span class="number">11</span>},
    {<span class="string">'C'</span>, <span class="number">12</span>}, {<span class="string">'D'</span>, <span class="number">13</span>},
    {<span class="string">'E'</span>, <span class="number">14</span>}, {<span class="string">'F'</span>, <span class="number">15</span>}
  };

  <span class="keyword">const</span> <span class="keyword">wchar_t</span>* s = value;
  <span class="keyword">int</span> result = <span class="number">0</span>;

  <span class="keyword">if</span> (*s == <span class="string">'0'</span> &amp;&amp; *(s + <span class="number">1</span>) == <span class="string">'X'</span>) s += <span class="number">2</span>;

  <span class="keyword">bool</span> firsttime = <span class="keyword">true</span>;

  <span class="keyword">while</span> (*s != <span class="string">'\0'</span>)
  {
    <span class="keyword">bool</span> found = <span class="keyword">false</span>;

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HexMapL; i++)
    {
      <span class="keyword">if</span> (*s == HexMap[i].chr)
      {
        <span class="keyword">if</span> (!firsttime) result &lt;&lt;= <span class="number">4</span>;

        result |= HexMap[i].value;
        found = <span class="keyword">true</span>;
        <span class="keyword">break</span>;
      }
    }

    <span class="keyword">if</span> (!found) <span class="keyword">break</span>;

    s++;
    firsttime = <span class="keyword">false</span>;
  }

  <span class="keyword">return</span> result;
}

std::<span class="keyword2">wstring</span> LiteralToString(<span class="keyword">const</span> std::<span class="keyword2">wstring</span>&amp; ws)
{
  std::<span class="keyword2">wstring</span> result;
  result.reserve(ws.size());

  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ws.size() - <span class="number">1</span>; i++)
  {
    <span class="keyword">wchar_t</span> ch = ws[i];

    <span class="keyword">if</span> (ch == <span class="string">'\\'</span>)
    {
      i++;
      ch = ws[i];

      <span class="keyword">switch</span> (ch)
      {
        <span class="keyword">case</span> L<span class="string">'0'</span>:
          ch = L<span class="string">'\0'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'a'</span>:
          ch = L'\a';
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'b'</span>:
          ch = L<span class="string">'\b'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'f'</span>:
          ch = L<span class="string">'\f'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'n'</span>:
          ch = L<span class="string">'\n'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'r'</span>:
          ch = L<span class="string">'\r'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'t'</span>:
          ch = L<span class="string">'\t'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'\\'</span>:
          ch = L<span class="string">'\\'</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'\''</span>:
          ch = L<span class="string">'\''</span>;
          <span class="keyword">break</span>;

        <span class="keyword">case</span> L<span class="string">'&quot;'</span>:
          ch = L<span class="string">'&quot;'</span>;
          <span class="keyword">break</span>;

          <span class="comment">//\uFFFE
</span>        <span class="keyword">case</span> L<span class="string">'u'</span>:
        {
          i++; <span class="comment">//skip u
</span>          <span class="keyword">wchar_t</span> s[<span class="number">5</span>];
          s[<span class="number">0</span>] = toupper(ws[i++]);
          s[<span class="number">1</span>] = toupper(ws[i++]);
          s[<span class="number">2</span>] = toupper(ws[i++]);
          s[<span class="number">3</span>] = toupper(ws[i]);
          s[<span class="number">4</span>] = <span class="number">0</span>;
          ch = HexToInt(s);
        }
        <span class="keyword">break</span>;
      }
    }<span class="comment">//
</span>
    result += ch;
  }

  <span class="keyword">return</span> result;
}


<span class="keyword">int</span> main()
{
  <span class="keyword">for</span> (;;)
  {
    std::<span class="keyword2">wstring</span> str;
    std::wcout &lt;&lt; L<span class="string">&quot;Enter a string literal like C&quot;</span> &lt;&lt; std::endl;
    std::wcin &gt;&gt; str;

    <span class="keyword">if</span> (str.empty())
      <span class="keyword">break</span>;

    str = LiteralToString(str);
    std::wcout  &lt;&lt; str &lt;&lt; std::endl;
  }
}



</pre>


<h3> Escape Sequences</h3>
<pre>
\a
Bell (alert)

\b
Backspace

\f
Formfeed

\n
New line

\r
Carriage return

\t
Horizontal tab

\v
Vertical tab

\'
Single quotation mark

\ &quot;
Double quotation mark

\\
Backslash

\?
Literal question mark

\x ooo 
ASCII character in octal notation

\x hh
ASCII character in hexadecimal notation

\x hhhh
Unicode character in hexadecimal notation if this
escape sequence is used in a wide-character constant
or a Unicode string literal.

For example, WCHAR f = L'\x4e00' or
WCHAR b[] = L&quot;The Chinese character for one is \x4e00&quot;.


</pre>
<h3> References</h3>

<p><a href="http://en.cppreference.com/w/cpp/language/escape">http://en.cppreference.com/w/cpp/language/escape</a></p>

<p><a href="http://msdn.microsoft.com/en-us/library/h21280bw(v=vs.80).aspx">http://msdn.microsoft.com/en-us/library/h21280bw(v=vs.80).aspx</a></p>

<p><a href="http://msdn.microsoft.com/en-US/library/edsza5ck(v=vs.80).aspx">http://msdn.microsoft.com/en-US/library/edsza5ck(v=vs.80).aspx</a></p>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  