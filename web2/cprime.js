// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html




/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 16656,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5259536,
    DYNAMIC_BASE = 5259536,
    DYNAMICTOP_PTR = 16624;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 16648;
/* global initializers */ /*__ATINIT__.push();*/


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 16640
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___lock() {}

  
    

  
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // Can't handle 64-bit integers
      if (!(offset_high == -1 && offset_low < 0) &&
          !(offset_high == 0 && offset_low >= 0)) {
        return -ERRNO_CODES.EOVERFLOW;
      }
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall85(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readlink
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get(), bufsize = SYSCALLS.get();
      return SYSCALLS.doReadlink(path, buf, bufsize);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

   
FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_vi": nullFunc_vi,
  "nullFunc_vii": nullFunc_vii,
  "___assert_fail": ___assert_fail,
  "___lock": ___lock,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall195": ___syscall195,
  "___syscall197": ___syscall197,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___syscall85": ___syscall85,
  "___unlock": ___unlock,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_exit": _exit,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  ___assert_fail=env.___assert_fail,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall195=env.___syscall195,
  ___syscall197=env.___syscall197,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___syscall85=env.___syscall85,
  ___unlock=env.___unlock,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _exit=env._exit,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  STACKTOP = 16656,
  STACK_MAX = 5259536,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _mallocinit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_malloc($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $4;
  $10 = $3;
  $11 = $2;
  _memcpy(($9|0),($10|0),($11|0))|0;
 }
 $12 = $4;
 STACKTOP = sp;return ($12|0);
}
function _StrArray_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (___strdup($7)|0);
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $52 = $4;
  $53 = ($52|0)!=(0|0);
  $54 = $53&1;
  STACKTOP = sp;return ($54|0);
 }
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = $2;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)>($17|0);
 do {
  if ($18) {
   $19 = $2;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21<<1;
   $5 = $22;
   $23 = $5;
   $24 = ($23|0)==(0);
   $spec$store$select = $24 ? 1 : $22;
   $5 = $spec$store$select;
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $6 = $26;
   $27 = $6;
   $28 = $5;
   $29 = $28<<2;
   $30 = (_realloc($27,$29)|0);
   $6 = $30;
   $31 = $6;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $6;
    $34 = $2;
    HEAP32[$34>>2] = $33;
    $35 = $5;
    $36 = $2;
    $37 = ((($36)) + 8|0);
    HEAP32[$37>>2] = $35;
    break;
   } else {
    $38 = $4;
    _free($38);
    $4 = 0;
    break;
   }
  }
 } while(0);
 $39 = $4;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  $52 = $4;
  $53 = ($52|0)!=(0|0);
  $54 = $53&1;
  STACKTOP = sp;return ($54|0);
 }
 $41 = $4;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 $44 = $2;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($43) + ($46<<2)|0);
 HEAP32[$47>>2] = $41;
 $48 = $2;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$49>>2] = $51;
 $52 = $4;
 $53 = ($52|0)!=(0|0);
 $54 = $53&1;
 STACKTOP = sp;return ($54|0);
}
function _StrArray_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _SplitPath($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $5;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(58);
  if ($21) {
   $22 = $6;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $5;
    $25 = ((($24)) + 1|0);
    $5 = $25;
    $26 = HEAP8[$24>>0]|0;
    $27 = $6;
    $28 = ((($27)) + 1|0);
    $6 = $28;
    HEAP8[$27>>0] = $26;
    $29 = $5;
    $30 = ((($29)) + 1|0);
    $5 = $30;
    $31 = HEAP8[$29>>0]|0;
    $32 = $6;
    $33 = ((($32)) + 1|0);
    $6 = $33;
    HEAP8[$32>>0] = $31;
    $34 = $6;
    HEAP8[$34>>0] = 0;
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $35 = $6;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $6;
   HEAP8[$37>>0] = 0;
  }
 }
 $38 = $5;
 $10 = $38;
 while(1) {
  $39 = $10;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $10;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = ($45|0)!=(58);
   $115 = $46;
  } else {
   $115 = 0;
  }
  $47 = $10;
  if (!($115)) {
   break;
  }
  $48 = ((($47)) + 1|0);
  $10 = $48;
 }
 $11 = $47;
 while(1) {
  $49 = $11;
  $50 = $5;
  $51 = ($49>>>0)>($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $11;
  $53 = ((($52)) + -1|0);
  $11 = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = ($55|0)!=(92);
  if (!($56)) {
   break;
  }
  $57 = $11;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58 << 24 >> 24;
  $60 = ($59|0)!=(47);
  if (!($60)) {
   break;
  }
  $61 = $11;
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(46);
  if ($64) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  $65 = $11;
  $10 = $65;
 }
 $66 = $9;
 $67 = ($66|0)!=(0|0);
 L25: do {
  if ($67) {
   $68 = $10;
   $12 = $68;
   while(1) {
    $69 = $12;
    $70 = ((($69)) + 1|0);
    $12 = $70;
    $71 = HEAP8[$69>>0]|0;
    $72 = $9;
    HEAP8[$72>>0] = $71;
    $73 = ($71<<24>>24)!=(0);
    if (!($73)) {
     break L25;
    }
    $74 = $9;
    $75 = ((($74)) + 1|0);
    $9 = $75;
   }
  }
 } while(0);
 $76 = $10;
 $11 = $76;
 while(1) {
  $77 = $11;
  $78 = $5;
  $79 = ($77>>>0)>($78>>>0);
  if (!($79)) {
   break;
  }
  $80 = $11;
  $81 = ((($80)) + -1|0);
  $11 = $81;
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = ($83|0)==(92);
  if ($84) {
   label = 27;
   break;
  }
  $85 = $11;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 << 24 >> 24;
  $88 = ($87|0)==(47);
  if ($88) {
   label = 27;
   break;
  }
 }
 if ((label|0) == 27) {
  $89 = $11;
  $90 = ((($89)) + 1|0);
  $11 = $90;
 }
 $91 = $8;
 $92 = ($91|0)!=(0|0);
 if ($92) {
  $93 = $11;
  $12 = $93;
  while(1) {
   $94 = $12;
   $95 = $10;
   $96 = ($94>>>0)<($95>>>0);
   if (!($96)) {
    break;
   }
   $97 = $12;
   $98 = ((($97)) + 1|0);
   $12 = $98;
   $99 = HEAP8[$97>>0]|0;
   $100 = $8;
   $101 = ((($100)) + 1|0);
   $8 = $101;
   HEAP8[$100>>0] = $99;
  }
  $102 = $8;
  HEAP8[$102>>0] = 0;
 }
 $103 = $7;
 $104 = ($103|0)!=(0|0);
 if (!($104)) {
  STACKTOP = sp;return;
 }
 $105 = $5;
 $12 = $105;
 while(1) {
  $106 = $12;
  $107 = $11;
  $108 = ($106>>>0)<($107>>>0);
  if (!($108)) {
   break;
  }
  $109 = $12;
  $110 = ((($109)) + 1|0);
  $12 = $110;
  $111 = HEAP8[$109>>0]|0;
  $112 = $7;
  $113 = ((($112)) + 1|0);
  $7 = $113;
  HEAP8[$112>>0] = $111;
 }
 $114 = $7;
 HEAP8[$114>>0] = 0;
 STACKTOP = sp;return;
}
function _IsFullPath($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = $2;
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)>=(97);
   if ($9) {
    $10 = $2;
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)<=(122);
    if (!($13)) {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $14 = $2;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($16|0)>=(65);
    if (!($17)) {
     break;
    }
    $18 = $2;
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = ($20|0)<=(90);
    if (!($21)) {
     break;
    }
   }
   $22 = $2;
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(58);
   if ($26) {
    $27 = $2;
    $28 = ((($27)) + 2|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)==(92);
    if (!($31)) {
     $32 = $2;
     $33 = ((($32)) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)==(47);
     if (!($36)) {
      break;
     }
    }
    $37 = $2;
    $38 = ((($37)) + 2|0);
    $3 = $38;
    while(1) {
     $39 = $3;
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)!=(0);
     if (!($41)) {
      label = 17;
      break;
     }
     $42 = $3;
     $43 = HEAP8[$42>>0]|0;
     $44 = $43 << 24 >> 24;
     $45 = ($44|0)==(46);
     if ($45) {
      $46 = $3;
      $47 = ((($46)) + -1|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48 << 24 >> 24;
      $50 = ($49|0)==(92);
      if ($50) {
       label = 15;
       break;
      }
     }
     $51 = $3;
     $52 = HEAP8[$51>>0]|0;
     $53 = $52 << 24 >> 24;
     $54 = ($53|0)==(46);
     if ($54) {
      $55 = $3;
      $56 = ((($55)) + -1|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = $57 << 24 >> 24;
      $59 = ($58|0)==(47);
      if ($59) {
       label = 15;
       break;
      }
     }
     $60 = $3;
     $61 = ((($60)) + 1|0);
     $3 = $61;
    }
    if ((label|0) == 15) {
     $$expand_i1_val = 0;
     HEAP8[$1>>0] = $$expand_i1_val;
     $$pre_trunc = HEAP8[$1>>0]|0;
     $62 = $$pre_trunc&1;
     STACKTOP = sp;return ($62|0);
    }
    else if ((label|0) == 17) {
     $$expand_i1_val2 = 1;
     HEAP8[$1>>0] = $$expand_i1_val2;
     $$pre_trunc = HEAP8[$1>>0]|0;
     $62 = $$pre_trunc&1;
     STACKTOP = sp;return ($62|0);
    }
   }
  }
 } while(0);
 $$expand_i1_val4 = 0;
 HEAP8[$1>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $62 = $$pre_trunc&1;
 STACKTOP = sp;return ($62|0);
}
function _GetFullPathS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[3956]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $2;
 if (!($5)) {
  $12 = $3;
  (_realpath($6,$12)|0);
  STACKTOP = sp;return;
 }
 $7 = (_IsFullPath($6)|0);
 $8 = $3;
 if ($7) {
  $9 = $2;
  (_strcpy($8,$9)|0);
  STACKTOP = sp;return;
 } else {
  (_strcpy($8,2300)|0);
  $10 = $3;
  $11 = $2;
  (_strcat($10,$11)|0);
  STACKTOP = sp;return;
 }
}
function _FileExists($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $1 = sp + 273|0;
 $4 = sp;
 $2 = $0;
 $7 = HEAP32[3956]|0;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = HEAP32[3956]|0;
   $3 = $9;
   while(1) {
    $10 = $3;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(0|0);
    if (!($12)) {
     label = 7;
     break;
    }
    _memset(($4|0),0,260)|0;
    $13 = $3;
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    _GetFullPathS($15,$4);
    $16 = $2;
    $17 = (_strcmp($4,$16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     label = 5;
     break;
    }
    $19 = $3;
    $20 = ((($19)) + 4|0);
    $3 = $20;
   }
   if ((label|0) == 5) {
    $$expand_i1_val = 1;
    HEAP8[$1>>0] = $$expand_i1_val;
    break;
   }
   else if ((label|0) == 7) {
    $$expand_i1_val2 = 0;
    HEAP8[$1>>0] = $$expand_i1_val2;
    break;
   }
  } else {
   $5 = 0;
   $21 = $2;
   $22 = (_fopen($21,2304)|0);
   $6 = $22;
   $23 = $6;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $5 = 1;
    $25 = $6;
    (_fclose($25)|0);
   }
   $26 = $5;
   $27 = $26&1;
   $$expand_i1_val4 = $27&1;
   HEAP8[$1>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$1>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function _GetFullDirS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1312|0);
 $vararg_buffer = sp + 1288|0;
 $4 = sp + 1024|0;
 $5 = sp + 768|0;
 $6 = sp + 512|0;
 $7 = sp + 256|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 _memset(($4|0),0,260)|0;
 $9 = HEAP32[3956]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  (_strcpy($11,2307)|0);
  STACKTOP = sp;return;
 } else {
  $12 = $2;
  (_realpath($12,$4)|0);
  _SplitPath($4,$5,$6,$7,$8);
  $13 = $3;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_snprintf($13,260,2311,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _readfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 $6 = sp + 92|0;
 $7 = sp + 88|0;
 $1 = $0;
 $2 = 0;
 $8 = $1;
 $9 = (_stat($8,$3)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $113 = $2;
  STACKTOP = sp;return ($113|0);
 }
 $11 = ((($3)) + 40|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (___muldi3(1,0,($14|0),($17|0))|0);
 $19 = (getTempRet0() | 0);
 $20 = (_i64Add(($18|0),($19|0),1,0)|0);
 $21 = (getTempRet0() | 0);
 $22 = (_malloc($20)|0);
 $4 = $22;
 $23 = $4;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $113 = $2;
  STACKTOP = sp;return ($113|0);
 }
 $25 = $1;
 $26 = (_fopen($25,2316)|0);
 $5 = $26;
 $27 = $5;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($3)) + 40|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)>(0);
  $37 = ($32>>>0)>=(3);
  $38 = ($35|0)==(0);
  $39 = $38 & $37;
  $40 = $36 | $39;
  do {
   if ($40) {
    HEAP32[$6>>2] = 0;
    $41 = $4;
    $42 = $5;
    $43 = (_fread2($41,1,3,$42,$6)|0);
    if ($43) {
     $44 = HEAP32[$6>>2]|0;
     $45 = ($44|0)==(3);
     $46 = $4;
     if (!($45)) {
      $94 = HEAP32[$6>>2]|0;
      $95 = (($46) + ($94)|0);
      HEAP8[$95>>0] = 0;
      $96 = $4;
      $2 = $96;
      $4 = 0;
      break;
     }
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $49 = ($48|0)==(239);
     if ($49) {
      $50 = $4;
      $51 = ((($50)) + 1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = ($53|0)==(187);
      if ($54) {
       $55 = $4;
       $56 = ((($55)) + 2|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57&255;
       $59 = ($58|0)==(191);
       if ($59) {
        $60 = $4;
        $61 = ((($3)) + 40|0);
        $62 = $61;
        $63 = $62;
        $64 = HEAP32[$63>>2]|0;
        $65 = (($62) + 4)|0;
        $66 = $65;
        $67 = HEAP32[$66>>2]|0;
        $68 = (_i64Subtract(($64|0),($67|0),3,0)|0);
        $69 = (getTempRet0() | 0);
        $70 = $5;
        $71 = (_fread2($60,1,$68,$70,$6)|0);
        if (!($71)) {
         break;
        }
        $72 = $4;
        $73 = HEAP32[$6>>2]|0;
        $74 = (($72) + ($73)|0);
        HEAP8[$74>>0] = 0;
        $75 = $4;
        $2 = $75;
        $4 = 0;
        break;
       }
      }
     }
     $76 = $4;
     $77 = ((($76)) + 3|0);
     $78 = ((($3)) + 40|0);
     $79 = $78;
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 4)|0;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $85 = (_i64Subtract(($81|0),($84|0),3,0)|0);
     $86 = (getTempRet0() | 0);
     $87 = $5;
     $88 = (_fread2($77,1,$85,$87,$6)|0);
     if ($88) {
      $89 = $4;
      $90 = HEAP32[$6>>2]|0;
      $91 = (3 + ($90))|0;
      $92 = (($89) + ($91)|0);
      HEAP8[$92>>0] = 0;
      $93 = $4;
      $2 = $93;
      $4 = 0;
     }
    }
   } else {
    HEAP32[$7>>2] = 0;
    $97 = $4;
    $98 = ((($3)) + 40|0);
    $99 = $98;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($99) + 4)|0;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = $5;
    $106 = (_fread2($97,1,$101,$105,$7)|0);
    if ($106) {
     $107 = $4;
     $108 = HEAP32[$7>>2]|0;
     $109 = (($107) + ($108)|0);
     HEAP8[$109>>0] = 0;
     $110 = $4;
     $2 = $110;
     $4 = 0;
    }
   }
  } while(0);
  $111 = $5;
  (_fclose($111)|0);
 }
 $112 = $4;
 _free($112);
 $113 = $2;
 STACKTOP = sp;return ($113|0);
}
function _fread2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $9;
 HEAP32[$12>>2] = 0;
 $10 = 0;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = (_fread($13,$14,$15,$16)|0);
 $11 = $17;
 $18 = $11;
 $19 = $7;
 $20 = ($18|0)==($19|0);
 $21 = $11;
 if ($20) {
  $22 = $9;
  HEAP32[$22>>2] = $21;
  $10 = 1;
 } else {
  $23 = $7;
  $24 = ($21>>>0)<($23>>>0);
  if ($24) {
   $25 = $8;
   $26 = (_feof($25)|0);
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $11;
    $29 = $9;
    HEAP32[$29>>2] = $28;
    $10 = 1;
   }
  }
 }
 $30 = $10;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function _LoadFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 285|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = HEAP32[3956]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $10 = 0;
  $38 = $4;
  $39 = (_readfile($38)|0);
  $11 = $39;
  $40 = $11;
  $41 = ($40|0)!=(0|0);
  if ($41) {
   $42 = $11;
   $43 = $5;
   HEAP32[$43>>2] = $42;
   $44 = $11;
   $45 = (_strlen($44)|0);
   $46 = $6;
   HEAP32[$46>>2] = $45;
   $10 = 1;
  }
  $47 = $10;
  $48 = $47&1;
  $$expand_i1_val4 = $48&1;
  HEAP8[$3>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 $14 = HEAP32[3956]|0;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 7;
   break;
  }
  _memset(($8|0),0,260)|0;
  $18 = $7;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  _GetFullPathS($20,$8);
  $21 = $4;
  $22 = (_strcmp($8,$21)|0);
  $23 = ($22|0)==(0);
  $24 = $7;
  if ($23) {
   label = 5;
   break;
  }
  $37 = ((($24)) + 4|0);
  $7 = $37;
 }
 if ((label|0) == 5) {
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_strlen($27)|0);
  $9 = $28;
  $29 = $9;
  $30 = $6;
  HEAP32[$30>>2] = $29;
  $31 = $7;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (___strdup($34)|0);
  $36 = $5;
  HEAP32[$36>>2] = $35;
  $$expand_i1_val = 1;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 7) {
  $$expand_i1_val2 = 0;
  HEAP8[$3>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $49 = $$pre_trunc&1;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _Stream_OpenFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = 1;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 HEAP32[$8>>2] = 1;
 $9 = $2;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 $12 = $2;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = (_LoadFile($11,$12,$14)|0);
 $16 = $15&1;
 $4 = $16;
 $17 = $4;
 $18 = $17&1;
 if (!($18)) {
  $35 = $4;
  $36 = $35&1;
  STACKTOP = sp;return ($36|0);
 }
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $2;
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = $2;
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = $30;
   $35 = $4;
   $36 = $35&1;
   STACKTOP = sp;return ($36|0);
  }
 }
 $33 = $2;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = 0;
 $35 = $4;
 $36 = $35&1;
 STACKTOP = sp;return ($36|0);
}
function _Stream_OpenString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = 1;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 HEAP32[$7>>2] = 1;
 $8 = $2;
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = (___strdup($10)|0);
 $12 = $2;
 HEAP32[$12>>2] = $11;
 $13 = $3;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $3;
  $16 = (_strlen($15)|0);
  $17 = $2;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
 } else {
  $19 = $2;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = 0;
 }
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $2;
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 << 24 >> 24;
   $33 = $2;
   $34 = ((($33)) + 8|0);
   HEAP32[$34>>2] = $32;
   STACKTOP = sp;return 1;
  }
 }
 $35 = $2;
 $36 = ((($35)) + 8|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return 1;
}
function _Stream_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _Stream_LookAhead($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 if ($10) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  $17 = (($12) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _Stream_LookAhead2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 2)|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 if ($10) {
  $1 = 0;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 2)|0;
  $17 = (($12) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _Stream_Match($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>=($7|0);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 8|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
 $11 = ((($9)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 $14 = $1;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 $18 = $1;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 $25 = $1;
 if ($24) {
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = 0;
 } else {
  $27 = HEAP32[$25>>2]|0;
  $28 = $1;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($27) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = $1;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $33;
 }
 $36 = $1;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(10);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $1;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$41>>2] = $43;
 $44 = $1;
 $45 = ((($44)) + 20|0);
 HEAP32[$45>>2] = 0;
 STACKTOP = sp;return;
}
function _StrBuilder_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _StrBuilder_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _StrBuilder_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $1;
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _StrBuilder_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 do {
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = $3;
   $14 = (($13) + 1)|0;
   $15 = $14;
   $16 = (_realloc($12,$15)|0);
   $5 = $16;
   $17 = $5;
   $18 = ($17|0)!=(0|0);
   if (!($18)) {
    $4 = 0;
    break;
   }
   $19 = $2;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = $5;
    HEAP8[$22>>0] = 0;
   }
   $23 = $5;
   $24 = $2;
   HEAP32[$24>>2] = $23;
   $25 = $3;
   $26 = $2;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = $25;
  }
 } while(0);
 $28 = $4;
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _StrBuilder_SetN($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $5;
 $9 = (_StrBuilder_Grow($7,$8)|0);
 $10 = $9&1;
 $6 = $10;
 $11 = $6;
 $12 = $11&1;
 if (!($12)) {
  $24 = $6;
  $25 = $24&1;
  STACKTOP = sp;return ($25|0);
 }
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = $4;
 $16 = $5;
 (_strncpy($14,$15,$16)|0);
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = (($18) + ($19)|0);
 HEAP8[$20>>0] = 0;
 $21 = $5;
 $22 = $3;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $6;
 $25 = $24&1;
 STACKTOP = sp;return ($25|0);
}
function _StrBuilder_Grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 if (!($10)) {
  $27 = $4;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16|0) / 2)&-1;
 $18 = (($13) + ($17))|0;
 $5 = $18;
 $19 = $5;
 $20 = $3;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $22 = $3;
  $5 = $22;
 }
 $23 = $2;
 $24 = $5;
 $25 = (_StrBuilder_Reserve($23,$24)|0);
 $26 = $25&1;
 $4 = $26;
 $27 = $4;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _StrBuilder_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = $2;
  _StrBuilder_Clear($8);
 } else {
  $9 = $3;
  $10 = (_strlen($9)|0);
  $5 = $10;
  $11 = $2;
  _StrBuilder_Clear($11);
  $12 = $5;
  $13 = ($12|0)>(0);
  if ($13) {
   $14 = $2;
   $15 = $3;
   $16 = $3;
   $17 = (_strlen($16)|0);
   $18 = (_StrBuilder_SetN($14,$15,$17)|0);
   $19 = $18&1;
   $4 = $19;
  }
 }
 $20 = $4;
 $21 = $20&1;
 STACKTOP = sp;return ($21|0);
}
function _StrBuilder_Clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP8[$6>>0] = 0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _StrBuilder_AppendN($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 13|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $5;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = $4;
   $15 = $4;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $6;
   $19 = (($17) + ($18))|0;
   $20 = (_StrBuilder_Grow($14,$19)|0);
   $21 = $20&1;
   $7 = $21;
   $22 = $7;
   $23 = $22&1;
   $24 = $23&1;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = $4;
    $27 = HEAP32[$26>>2]|0;
    $28 = $4;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($27) + ($30)|0);
    $32 = $5;
    $33 = $6;
    (_strncpy($31,$32,$33)|0);
    $34 = $4;
    $35 = HEAP32[$34>>2]|0;
    $36 = $4;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $6;
    $40 = (($38) + ($39))|0;
    $41 = (($35) + ($40)|0);
    HEAP8[$41>>0] = 0;
    $42 = $6;
    $43 = $4;
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($42))|0;
    HEAP32[$44>>2] = $46;
   }
   $47 = $7;
   $48 = $47&1;
   $$expand_i1_val2 = $48&1;
   HEAP8[$3>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $49 = $$pre_trunc&1;
   STACKTOP = sp;return ($49|0);
  }
 }
 $$expand_i1_val = 1;
 HEAP8[$3>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $49 = $$pre_trunc&1;
 STACKTOP = sp;return ($49|0);
}
function _StrBuilder_Append($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $4;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = $3;
   $12 = $4;
   $13 = $4;
   $14 = (_strlen($13)|0);
   $15 = (_StrBuilder_AppendN($11,$12,$14)|0);
   $$expand_i1_val2 = $15&1;
   HEAP8[$2>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$2>>0]|0;
   $16 = $$pre_trunc&1;
   STACKTOP = sp;return ($16|0);
  }
 }
 $$expand_i1_val = 1;
 HEAP8[$2>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $16 = $$pre_trunc&1;
 STACKTOP = sp;return ($16|0);
}
function _StrBuilder_AppendIdent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $4;
  $9 = ($7|0)<($8|0);
  $10 = $3;
  if (!($9)) {
   break;
  }
  (_StrBuilder_Append($10,2318)|0);
  $11 = $6;
  $12 = (($11) + 1)|0;
  $6 = $12;
 }
 $13 = $5;
 $14 = (_StrBuilder_Append($10,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _StrBuilder_AppendChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 HEAP8[$3>>0] = $1;
 $4 = $2;
 $5 = (_StrBuilder_AppendN($4,$3,1)|0);
 STACKTOP = sp;return ($5|0);
}
function _StrBuilder_Trim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 8|0;
 $1 = $0;
 _StrBuilder_Init($2);
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 (_StrBuilder_Reserve($2,$10)|0);
 $3 = 0;
 $4 = 0;
 while(1) {
  $11 = $4;
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = (($17) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $5 = $20;
  $21 = $3;
  $22 = $21&1;
  if (!($22)) {
   $23 = $5;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(32);
   if ($25) {
    $3 = 1;
   }
  }
  $26 = $3;
  $27 = $26&1;
  if ($27) {
   $28 = $5;
   (_StrBuilder_AppendChar($2,$28)|0);
  }
  $29 = $4;
  $30 = (($29) + 1)|0;
  $4 = $30;
 }
 $31 = ((($2)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) - 1)|0;
 $6 = $33;
 while(1) {
  $34 = $6;
  $35 = ($34|0)>=(0);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$2>>2]|0;
  $37 = $6;
  $38 = (($36) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $7 = $39;
  $40 = $7;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)!=(32);
  if ($42) {
   break;
  }
  $43 = $6;
  $44 = (($43) + -1)|0;
  $6 = $44;
 }
 $45 = HEAP32[$2>>2]|0;
 $46 = $6;
 $47 = (($46) + 1)|0;
 $48 = (($45) + ($47)|0);
 HEAP8[$48>>0] = 0;
 $49 = $6;
 $50 = (($49) + 1)|0;
 $51 = ((($2)) + 4|0);
 HEAP32[$51>>2] = $50;
 $52 = $1;
 _StrBuilder_Swap($2,$52);
 _StrBuilder_Destroy($2);
 STACKTOP = sp;return;
}
function _StrBuilder_AppendFmtV($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = $5;
 (_vsnprintf($6,500,$7,$8)|0);
 $9 = $3;
 (_StrBuilder_Append($9,$6)|0);
 STACKTOP = sp;return;
}
function _StrBuilder_AppendFmt($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $4 = sp + 512|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($5,500,$6,$4)|0);
 $7 = $2;
 (_StrBuilder_Append($7,$5)|0);
 STACKTOP = sp;return;
}
function _StrBuilder_AppendFmtIdent($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $7 = sp + 512|0;
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  (_StrBuilder_Append($12,2318)|0);
  $13 = $6;
  $14 = (($13) + 1)|0;
  $6 = $14;
 }
 HEAP32[$7>>2] = $varargs;
 $15 = $5;
 (_vsnprintf($8,500,$15,$7)|0);
 $16 = $3;
 (_StrBuilder_Append($16,$8)|0);
 STACKTOP = sp;return;
}
function _StrBuilder_AppendFmtLn($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $7 = sp + 512|0;
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  (_StrBuilder_Append($12,2318)|0);
  $13 = $6;
  $14 = (($13) + 1)|0;
  $6 = $14;
 }
 HEAP32[$7>>2] = $varargs;
 $15 = $5;
 (_vsnprintf($8,500,$15,$7)|0);
 $16 = $3;
 (_StrBuilder_Append($16,$8)|0);
 $17 = $3;
 (_StrBuilder_Append($17,2320)|0);
 STACKTOP = sp;return;
}
function _HashMap_RemoveAll($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10>>>0)<($13>>>0);
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  if (!($14)) {
   break;
  }
  $17 = $4;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $5 = $19;
  while(1) {
   $20 = $5;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    break;
   }
   $22 = $5;
   $6 = $22;
   $23 = $3;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $25 = $3;
    $26 = $6;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vi[$25 & 7]($28);
   }
   $29 = $5;
   $30 = HEAP32[$29>>2]|0;
   $5 = $30;
   $31 = $6;
   _KeyValue_Delete($31);
  }
  $32 = $4;
  $33 = (($32) + 1)|0;
  $4 = $33;
 }
 _free($16);
 $34 = $2;
 HEAP32[$34>>2] = 0;
 $35 = $2;
 $36 = ((($35)) + 8|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _KeyValue_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 _free($7);
 STACKTOP = sp;return;
}
function _HashMap_Destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _HashMap_RemoveAll($4,$5);
 STACKTOP = sp;return;
}
function _HashMap_Lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $8 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $3;
 $11 = $4;
 $12 = (_HashMap_GetAssocAt($10,$11,$7,$8)|0);
 $9 = $12;
 $13 = $9;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $19 = $6;
  $20 = $19&1;
  STACKTOP = sp;return ($20|0);
 }
 $15 = $9;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 HEAP32[$18>>2] = $17;
 $6 = 1;
 $19 = $6;
 $20 = $19&1;
 STACKTOP = sp;return ($20|0);
}
function _HashMap_GetAssocAt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $8;
  HEAP32[$14>>2] = 0;
  $15 = $7;
  HEAP32[$15>>2] = 0;
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $6;
 $17 = (_String2_HashKey($16)|0);
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $8;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20>>>0) % ($23>>>0))&-1;
 $25 = $7;
 HEAP32[$25>>2] = $24;
 $9 = 0;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $10 = $31;
 while(1) {
  $32 = $10;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $8;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)==($38|0);
  if ($39) {
   $40 = $10;
   $41 = ((($40)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $6;
   $44 = (_strcmp($42,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    label = 7;
    break;
   }
  }
  $47 = $10;
  $48 = HEAP32[$47>>2]|0;
  $10 = $48;
 }
 if ((label|0) == 7) {
  $46 = $10;
  $9 = $46;
 }
 $49 = $9;
 $4 = $49;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _HashMap_RemoveKey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 HEAP32[$10>>2] = 0;
 $6 = 0;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $50 = $6;
  $51 = $50&1;
  STACKTOP = sp;return ($51|0);
 }
 $14 = $4;
 $15 = (_String2_HashKey($14)|0);
 $7 = $15;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $18 = $7;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18>>>0) % ($21>>>0))&-1;
 $23 = (($17) + ($22<<2)|0);
 $8 = $23;
 $24 = $8;
 $25 = HEAP32[$24>>2]|0;
 $9 = $25;
 while(1) {
  $26 = $9;
  $27 = ($26|0)!=(0|0);
  if (!($27)) {
   label = 8;
   break;
  }
  $28 = $9;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $7;
  $32 = ($30|0)==($31|0);
  if ($32) {
   $33 = $9;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $4;
   $37 = (_strcmp($35,$36)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    break;
   }
  }
  $47 = $9;
  $8 = $47;
  $48 = $9;
  $49 = HEAP32[$48>>2]|0;
  $9 = $49;
 }
 if ((label|0) == 8) {
  $50 = $6;
  $51 = $50&1;
  STACKTOP = sp;return ($51|0);
 }
 $39 = $9;
 $40 = HEAP32[$39>>2]|0;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $9;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $5;
 HEAP32[$45>>2] = $44;
 $46 = $9;
 _KeyValue_Delete($46);
 $6 = 1;
 $50 = $6;
 $51 = $50&1;
 STACKTOP = sp;return ($51|0);
}
function _String2_HashKey($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = -2128831035;
 $3 = 0;
 $6 = $1;
 $7 = (_strlen($6)|0);
 $4 = $7;
 $8 = $4;
 $9 = (($8>>>0) / 10)&-1;
 $10 = (1 + ($9))|0;
 $5 = $10;
 while(1) {
  $11 = $3;
  $12 = $4;
  $13 = ($11>>>0)<($12>>>0);
  $14 = $2;
  if (!($13)) {
   break;
  }
  $15 = Math_imul(16777619, $14)|0;
  $16 = $1;
  $17 = $3;
  $18 = (($16) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = $15 ^ $20;
  $2 = $21;
  $22 = $5;
  $23 = $3;
  $24 = (($23) + ($22))|0;
  $3 = $24;
 }
 STACKTOP = sp;return ($14|0);
}
function _HashMap_SetAt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $13 = $7;
 HEAP32[$13>>2] = 0;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $4;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<(1);
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 4|0);
   HEAP32[$22>>2] = 1000;
  }
  $23 = $4;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25<<2;
  $27 = (_malloc($26)|0);
  $9 = $27;
  $28 = $9;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $9;
   $31 = $4;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33<<2;
   _memset(($30|0),0,($34|0))|0;
   $35 = $9;
   $36 = $4;
   HEAP32[$36>>2] = $35;
  }
 }
 $37 = $4;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $85 = $8;
  STACKTOP = sp;return ($85|0);
 }
 $40 = $4;
 $41 = $5;
 $42 = (_HashMap_GetAssocAt($40,$41,$10,$11)|0);
 $12 = $42;
 $43 = $12;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $45 = (_malloc(16)|0);
  $12 = $45;
  $46 = HEAP32[$11>>2]|0;
  $47 = $12;
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = $46;
  $49 = $6;
  $50 = $12;
  $51 = ((($50)) + 12|0);
  HEAP32[$51>>2] = $49;
  $52 = $5;
  $53 = (___strdup($52)|0);
  $54 = $12;
  $55 = ((($54)) + 8|0);
  HEAP32[$55>>2] = $53;
  $56 = $4;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$10>>2]|0;
  $59 = (($57) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $12;
  HEAP32[$61>>2] = $60;
  $62 = $12;
  $63 = $4;
  $64 = HEAP32[$63>>2]|0;
  $65 = HEAP32[$10>>2]|0;
  $66 = (($64) + ($65<<2)|0);
  HEAP32[$66>>2] = $62;
  $67 = $4;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$68>>2] = $70;
  $8 = 0;
  $85 = $8;
  STACKTOP = sp;return ($85|0);
 } else {
  $8 = 1;
  $71 = $12;
  $72 = ((($71)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $7;
  HEAP32[$74>>2] = $73;
  $75 = $6;
  $76 = $12;
  $77 = ((($76)) + 12|0);
  HEAP32[$77>>2] = $75;
  $78 = $12;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  _free($80);
  $81 = $5;
  $82 = (___strdup($81)|0);
  $83 = $12;
  $84 = ((($83)) + 8|0);
  HEAP32[$84>>2] = $82;
  $85 = $8;
  STACKTOP = sp;return ($85|0);
 }
 return (0)|0;
}
function _SymbolMap_RemoveAll($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  if (!($12)) {
   break;
  }
  $15 = $2;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $3 = $17;
  while(1) {
   $18 = $3;
   $19 = ($18|0)!=(0|0);
   if (!($19)) {
    break;
   }
   $20 = $3;
   $4 = $20;
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $3 = $22;
   $23 = $4;
   _SymbolMap_KeyValue_Delete($23);
  }
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
 }
 _free($14);
 $26 = $1;
 HEAP32[$26>>2] = 0;
 $27 = $1;
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = 0;
 STACKTOP = sp;return;
}
function _SymbolMap_KeyValue_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 _free($7);
 STACKTOP = sp;return;
}
function _SymbolMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _SymbolMap_RemoveAll($2);
 STACKTOP = sp;return;
}
function _SymbolMap_FindBucket($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $11 = $4;
  $12 = (_String2_HashKey($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = $3;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($13>>>0) % ($16>>>0))&-1;
  $6 = $17;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = (($19) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $7 = $22;
  $23 = $7;
  $2 = $23;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _SymbolMap_GetAssocAt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $8;
  HEAP32[$14>>2] = 0;
  $15 = $7;
  HEAP32[$15>>2] = 0;
  $4 = 0;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $6;
 $17 = (_String2_HashKey($16)|0);
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $8;
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20>>>0) % ($23>>>0))&-1;
 $25 = $7;
 HEAP32[$25>>2] = $24;
 $9 = 0;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $10 = $31;
 while(1) {
  $32 = $10;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $10;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $8;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)==($38|0);
  if ($39) {
   $40 = $10;
   $41 = ((($40)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $6;
   $44 = (_strcmp($42,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    label = 7;
    break;
   }
  }
  $47 = $10;
  $48 = HEAP32[$47>>2]|0;
  $10 = $48;
 }
 if ((label|0) == 7) {
  $46 = $10;
  $9 = $46;
 }
 $49 = $9;
 $4 = $49;
 $50 = $4;
 STACKTOP = sp;return ($50|0);
}
function _SymbolMap_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = $3;
 $10 = (_SymbolMap_GetAssocAt($8,$9,$5,$6)|0);
 $7 = $10;
 $11 = $7;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $7;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $4 = $15;
 }
 $16 = $4;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $2;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $22 = $2;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = (_SymbolMap_Find($24,$25)|0);
 $4 = $26;
 $27 = $4;
 STACKTOP = sp;return ($27|0);
}
function _SymbolMap_SetAt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)<(1);
  if ($17) {
   $18 = $3;
   $19 = ((($18)) + 4|0);
   HEAP32[$19>>2] = 1000;
  }
  $20 = $3;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22<<2;
  $24 = (_malloc($23)|0);
  $7 = $24;
  $25 = $7;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $7;
   $28 = $3;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30<<2;
   _memset(($27|0),0,($31|0))|0;
   $32 = $7;
   $33 = $3;
   HEAP32[$33>>2] = $32;
  }
 }
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  $66 = $6;
  STACKTOP = sp;return ($66|0);
 }
 $37 = $3;
 $38 = $4;
 $39 = (_SymbolMap_GetAssocAt($37,$38,$8,$9)|0);
 $10 = $39;
 $40 = (_malloc(16)|0);
 $10 = $40;
 $41 = HEAP32[$9>>2]|0;
 $42 = $10;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = $41;
 $44 = $5;
 $45 = $10;
 $46 = ((($45)) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $4;
 $48 = (___strdup($47)|0);
 $49 = $10;
 $50 = ((($49)) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $3;
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$8>>2]|0;
 $54 = (($52) + ($53<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $10;
 HEAP32[$56>>2] = $55;
 $57 = $10;
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$8>>2]|0;
 $61 = (($59) + ($60<<2)|0);
 HEAP32[$61>>2] = $57;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 1)|0;
 HEAP32[$63>>2] = $65;
 $6 = 0;
 $66 = $6;
 STACKTOP = sp;return ($66|0);
}
function _SymbolMap_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 ;HEAP32[$2>>2]=HEAP32[2012>>2]|0;HEAP32[$2+4>>2]=HEAP32[2012+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[2012+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[2012+12>>2]|0;
 $3 = $1;
 ;HEAP32[$3>>2]=HEAP32[$2>>2]|0;HEAP32[$3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$2+12>>2]|0;
 STACKTOP = sp;return;
}
function _SymbolMap_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return;
}
function _SymbolMap_IsTypeName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $11 = $2;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 17;
   break;
  }
  $13 = $2;
  $14 = $3;
  $15 = (_SymbolMap_FindBucket($13,$14)|0);
  $6 = $15;
  while(1) {
   $16 = $6;
   $17 = ($16|0)!=(0|0);
   if (!($17)) {
    break;
   }
   $18 = $6;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(1);
   L7: do {
    if ($22) {
     $23 = $6;
     $24 = ((($23)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $3;
     $27 = (_strcmp($25,$26)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $5 = 1;
      $29 = $6;
      $30 = ((($29)) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $7 = $31;
      $8 = 0;
      while(1) {
       $32 = $8;
       $33 = $7;
       $34 = ((($33)) + 4|0);
       $35 = ((($34)) + 4|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($32|0)<($36|0);
       if (!($37)) {
        break L7;
       }
       $38 = $7;
       $39 = ((($38)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $8;
       $42 = (($40) + ($41<<2)|0);
       $43 = HEAP32[$42>>2]|0;
       $9 = $43;
       $44 = $9;
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)==(8);
       if ($46) {
        $47 = $9;
        $10 = $47;
        $48 = $10;
        $49 = ((($48)) + 4|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($50|0)==(120);
        if ($51) {
         break;
        }
       }
       $52 = $8;
       $53 = (($52) + 1)|0;
       $8 = $53;
      }
      $4 = 1;
     }
    }
   } while(0);
   $54 = $5;
   $55 = $54&1;
   if ($55) {
    break;
   }
   $56 = $6;
   $57 = HEAP32[$56>>2]|0;
   $6 = $57;
  }
  $58 = $5;
  $59 = $58&1;
  if ($59) {
   label = 17;
   break;
  }
  $60 = $2;
  $61 = ((($60)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $2 = $62;
 }
 if ((label|0) == 17) {
  $63 = $4;
  $64 = $63&1;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _SymbolMap_FindCompleteEnumSpecifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 $12 = $2;
 $13 = $3;
 $14 = (_SymbolMap_GetAssocAt($12,$13,$5,$6)|0);
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $7;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(6);
  if ($21) {
   $22 = $7;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $3;
   $26 = (_strcmp($24,$25)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $7;
    $29 = ((($28)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $8 = $30;
    $31 = $8;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)!=(0|0);
    if ($34) {
     break;
    }
   }
  }
  $36 = $7;
  $37 = HEAP32[$36>>2]|0;
  $7 = $37;
 }
 if ((label|0) == 9) {
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 $35 = $8;
 $4 = $35;
 $38 = $4;
 STACKTOP = sp;return ($38|0);
}
function _SymbolMap_FindFunction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $32 = $4;
  STACKTOP = sp;return ($32|0);
 }
 $11 = $2;
 $12 = $3;
 $13 = (_SymbolMap_GetAssocAt($11,$12,$5,$6)|0);
 $7 = $13;
 while(1) {
  $14 = $7;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 8;
   break;
  }
  $16 = $7;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(1);
  if ($20) {
   $21 = $7;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $3;
   $25 = (_strcmp($23,$24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   }
  }
  $30 = $7;
  $31 = HEAP32[$30>>2]|0;
  $7 = $31;
 }
 if ((label|0) == 8) {
  $32 = $4;
  STACKTOP = sp;return ($32|0);
 }
 $27 = $7;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $4 = $29;
 $32 = $4;
 STACKTOP = sp;return ($32|0);
}
function _SymbolMap_FindCompleteStructUnionSpecifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 }
 $5 = 0;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 L5: do {
  if ($13) {
   $14 = $3;
   $15 = $4;
   $16 = (_SymbolMap_GetAssocAt($14,$15,$6,$7)|0);
   $8 = $16;
   while(1) {
    $17 = $8;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     break L5;
    }
    $19 = $8;
    $20 = ((($19)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(7);
    if ($23) {
     $24 = $8;
     $25 = ((($24)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $4;
     $28 = (_strcmp($26,$27)|0);
     $29 = ($28|0)==(0);
     if ($29) {
      $30 = $8;
      $31 = ((($30)) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $5 = $32;
      $33 = $5;
      $34 = ((($33)) + 4|0);
      $35 = ((($34)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)>(0);
      if ($37) {
       break L5;
      }
      $38 = $5;
      $39 = ((($38)) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)!=(0|0);
      if ($41) {
       break L5;
      }
     }
    }
    $42 = $8;
    $43 = HEAP32[$42>>2]|0;
    $8 = $43;
   }
  }
 } while(0);
 $44 = $5;
 $2 = $44;
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _SymbolMap_FindTypedefDeclarationTarget($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $18 = $2;
 $19 = $3;
 $20 = (_SymbolMap_GetAssocAt($18,$19,$5,$6)|0);
 $7 = $20;
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   label = 19;
   break;
  }
  $23 = $7;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(1);
  if ($27) {
   $28 = $7;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $3;
   $32 = (_strcmp($30,$31)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    break;
   }
  }
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $7 = $75;
 }
 if ((label|0) == 19) {
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $34 = $7;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $8 = $36;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 while(1) {
  $37 = $11;
  $38 = $8;
  $39 = ((($38)) + 4|0);
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($37|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $8;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $11;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $12 = $48;
  $49 = $12;
  $50 = HEAP32[$49>>2]|0;
  switch ($50|0) {
  case 8:  {
   $51 = $12;
   $13 = $51;
   $52 = $13;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(120);
   if ($55) {
    $9 = 1;
   }
   break;
  }
  case 5:  {
   $56 = $12;
   $14 = $56;
   $57 = $14;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(9);
   if ($60) {
    $61 = $14;
    $62 = ((($61)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $10 = $63;
   }
   break;
  }
  default: {
  }
  }
  $64 = $11;
  $65 = (($64) + 1)|0;
  $11 = $65;
 }
 $66 = $9;
 $67 = $66&1;
 if (!($67)) {
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $68 = $10;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $2;
  $71 = $10;
  $72 = (_SymbolMap_FindTypedefDeclarationTarget($70,$71)|0);
  $4 = $72;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 } else {
  $73 = $8;
  $4 = $73;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _Declaration_FindDeclarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $2 = 0;
  $90 = $2;
  STACKTOP = sp;return ($90|0);
 }
 $5 = 0;
 $9 = $3;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $6;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $6;
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)!=(0|0);
    if ($27) {
     $28 = $6;
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($29)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = $4;
     $34 = (_strcmp($32,$33)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      label = 9;
      break;
     }
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $38 = $6;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    $41 = $6;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = $6;
     $47 = HEAP32[$46>>2]|0;
     $48 = ((($47)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($49)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)!=(0|0);
     if ($52) {
      $53 = $6;
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($54)) + 8|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($56)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)!=(0|0);
      if ($61) {
       $62 = $6;
       $63 = HEAP32[$62>>2]|0;
       $64 = ((($63)) + 8|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ((($65)) + 4|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ((($67)) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)!=(0|0);
       if ($71) {
        $72 = $6;
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($73)) + 8|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ((($75)) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ((($77)) + 8|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = HEAP32[$79>>2]|0;
        $81 = $4;
        $82 = (_strcmp($80,$81)|0);
        $83 = ($82|0)==(0);
        if ($83) {
         label = 16;
         break;
        }
       }
      }
     }
    }
   }
  }
  $86 = $6;
  $87 = ((($86)) + 8|0);
  $88 = HEAP32[$87>>2]|0;
  $6 = $88;
 }
 if ((label|0) == 9) {
  $36 = $6;
  $37 = HEAP32[$36>>2]|0;
  $5 = $37;
 }
 else if ((label|0) == 16) {
  $84 = $6;
  $85 = HEAP32[$84>>2]|0;
  $5 = $85;
 }
 $89 = $5;
 $2 = $89;
 $90 = $2;
 STACKTOP = sp;return ($90|0);
}
function _Pointer_CopyFrom($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _TypeQualifierList_CopyFrom($4,$5);
 STACKTOP = sp;return;
}
function _PointerList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $12 = ((($8)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 20|0);
  HEAP32[$14>>2] = $7;
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 }
}
function _SymbolMap_FindTypedefFirstTarget($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = sp + 124|0;
 $8 = sp + 120|0;
 $20 = sp + 48|0;
 $24 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 $28 = $3;
 $29 = $4;
 $30 = (_SymbolMap_GetAssocAt($28,$29,$7,$8)|0);
 $9 = $30;
 while(1) {
  $31 = $9;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   label = 26;
   break;
  }
  $33 = $9;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(1);
  if ($37) {
   $38 = $9;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $4;
   $42 = (_strcmp($40,$41)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    break;
   }
  }
  $113 = $9;
  $114 = HEAP32[$113>>2]|0;
  $9 = $114;
 }
 if ((label|0) == 26) {
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 $44 = $9;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $10 = $46;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 while(1) {
  $47 = $13;
  $48 = $10;
  $49 = ((($48)) + 4|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($47|0)<($51|0);
  if (!($52)) {
   break;
  }
  $53 = $10;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $13;
  $57 = (($55) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $14 = $58;
  $59 = $14;
  $60 = HEAP32[$59>>2]|0;
  switch ($60|0) {
  case 8:  {
   $61 = $14;
   $15 = $61;
   $62 = $15;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(120);
   if ($65) {
    $11 = 1;
   }
   break;
  }
  case 5:  {
   $66 = $14;
   $16 = $66;
   $67 = $16;
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(9);
   if ($70) {
    $71 = $16;
    $72 = ((($71)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $12 = $73;
   }
   break;
  }
  default: {
  }
  }
  $74 = $13;
  $75 = (($74) + 1)|0;
  $13 = $75;
 }
 $76 = $11;
 $77 = $76&1;
 if (!($77)) {
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 $78 = $12;
 $79 = ($78|0)!=(0|0);
 $80 = $10;
 $81 = $4;
 $82 = (_Declaration_FindDeclarator($80,$81)|0);
 if (!($79)) {
  $21 = $82;
  $99 = $21;
  $100 = HEAP32[$99>>2]|0;
  $22 = $100;
  while(1) {
   $101 = $22;
   $102 = ($101|0)!=(0|0);
   if (!($102)) {
    break;
   }
   ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;HEAP32[$24+24>>2]=0|0;HEAP32[$24+28>>2]=0|0;
   $103 = (_mallocinit(32,$24)|0);
   $23 = $103;
   $104 = $23;
   $105 = $22;
   _Pointer_CopyFrom($104,$105);
   $106 = $5;
   $107 = $23;
   _PointerList_PushBack($106,$107);
   $108 = $22;
   $109 = ((($108)) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $22 = $110;
  }
  $111 = $10;
  $112 = ((($111)) + 4|0);
  $6 = $112;
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 $17 = $82;
 $83 = $17;
 $84 = ($83|0)!=(0|0);
 if (!($84)) {
  $115 = $6;
  STACKTOP = sp;return ($115|0);
 }
 $85 = $17;
 $86 = HEAP32[$85>>2]|0;
 $18 = $86;
 while(1) {
  $87 = $18;
  $88 = ($87|0)!=(0|0);
  if (!($88)) {
   break;
  }
  ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;HEAP32[$20+16>>2]=0|0;HEAP32[$20+20>>2]=0|0;HEAP32[$20+24>>2]=0|0;HEAP32[$20+28>>2]=0|0;
  $89 = (_mallocinit(32,$20)|0);
  $19 = $89;
  $90 = $19;
  $91 = $18;
  _Pointer_CopyFrom($90,$91);
  $92 = $5;
  $93 = $19;
  _PointerList_PushBack($92,$93);
  $94 = $18;
  $95 = ((($94)) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $18 = $96;
 }
 $97 = $10;
 $98 = ((($97)) + 4|0);
 $6 = $98;
 $115 = $6;
 STACKTOP = sp;return ($115|0);
}
function _FileInfo_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 STACKTOP = sp;return;
}
function _FileInfo_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _FileInfo_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _FileInfoMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _HashMap_Destroy($2,5);
 STACKTOP = sp;return;
}
function _FileInfo_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _FileInfo_Delete($2);
 STACKTOP = sp;return;
}
function _FileArray_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _FileInfoMap_Set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = $10;
 HEAP32[$6>>2] = 0;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = (_HashMap_SetAt($13,$14,$15,$6)|0);
 $17 = ($16|0)!=(0);
 $18 = $17&1;
 $7 = $18;
 $19 = HEAP32[$6>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = $5;
  $22 = HEAP32[$21>>2]|0;
  _free($22);
  $23 = $4;
  $24 = (___strdup($23)|0);
  $25 = $5;
  HEAP32[$25>>2] = $24;
  $26 = $7;
  $27 = $26&1;
  STACKTOP = sp;return ($27|0);
 } else {
  ___assert_fail((2322|0),(2336|0),2051,(2349|0));
  // unreachable;
 }
 return (0)|0;
}
function _FileInfoMap_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $6 = $2;
 $7 = $3;
 $8 = (_HashMap_Lookup($6,$7,$4)|0);
 $9 = $8&1;
 $5 = $9;
 $10 = $5;
 $11 = $10&1;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11 ? $12 : 0;
 STACKTOP = sp;return ($13|0);
}
function _TokenToNameString($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 do {
  switch ($3|0) {
  case 0:  {
   $1 = 2365;
   break;
  }
  case 1:  {
   $1 = 2373;
   break;
  }
  case 2:  {
   $1 = 2380;
   break;
  }
  case 3:  {
   $1 = 2387;
   break;
  }
  case 4:  {
   $1 = 2398;
   break;
  }
  case 5:  {
   $1 = 2414;
   break;
  }
  case 6:  {
   $1 = 2425;
   break;
  }
  case 7:  {
   $1 = 2441;
   break;
  }
  case 8:  {
   $1 = 2458;
   break;
  }
  case 9:  {
   $1 = 2476;
   break;
  }
  case 10:  {
   $1 = 2490;
   break;
  }
  case 11:  {
   $1 = 2500;
   break;
  }
  case 12:  {
   $1 = 2519;
   break;
  }
  case 13:  {
   $1 = 2534;
   break;
  }
  case 14:  {
   $1 = 2551;
   break;
  }
  case 15:  {
   $1 = 2569;
   break;
  }
  case 16:  {
   $1 = 2585;
   break;
  }
  case 17:  {
   $1 = 2605;
   break;
  }
  case 18:  {
   $1 = 2618;
   break;
  }
  case 19:  {
   $1 = 2640;
   break;
  }
  case 20:  {
   $1 = 2646;
   break;
  }
  case 21:  {
   $1 = 2667;
   break;
  }
  case 22:  {
   $1 = 2683;
   break;
  }
  case 23:  {
   $1 = 2692;
   break;
  }
  case 24:  {
   $1 = 2712;
   break;
  }
  case 25:  {
   $1 = 2730;
   break;
  }
  case 26:  {
   $1 = 2745;
   break;
  }
  case 27:  {
   $1 = 2760;
   break;
  }
  case 28:  {
   $1 = 2776;
   break;
  }
  case 29:  {
   $1 = 2789;
   break;
  }
  case 30:  {
   $1 = 2803;
   break;
  }
  case 31:  {
   $1 = 2823;
   break;
  }
  case 32:  {
   $1 = 2844;
   break;
  }
  case 33:  {
   $1 = 2856;
   break;
  }
  case 34:  {
   $1 = 2869;
   break;
  }
  case 35:  {
   $1 = 2878;
   break;
  }
  case 36:  {
   $1 = 2894;
   break;
  }
  case 37:  {
   $1 = 2914;
   break;
  }
  case 38:  {
   $1 = 2927;
   break;
  }
  case 39:  {
   $1 = 2938;
   break;
  }
  case 40:  {
   $1 = 2947;
   break;
  }
  case 41:  {
   $1 = 2960;
   break;
  }
  case 42:  {
   $1 = 2978;
   break;
  }
  case 43:  {
   $1 = 2993;
   break;
  }
  case 44:  {
   $1 = 3014;
   break;
  }
  case 45:  {
   $1 = 3031;
   break;
  }
  case 46:  {
   $1 = 3048;
   break;
  }
  case 47:  {
   $1 = 3071;
   break;
  }
  case 48:  {
   $1 = 3087;
   break;
  }
  case 49:  {
   $1 = 3111;
   break;
  }
  case 50:  {
   $1 = 3132;
   break;
  }
  case 51:  {
   $1 = 3144;
   break;
  }
  case 52:  {
   $1 = 3160;
   break;
  }
  case 53:  {
   $1 = 3182;
   break;
  }
  case 54:  {
   $1 = 3199;
   break;
  }
  case 55:  {
   $1 = 3222;
   break;
  }
  case 56:  {
   $1 = 3231;
   break;
  }
  case 57:  {
   $1 = 3240;
   break;
  }
  case 58:  {
   $1 = 3252;
   break;
  }
  case 59:  {
   $1 = 3266;
   break;
  }
  case 60:  {
   $1 = 3278;
   break;
  }
  case 61:  {
   $1 = 3296;
   break;
  }
  case 62:  {
   $1 = 3309;
   break;
  }
  case 63:  {
   $1 = 3325;
   break;
  }
  case 64:  {
   $1 = 3339;
   break;
  }
  case 65:  {
   $1 = 3351;
   break;
  }
  case 66:  {
   $1 = 3361;
   break;
  }
  case 67:  {
   $1 = 3369;
   break;
  }
  case 68:  {
   $1 = 3383;
   break;
  }
  case 69:  {
   $1 = 3395;
   break;
  }
  case 70:  {
   $1 = 3412;
   break;
  }
  case 71:  {
   $1 = 3425;
   break;
  }
  case 72:  {
   $1 = 3440;
   break;
  }
  case 73:  {
   $1 = 3452;
   break;
  }
  case 74:  {
   $1 = 3466;
   break;
  }
  case 75:  {
   $1 = 3477;
   break;
  }
  case 76:  {
   $1 = 3493;
   break;
  }
  case 77:  {
   $1 = 3506;
   break;
  }
  case 78:  {
   $1 = 3522;
   break;
  }
  case 79:  {
   $1 = 3537;
   break;
  }
  case 80:  {
   $1 = 3555;
   break;
  }
  case 81:  {
   $1 = 3571;
   break;
  }
  case 82:  {
   $1 = 3584;
   break;
  }
  case 83:  {
   $1 = 3607;
   break;
  }
  case 84:  {
   $1 = 3624;
   break;
  }
  case 85:  {
   $1 = 3652;
   break;
  }
  case 86:  {
   $1 = 3668;
   break;
  }
  case 87:  {
   $1 = 3676;
   break;
  }
  case 88:  {
   $1 = 3685;
   break;
  }
  case 89:  {
   $1 = 3693;
   break;
  }
  case 90:  {
   $1 = 3701;
   break;
  }
  case 91:  {
   $1 = 3710;
   break;
  }
  case 92:  {
   $1 = 3722;
   break;
  }
  case 93:  {
   $1 = 3733;
   break;
  }
  case 94:  {
   $1 = 3739;
   break;
  }
  case 95:  {
   $1 = 3749;
   break;
  }
  case 96:  {
   $1 = 3757;
   break;
  }
  case 97:  {
   $1 = 3765;
   break;
  }
  case 98:  {
   $1 = 3775;
   break;
  }
  case 99:  {
   $1 = 3784;
   break;
  }
  case 100:  {
   $1 = 3791;
   break;
  }
  case 101:  {
   $1 = 3799;
   break;
  }
  case 102:  {
   $1 = 3805;
   break;
  }
  case 103:  {
   $1 = 3812;
   break;
  }
  case 104:  {
   $1 = 3821;
   break;
  }
  case 105:  {
   $1 = 3828;
   break;
  }
  case 106:  {
   $1 = 3836;
   break;
  }
  case 107:  {
   $1 = 3845;
   break;
  }
  case 108:  {
   $1 = 3855;
   break;
  }
  case 109:  {
   $1 = 3865;
   break;
  }
  case 110:  {
   $1 = 3875;
   break;
  }
  case 111:  {
   $1 = 3887;
   break;
  }
  case 112:  {
   $1 = 3899;
   break;
  }
  case 113:  {
   $1 = 3909;
   break;
  }
  case 114:  {
   $1 = 3918;
   break;
  }
  case 115:  {
   $1 = 3927;
   break;
  }
  case 116:  {
   $1 = 3937;
   break;
  }
  case 117:  {
   $1 = 3947;
   break;
  }
  case 118:  {
   $1 = 3957;
   break;
  }
  case 119:  {
   $1 = 3967;
   break;
  }
  case 120:  {
   $1 = 3977;
   break;
  }
  case 121:  {
   $1 = 3988;
   break;
  }
  case 122:  {
   $1 = 3997;
   break;
  }
  case 123:  {
   $1 = 4009;
   break;
  }
  case 124:  {
   $1 = 4017;
   break;
  }
  case 125:  {
   $1 = 4029;
   break;
  }
  case 126:  {
   $1 = 4038;
   break;
  }
  case 127:  {
   $1 = 4047;
   break;
  }
  case 128:  {
   $1 = 4064;
   break;
  }
  case 129:  {
   $1 = 4073;
   break;
  }
  case 130:  {
   $1 = 4085;
   break;
  }
  case 131:  {
   $1 = 4096;
   break;
  }
  case 132:  {
   $1 = 4108;
   break;
  }
  case 133:  {
   $1 = 4126;
   break;
  }
  case 134:  {
   $1 = 4136;
   break;
  }
  case 135:  {
   $1 = 4147;
   break;
  }
  case 136:  {
   $1 = 4163;
   break;
  }
  case 137:  {
   $1 = 4176;
   break;
  }
  case 138:  {
   $1 = 4188;
   break;
  }
  case 139:  {
   $1 = 4200;
   break;
  }
  case 140:  {
   $1 = 4214;
   break;
  }
  case 141:  {
   $1 = 4226;
   break;
  }
  case 142:  {
   $1 = 4234;
   break;
  }
  case 143:  {
   $1 = 4245;
   break;
  }
  case 144:  {
   $1 = 4259;
   break;
  }
  case 145:  {
   $1 = 4274;
   break;
  }
  case 146:  {
   $1 = 4288;
   break;
  }
  case 147:  {
   $1 = 4298;
   break;
  }
  case 148:  {
   $1 = 4310;
   break;
  }
  case 149:  {
   $1 = 4324;
   break;
  }
  case 150:  {
   $1 = 4337;
   break;
  }
  case 151:  {
   $1 = 4350;
   break;
  }
  case 152:  {
   $1 = 4362;
   break;
  }
  case 153:  {
   $1 = 4375;
   break;
  }
  case 154:  {
   $1 = 4390;
   break;
  }
  case 155:  {
   $1 = 4402;
   break;
  }
  case 156:  {
   $1 = 4415;
   break;
  }
  case 157:  {
   $1 = 4429;
   break;
  }
  case 158:  {
   $1 = 4443;
   break;
  }
  case 159:  {
   $1 = 4456;
   break;
  }
  case 160:  {
   $1 = 4468;
   break;
  }
  default: {
   $1 = 16416;
  }
  }
 } while(0);
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _TokenToString($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $2;
 do {
  switch ($3|0) {
  case 0:  {
   $1 = 4475;
   break;
  }
  case 1:  {
   $1 = 4480;
   break;
  }
  case 2:  {
   $1 = 4484;
   break;
  }
  case 4:  {
   $1 = 4488;
   break;
  }
  case 5:  {
   $1 = 4501;
   break;
  }
  case 7:  {
   $1 = 4509;
   break;
  }
  case 6:  {
   $1 = 4523;
   break;
  }
  case 8:  {
   $1 = 4536;
   break;
  }
  case 9:  {
   $1 = 4547;
   break;
  }
  case 10:  {
   $1 = 4558;
   break;
  }
  case 11:  {
   $1 = 2500;
   break;
  }
  case 12:  {
   $1 = 2519;
   break;
  }
  case 13:  {
   $1 = 2534;
   break;
  }
  case 14:  {
   $1 = 2551;
   break;
  }
  case 15:  {
   $1 = 2569;
   break;
  }
  case 17:  {
   $1 = 4565;
   break;
  }
  case 18:  {
   $1 = 2618;
   break;
  }
  case 21:  {
   $1 = 4575;
   break;
  }
  case 20:  {
   $1 = 2646;
   break;
  }
  case 23:  {
   $1 = 4588;
   break;
  }
  case 24:  {
   $1 = 4590;
   break;
  }
  case 25:  {
   $1 = 4592;
   break;
  }
  case 26:  {
   $1 = 4594;
   break;
  }
  case 27:  {
   $1 = 4596;
   break;
  }
  case 28:  {
   $1 = 4598;
   break;
  }
  case 29:  {
   $1 = 4600;
   break;
  }
  case 30:  {
   $1 = 4602;
   break;
  }
  case 31:  {
   $1 = 4604;
   break;
  }
  case 32:  {
   $1 = 4606;
   break;
  }
  case 33:  {
   $1 = 4608;
   break;
  }
  case 34:  {
   $1 = 4610;
   break;
  }
  case 35:  {
   $1 = 4612;
   break;
  }
  case 37:  {
   $1 = 14755;
   break;
  }
  case 38:  {
   $1 = 4614;
   break;
  }
  case 39:  {
   $1 = 4616;
   break;
  }
  case 40:  {
   $1 = 4618;
   break;
  }
  case 41:  {
   $1 = 4620;
   break;
  }
  case 42:  {
   $1 = 4622;
   break;
  }
  case 43:  {
   $1 = 4624;
   break;
  }
  case 44:  {
   $1 = 4626;
   break;
  }
  case 45:  {
   $1 = 4628;
   break;
  }
  case 46:  {
   $1 = 4630;
   break;
  }
  case 47:  {
   $1 = 4632;
   break;
  }
  case 48:  {
   $1 = 4634;
   break;
  }
  case 49:  {
   $1 = 4636;
   break;
  }
  case 50:  {
   $1 = 4638;
   break;
  }
  case 51:  {
   $1 = 4640;
   break;
  }
  case 52:  {
   $1 = 4642;
   break;
  }
  case 53:  {
   $1 = 4644;
   break;
  }
  case 54:  {
   $1 = 4646;
   break;
  }
  case 55:  {
   $1 = 4648;
   break;
  }
  case 86:  {
   $1 = 4650;
   break;
  }
  case 87:  {
   $1 = 4655;
   break;
  }
  case 88:  {
   $1 = 4661;
   break;
  }
  case 89:  {
   $1 = 4666;
   break;
  }
  case 90:  {
   $1 = 4671;
   break;
  }
  case 91:  {
   $1 = 4677;
   break;
  }
  case 92:  {
   $1 = 4686;
   break;
  }
  case 131:  {
   $1 = 4694;
   break;
  }
  case 133:  {
   $1 = 4703;
   break;
  }
  case 134:  {
   $1 = 4710;
   break;
  }
  case 135:  {
   $1 = 4718;
   break;
  }
  case 127:  {
   $1 = 4731;
   break;
  }
  case 136:  {
   $1 = 4745;
   break;
  }
  case 93:  {
   $1 = 4755;
   break;
  }
  case 94:  {
   $1 = 4758;
   break;
  }
  case 95:  {
   $1 = 4765;
   break;
  }
  case 96:  {
   $1 = 4770;
   break;
  }
  case 97:  {
   $1 = 4775;
   break;
  }
  case 98:  {
   $1 = 4782;
   break;
  }
  case 99:  {
   $1 = 4788;
   break;
  }
  case 100:  {
   $1 = 4792;
   break;
  }
  case 101:  {
   $1 = 4797;
   break;
  }
  case 102:  {
   $1 = 4800;
   break;
  }
  case 103:  {
   $1 = 4804;
   break;
  }
  case 104:  {
   $1 = 4810;
   break;
  }
  case 105:  {
   $1 = 4814;
   break;
  }
  case 106:  {
   $1 = 4819;
   break;
  }
  case 107:  {
   $1 = 4826;
   break;
  }
  case 108:  {
   $1 = 4834;
   break;
  }
  case 109:  {
   $1 = 4842;
   break;
  }
  case 110:  {
   $1 = 4850;
   break;
  }
  case 111:  {
   $1 = 4860;
   break;
  }
  case 112:  {
   $1 = 4869;
   break;
  }
  case 113:  {
   $1 = 4876;
   break;
  }
  case 114:  {
   $1 = 4882;
   break;
  }
  case 115:  {
   $1 = 4888;
   break;
  }
  case 116:  {
   $1 = 4895;
   break;
  }
  case 117:  {
   $1 = 4902;
   break;
  }
  case 118:  {
   $1 = 4909;
   break;
  }
  case 119:  {
   $1 = 4916;
   break;
  }
  case 120:  {
   $1 = 4923;
   break;
  }
  case 121:  {
   $1 = 4931;
   break;
  }
  case 122:  {
   $1 = 4937;
   break;
  }
  case 123:  {
   $1 = 4946;
   break;
  }
  case 128:  {
   $1 = 4951;
   break;
  }
  case 124:  {
   $1 = 4957;
   break;
  }
  case 125:  {
   $1 = 4966;
   break;
  }
  case 126:  {
   $1 = 4972;
   break;
  }
  case 56:  {
   $1 = 4978;
   break;
  }
  case 57:  {
   $1 = 4981;
   break;
  }
  case 58:  {
   $1 = 4984;
   break;
  }
  case 63:  {
   $1 = 4987;
   break;
  }
  case 64:  {
   $1 = 4990;
   break;
  }
  case 59:  {
   $1 = 4993;
   break;
  }
  case 60:  {
   $1 = 4996;
   break;
  }
  case 61:  {
   $1 = 4999;
   break;
  }
  case 62:  {
   $1 = 5002;
   break;
  }
  case 65:  {
   $1 = 5005;
   break;
  }
  case 66:  {
   $1 = 5008;
   break;
  }
  case 67:  {
   $1 = 5011;
   break;
  }
  case 68:  {
   $1 = 5014;
   break;
  }
  case 69:  {
   $1 = 5017;
   break;
  }
  case 70:  {
   $1 = 5021;
   break;
  }
  case 71:  {
   $1 = 5024;
   break;
  }
  case 72:  {
   $1 = 4990;
   break;
  }
  case 73:  {
   $1 = 5027;
   break;
  }
  case 74:  {
   $1 = 5030;
   break;
  }
  case 75:  {
   $1 = 5033;
   break;
  }
  case 76:  {
   $1 = 5036;
   break;
  }
  case 77:  {
   $1 = 5039;
   break;
  }
  case 78:  {
   $1 = 5042;
   break;
  }
  case 79:  {
   $1 = 5045;
   break;
  }
  case 80:  {
   $1 = 5048;
   break;
  }
  case 81:  {
   $1 = 5051;
   break;
  }
  case 82:  {
   $1 = 5055;
   break;
  }
  case 83:  {
   $1 = 5059;
   break;
  }
  case 84:  {
   $1 = 5063;
   break;
  }
  case 144:  {
   $1 = 4259;
   break;
  }
  case 156:  {
   $1 = 4415;
   break;
  }
  case 157:  {
   $1 = 4429;
   break;
  }
  case 158:  {
   $1 = 4443;
   break;
  }
  case 159:  {
   $1 = 4456;
   break;
  }
  case 145:  {
   $1 = 4274;
   break;
  }
  default: {
   $4 = $2;
   $5 = $2;
   $6 = (_TokenToNameString($5)|0);
   HEAP32[$vararg_buffer>>2] = $4;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   (_printf(5070,$vararg_buffer)|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _LocalStrBuilder_Clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  HEAP8[$6>>0] = 0;
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 _LocalStrBuilder_Clear($4);
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $3;
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP8[$11>>0]|0;
  _LocalStrBuilder_AppendChar($10,$12);
  $13 = $3;
  $14 = ((($13)) + 1|0);
  $3 = $14;
 }
 STACKTOP = sp;return;
}
function _Token_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _LocalStrBuilder_Destroy($2);
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = ($3|0)!=($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 STACKTOP = sp;return;
}
function _Token_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _Token_Destroy($4);
  $5 = $1;
  _free($5);
 }
 STACKTOP = sp;return;
}
function _TokenList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _Token_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TokenList_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _TokenList_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _TokenList_PopFront($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 _Token_Delete($10);
 STACKTOP = sp;return;
}
function _TokenList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $12 = ((($8)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 36|0);
  HEAP32[$14>>2] = $7;
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 }
}
function _TokenList_PopFrontGet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _PPToken_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 8|0);
 _PPTokenSet_Destroy($6);
 STACKTOP = sp;return;
}
function _PPTokenSet_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _PPToken_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _PPToken_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$5+16>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$7+16>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$4+16>>2]|0;
 STACKTOP = sp;return;
}
function _PPToken_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (_PPToken_Create($5,$7)|0);
 $2 = $8;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = $1;
 $12 = ((($11)) + 8|0);
 _TokenSetAppendCopy($10,$12);
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _PPToken_Create($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_malloc(20)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 ;HEAP32[$5>>2]=HEAP32[2028>>2]|0;HEAP32[$5+4>>2]=HEAP32[2028+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[2028+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[2028+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[2028+16>>2]|0;
 $9 = $4;
 ;HEAP32[$9>>2]=HEAP32[$5>>2]|0;HEAP32[$9+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$5+16>>2]|0;
 $10 = $2;
 $11 = (___strdup($10)|0);
 $12 = $4;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $4;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 STACKTOP = sp;return ($16|0);
}
function _TokenSetAppendCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_PPToken_Clone($15)|0);
  _PPTokenSet_PushUnique($10,$16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _PPToken_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _PPToken_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _PPToken_IsIdentifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function _PPToken_IsSpace($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(5);
 if ($5) {
  $$expand_i1_val = 1;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $6 = $$pre_trunc&1;
 STACKTOP = sp;return ($6|0);
}
function _PPToken_IsStringizingOp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(35);
 if (!($7)) {
  $15 = 0;
  STACKTOP = sp;return ($15|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(0);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function _PPToken_IsConcatOp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(35);
 if (!($7)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(35);
 if (!($14)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $15 = $1;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)==(0);
 $22 = $21;
 STACKTOP = sp;return ($22|0);
}
function _PPToken_IsStringLit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(3);
 STACKTOP = sp;return ($4|0);
}
function _PPToken_IsCharLit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(2);
 STACKTOP = sp;return ($4|0);
}
function _PPToken_IsOpenPar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(40);
 if (!($7)) {
  $15 = 0;
  STACKTOP = sp;return ($15|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)==(0);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function _PPToken_IsChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = $3;
 $10 = $9 << 24 >> 24;
 $11 = ($8|0)==($10|0);
 if (!($11)) {
  $19 = 0;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(0);
 $19 = $18;
 STACKTOP = sp;return ($19|0);
}
function _PPToken_IsLexeme($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (_strcmp($6,$7)|0);
 $9 = ($8|0)==(0);
 STACKTOP = sp;return ($9|0);
}
function _Macro_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _PPTokenArray_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 20|0);
 _PPTokenArray_Destroy($7);
 STACKTOP = sp;return;
}
function _PPTokenArray_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _PPToken_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _Macro_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _Macro_Destroy($4);
  $5 = $1;
  _free($5);
 }
 STACKTOP = sp;return;
}
function _MacroMap_SetAt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (_HashMap_SetAt($8,$9,$10,$6)|0);
 $7 = $11;
 $12 = HEAP32[$6>>2]|0;
 _Macro_Delete($12);
 $13 = $7;
 STACKTOP = sp;return ($13|0);
}
function _MacroMap_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 $6 = $3;
 (_HashMap_Lookup($5,$6,$4)|0);
 $7 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _MacroMap_RemoveKey($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_HashMap_RemoveKey($6,$7,$4)|0);
 $9 = $8&1;
 $5 = $9;
 $10 = $5;
 $11 = $10&1;
 if ($11) {
  $12 = HEAP32[$4>>2]|0;
  _Macro_Delete($12);
 }
 $13 = $5;
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _MacroMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _HashMap_Destroy($2,6);
 STACKTOP = sp;return;
}
function _Macro_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Macro_Delete($2);
 STACKTOP = sp;return;
}
function _MacroMap_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _TokenToPPToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 6;
 $3 = $1;
 switch ($3|0) {
 case 9: case 140: case 139: case 138: case 137: case 136: case 135: case 134: case 133: case 132: case 131: case 130: case 129: case 128: case 127: case 126: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 118: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 94: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 86:  {
  $2 = 0;
  break;
 }
 case 10: case 7: case 6: case 5: case 4:  {
  $2 = 5;
  break;
 }
 case 15: case 11: case 14: case 13: case 12:  {
  $2 = 1;
  break;
 }
 case 85:  {
  $2 = 2;
  break;
 }
 case 8:  {
  $2 = 3;
  break;
 }
 case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48: case 47: case 46: case 45: case 44: case 43: case 42: case 41: case 40: case 39: case 38: case 37: case 36: case 35: case 34: case 33: case 32: case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 84: case 83: case 82: case 81: case 80: case 79: case 78: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 70: case 69: case 68: case 67: case 66: case 65: case 64: case 63: case 62: case 61: case 60: case 59: case 58: case 57: case 56:  {
  $2 = 4;
  break;
 }
 default: {
  $2 = 4;
 }
 }
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _PPStateStack_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _PPStateStack_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _PPStateStack_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function _PPStateStack_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _PPStateStack_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _PPStateStack_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _StateTop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $1 = 0;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $8 = $2;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 16|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = (($10) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _StatePush($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = $3;
 _PPStateStack_PushBack($5,$6);
 STACKTOP = sp;return;
}
function _StatePop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 _PPStateStack_Pop($3);
 STACKTOP = sp;return;
}
function _Scanner_GetFilePositionString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Scanner_Top($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = ((($10)) + 36|0);
  (_StrBuilder_Set($9,$11)|0);
 }
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 $14 = $3;
 if ($13) {
  $15 = $4;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  _StrBuilder_AppendFmt($14,5093,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  (_StrBuilder_Append($14,5100)|0);
  STACKTOP = sp;return;
 }
}
function _Scanner_Top($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _Scanner_SetWarning($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 77|0);
 HEAP8[$6>>0] = 1;
 $7 = $2;
 $8 = (_Scanner_Top($7)|0);
 $9 = ($8|0)!=(0|0);
 $10 = $2;
 $11 = ((($10)) + 64|0);
 if ($9) {
  $12 = $2;
  $13 = (_Scanner_Top($12)|0);
  $14 = ((($13)) + 36|0);
  $15 = $2;
  $16 = (_Scanner_Top($15)|0);
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  _StrBuilder_AppendFmt($11,5106,$vararg_buffer);
 } else {
  (_StrBuilder_Append($11,5115)|0);
 }
 HEAP32[$4>>2] = $varargs;
 $19 = $2;
 $20 = ((($19)) + 64|0);
 $21 = $3;
 _StrBuilder_AppendFmtV($20,$21,$4);
 $22 = $2;
 $23 = ((($22)) + 64|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $24;
 (_printf(5121,$vararg_buffer2)|0);
 STACKTOP = sp;return;
}
function _Scanner_SetError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 76|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 76|0);
 HEAP8[$10>>0] = 1;
 $11 = $2;
 $12 = (_Scanner_Top($11)|0);
 $13 = ($12|0)!=(0|0);
 $14 = $2;
 $15 = ((($14)) + 64|0);
 if ($13) {
  $16 = $2;
  $17 = (_Scanner_Top($16)|0);
  $18 = ((($17)) + 36|0);
  $19 = $2;
  $20 = (_Scanner_Top($19)|0);
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  _StrBuilder_AppendFmt($15,5106,$vararg_buffer);
 } else {
  (_StrBuilder_Append($15,5115)|0);
 }
 HEAP32[$4>>2] = $varargs;
 $23 = $2;
 $24 = ((($23)) + 64|0);
 $25 = $3;
 _StrBuilder_AppendFmtV($24,$25,$4);
 STACKTOP = sp;return;
}
function _Scanner_PrintDebug($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(5125,$vararg_buffer)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = ((($7)) + 36|0);
  $9 = $2;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $8;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $11;
  (_printf(5143,$vararg_buffer1)|0);
  $12 = $2;
  $13 = ((($12)) + 568|0);
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
 }
 (_printf(5152,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _Scanner_InitString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 (_Scanner_InitCore($8)|0);
 $9 = $4;
 $10 = $5;
 $11 = (_BasicScanner_Create($6,$9,$10)|0);
 $12 = $11&1;
 $7 = $12;
 $13 = $3;
 $14 = HEAP32[$6>>2]|0;
 _BasicScannerStack_Push($13,$14);
 $15 = $7;
 $16 = $15&1;
 STACKTOP = sp;return ($16|0);
}
function _Scanner_InitCore($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 96|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 88|0);
 _TokenList_Init($8);
 $9 = $1;
 $10 = ((($9)) + 80|0);
 _TokenList_Init($10);
 $11 = $1;
 $12 = ((($11)) + 28|0);
 HEAP32[$2>>2] = 0;
 $13 = ((($2)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($2)) + 8|0);
 HEAP32[$14>>2] = 0;
 ;HEAP32[$12>>2]=HEAP32[$2>>2]|0;HEAP32[$12+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$2+8>>2]|0;
 $15 = $1;
 $16 = ((($15)) + 4|0);
 HEAP32[$3>>2] = 0;
 $17 = ((($3)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($3)) + 8|0);
 HEAP32[$18>>2] = 0;
 ;HEAP32[$16>>2]=HEAP32[$3>>2]|0;HEAP32[$16+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$3+8>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 52|0);
 _StrBuilder_Init($20);
 $21 = $1;
 $22 = ((($21)) + 64|0);
 _StrBuilder_Init($22);
 $23 = $1;
 $24 = ((($23)) + 76|0);
 HEAP8[$24>>0] = 0;
 $25 = $1;
 $26 = ((($25)) + 77|0);
 HEAP8[$26>>0] = 0;
 $27 = $1;
 $28 = ((($27)) + 16|0);
 _PPStateStack_Init($28);
 $29 = $1;
 _BasicScannerStack_Init($29);
 $30 = $1;
 $31 = ((($30)) + 40|0);
 HEAP32[$4>>2] = 0;
 $32 = ((($4)) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($4)) + 8|0);
 HEAP32[$33>>2] = 0;
 ;HEAP32[$31>>2]=HEAP32[$4>>2]|0;HEAP32[$31+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$4+8>>2]|0;
 $34 = $1;
 (_AddStandardMacro($34,13939,2318)|0);
 $35 = $1;
 (_AddStandardMacro($35,13947,2318)|0);
 $36 = $1;
 (_AddStandardMacro($36,13957,13965)|0);
 $37 = $1;
 (_AddStandardMacro($37,13969,13975)|0);
 $38 = $1;
 (_AddStandardMacro($38,13977,13975)|0);
 $39 = $1;
 (_AddStandardMacro($39,13984,13975)|0);
 $40 = $1;
 (_AddStandardMacro($40,13993,13975)|0);
 $41 = $1;
 (_AddStandardMacro($41,14004,6349)|0);
 $42 = $1;
 (_AddStandardMacro($42,14013,14022)|0);
 $43 = $1;
 (_AddStandardMacro($43,14033,14042)|0);
 $44 = $1;
 (_AddStandardMacro($44,14053,14062)|0);
 $45 = $1;
 (_AddStandardMacro($45,14073,13975)|0);
 $46 = $1;
 (_AddStandardMacro($46,14082,6349)|0);
 $47 = $1;
 _Scanner_PushToken($47,1,16416,1,-1,-1);
 STACKTOP = sp;return 1;
}
function _BasicScanner_Create($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $8 = (_malloc(572)|0);
 $7 = $8;
 $9 = $7;
 $10 = ($9|0)!=(0|0);
 do {
  if ($10) {
   $11 = $7;
   $12 = $4;
   $13 = $5;
   $14 = (_BasicScanner_Init($11,$12,$13)|0);
   $15 = $14&1;
   $6 = $15;
   $16 = $6;
   $17 = $16&1;
   $18 = $17&1;
   $19 = ($18|0)==(1);
   $20 = $7;
   if ($19) {
    $21 = $3;
    HEAP32[$21>>2] = $20;
    break;
   } else {
    _free($20);
    break;
   }
  }
 } while(0);
 $22 = $6;
 $23 = $22&1;
 STACKTOP = sp;return ($23|0);
}
function _BasicScannerStack_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $3;
  $8 = $2;
  HEAP32[$8>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = ((($11)) + 568|0);
  HEAP32[$12>>2] = $10;
  $13 = $3;
  $14 = $2;
  HEAP32[$14>>2] = $13;
  STACKTOP = sp;return;
 }
}
function _PushExpandedMacro($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 17|0;
 $7 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ((($9)) + 76|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 if ($12) {
  $$expand_i1_val = 0;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $13 = $5;
 $14 = $6;
 $15 = (_BasicScanner_Create($7,$13,$14)|0);
 $16 = $15&1;
 $8 = $16;
 $17 = $8;
 $18 = $17&1;
 $19 = $18&1;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = HEAP32[$7>>2]|0;
  $22 = ((($21)) + 557|0);
  HEAP8[$22>>0] = 1;
  $23 = HEAP32[$7>>2]|0;
  _BasicScanner_Match($23);
  $24 = $4;
  $25 = HEAP32[$7>>2]|0;
  _BasicScannerStack_Push($24,$25);
 }
 $26 = $8;
 $27 = $26&1;
 $$expand_i1_val2 = $27&1;
 HEAP8[$3>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function _BasicScanner_Match($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _BasicScanner_Next($2);
 STACKTOP = sp;return;
}
function _Scanner_GetFullPathS($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 54|0;
 $10 = sp + 24|0;
 $14 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $19 = $2&1;
 $7 = $19;
 $8 = $3;
 $20 = $5;
 $21 = ((($20)) + 76|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 if ($23) {
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $96 = $$pre_trunc&1;
  STACKTOP = sp;return ($96|0);
 }
 $9 = 0;
 $24 = $7;
 $25 = $24&1;
 do {
  if ($25) {
   $26 = $6;
   $27 = (_IsFullPath($26)|0);
   if ($27) {
    $9 = 1;
    $28 = $8;
    $29 = $6;
    (_strncpy($28,$29,260)|0);
    break;
   }
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if (!($32)) {
    $50 = $6;
    $51 = $8;
    _GetFullPathS($50,$51);
    $52 = $8;
    $53 = (_FileExists($52)|0);
    $54 = $53&1;
    $13 = $54;
    $55 = $13;
    $56 = $55&1;
    if (!($56)) {
     break;
    }
    $9 = 1;
    break;
   }
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $33 = $5;
   $34 = HEAP32[$33>>2]|0;
   $11 = $34;
   while(1) {
    $35 = $11;
    $36 = ($35|0)!=(0|0);
    if (!($36)) {
     break;
    }
    $37 = $11;
    $38 = ((($37)) + 296|0);
    (_StrBuilder_Set($10,$38)|0);
    $39 = $6;
    (_StrBuilder_Append($10,$39)|0);
    $40 = HEAP32[$10>>2]|0;
    $41 = (_FileExists($40)|0);
    $42 = $41&1;
    $12 = $42;
    $43 = $12;
    $44 = $43&1;
    if ($44) {
     label = 10;
     break;
    }
    $47 = $11;
    $48 = ((($47)) + 568|0);
    $49 = HEAP32[$48>>2]|0;
    $11 = $49;
   }
   if ((label|0) == 10) {
    $45 = HEAP32[$10>>2]|0;
    $46 = $8;
    _GetFullPathS($45,$46);
    $9 = 1;
   }
   _StrBuilder_Destroy($10);
  }
 } while(0);
 $57 = $9;
 $58 = $57&1;
 if (!($58)) {
  ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
  $59 = $5;
  $60 = ((($59)) + 40|0);
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0);
  if ($63) {
   $64 = $6;
   $65 = $8;
   _GetFullPathS($64,$65);
   $66 = $8;
   $67 = (_FileExists($66)|0);
   $68 = $67&1;
   $15 = $68;
   $69 = $15;
   $70 = $69&1;
   if ($70) {
    $9 = 1;
   }
  }
  $16 = 0;
  while(1) {
   $71 = $16;
   $72 = $5;
   $73 = ((($72)) + 40|0);
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($71|0)<($75|0);
   if (!($76)) {
    break;
   }
   $77 = $5;
   $78 = ((($77)) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $16;
   $81 = (($79) + ($80<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $17 = $82;
   $83 = $17;
   (_StrBuilder_Set($14,$83)|0);
   (_StrBuilder_Append($14,4614)|0);
   $84 = $6;
   (_StrBuilder_Append($14,$84)|0);
   $85 = HEAP32[$14>>2]|0;
   $86 = (_FileExists($85)|0);
   $87 = $86&1;
   $18 = $87;
   $88 = $18;
   $89 = $88&1;
   if ($89) {
    label = 22;
    break;
   }
   $92 = $16;
   $93 = (($92) + 1)|0;
   $16 = $93;
  }
  if ((label|0) == 22) {
   $90 = $8;
   $91 = HEAP32[$14>>2]|0;
   (_strncpy($90,$91,260)|0);
   $9 = 1;
  }
  _StrBuilder_Destroy($14);
 }
 $94 = $9;
 $95 = $94&1;
 $$expand_i1_val2 = $95&1;
 HEAP8[$4>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$4>>0]|0;
 $96 = $$pre_trunc&1;
 STACKTOP = sp;return ($96|0);
}
function _Scanner_IncludeFile($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer3 = sp + 280|0;
 $vararg_buffer1 = sp + 272|0;
 $vararg_buffer = sp + 264|0;
 $8 = sp;
 $11 = sp + 288|0;
 $12 = sp + 284|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $3&1;
 $7 = $14;
 $15 = $4;
 $16 = ((($15)) + 76|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  STACKTOP = sp;return;
 }
 _memset(($8|0),0,260)|0;
 $9 = 0;
 $19 = $6;
 switch ($19|0) {
 case 1: case 0:  {
  $20 = $4;
  $21 = $5;
  $22 = $6;
  $23 = ($22|0)==(0);
  $24 = (_Scanner_GetFullPathS($20,$21,$23,$8)|0);
  $25 = $24&1;
  $9 = $25;
  break;
 }
 case 2:  {
  $26 = $5;
  (_strncpy($8,$26,260)|0);
  $9 = 1;
  break;
 }
 default: {
 }
 }
 $27 = $9;
 $28 = $27&1;
 $29 = $4;
 if (!($28)) {
  $72 = $5;
  HEAP32[$vararg_buffer3>>2] = $72;
  _Scanner_SetError($29,5235,$vararg_buffer3);
  STACKTOP = sp;return;
 }
 $30 = ((($29)) + 28|0);
 $31 = (_FileInfoMap_Find($30,$8)|0);
 $10 = $31;
 $32 = $10;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $10;
  $35 = ((($34)) + 12|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&1;
  if ($37) {
   $38 = $4;
   _Scanner_PushToken($38,159,5157,1,-1,-1);
   STACKTOP = sp;return;
  }
 }
 $39 = $10;
 $40 = ($39|0)==(0|0);
 if ($40) {
  HEAP32[$11>>2] = 0;
  $41 = ((($11)) + 4|0);
  HEAP32[$41>>2] = 0;
  $42 = ((($11)) + 8|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($11)) + 12|0);
  HEAP8[$43>>0] = 0;
  $44 = (_mallocinit(16,$11)|0);
  $10 = $44;
  $45 = $5;
  $46 = (___strdup($45)|0);
  $47 = $10;
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = $46;
  $49 = $4;
  $50 = ((($49)) + 28|0);
  $51 = $10;
  (_FileInfoMap_Set($50,$8,$51)|0);
 }
 HEAP32[$12>>2] = 0;
 $52 = (_BasicScanner_CreateFile($8,$12)|0);
 $53 = $52&1;
 $13 = $53;
 $54 = $13;
 $55 = $54&1;
 $56 = $55&1;
 $57 = ($56|0)==(1);
 if (!($57)) {
  $71 = $4;
  HEAP32[$vararg_buffer1>>2] = $8;
  _Scanner_SetError($71,5178,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $58 = $10;
 $59 = ($58|0)!=(0|0);
 if (!($59)) {
  $70 = $4;
  _Scanner_SetError($70,5174,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $60 = $10;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$12>>2]|0;
 $64 = ((($63)) + 560|0);
 HEAP32[$64>>2] = $62;
 $65 = $7;
 $66 = $65&1;
 if ($66) {
  $67 = HEAP32[$12>>2]|0;
  _BasicScanner_Match($67);
 }
 $68 = $4;
 $69 = HEAP32[$12>>2]|0;
 _BasicScannerStack_Push($68,$69);
 STACKTOP = sp;return;
}
function _Scanner_PushToken($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $14 = $3&1;
 $9 = $14;
 $10 = $4;
 $11 = $5;
 $15 = $6;
 $16 = ((($15)) + 76|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;HEAP32[$13+16>>2]=0|0;
 $19 = ((($13)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($13)) + 24|0);
 HEAP32[$20>>2] = -1;
 $21 = ((($13)) + 28|0);
 HEAP32[$21>>2] = -1;
 $22 = ((($13)) + 32|0);
 HEAP8[$22>>0] = 1;
 $23 = ((($13)) + 36|0);
 HEAP32[$23>>2] = 0;
 $24 = (_mallocinit(40,$13)|0);
 $12 = $24;
 $25 = $12;
 $26 = $8;
 _LocalStrBuilder_Set($25,$26);
 $27 = $7;
 $28 = $12;
 $29 = ((($28)) + 20|0);
 HEAP32[$29>>2] = $27;
 $30 = $9;
 $31 = $30&1;
 $32 = $12;
 $33 = ((($32)) + 32|0);
 $34 = $31&1;
 HEAP8[$33>>0] = $34;
 $35 = $10;
 $36 = $12;
 $37 = ((($36)) + 24|0);
 HEAP32[$37>>2] = $35;
 $38 = $11;
 $39 = $12;
 $40 = ((($39)) + 28|0);
 HEAP32[$40>>2] = $38;
 $41 = $6;
 $42 = ((($41)) + 80|0);
 $43 = $12;
 _TokenList_PushBack($42,$43);
 STACKTOP = sp;return;
}
function _BasicScanner_CreateFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = (_malloc(572)|0);
 $5 = $6;
 $7 = $5;
 $8 = ($7|0)!=(0|0);
 do {
  if ($8) {
   $9 = $5;
   $10 = $2;
   $11 = (_BasicScanner_InitFile($9,$10)|0);
   $12 = $11&1;
   $4 = $12;
   $13 = $4;
   $14 = $13&1;
   $15 = $14&1;
   $16 = ($15|0)==(1);
   $17 = $5;
   if ($16) {
    $18 = $3;
    HEAP32[$18>>2] = $17;
    break;
   } else {
    _free($17);
    break;
   }
  }
 } while(0);
 $19 = $4;
 $20 = $19&1;
 STACKTOP = sp;return ($20|0);
}
function _Scanner_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _BasicScannerStack_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 4|0);
 _MacroMap_Destroy($4);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 _PPStateStack_Destroy($6);
 $7 = $1;
 $8 = ((($7)) + 28|0);
 _FileInfoMap_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 40|0);
 _StrArray_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 52|0);
 _StrBuilder_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 64|0);
 _StrBuilder_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 80|0);
 _TokenList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 88|0);
 _TokenList_Destroy($18);
 STACKTOP = sp;return;
}
function _BasicScannerStack_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 568|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _BasicScanner_Delete($12);
 }
 STACKTOP = sp;return;
}
function _BasicScannerStack_Init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _IgnorePreProcessorv2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $2;
  $5 = ((($4)) + 564|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(2);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = $2;
  $9 = ((($8)) + 564|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(159);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = $2;
  $13 = ((($12)) + 564|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(17);
  if ($15) {
   label = 5;
   break;
  }
  $17 = $3;
  $18 = $2;
  $19 = ((($18)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  (_StrBuilder_Append($17,$20)|0);
  $21 = $2;
  _BasicScanner_Match($21);
 }
 if ((label|0) == 5) {
  $16 = $2;
  _BasicScanner_Match($16);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _GetDefineString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $5 = $2;
  $6 = (_Scanner_Top($5)|0);
  $7 = ((($6)) + 564|0);
  $8 = HEAP32[$7>>2]|0;
  $4 = $8;
  $9 = $4;
  $10 = ($9|0)==(2);
  $11 = $4;
  $12 = ($11|0)==(17);
  $or$cond7 = $10 | $12;
  if ($or$cond7) {
   break;
  }
  $13 = $4;
  $14 = ($13|0)==(6);
  $15 = $4;
  $16 = ($15|0)==(7);
  $or$cond = $14 | $16;
  $17 = $4;
  $18 = ($17|0)==(5);
  $or$cond3 = $or$cond | $18;
  $19 = $4;
  $20 = ($19|0)==(4);
  $or$cond5 = $or$cond3 | $20;
  $21 = $3;
  if ($or$cond5) {
   (_StrBuilder_Append($21,2318)|0);
  } else {
   $22 = $2;
   $23 = (_Scanner_Top($22)|0);
   $24 = (_BasicScanner_Lexeme($23)|0);
   (_StrBuilder_Append($21,$24)|0);
  }
  $25 = $2;
  $26 = (_Scanner_Top($25)|0);
  _BasicScanner_Match($26);
 }
 STACKTOP = sp;return;
}
function _BasicScanner_Lexeme($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _Scanner_FindPreprocessorItem2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = $3;
 $8 = (_MacroMap_Find($6,$7)|0);
 $4 = $8;
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _BasicScanner_IsLexeme($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (_BasicScanner_Lexeme($4)|0);
 $6 = $3;
 $7 = (_strcmp($5,$6)|0);
 $8 = ($7|0)==(0);
 STACKTOP = sp;return ($8|0);
}
function _PreprocessorExpression($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $1 = $0;
 HEAP32[$2>>2] = 0;
 $4 = $1;
 _ConstantExpression($4,$2);
 $5 = HEAP32[$2>>2]|0;
 $6 = (_EvaluateConstantExpression($5,$3)|0);
 if (!($6)) {
  $7 = $1;
  $8 = ((($7)) + 20|0);
  _Scanner_SetError($8,5293,$vararg_buffer);
 }
 $9 = HEAP32[$2>>2]|0;
 _Expression_Delete($9);
 $10 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _ConstantExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $2;
 $6 = $3;
 _ConditionalExpression($5,$6);
 STACKTOP = sp;return;
}
function _EvaluateConstantExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 57|0;
 $5 = sp + 44|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $10 = sp + 28|0;
 $11 = sp + 24|0;
 $12 = sp + 20|0;
 $16 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = -987654321;
 $18 = $3;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $186 = $$pre_trunc&1;
  STACKTOP = sp;return ($186|0);
 }
 $6 = 0;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 L5: do {
  switch ($21|0) {
  case 36:  {
   $22 = $3;
   $7 = $22;
   $23 = $7;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_EvaluateConstantExpression($25,$8)|0);
   $27 = $26&1;
   $6 = $27;
   $28 = $7;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_EvaluateConstantExpression($30,$9)|0);
   $32 = $31&1;
   $6 = $32;
   $33 = $7;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   do {
    switch ($35|0) {
    case 32:  {
     $36 = HEAP32[$8>>2]|0;
     $37 = HEAP32[$9>>2]|0;
     $38 = Math_imul($36, $37)|0;
     HEAP32[$5>>2] = $38;
     $6 = 1;
     break L5;
     break;
    }
    case 33:  {
     $39 = HEAP32[$8>>2]|0;
     $40 = HEAP32[$9>>2]|0;
     $41 = (($39) + ($40))|0;
     HEAP32[$5>>2] = $41;
     $6 = 1;
     break L5;
     break;
    }
    case 35:  {
     $42 = HEAP32[$8>>2]|0;
     $43 = HEAP32[$9>>2]|0;
     $44 = (($42) - ($43))|0;
     HEAP32[$5>>2] = $44;
     $6 = 1;
     break L5;
     break;
    }
    case 65:  {
     $45 = HEAP32[$8>>2]|0;
     $46 = ($45|0)!=(0);
     $47 = HEAP32[$9>>2]|0;
     $48 = ($47|0)!=(0);
     $49 = $46 ? $48 : 0;
     $50 = $49&1;
     HEAP32[$5>>2] = $50;
     $6 = 1;
     break L5;
     break;
    }
    case 66:  {
     $51 = HEAP32[$8>>2]|0;
     $52 = ($51|0)!=(0);
     $53 = HEAP32[$9>>2]|0;
     $54 = ($53|0)!=(0);
     $55 = $52 ? 1 : $54;
     $56 = $55&1;
     HEAP32[$5>>2] = $56;
     $6 = 1;
     break L5;
     break;
    }
    case 64:  {
     $57 = HEAP32[$8>>2]|0;
     $58 = HEAP32[$9>>2]|0;
     $59 = ($57|0)!=($58|0);
     $60 = $59&1;
     HEAP32[$5>>2] = $60;
     $6 = 1;
     break L5;
     break;
    }
    case 63:  {
     $61 = HEAP32[$8>>2]|0;
     $62 = HEAP32[$9>>2]|0;
     $63 = ($61|0)==($62|0);
     $64 = $63&1;
     HEAP32[$5>>2] = $64;
     $6 = 1;
     break L5;
     break;
    }
    case 62:  {
     $65 = HEAP32[$8>>2]|0;
     $66 = HEAP32[$9>>2]|0;
     $67 = ($65|0)>=($66|0);
     $68 = $67&1;
     HEAP32[$5>>2] = $68;
     $6 = 1;
     break L5;
     break;
    }
    case 61:  {
     $69 = HEAP32[$8>>2]|0;
     $70 = HEAP32[$9>>2]|0;
     $71 = ($69|0)<=($70|0);
     $72 = $71&1;
     HEAP32[$5>>2] = $72;
     $6 = 1;
     break L5;
     break;
    }
    case 43:  {
     $73 = HEAP32[$8>>2]|0;
     $74 = HEAP32[$9>>2]|0;
     $75 = ($73|0)>($74|0);
     $76 = $75&1;
     HEAP32[$5>>2] = $76;
     $6 = 1;
     break L5;
     break;
    }
    case 41:  {
     $77 = HEAP32[$8>>2]|0;
     $78 = HEAP32[$9>>2]|0;
     $79 = ($77|0)<($78|0);
     $80 = $79&1;
     HEAP32[$5>>2] = $80;
     $6 = 1;
     break L5;
     break;
    }
    case 28:  {
     $81 = HEAP32[$8>>2]|0;
     $82 = HEAP32[$9>>2]|0;
     $83 = $81 & $82;
     HEAP32[$5>>2] = $83;
     $6 = 1;
     break L5;
     break;
    }
    case 60:  {
     $84 = HEAP32[$8>>2]|0;
     $85 = HEAP32[$9>>2]|0;
     $86 = $84 >> $85;
     HEAP32[$5>>2] = $86;
     $6 = 1;
     break L5;
     break;
    }
    case 59:  {
     $87 = HEAP32[$8>>2]|0;
     $88 = HEAP32[$9>>2]|0;
     $89 = $87 << $88;
     HEAP32[$5>>2] = $89;
     $6 = 1;
     break L5;
     break;
    }
    case 53:  {
     $90 = HEAP32[$8>>2]|0;
     $91 = HEAP32[$9>>2]|0;
     $92 = $90 | $91;
     HEAP32[$5>>2] = $92;
     $6 = 1;
     break L5;
     break;
    }
    case 38:  {
     $93 = HEAP32[$9>>2]|0;
     $94 = ($93|0)!=(0);
     if ($94) {
      $95 = HEAP32[$8>>2]|0;
      $96 = HEAP32[$9>>2]|0;
      $97 = (($95|0) / ($96|0))&-1;
      HEAP32[$5>>2] = $97;
      $6 = 1;
      break L5;
     } else {
      $6 = 0;
      break L5;
     }
     break;
    }
    default: {
     $6 = 0;
     break L5;
    }
    }
   } while(0);
   break;
  }
  case 37:  {
   $98 = $3;
   $99 = ((($98)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (_EvaluateConstantExpression($100,$10)|0);
   $102 = $101&1;
   $6 = $102;
   $103 = $3;
   $104 = ((($103)) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (_EvaluateConstantExpression($105,$11)|0);
   $107 = $106&1;
   $6 = $107;
   $108 = $3;
   $109 = ((($108)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (_EvaluateConstantExpression($110,$12)|0);
   $112 = $111&1;
   $6 = $112;
   break;
  }
  case 33:  {
   $113 = $3;
   $13 = $113;
   $114 = $13;
   $115 = ((($114)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)!=(0|0);
   $118 = $13;
   if ($117) {
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (_EvaluateConstantExpression($120,$5)|0);
    $122 = $121&1;
    $6 = $122;
    break L5;
   }
   $123 = ((($118)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   switch ($124|0) {
   case 9:  {
    HEAP32[$5>>2] = 0;
    $6 = 1;
    break L5;
    break;
   }
   case 11:  {
    $125 = $13;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_atoi($127)|0);
    HEAP32[$5>>2] = $128;
    $6 = 1;
    break L5;
    break;
   }
   case 14:  {
    $129 = $13;
    $130 = ((($129)) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (_strtol($131,0,2)|0);
    HEAP32[$5>>2] = $132;
    $6 = 1;
    break L5;
    break;
   }
   case 13:  {
    $133 = $13;
    $134 = ((($133)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (_strtol($135,0,8)|0);
    HEAP32[$5>>2] = $136;
    $6 = 1;
    break L5;
    break;
   }
   case 12:  {
    $137 = $13;
    $138 = ((($137)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (_strtol($139,0,16)|0);
    HEAP32[$5>>2] = $140;
    $6 = 1;
    break L5;
    break;
   }
   case 85:  {
    $141 = $13;
    $142 = ((($141)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)!=(0|0);
    if ($144) {
     $145 = $13;
     $146 = ((($145)) + 8|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ((($147)) + 1|0);
     $149 = HEAP8[$148>>0]|0;
     $150 = $149 << 24 >> 24;
     HEAP32[$5>>2] = $150;
     $6 = 1;
     break L5;
    } else {
     HEAP32[$5>>2] = 0;
     break L5;
    }
    break;
   }
   default: {
    $6 = 0;
    break L5;
   }
   }
   break;
  }
  case 35:  {
   $151 = $3;
   $14 = $151;
   $152 = $14;
   $153 = (_TPostfixExpressionCore_Evaluate($152,$5)|0);
   $154 = $153&1;
   $6 = $154;
   break;
  }
  case 31:  {
   $155 = $3;
   $15 = $155;
   $156 = $15;
   $157 = ((($156)) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(116);
   $160 = $15;
   $161 = ((($160)) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   if ($159) {
    $163 = (_EvaluateConstantExpression($162,$5)|0);
    $164 = $163&1;
    $6 = $164;
    break L5;
   }
   $165 = (_EvaluateConstantExpression($162,$16)|0);
   $166 = $165&1;
   $6 = $166;
   $167 = $15;
   $168 = ((($167)) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   switch ($169|0) {
   case 23:  {
    $170 = HEAP32[$16>>2]|0;
    $171 = ($170|0)!=(0);
    $172 = $171 ^ 1;
    $173 = $172&1;
    HEAP32[$5>>2] = $173;
    $6 = 1;
    break L5;
    break;
   }
   case 35:  {
    $174 = HEAP32[$16>>2]|0;
    $175 = (0 - ($174))|0;
    HEAP32[$5>>2] = $175;
    $6 = 1;
    break L5;
    break;
   }
   default: {
    break L5;
   }
   }
   break;
  }
  case 32:  {
   $176 = $3;
   $17 = $176;
   $177 = $17;
   $178 = ((($177)) + 4|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (_EvaluateConstantExpression($179,$5)|0);
   $181 = $180&1;
   $6 = $181;
   break;
  }
  default: {
  }
  }
 } while(0);
 $182 = HEAP32[$5>>2]|0;
 $183 = $4;
 HEAP32[$183>>2] = $182;
 $184 = $6;
 $185 = $184&1;
 $$expand_i1_val2 = $185&1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $186 = $$pre_trunc&1;
 STACKTOP = sp;return ($186|0);
}
function _Expression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 36:  {
    $6 = $1;
    _BinaryExpression_Delete($6);
    break L1;
    break;
   }
   case 38:  {
    $7 = $1;
    _PrimaryExpressionLambda_Delete($7);
    break L1;
    break;
   }
   case 31:  {
    $8 = $1;
    _UnaryExpressionOperator_Delete($8);
    break L1;
    break;
   }
   case 32:  {
    $9 = $1;
    _CastExpressionType_Delete($9);
    break L1;
    break;
   }
   case 33:  {
    $10 = $1;
    _PrimaryExpressionValue_Delete($10);
    break L1;
    break;
   }
   case 35:  {
    $11 = $1;
    _PostfixExpression_Delete($11);
    break L1;
    break;
   }
   case 34:  {
    $12 = $1;
    _PrimaryExpressionLiteral_Delete($12);
    break L1;
    break;
   }
   case 37:  {
    $13 = $1;
    _TernaryExpression_Delete($13);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _EvalExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $4 = $8;
 $9 = $2;
 (_Parser_InitString($5,5321,$9)|0);
 $10 = ((($5)) + 140|0);
 HEAP8[$10>>0] = 1;
 $11 = $4;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = ((($5)) + 20|0);
  $14 = ((($13)) + 4|0);
  $15 = $4;
  _MacroMap_Swap($14,$15);
 }
 $16 = (_PreprocessorExpression($5)|0);
 $6 = $16;
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = ((($5)) + 20|0);
  $20 = ((($19)) + 4|0);
  $21 = $4;
  _MacroMap_Swap($20,$21);
 }
 $22 = ((($5)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = $3;
  $26 = ((($5)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  _Scanner_SetError($25,$27,$vararg_buffer);
 }
 $28 = ((($5)) + 20|0);
 $29 = ((($28)) + 76|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&1;
 if (!($31)) {
  _Parser_Destroy($5);
  $36 = $6;
  STACKTOP = sp;return ($36|0);
 }
 $32 = $3;
 $33 = ((($5)) + 20|0);
 $34 = ((($33)) + 64|0);
 $35 = HEAP32[$34>>2]|0;
 _Scanner_SetError($32,$35,$vararg_buffer1);
 _Parser_Destroy($5);
 $36 = $6;
 STACKTOP = sp;return ($36|0);
}
function _Parser_InitString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 120|0);
 _SymbolMap_Init($8);
 $9 = $3;
 $10 = ((($9)) + 120|0);
 $11 = $3;
 $12 = ((($11)) + 136|0);
 HEAP32[$12>>2] = $10;
 $13 = $3;
 $14 = ((($13)) + 140|0);
 HEAP8[$14>>0] = 0;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 HEAP8[$16>>0] = 0;
 $17 = $3;
 $18 = ((($17)) + 8|0);
 _StrBuilder_Init($18);
 $19 = $3;
 $20 = ((($19)) + 20|0);
 $21 = $4;
 $22 = $5;
 (_Scanner_InitString($20,$21,$22)|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;
 $23 = $3;
 (_Parser_Match($23,$6)|0);
 _TokenList_Destroy($6);
 STACKTOP = sp;return 1;
}
function _Parser_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 120|0);
 _SymbolMap_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _StrBuilder_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 20|0);
 _Scanner_Destroy($7);
 STACKTOP = sp;return;
}
function _FindPreToken($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = (_strcmp($3,5337)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $2 = 144;
  } else {
   $6 = $1;
   $7 = (_strcmp($6,5345)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $2 = 145;
    break;
   }
   $9 = $1;
   $10 = (_strcmp($9,4797)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $2 = 146;
    break;
   }
   $12 = $1;
   $13 = (_strcmp($12,5352)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $2 = 147;
    break;
   }
   $15 = $1;
   $16 = (_strcmp($15,5357)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $2 = 148;
    break;
   }
   $18 = $1;
   $19 = (_strcmp($18,5364)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $2 = 149;
    break;
   }
   $21 = $1;
   $22 = (_strcmp($21,5370)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $2 = 150;
    break;
   }
   $24 = $1;
   $25 = (_strcmp($24,4765)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $2 = 151;
    break;
   }
   $27 = $1;
   $28 = (_strcmp($27,5376)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $2 = 152;
    break;
   }
   $30 = $1;
   $31 = (_strcmp($30,5382)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $2 = 153;
    break;
   }
   $33 = $1;
   $34 = (_strcmp($33,5390)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $2 = 154;
    break;
   }
   $36 = $1;
   $37 = (_strcmp($36,5395)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $2 = 155;
    break;
   }
   $39 = $1;
   $40 = (_strcmp($39,5401)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    $2 = 156;
   }
  }
 } while(0);
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function _GetPPTokens($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 564|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $3;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $7 = $14;
 while(1) {
  $15 = $6;
  $16 = ($15|0)!=(17);
  $17 = $6;
  $18 = ($17|0)!=(2);
  $or$cond = $16 & $18;
  $19 = $6;
  $20 = ($19|0)!=(159);
  $or$cond4 = $or$cond & $20;
  if (!($or$cond4)) {
   break;
  }
  $21 = $5;
  $22 = $7;
  (_StrBuilder_Append($21,$22)|0);
  $23 = $6;
  $24 = ($23|0)!=(18);
  if ($24) {
   $25 = $7;
   $26 = $6;
   $27 = (_TokenToPPToken($26)|0);
   $28 = (_PPToken_Create($25,$27)|0);
   $8 = $28;
   $29 = $4;
   $30 = $8;
   _PPTokenArray_PushBack($29,$30);
  }
  $31 = $3;
  _BasicScanner_Match($31);
  $32 = $3;
  $33 = ((($32)) + 564|0);
  $34 = HEAP32[$33>>2]|0;
  $6 = $34;
  $35 = $3;
  $36 = ((($35)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $7 = $37;
 }
 while(1) {
  $38 = $4;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)>(0);
  if (!($41)) {
   label = 10;
   break;
  }
  $42 = $4;
  $43 = HEAP32[$42>>2]|0;
  $44 = $4;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - 1)|0;
  $48 = (($43) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(5);
  if (!($51)) {
   label = 10;
   break;
  }
  $52 = $4;
  _PPTokenArray_Pop($52);
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function _PPTokenArray_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _PPTokenArray_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _PPTokenArray_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  $26 = $2;
  _PPToken_Delete($26);
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 $13 = (($8) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $2 = $14;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - 1)|0;
 $21 = (($16) + ($20<<2)|0);
 HEAP32[$21>>2] = 0;
 $22 = $1;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + -1)|0;
 HEAP32[$23>>2] = $25;
 $26 = $2;
 _PPToken_Delete($26);
 STACKTOP = sp;return;
}
function _ParsePreDefinev2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 12|0;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 $11 = (_Scanner_Top($10)|0);
 $4 = $11;
 dest=$6; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = (_mallocinit(36,$6)|0);
 $5 = $12;
 $13 = $4;
 $14 = ((($13)) + 564|0);
 $15 = HEAP32[$14>>2]|0;
 $7 = $15;
 $16 = $4;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $8 = $18;
 $19 = $8;
 $20 = (___strdup($19)|0);
 $21 = $5;
 HEAP32[$21>>2] = $20;
 $22 = $3;
 $23 = $8;
 (_StrBuilder_Append($22,$23)|0);
 $24 = $4;
 _BasicScanner_Match($24);
 $25 = $4;
 $26 = ((($25)) + 564|0);
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 $28 = $4;
 $29 = ((($28)) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 $8 = $30;
 $31 = $7;
 $32 = ($31|0)==(30);
 L1: do {
  if ($32) {
   $33 = $5;
   $34 = ((($33)) + 4|0);
   HEAP8[$34>>0] = 1;
   $35 = $3;
   $36 = $8;
   (_StrBuilder_Append($35,$36)|0);
   $37 = $4;
   _BasicScanner_Match($37);
   while(1) {
    $38 = $4;
    $39 = $3;
    _Scanner_MatchAllPreprocessorSpaces($38,$39);
    $40 = $4;
    $41 = ((($40)) + 564|0);
    $42 = HEAP32[$41>>2]|0;
    $7 = $42;
    $43 = $4;
    $44 = ((($43)) + 24|0);
    $45 = HEAP32[$44>>2]|0;
    $8 = $45;
    $46 = $7;
    $47 = ($46|0)==(31);
    if ($47) {
     break;
    }
    $51 = $7;
    $52 = ($51|0)==(17);
    $53 = $7;
    $54 = ($53|0)==(2);
    $or$cond = $52 | $54;
    if ($or$cond) {
     break L1;
    }
    $55 = $4;
    $56 = ((($55)) + 564|0);
    $57 = HEAP32[$56>>2]|0;
    $7 = $57;
    $58 = $4;
    $59 = ((($58)) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    $8 = $60;
    $61 = $8;
    $62 = $7;
    $63 = (_TokenToPPToken($62)|0);
    $64 = (_PPToken_Create($61,$63)|0);
    $9 = $64;
    $65 = $5;
    $66 = ((($65)) + 20|0);
    $67 = $9;
    _PPTokenArray_PushBack($66,$67);
    $68 = $3;
    $69 = $8;
    (_StrBuilder_Append($68,$69)|0);
    $70 = $4;
    _BasicScanner_Match($70);
    $71 = $4;
    $72 = $3;
    _Scanner_MatchAllPreprocessorSpaces($71,$72);
    $73 = $4;
    $74 = ((($73)) + 564|0);
    $75 = HEAP32[$74>>2]|0;
    $7 = $75;
    $76 = $4;
    $77 = ((($76)) + 24|0);
    $78 = HEAP32[$77>>2]|0;
    $8 = $78;
    $79 = $7;
    $80 = ($79|0)==(34);
    if ($80) {
     $81 = $3;
     $82 = $8;
     (_StrBuilder_Append($81,$82)|0);
     $83 = $4;
     _BasicScanner_Match($83);
    }
   }
   $48 = $3;
   $49 = $8;
   (_StrBuilder_Append($48,$49)|0);
   $50 = $4;
   _BasicScanner_Match($50);
  } else {
   $84 = $4;
   $85 = $3;
   _Scanner_MatchAllPreprocessorSpaces($84,$85);
  }
 } while(0);
 $86 = $4;
 $87 = $3;
 _Scanner_MatchAllPreprocessorSpaces($86,$87);
 $88 = $4;
 $89 = $5;
 $90 = ((($89)) + 8|0);
 $91 = $3;
 _GetPPTokens($88,$90,$91);
 $92 = $2;
 $93 = ((($92)) + 4|0);
 $94 = $5;
 $95 = HEAP32[$94>>2]|0;
 $96 = $5;
 (_MacroMap_SetAt($93,$95,$96)|0);
 STACKTOP = sp;return;
}
function _Scanner_MatchAllPreprocessorSpaces($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 564|0);
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 while(1) {
  $8 = $4;
  $9 = ($8|0)==(10);
  $10 = $4;
  $11 = ($10|0)==(18);
  $or$cond = $9 | $11;
  $12 = $4;
  $13 = ($12|0)==(5);
  $or$cond3 = $or$cond | $13;
  $14 = $4;
  $15 = ($14|0)==(6);
  $or$cond5 = $or$cond3 | $15;
  $16 = $4;
  $17 = ($16|0)==(7);
  $or$cond7 = $or$cond5 | $17;
  if (!($or$cond7)) {
   break;
  }
  $18 = $3;
  $19 = $2;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  (_StrBuilder_Append($18,$21)|0);
  $22 = $2;
  _BasicScanner_Match($22);
  $23 = $2;
  $24 = ((($23)) + 564|0);
  $25 = HEAP32[$24>>2]|0;
  $4 = $25;
 }
 STACKTOP = sp;return;
}
function _EvalPre($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $7 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 76|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 if ($12) {
  $2 = 0;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $13 = $3;
  $14 = (_Scanner_Top($13)|0);
  $5 = $14;
  ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  $15 = $5;
  $16 = $4;
  _GetPPTokens($15,$6,$16);
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  $17 = $3;
  $18 = ((($17)) + 4|0);
  _ExpandMacroToText($6,$18,0,1,1,0,$7);
  $19 = HEAP32[$7>>2]|0;
  $20 = $3;
  $21 = (_EvalExpression($19,$20)|0);
  $8 = $21;
  _StrBuilder_Destroy($7);
  _PPTokenArray_Destroy($6);
  $22 = $8;
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _ExpandMacroToText($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $14 = sp + 4|0;
 $7 = $0;
 $8 = $1;
 $16 = $2&1;
 $9 = $16;
 $17 = $3&1;
 $10 = $17;
 $18 = $4&1;
 $11 = $18;
 $12 = $5;
 $13 = $6;
 $19 = $13;
 _StrBuilder_Clear($19);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $22&1;
 $24 = $10;
 $25 = $24&1;
 $26 = $11;
 $27 = $26&1;
 $28 = $12;
 _ExpandMacro($20,$21,$23,$25,$27,$28,$14);
 $15 = 0;
 while(1) {
  $29 = $15;
  $30 = ((($14)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$14>>2]|0;
  $34 = $15;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(5);
  $39 = $13;
  if ($38) {
   (_StrBuilder_Append($39,2318)|0);
  } else {
   $40 = HEAP32[$14>>2]|0;
   $41 = $15;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   (_StrBuilder_Append($39,$45)|0);
  }
  $46 = $15;
  $47 = (($46) + 1)|0;
  $15 = $47;
 }
 _PPTokenArray_Destroy($14);
 STACKTOP = sp;return;
}
function _Scanner_BuyIdentifierThatCanExpandAndCollapse($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $9 = sp + 376|0;
 $12 = sp + 328|0;
 $14 = sp + 280|0;
 $17 = sp + 260|0;
 $19 = sp + 244|0;
 $21 = sp + 232|0;
 $23 = sp + 184|0;
 $24 = sp + 168|0;
 $25 = sp + 156|0;
 $26 = sp + 144|0;
 $29 = sp + 96|0;
 $31 = sp + 48|0;
 $33 = sp;
 $1 = $0;
 $34 = $1;
 $35 = (_StateTop($34)|0);
 $2 = $35;
 $36 = $1;
 $37 = (_Scanner_Top($36)|0);
 $3 = $37;
 $38 = $3;
 $39 = ((($38)) + 564|0);
 $40 = HEAP32[$39>>2]|0;
 $4 = $40;
 $41 = $3;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $5 = $43;
 $44 = $3;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $6 = $46;
 $47 = $3;
 $48 = ((($47)) + 560|0);
 $49 = HEAP32[$48>>2]|0;
 $7 = $49;
 $50 = $2;
 $51 = (_IsIncludeState($50)|0);
 if (!($51)) {
  ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;
  $52 = ((($9)) + 20|0);
  HEAP32[$52>>2] = 0;
  $53 = ((($9)) + 24|0);
  HEAP32[$53>>2] = -1;
  $54 = ((($9)) + 28|0);
  HEAP32[$54>>2] = -1;
  $55 = ((($9)) + 32|0);
  HEAP8[$55>>0] = 1;
  $56 = ((($9)) + 36|0);
  HEAP32[$56>>2] = 0;
  $57 = (_mallocinit(40,$9)|0);
  $8 = $57;
  $58 = $8;
  $59 = $3;
  $60 = ((($59)) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  _LocalStrBuilder_Set($58,$61);
  $62 = $3;
  $63 = ((($62)) + 564|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $8;
  $66 = ((($65)) + 20|0);
  HEAP32[$66>>2] = $64;
  $67 = $8;
  $68 = ((($67)) + 32|0);
  HEAP8[$68>>0] = 0;
  $69 = $6;
  $70 = $8;
  $71 = ((($70)) + 24|0);
  HEAP32[$71>>2] = $69;
  $72 = $7;
  $73 = $8;
  $74 = ((($73)) + 28|0);
  HEAP32[$74>>2] = $72;
  $75 = $1;
  $76 = ((($75)) + 80|0);
  $77 = $8;
  _TokenList_PushBack($76,$77);
  $78 = $3;
  _BasicScanner_Match($78);
  STACKTOP = sp;return;
 }
 $79 = $1;
 $80 = $5;
 $81 = (_Scanner_FindPreprocessorItem2($79,$80)|0);
 $10 = $81;
 $82 = $10;
 $83 = ($82|0)==(0|0);
 if ($83) {
  ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;
  $84 = ((($12)) + 20|0);
  HEAP32[$84>>2] = 0;
  $85 = ((($12)) + 24|0);
  HEAP32[$85>>2] = -1;
  $86 = ((($12)) + 28|0);
  HEAP32[$86>>2] = -1;
  $87 = ((($12)) + 32|0);
  HEAP8[$87>>0] = 1;
  $88 = ((($12)) + 36|0);
  HEAP32[$88>>2] = 0;
  $89 = (_mallocinit(40,$12)|0);
  $11 = $89;
  $90 = $11;
  $91 = $3;
  $92 = ((($91)) + 24|0);
  $93 = HEAP32[$92>>2]|0;
  _LocalStrBuilder_Set($90,$93);
  $94 = $3;
  $95 = ((($94)) + 564|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $11;
  $98 = ((($97)) + 20|0);
  HEAP32[$98>>2] = $96;
  $99 = $11;
  $100 = ((($99)) + 32|0);
  HEAP8[$100>>0] = 1;
  $101 = $6;
  $102 = $11;
  $103 = ((($102)) + 24|0);
  HEAP32[$103>>2] = $101;
  $104 = $7;
  $105 = $11;
  $106 = ((($105)) + 28|0);
  HEAP32[$106>>2] = $104;
  $107 = $1;
  $108 = ((($107)) + 80|0);
  $109 = $11;
  _TokenList_PushBack($108,$109);
  $110 = $3;
  _BasicScanner_Match($110);
  STACKTOP = sp;return;
 }
 $111 = $3;
 $112 = ((($111)) + 557|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&1;
 if ($114) {
  $115 = $10;
  $116 = HEAP32[$115>>2]|0;
  $117 = $3;
  $118 = ((($117)) + 36|0);
  $119 = (_strcmp($116,$118)|0);
  $120 = ($119|0)==(0);
  if ($120) {
   ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;
   $121 = ((($14)) + 20|0);
   HEAP32[$121>>2] = 0;
   $122 = ((($14)) + 24|0);
   HEAP32[$122>>2] = -1;
   $123 = ((($14)) + 28|0);
   HEAP32[$123>>2] = -1;
   $124 = ((($14)) + 32|0);
   HEAP8[$124>>0] = 1;
   $125 = ((($14)) + 36|0);
   HEAP32[$125>>2] = 0;
   $126 = (_mallocinit(40,$14)|0);
   $13 = $126;
   $127 = $13;
   $128 = $3;
   $129 = ((($128)) + 24|0);
   $130 = HEAP32[$129>>2]|0;
   _LocalStrBuilder_Set($127,$130);
   $131 = $3;
   $132 = ((($131)) + 564|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $13;
   $135 = ((($134)) + 20|0);
   HEAP32[$135>>2] = $133;
   $136 = $13;
   $137 = ((($136)) + 32|0);
   HEAP8[$137>>0] = 1;
   $138 = $6;
   $139 = $13;
   $140 = ((($139)) + 24|0);
   HEAP32[$140>>2] = $138;
   $141 = $7;
   $142 = $13;
   $143 = ((($142)) + 28|0);
   HEAP32[$143>>2] = $141;
   $144 = $1;
   $145 = ((($144)) + 80|0);
   $146 = $13;
   _TokenList_PushBack($145,$146);
   $147 = $3;
   _BasicScanner_Match($147);
   STACKTOP = sp;return;
  }
 }
 $148 = $10;
 $15 = $148;
 $149 = $3;
 _BasicScanner_Match($149);
 $16 = 0;
 while(1) {
  $150 = $10;
  $151 = ((($150)) + 4|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&1;
  if ($153) {
   ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;
   $192 = $3;
   $193 = ((($192)) + 564|0);
   $194 = HEAP32[$193>>2]|0;
   $4 = $194;
   $195 = $3;
   $196 = ((($195)) + 24|0);
   $197 = HEAP32[$196>>2]|0;
   $5 = $197;
   while(1) {
    $198 = $4;
    $199 = ($198|0)==(10);
    $200 = $4;
    $201 = ($200|0)==(5);
    $or$cond = $199 | $201;
    $202 = $4;
    $203 = ($202|0)==(6);
    $or$cond3 = $or$cond | $203;
    $204 = $4;
    $205 = ($204|0)==(7);
    $or$cond5 = $or$cond3 | $205;
    if (!($or$cond5)) {
     break;
    }
    ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;HEAP32[$23+16>>2]=0|0;
    $206 = ((($23)) + 20|0);
    HEAP32[$206>>2] = 0;
    $207 = ((($23)) + 24|0);
    HEAP32[$207>>2] = -1;
    $208 = ((($23)) + 28|0);
    HEAP32[$208>>2] = -1;
    $209 = ((($23)) + 32|0);
    HEAP8[$209>>0] = 1;
    $210 = ((($23)) + 36|0);
    HEAP32[$210>>2] = 0;
    $211 = (_mallocinit(40,$23)|0);
    $22 = $211;
    $212 = $22;
    $213 = $5;
    _LocalStrBuilder_Set($212,$213);
    $214 = $4;
    $215 = $22;
    $216 = ((($215)) + 20|0);
    HEAP32[$216>>2] = $214;
    $217 = $22;
    $218 = ((($217)) + 32|0);
    HEAP8[$218>>0] = 1;
    $219 = $6;
    $220 = $22;
    $221 = ((($220)) + 24|0);
    HEAP32[$221>>2] = $219;
    $222 = $7;
    $223 = $22;
    $224 = ((($223)) + 28|0);
    HEAP32[$224>>2] = $222;
    $225 = $22;
    _TokenList_PushBack($21,$225);
    $226 = $3;
    _BasicScanner_Match($226);
    $227 = $3;
    $228 = ((($227)) + 564|0);
    $229 = HEAP32[$228>>2]|0;
    $4 = $229;
    $230 = $3;
    $231 = ((($230)) + 24|0);
    $232 = HEAP32[$231>>2]|0;
    $5 = $232;
   }
   $233 = $4;
   $234 = ($233|0)==(30);
   if ($234) {
    ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
    ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
    ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
    $235 = $15;
    $236 = HEAP32[$235>>2]|0;
    (_StrBuilder_Set($24,$236)|0);
    $237 = $3;
    $238 = $10;
    _GetMacroArguments($237,$238,$26,$24);
    $239 = $1;
    $240 = ((($239)) + 4|0);
    _ExpandMacroToText($26,$240,0,0,0,0,$25);
    $27 = 0;
    $241 = ((($25)) + 4|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = ($242|0)>(0);
    if ($243) {
     $244 = $1;
     $245 = HEAP32[$25>>2]|0;
     $246 = (_Scanner_FindPreprocessorItem2($244,$245)|0);
     $27 = $246;
    }
    $247 = $27;
    $248 = ($247|0)!=(0|0);
    do {
     if ($248) {
      $249 = $27;
      $250 = ((($249)) + 4|0);
      $251 = HEAP8[$250>>0]|0;
      $252 = $251&1;
      if ($252) {
       $253 = $27;
       $10 = $253;
       break;
      } else {
       $254 = $1;
       $255 = $10;
       $256 = HEAP32[$255>>2]|0;
       $257 = HEAP32[$25>>2]|0;
       (_PushExpandedMacro($254,$256,$257)|0);
       $258 = $1;
       $259 = $10;
       $260 = HEAP32[$259>>2]|0;
       $261 = $6;
       $262 = $7;
       _Scanner_PushToken($258,157,$260,1,$261,$262);
       break;
      }
     } else {
      $263 = $1;
      $264 = $10;
      $265 = HEAP32[$264>>2]|0;
      $266 = HEAP32[$25>>2]|0;
      (_PushExpandedMacro($263,$265,$266)|0);
      $267 = $1;
      $268 = HEAP32[$24>>2]|0;
      $269 = $6;
      $270 = $7;
      _Scanner_PushToken($267,157,$268,1,$269,$270);
      $16 = 1;
     }
    } while(0);
    _PPTokenArray_Destroy($26);
    _StrBuilder_Destroy($25);
    _StrBuilder_Destroy($24);
   } else {
    $271 = $15;
    $272 = $10;
    $273 = ($271|0)!=($272|0);
    if ($273) {
     ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;
     $274 = ((($29)) + 20|0);
     HEAP32[$274>>2] = 0;
     $275 = ((($29)) + 24|0);
     HEAP32[$275>>2] = -1;
     $276 = ((($29)) + 28|0);
     HEAP32[$276>>2] = -1;
     $277 = ((($29)) + 32|0);
     HEAP8[$277>>0] = 1;
     $278 = ((($29)) + 36|0);
     HEAP32[$278>>2] = 0;
     $279 = (_mallocinit(40,$29)|0);
     $28 = $279;
     $280 = $28;
     $281 = $15;
     $282 = HEAP32[$281>>2]|0;
     _LocalStrBuilder_Append($280,$282);
     $283 = $28;
     $284 = ((($283)) + 20|0);
     HEAP32[$284>>2] = 157;
     $285 = $28;
     $286 = ((($285)) + 32|0);
     HEAP8[$286>>0] = 1;
     $287 = $6;
     $288 = $28;
     $289 = ((($288)) + 24|0);
     HEAP32[$289>>2] = $287;
     $290 = $7;
     $291 = $28;
     $292 = ((($291)) + 28|0);
     HEAP32[$292>>2] = $290;
     $293 = $1;
     $294 = ((($293)) + 80|0);
     $295 = $28;
     _TokenList_PushBack($294,$295);
    }
    ;HEAP32[$31>>2]=0|0;HEAP32[$31+4>>2]=0|0;HEAP32[$31+8>>2]=0|0;HEAP32[$31+12>>2]=0|0;HEAP32[$31+16>>2]=0|0;
    $296 = ((($31)) + 20|0);
    HEAP32[$296>>2] = 0;
    $297 = ((($31)) + 24|0);
    HEAP32[$297>>2] = -1;
    $298 = ((($31)) + 28|0);
    HEAP32[$298>>2] = -1;
    $299 = ((($31)) + 32|0);
    HEAP8[$299>>0] = 1;
    $300 = ((($31)) + 36|0);
    HEAP32[$300>>2] = 0;
    $301 = (_mallocinit(40,$31)|0);
    $30 = $301;
    $302 = $30;
    $303 = $10;
    $304 = HEAP32[$303>>2]|0;
    _LocalStrBuilder_Append($302,$304);
    $305 = $30;
    $306 = ((($305)) + 20|0);
    HEAP32[$306>>2] = 9;
    $307 = $30;
    $308 = ((($307)) + 32|0);
    HEAP8[$308>>0] = 1;
    $309 = $6;
    $310 = $30;
    $311 = ((($310)) + 24|0);
    HEAP32[$311>>2] = $309;
    $312 = $7;
    $313 = $30;
    $314 = ((($313)) + 28|0);
    HEAP32[$314>>2] = $312;
    $315 = $1;
    $316 = ((($315)) + 80|0);
    $317 = $30;
    _TokenList_PushBack($316,$317);
    $318 = $15;
    $319 = $10;
    $320 = ($318|0)!=($319|0);
    if ($320) {
     ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;
     $321 = ((($33)) + 20|0);
     HEAP32[$321>>2] = 0;
     $322 = ((($33)) + 24|0);
     HEAP32[$322>>2] = -1;
     $323 = ((($33)) + 28|0);
     HEAP32[$323>>2] = -1;
     $324 = ((($33)) + 32|0);
     HEAP8[$324>>0] = 1;
     $325 = ((($33)) + 36|0);
     HEAP32[$325>>2] = 0;
     $326 = (_mallocinit(40,$33)|0);
     $32 = $326;
     $327 = $32;
     $328 = ((($327)) + 20|0);
     HEAP32[$328>>2] = 158;
     $329 = $32;
     $330 = ((($329)) + 32|0);
     HEAP8[$330>>0] = 1;
     $331 = $6;
     $332 = $32;
     $333 = ((($332)) + 24|0);
     HEAP32[$333>>2] = $331;
     $334 = $7;
     $335 = $32;
     $336 = ((($335)) + 28|0);
     HEAP32[$336>>2] = $334;
     $337 = $1;
     $338 = ((($337)) + 80|0);
     $339 = $32;
     _TokenList_PushBack($338,$339);
    }
    $340 = HEAP32[$21>>2]|0;
    $341 = ($340|0)!=(0|0);
    if ($341) {
     $342 = $1;
     $343 = ((($342)) + 80|0);
     $344 = HEAP32[$21>>2]|0;
     _TokenList_PushBack($343,$344);
     HEAP32[$21>>2] = 0;
     $345 = ((($21)) + 4|0);
     HEAP32[$345>>2] = 0;
    }
    $16 = 1;
   }
   _TokenList_Destroy($21);
  } else {
   ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
   $154 = $10;
   $155 = HEAP32[$154>>2]|0;
   $156 = (_TokenToPPToken(9)|0);
   $157 = (_PPToken_Create($155,$156)|0);
   $18 = $157;
   $158 = $18;
   _PPTokenArray_PushBack($17,$158);
   ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
   $159 = $1;
   $160 = ((($159)) + 4|0);
   _ExpandMacroToText($17,$160,0,0,0,0,$19);
   $20 = 0;
   $161 = ((($19)) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($162|0)>(0);
   if ($163) {
    $164 = $1;
    $165 = HEAP32[$19>>2]|0;
    $166 = (_Scanner_FindPreprocessorItem2($164,$165)|0);
    $20 = $166;
   }
   $167 = $20;
   $168 = ($167|0)!=(0|0);
   do {
    if ($168) {
     $169 = $20;
     $170 = ((($169)) + 4|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = $171&1;
     if ($172) {
      $173 = $20;
      $10 = $173;
      break;
     } else {
      $174 = $1;
      $175 = $10;
      $176 = HEAP32[$175>>2]|0;
      $177 = HEAP32[$19>>2]|0;
      (_PushExpandedMacro($174,$176,$177)|0);
      $178 = $1;
      $179 = $10;
      $180 = HEAP32[$179>>2]|0;
      $181 = $6;
      $182 = $7;
      _Scanner_PushToken($178,157,$180,1,$181,$182);
      $16 = 1;
      break;
     }
    } else {
     $183 = $1;
     $184 = $10;
     $185 = HEAP32[$184>>2]|0;
     $186 = HEAP32[$19>>2]|0;
     (_PushExpandedMacro($183,$185,$186)|0);
     $187 = $1;
     $188 = $10;
     $189 = HEAP32[$188>>2]|0;
     $190 = $6;
     $191 = $7;
     _Scanner_PushToken($187,157,$189,1,$190,$191);
     $16 = 1;
    }
   } while(0);
   _PPTokenArray_Destroy($17);
   _StrBuilder_Destroy($19);
  }
  $346 = $16;
  $347 = $346&1;
  if ($347) {
   label = 40;
   break;
  }
  $348 = $16;
  $349 = $348&1;
  $350 = $349 ^ 1;
  if (!($350)) {
   label = 40;
   break;
  }
 }
 if ((label|0) == 40) {
  STACKTOP = sp;return;
 }
}
function _IsIncludeState($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0);
 $4 = $1;
 $5 = ($4|0)==(1);
 $or$cond = $3 | $5;
 if ($or$cond) {
  $8 = 1;
 } else {
  $6 = $1;
  $7 = ($6|0)==(4);
  $8 = $7;
 }
 STACKTOP = sp;return ($8|0);
}
function _GetMacroArguments($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $20 = $4;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $8 = $22;
 $23 = $4;
 $24 = ((($23)) + 564|0);
 $25 = HEAP32[$24>>2]|0;
 $9 = $25;
 $26 = $5;
 $27 = ((($26)) + 20|0);
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $10 = $29;
 $11 = 0;
 $30 = $9;
 $31 = ($30|0)==(30);
 if ($31) {
  $32 = $5;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_PPToken_Create($33,0)|0);
  $12 = $34;
  $35 = $6;
  $36 = $12;
  _PPTokenArray_PushBack($35,$36);
  $37 = $8;
  $38 = $9;
  $39 = (_TokenToPPToken($38)|0);
  $40 = (_PPToken_Create($37,$39)|0);
  $13 = $40;
  $41 = $6;
  $42 = $13;
  _PPTokenArray_PushBack($41,$42);
  $43 = $7;
  $44 = $8;
  (_StrBuilder_Append($43,$44)|0);
  $45 = $4;
  _BasicScanner_Match($45);
  $46 = $4;
  $47 = ((($46)) + 564|0);
  $48 = HEAP32[$47>>2]|0;
  $9 = $48;
  $49 = $4;
  $50 = ((($49)) + 24|0);
  $51 = HEAP32[$50>>2]|0;
  $8 = $51;
  $11 = 1;
  $14 = 1;
  L3: while(1) {
   $52 = $9;
   $53 = ($52|0)==(30);
   do {
    if ($53) {
     $54 = $8;
     $55 = $9;
     $56 = (_TokenToPPToken($55)|0);
     $57 = (_PPToken_Create($54,$56)|0);
     $15 = $57;
     $58 = $6;
     $59 = $15;
     _PPTokenArray_PushBack($58,$59);
     $60 = $7;
     $61 = $8;
     (_StrBuilder_Append($60,$61)|0);
     $62 = $4;
     _BasicScanner_Match($62);
     $63 = $4;
     $64 = ((($63)) + 564|0);
     $65 = HEAP32[$64>>2]|0;
     $9 = $65;
     $66 = $4;
     $67 = ((($66)) + 24|0);
     $68 = HEAP32[$67>>2]|0;
     $8 = $68;
     $69 = $14;
     $70 = (($69) + 1)|0;
     $14 = $70;
    } else {
     $71 = $9;
     $72 = ($71|0)==(31);
     if ($72) {
      $73 = $14;
      $74 = ($73|0)==(1);
      if ($74) {
       break L3;
      }
      $90 = $14;
      $91 = (($90) + -1)|0;
      $14 = $91;
      $92 = $8;
      $93 = $9;
      $94 = (_TokenToPPToken($93)|0);
      $95 = (_PPToken_Create($92,$94)|0);
      $17 = $95;
      $96 = $6;
      $97 = $17;
      _PPTokenArray_PushBack($96,$97);
      $98 = $7;
      $99 = $8;
      (_StrBuilder_Append($98,$99)|0);
      $100 = $4;
      _BasicScanner_Match($100);
      $101 = $4;
      $102 = ((($101)) + 564|0);
      $103 = HEAP32[$102>>2]|0;
      $9 = $103;
      $104 = $4;
      $105 = ((($104)) + 24|0);
      $106 = HEAP32[$105>>2]|0;
      $8 = $106;
      break;
     }
     $107 = $9;
     $108 = ($107|0)==(34);
     if (!($108)) {
      $128 = $8;
      $129 = $9;
      $130 = (_TokenToPPToken($129)|0);
      $131 = (_PPToken_Create($128,$130)|0);
      $19 = $131;
      $132 = $6;
      $133 = $19;
      _PPTokenArray_PushBack($132,$133);
      $134 = $7;
      $135 = $8;
      (_StrBuilder_Append($134,$135)|0);
      $136 = $4;
      _BasicScanner_Match($136);
      $137 = $4;
      $138 = ((($137)) + 564|0);
      $139 = HEAP32[$138>>2]|0;
      $9 = $139;
      $140 = $4;
      $141 = ((($140)) + 24|0);
      $142 = HEAP32[$141>>2]|0;
      $8 = $142;
      break;
     }
     $109 = $14;
     $110 = ($109|0)==(1);
     if ($110) {
      $111 = $11;
      $112 = (($111) + 1)|0;
      $11 = $112;
     }
     $113 = $8;
     $114 = $9;
     $115 = (_TokenToPPToken($114)|0);
     $116 = (_PPToken_Create($113,$115)|0);
     $18 = $116;
     $117 = $6;
     $118 = $18;
     _PPTokenArray_PushBack($117,$118);
     $119 = $7;
     $120 = $8;
     (_StrBuilder_Append($119,$120)|0);
     $121 = $4;
     _BasicScanner_Match($121);
     $122 = $4;
     $123 = ((($122)) + 564|0);
     $124 = HEAP32[$123>>2]|0;
     $9 = $124;
     $125 = $4;
     $126 = ((($125)) + 24|0);
     $127 = HEAP32[$126>>2]|0;
     $8 = $127;
    }
   } while(0);
  }
  $75 = $8;
  $76 = $9;
  $77 = (_TokenToPPToken($76)|0);
  $78 = (_PPToken_Create($75,$77)|0);
  $16 = $78;
  $79 = $6;
  $80 = $16;
  _PPTokenArray_PushBack($79,$80);
  $81 = $7;
  $82 = $8;
  (_StrBuilder_Append($81,$82)|0);
  $83 = $4;
  _BasicScanner_Match($83);
  $84 = $4;
  $85 = ((($84)) + 564|0);
  $86 = HEAP32[$85>>2]|0;
  $9 = $86;
  $87 = $4;
  $88 = ((($87)) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  $8 = $89;
 }
 $143 = $10;
 $144 = $11;
 $145 = ($143|0)!=($144|0);
 if (!($145)) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Append($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $3;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  _LocalStrBuilder_AppendChar($7,$9);
  $10 = $3;
  $11 = ((($10)) + 1|0);
  $3 = $11;
 }
 STACKTOP = sp;return;
}
function _Scanner_BuyTokens($0) {
 $0 = $0|0;
 var $$old = 0, $$old6 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 168|0;
 $9 = sp + 152|0;
 $14 = sp + 128|0;
 $17 = sp + 104|0;
 $26 = sp + 80|0;
 $27 = sp + 68|0;
 $33 = sp + 16|0;
 $1 = $0;
 $34 = $1;
 $35 = ((($34)) + 76|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = $1;
 $39 = (_Scanner_Top($38)|0);
 $2 = $39;
 $40 = $2;
 $41 = ($40|0)==(0|0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = $2;
 $43 = ((($42)) + 564|0);
 $44 = HEAP32[$43>>2]|0;
 $3 = $44;
 $45 = $2;
 $46 = ((($45)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $4 = $47;
 $48 = $2;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $5 = $50;
 $51 = $2;
 $52 = ((($51)) + 560|0);
 $53 = HEAP32[$52>>2]|0;
 $6 = $53;
 $54 = $3;
 $55 = ($54|0)==(1);
 if ($55) {
  $56 = $2;
  _BasicScanner_Match($56);
  $57 = $2;
  $58 = ((($57)) + 564|0);
  $59 = HEAP32[$58>>2]|0;
  $3 = $59;
  $60 = $2;
  $61 = ((($60)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  $4 = $62;
 }
 while(1) {
  $63 = $3;
  $64 = ($63|0)==(2);
  if (!($64)) {
   break;
  }
  $65 = $1;
  _BasicScannerStack_Pop($65);
  $66 = $1;
  $67 = (_Scanner_Top($66)|0);
  $2 = $67;
  $68 = $2;
  $69 = ($68|0)!=(0|0);
  if (!($69)) {
   break;
  }
  $70 = $2;
  $71 = ((($70)) + 564|0);
  $72 = HEAP32[$71>>2]|0;
  $3 = $72;
  $73 = $2;
  $74 = ((($73)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $4 = $75;
 }
 $76 = $3;
 $77 = ($76|0)==(159);
 if ($77) {
  $78 = $1;
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 568|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0|0);
  if ($82) {
   $3 = 2;
  }
 }
 $83 = $3;
 $84 = ($83|0)==(2);
 if ($84) {
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
  $85 = ((($8)) + 20|0);
  HEAP32[$85>>2] = 0;
  $86 = ((($8)) + 24|0);
  HEAP32[$86>>2] = -1;
  $87 = ((($8)) + 28|0);
  HEAP32[$87>>2] = -1;
  $88 = ((($8)) + 32|0);
  HEAP8[$88>>0] = 1;
  $89 = ((($8)) + 36|0);
  HEAP32[$89>>2] = 0;
  $90 = (_mallocinit(40,$8)|0);
  $7 = $90;
  $91 = $7;
  $92 = ((($91)) + 20|0);
  HEAP32[$92>>2] = 2;
  $93 = $7;
  $94 = ((($93)) + 32|0);
  HEAP8[$94>>0] = 1;
  $95 = $5;
  $96 = $7;
  $97 = ((($96)) + 24|0);
  HEAP32[$97>>2] = $95;
  $98 = $6;
  $99 = $7;
  $100 = ((($99)) + 28|0);
  HEAP32[$100>>2] = $98;
  $101 = $1;
  $102 = ((($101)) + 80|0);
  $103 = $7;
  _TokenList_PushBack($102,$103);
  STACKTOP = sp;return;
 }
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $104 = $1;
 $105 = (_StateTop($104)|0);
 $10 = $105;
 $106 = $10;
 $107 = (_IsIncludeState($106)|0);
 $108 = $107&1;
 $11 = $108;
 $109 = $3;
 $110 = ($109|0)==(21);
 do {
  if ($110) {
   $111 = $2;
   $112 = ((($111)) + 24|0);
   $113 = HEAP32[$112>>2]|0;
   (_StrBuilder_Append($9,$113)|0);
   $114 = $2;
   _BasicScanner_Match($114);
   $115 = $2;
   _Scanner_MatchAllPreprocessorSpaces($115,$9);
   $116 = $2;
   $117 = ((($116)) + 24|0);
   $118 = HEAP32[$117>>2]|0;
   $4 = $118;
   $119 = $2;
   $120 = ((($119)) + 564|0);
   $121 = HEAP32[$120>>2]|0;
   $3 = $121;
   $122 = $4;
   $123 = (_FindPreToken($122)|0);
   $12 = $123;
   $124 = $12;
   $125 = ($124|0)==(144);
   if ($125) {
    $126 = $4;
    (_StrBuilder_Append($9,$126)|0);
    $127 = $2;
    _BasicScanner_Match($127);
    $128 = $2;
    $129 = ((($128)) + 24|0);
    $130 = HEAP32[$129>>2]|0;
    $4 = $130;
    $131 = $2;
    $132 = ((($131)) + 564|0);
    $133 = HEAP32[$132>>2]|0;
    $3 = $133;
    $134 = $10;
    $135 = (_IsIncludeState($134)|0);
    if (!($135)) {
     $200 = $1;
     $201 = HEAP32[$9>>2]|0;
     $202 = $5;
     $203 = $6;
     _Scanner_PushToken($200,10,$201,0,$202,$203);
     break;
    }
    $136 = $2;
    _Scanner_MatchAllPreprocessorSpaces($136,$9);
    $137 = $2;
    $138 = ((($137)) + 24|0);
    $139 = HEAP32[$138>>2]|0;
    $4 = $139;
    $140 = $2;
    $141 = ((($140)) + 564|0);
    $142 = HEAP32[$141>>2]|0;
    $3 = $142;
    $143 = $3;
    $144 = ($143|0)==(8);
    if ($144) {
     $145 = $4;
     $146 = ((($145)) + 1|0);
     $147 = (___strdup($146)|0);
     $13 = $147;
     $148 = $4;
     (_StrBuilder_Append($9,$148)|0);
     $149 = $2;
     _BasicScanner_Match($149);
     $150 = $13;
     $151 = $13;
     $152 = (_strlen($151)|0);
     $153 = (($152) - 1)|0;
     $154 = (($150) + ($153)|0);
     HEAP8[$154>>0] = 0;
     $155 = $2;
     _IgnorePreProcessorv2($155,$9);
     $156 = $1;
     $157 = HEAP32[$9>>2]|0;
     $158 = $5;
     $159 = $6;
     _Scanner_PushToken($156,144,$157,1,$158,$159);
     $160 = $1;
     $161 = $13;
     _Scanner_IncludeFile($160,$161,0,1);
     $162 = $13;
     _free($162);
     break;
    }
    $163 = $3;
    $164 = ($163|0)==(41);
    if (!($164)) {
     break;
    }
    $165 = $4;
    (_StrBuilder_Append($9,$165)|0);
    $166 = $2;
    _BasicScanner_Match($166);
    $167 = $2;
    $168 = ((($167)) + 24|0);
    $169 = HEAP32[$168>>2]|0;
    $4 = $169;
    $170 = $2;
    $171 = ((($170)) + 564|0);
    $172 = HEAP32[$171>>2]|0;
    $3 = $172;
    ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
    while(1) {
     $173 = $4;
     (_StrBuilder_Append($9,$173)|0);
     $174 = $3;
     $175 = ($174|0)==(43);
     if ($175) {
      label = 22;
      break;
     }
     $183 = $3;
     $184 = ($183|0)==(17);
     if ($184) {
      break;
     }
     $185 = $4;
     (_StrBuilder_Append($14,$185)|0);
     $186 = $2;
     _BasicScanner_Match($186);
     $187 = $2;
     $188 = ((($187)) + 24|0);
     $189 = HEAP32[$188>>2]|0;
     $4 = $189;
     $190 = $2;
     $191 = ((($190)) + 564|0);
     $192 = HEAP32[$191>>2]|0;
     $3 = $192;
    }
    if ((label|0) == 22) {
     $176 = $2;
     _BasicScanner_Match($176);
     $177 = $2;
     $178 = ((($177)) + 24|0);
     $179 = HEAP32[$178>>2]|0;
     $4 = $179;
     $180 = $2;
     $181 = ((($180)) + 564|0);
     $182 = HEAP32[$181>>2]|0;
     $3 = $182;
    }
    $193 = $2;
    _IgnorePreProcessorv2($193,$9);
    $194 = $1;
    $195 = HEAP32[$9>>2]|0;
    $196 = $5;
    $197 = $6;
    _Scanner_PushToken($194,144,$195,1,$196,$197);
    $198 = $1;
    $199 = HEAP32[$14>>2]|0;
    _Scanner_IncludeFile($198,$199,1,1);
    _StrBuilder_Destroy($14);
    break;
   }
   $204 = $12;
   $205 = ($204|0)==(145);
   if ($205) {
    $206 = $4;
    (_StrBuilder_Append($9,$206)|0);
    $207 = $2;
    _BasicScanner_Match($207);
    $208 = $10;
    $209 = (_IsIncludeState($208)|0);
    $210 = $2;
    if (!($209)) {
     _IgnorePreProcessorv2($210,$9);
     $295 = $1;
     $296 = $12;
     $297 = HEAP32[$9>>2]|0;
     $298 = $5;
     $299 = $6;
     _Scanner_PushToken($295,$296,$297,0,$298,$299);
     break;
    }
    _Scanner_MatchAllPreprocessorSpaces($210,$9);
    $211 = $2;
    $212 = (_BasicScanner_IsLexeme($211,5408)|0);
    $213 = $1;
    $214 = (_Scanner_Top($213)|0);
    if ($212) {
     $215 = ((($214)) + 36|0);
     $15 = $215;
     $216 = $1;
     $217 = ((($216)) + 28|0);
     $218 = $15;
     $219 = (_FileInfoMap_Find($217,$218)|0);
     $16 = $219;
     $220 = $16;
     $221 = ($220|0)==(0|0);
     if ($221) {
      HEAP32[$17>>2] = 0;
      $222 = ((($17)) + 4|0);
      HEAP32[$222>>2] = 0;
      $223 = ((($17)) + 8|0);
      HEAP32[$223>>2] = 0;
      $224 = ((($17)) + 12|0);
      HEAP8[$224>>0] = 0;
      $225 = (_mallocinit(16,$17)|0);
      $16 = $225;
      $226 = $16;
      $227 = ((($226)) + 12|0);
      HEAP8[$227>>0] = 1;
      $228 = $1;
      $229 = ((($228)) + 28|0);
      $230 = $15;
      $231 = $16;
      (_FileInfoMap_Set($229,$230,$231)|0);
     } else {
      $232 = $16;
      $233 = ((($232)) + 12|0);
      HEAP8[$233>>0] = 1;
     }
     $234 = $2;
     _IgnorePreProcessorv2($234,$9);
     $235 = $1;
     $236 = HEAP32[$9>>2]|0;
     $237 = $5;
     $238 = $6;
     _Scanner_PushToken($235,145,$236,1,$237,$238);
     break;
    }
    $239 = (_BasicScanner_IsLexeme($214,5413)|0);
    if ($239) {
     $240 = $4;
     (_StrBuilder_Append($9,$240)|0);
     $241 = $2;
     _BasicScanner_Match($241);
     $242 = $10;
     $243 = (_IsIncludeState($242)|0);
     $244 = $1;
     if ($243) {
      _GetDefineString($244,$9);
      $245 = $2;
      _IgnorePreProcessorv2($245,$9);
      $246 = $1;
      $247 = HEAP32[$9>>2]|0;
      $248 = $5;
      $249 = $6;
      _Scanner_PushToken($246,145,$247,1,$248,$249);
      break;
     } else {
      $250 = $12;
      $251 = HEAP32[$9>>2]|0;
      $252 = $5;
      $253 = $6;
      _Scanner_PushToken($244,$250,$251,0,$252,$253);
      break;
     }
    }
    $254 = $1;
    $255 = (_Scanner_Top($254)|0);
    $256 = (_BasicScanner_IsLexeme($255,5421)|0);
    if ($256) {
     $257 = $4;
     (_StrBuilder_Append($9,$257)|0);
     $258 = $2;
     _BasicScanner_Match($258);
     $259 = $2;
     _Scanner_MatchAllPreprocessorSpaces($259,$9);
     $260 = $2;
     $261 = ((($260)) + 24|0);
     $262 = HEAP32[$261>>2]|0;
     $4 = $262;
     $263 = $4;
     $264 = ((($263)) + 1|0);
     $265 = (___strdup($264)|0);
     $18 = $265;
     $266 = $1;
     _Scanner_Match($266);
     $267 = $18;
     $268 = $18;
     $269 = (_strlen($268)|0);
     $270 = (($269) - 1)|0;
     $271 = (($267) + ($270)|0);
     HEAP8[$271>>0] = 0;
     $272 = $1;
     $273 = ((($272)) + 40|0);
     $274 = $18;
     (_StrArray_Push($273,$274)|0);
     $275 = $18;
     _free($275);
     $276 = $2;
     _IgnorePreProcessorv2($276,$9);
     $277 = $1;
     $278 = HEAP32[$9>>2]|0;
     $279 = $5;
     $280 = $6;
     _Scanner_PushToken($277,145,$278,1,$279,$280);
     break;
    }
    $281 = $2;
    $282 = (_BasicScanner_IsLexeme($281,5425)|0);
    if ($282) {
     (_StrBuilder_Append($9,5425)|0);
     $283 = $2;
     _BasicScanner_Match($283);
     $284 = $2;
     _Scanner_MatchAllPreprocessorSpaces($284,$9);
     $285 = $2;
     _IgnorePreProcessorv2($285,$9);
     $286 = $1;
     $287 = HEAP32[$9>>2]|0;
     $288 = $5;
     $289 = $6;
     _Scanner_PushToken($286,145,$287,1,$288,$289);
     break;
    } else {
     $290 = $2;
     _IgnorePreProcessorv2($290,$9);
     $291 = $1;
     $292 = HEAP32[$9>>2]|0;
     $293 = $5;
     $294 = $6;
     _Scanner_PushToken($291,145,$292,1,$293,$294);
     break;
    }
   }
   $300 = $12;
   $301 = ($300|0)==(146);
   $302 = $12;
   $303 = ($302|0)==(149);
   $or$cond = $301 | $303;
   $304 = $12;
   $305 = ($304|0)==(148);
   $or$cond3 = $or$cond | $305;
   if ($or$cond3) {
    $306 = $2;
    $307 = ((($306)) + 24|0);
    $308 = HEAP32[$307>>2]|0;
    (_StrBuilder_Append($9,$308)|0);
    $309 = $2;
    _BasicScanner_Match($309);
    $310 = $2;
    _Scanner_MatchAllPreprocessorSpaces($310,$9);
    $311 = $2;
    $312 = ((($311)) + 24|0);
    $313 = HEAP32[$312>>2]|0;
    $4 = $313;
    $314 = $10;
    L69: do {
     switch ($314|0) {
     case 4: case 1: case 0:  {
      $19 = 0;
      $315 = $12;
      $316 = ($315|0)==(146);
      $317 = $1;
      do {
       if ($316) {
        $318 = (_EvalPre($317,$9)|0);
        $19 = $318;
       } else {
        $319 = $4;
        $320 = (_Scanner_FindPreprocessorItem2($317,$319)|0);
        $321 = ($320|0)!=(0|0);
        $322 = $321&1;
        $20 = $322;
        $323 = $12;
        $324 = ($323|0)==(149);
        $325 = $20;
        $326 = $325&1;
        if ($324) {
         $327 = $326 ? 1 : 0;
         $19 = $327;
         break;
        } else {
         $328 = $326 ^ 1;
         $329 = $328 ? 1 : 0;
         $19 = $329;
         break;
        }
       }
      } while(0);
      $330 = $19;
      $331 = ($330|0)!=(0);
      $332 = $1;
      if ($331) {
       _StatePush($332,1);
       break L69;
      } else {
       _StatePush($332,2);
       break L69;
      }
      break;
     }
     case 2:  {
      $333 = $1;
      _StatePush($333,2);
      break;
     }
     case 3:  {
      $334 = $1;
      _StatePush($334,3);
      break;
     }
     default: {
     }
     }
    } while(0);
    $335 = $1;
    $336 = (_StateTop($335)|0);
    $10 = $336;
    $337 = $10;
    $338 = (_IsIncludeState($337)|0);
    $339 = $338&1;
    $21 = $339;
    $340 = $2;
    _IgnorePreProcessorv2($340,$9);
    $341 = $1;
    $342 = $12;
    $343 = HEAP32[$9>>2]|0;
    $344 = $21;
    $345 = $344&1;
    $346 = $5;
    $347 = $6;
    _Scanner_PushToken($341,$342,$343,$345,$346,$347);
    break;
   }
   $348 = $12;
   $349 = ($348|0)==(147);
   if ($349) {
    $350 = $2;
    $351 = ((($350)) + 24|0);
    $352 = HEAP32[$351>>2]|0;
    (_StrBuilder_Append($9,$352)|0);
    $353 = $2;
    _BasicScanner_Match($353);
    $354 = $2;
    _Scanner_MatchAllPreprocessorSpaces($354,$9);
    $355 = $10;
    L87: do {
     switch ($355|0) {
     case 1: case 0:  {
      $356 = $1;
      $357 = ((($356)) + 16|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $1;
      $360 = ((($359)) + 16|0);
      $361 = ((($360)) + 4|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = (($362) - 1)|0;
      $364 = (($358) + ($363<<2)|0);
      HEAP32[$364>>2] = 3;
      break;
     }
     case 2:  {
      $365 = $1;
      $366 = (_EvalPre($365,$9)|0);
      $22 = $366;
      $367 = $1;
      $368 = ((($367)) + 16|0);
      $369 = ((($368)) + 4|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = ($370|0)>=(2);
      if (!($371)) {
       $405 = $22;
       $406 = ($405|0)!=(0);
       if (!($406)) {
        break L87;
       }
       $407 = $1;
       $408 = ((($407)) + 16|0);
       $409 = HEAP32[$408>>2]|0;
       $410 = $1;
       $411 = ((($410)) + 16|0);
       $412 = ((($411)) + 4|0);
       $413 = HEAP32[$412>>2]|0;
       $414 = (($413) - 1)|0;
       $415 = (($409) + ($414<<2)|0);
       HEAP32[$415>>2] = 1;
       break L87;
      }
      $372 = $1;
      $373 = ((($372)) + 16|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = $1;
      $376 = ((($375)) + 16|0);
      $377 = ((($376)) + 4|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = (($378) - 2)|0;
      $380 = (($374) + ($379<<2)|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = ($381|0)==(1);
      if ($382) {
       $$old = $22;
       $$old6 = ($$old|0)!=(0);
       if (!($$old6)) {
        break L87;
       }
      } else {
       $383 = $1;
       $384 = ((($383)) + 16|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = $1;
       $387 = ((($386)) + 16|0);
       $388 = ((($387)) + 4|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = (($389) - 2)|0;
       $391 = (($385) + ($390<<2)|0);
       $392 = HEAP32[$391>>2]|0;
       $393 = ($392|0)==(4);
       $394 = $22;
       $395 = ($394|0)!=(0);
       $or$cond7 = $393 & $395;
       if (!($or$cond7)) {
        break L87;
       }
      }
      $396 = $1;
      $397 = ((($396)) + 16|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = $1;
      $400 = ((($399)) + 16|0);
      $401 = ((($400)) + 4|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = (($402) - 1)|0;
      $404 = (($398) + ($403<<2)|0);
      HEAP32[$404>>2] = 1;
      break;
     }
     default: {
     }
     }
    } while(0);
    $416 = $1;
    $417 = (_StateTop($416)|0);
    $10 = $417;
    $418 = $10;
    $419 = (_IsIncludeState($418)|0);
    $420 = $419&1;
    $23 = $420;
    $421 = $2;
    _IgnorePreProcessorv2($421,$9);
    $422 = $1;
    $423 = HEAP32[$9>>2]|0;
    $424 = $23;
    $425 = $424&1;
    $426 = $5;
    $427 = $6;
    _Scanner_PushToken($422,147,$423,$425,$426,$427);
    break;
   }
   $428 = $12;
   $429 = ($428|0)==(150);
   if ($429) {
    $430 = $2;
    $431 = ((($430)) + 24|0);
    $432 = HEAP32[$431>>2]|0;
    (_StrBuilder_Append($9,$432)|0);
    $433 = $2;
    _BasicScanner_Match($433);
    $434 = $2;
    _Scanner_MatchAllPreprocessorSpaces($434,$9);
    $435 = $2;
    _IgnorePreProcessorv2($435,$9);
    $436 = $1;
    _StatePop($436);
    $437 = $1;
    $438 = (_StateTop($437)|0);
    $10 = $438;
    $439 = $10;
    $440 = (_IsIncludeState($439)|0);
    $441 = $440&1;
    $24 = $441;
    $442 = $1;
    $443 = HEAP32[$9>>2]|0;
    $444 = $24;
    $445 = $444&1;
    $446 = $5;
    $447 = $6;
    _Scanner_PushToken($442,150,$443,$445,$446,$447);
    break;
   }
   $448 = $12;
   $449 = ($448|0)==(151);
   if ($449) {
    $450 = $2;
    $451 = ((($450)) + 24|0);
    $452 = HEAP32[$451>>2]|0;
    (_StrBuilder_Append($9,$452)|0);
    $453 = $2;
    _BasicScanner_Match($453);
    $454 = $10;
    L105: do {
     switch ($454|0) {
     case 2:  {
      $464 = $1;
      $465 = ((($464)) + 16|0);
      $466 = ((($465)) + 4|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = ($467|0)>=(2);
      $469 = $1;
      $470 = ((($469)) + 16|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = $1;
      $473 = ((($472)) + 16|0);
      $474 = ((($473)) + 4|0);
      $475 = HEAP32[$474>>2]|0;
      if (!($468)) {
       $500 = (($475) - 1)|0;
       $501 = (($471) + ($500<<2)|0);
       HEAP32[$501>>2] = 4;
       break L105;
      }
      $476 = (($475) - 2)|0;
      $477 = (($471) + ($476<<2)|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($478|0)==(1);
      if (!($479)) {
       $480 = $1;
       $481 = ((($480)) + 16|0);
       $482 = HEAP32[$481>>2]|0;
       $483 = $1;
       $484 = ((($483)) + 16|0);
       $485 = ((($484)) + 4|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (($486) - 2)|0;
       $488 = (($482) + ($487<<2)|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = ($489|0)==(4);
       if (!($490)) {
        break L105;
       }
      }
      $491 = $1;
      $492 = ((($491)) + 16|0);
      $493 = HEAP32[$492>>2]|0;
      $494 = $1;
      $495 = ((($494)) + 16|0);
      $496 = ((($495)) + 4|0);
      $497 = HEAP32[$496>>2]|0;
      $498 = (($497) - 1)|0;
      $499 = (($493) + ($498<<2)|0);
      HEAP32[$499>>2] = 4;
      break;
     }
     case 1:  {
      $455 = $1;
      $456 = ((($455)) + 16|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = $1;
      $459 = ((($458)) + 16|0);
      $460 = ((($459)) + 4|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = (($461) - 1)|0;
      $463 = (($457) + ($462<<2)|0);
      HEAP32[$463>>2] = 3;
      break;
     }
     default: {
     }
     }
    } while(0);
    $502 = $1;
    $503 = (_StateTop($502)|0);
    $10 = $503;
    $504 = $10;
    $505 = (_IsIncludeState($504)|0);
    $506 = $505&1;
    $25 = $506;
    $507 = $2;
    _IgnorePreProcessorv2($507,$9);
    $508 = $1;
    $509 = HEAP32[$9>>2]|0;
    $510 = $25;
    $511 = $510&1;
    $512 = $5;
    $513 = $6;
    _Scanner_PushToken($508,151,$509,$511,$512,$513);
    break;
   }
   $514 = $12;
   $515 = ($514|0)==(152);
   if ($515) {
    $516 = $4;
    (_StrBuilder_Append($9,$516)|0);
    $517 = $2;
    _BasicScanner_Match($517);
    $518 = $10;
    $519 = (_IsIncludeState($518)|0);
    if ($519) {
     ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
     (_StrBuilder_Append($26,5432)|0);
     $520 = $1;
     _GetDefineString($520,$26);
     $521 = $1;
     $522 = HEAP32[$26>>2]|0;
     _Scanner_SetError($521,$522,$vararg_buffer);
     _StrBuilder_Destroy($26);
     $523 = $2;
     _IgnorePreProcessorv2($523,$9);
     $524 = $1;
     $525 = HEAP32[$9>>2]|0;
     $526 = $5;
     $527 = $6;
     _Scanner_PushToken($524,152,$525,1,$526,$527);
     break;
    } else {
     $528 = $1;
     $529 = $12;
     $530 = HEAP32[$9>>2]|0;
     $531 = $5;
     $532 = $6;
     _Scanner_PushToken($528,$529,$530,0,$531,$532);
     break;
    }
   }
   $533 = $12;
   $534 = ($533|0)==(153);
   if ($534) {
    $535 = $4;
    (_StrBuilder_Append($9,$535)|0);
    $536 = $2;
    _BasicScanner_Match($536);
    $537 = $10;
    $538 = (_IsIncludeState($537)|0);
    if ($538) {
     ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
     (_StrBuilder_Append($27,5444)|0);
     $539 = $1;
     _GetDefineString($539,$27);
     $540 = $1;
     $541 = HEAP32[$27>>2]|0;
     _Scanner_SetWarning($540,$541,$vararg_buffer8);
     _StrBuilder_Destroy($27);
     $542 = $2;
     _IgnorePreProcessorv2($542,$9);
     $543 = $1;
     $544 = HEAP32[$9>>2]|0;
     $545 = $5;
     $546 = $6;
     _Scanner_PushToken($543,153,$544,1,$545,$546);
     break;
    } else {
     $547 = $1;
     $548 = $12;
     $549 = HEAP32[$9>>2]|0;
     $550 = $5;
     $551 = $6;
     _Scanner_PushToken($547,$548,$549,0,$550,$551);
     break;
    }
   }
   $552 = $12;
   $553 = ($552|0)==(154);
   if ($553) {
    $554 = $10;
    $555 = (_IsIncludeState($554)|0);
    if ($555) {
     $556 = $2;
     $557 = ((($556)) + 24|0);
     $558 = HEAP32[$557>>2]|0;
     (_StrBuilder_Append($9,$558)|0);
     $559 = $2;
     _BasicScanner_Match($559);
     $560 = $2;
     _IgnorePreProcessorv2($560,$9);
     $561 = $1;
     $562 = HEAP32[$9>>2]|0;
     $563 = $5;
     $564 = $6;
     _Scanner_PushToken($561,154,$562,1,$563,$564);
     break;
    } else {
     $565 = $1;
     $566 = $12;
     $567 = HEAP32[$9>>2]|0;
     $568 = $5;
     $569 = $6;
     _Scanner_PushToken($565,$566,$567,0,$568,$569);
     break;
    }
   }
   $570 = $12;
   $571 = ($570|0)==(155);
   if ($571) {
    $572 = $4;
    (_StrBuilder_Append($9,$572)|0);
    $573 = $2;
    _BasicScanner_Match($573);
    $574 = $2;
    _Scanner_MatchAllPreprocessorSpaces($574,$9);
    $575 = $2;
    $576 = ((($575)) + 24|0);
    $577 = HEAP32[$576>>2]|0;
    $28 = $577;
    $578 = $10;
    $579 = (_IsIncludeState($578)|0);
    $580 = $579&1;
    $29 = $580;
    $581 = $29;
    $582 = $581&1;
    if ($582) {
     $583 = $1;
     $584 = ((($583)) + 4|0);
     $585 = $28;
     (_MacroMap_RemoveKey($584,$585)|0);
    }
    $586 = $2;
    _IgnorePreProcessorv2($586,$9);
    $587 = $1;
    $588 = HEAP32[$9>>2]|0;
    $589 = $29;
    $590 = $589&1;
    $591 = $5;
    $592 = $6;
    _Scanner_PushToken($587,156,$588,$590,$591,$592);
    break;
   }
   $593 = $12;
   $594 = ($593|0)==(156);
   if ($594) {
    $595 = $4;
    (_StrBuilder_Append($9,$595)|0);
    $596 = $2;
    _BasicScanner_Match($596);
    $597 = $2;
    _Scanner_MatchAllPreprocessorSpaces($597,$9);
    $598 = $10;
    $599 = (_IsIncludeState($598)|0);
    $600 = $599&1;
    $30 = $600;
    $601 = $30;
    $602 = $601&1;
    if ($602) {
     $603 = $1;
     _ParsePreDefinev2($603,$9);
    }
    $604 = $2;
    _IgnorePreProcessorv2($604,$9);
    $605 = $1;
    $606 = HEAP32[$9>>2]|0;
    $607 = $30;
    $608 = $607&1;
    $609 = $5;
    $610 = $6;
    _Scanner_PushToken($605,156,$606,$608,$609,$610);
   }
  } else {
   $611 = $3;
   $612 = ($611|0)==(142);
   $613 = $3;
   $614 = ($613|0)==(143);
   $or$cond5 = $612 | $614;
   if (!($or$cond5)) {
    $638 = $3;
    $639 = ($638|0)==(9);
    if ($639) {
     $640 = $1;
     _Scanner_BuyIdentifierThatCanExpandAndCollapse($640);
     break;
    } else {
     ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;
     $641 = ((($33)) + 20|0);
     HEAP32[$641>>2] = 0;
     $642 = ((($33)) + 24|0);
     HEAP32[$642>>2] = -1;
     $643 = ((($33)) + 28|0);
     HEAP32[$643>>2] = -1;
     $644 = ((($33)) + 32|0);
     HEAP8[$644>>0] = 1;
     $645 = ((($33)) + 36|0);
     HEAP32[$645>>2] = 0;
     $646 = (_mallocinit(40,$33)|0);
     $32 = $646;
     $647 = $32;
     $648 = $2;
     $649 = ((($648)) + 24|0);
     $650 = HEAP32[$649>>2]|0;
     _LocalStrBuilder_Set($647,$650);
     $651 = $2;
     $652 = ((($651)) + 564|0);
     $653 = HEAP32[$652>>2]|0;
     $654 = $32;
     $655 = ((($654)) + 20|0);
     HEAP32[$655>>2] = $653;
     $656 = $11;
     $657 = $656&1;
     $658 = $32;
     $659 = ((($658)) + 32|0);
     $660 = $657&1;
     HEAP8[$659>>0] = $660;
     $661 = $5;
     $662 = $32;
     $663 = ((($662)) + 24|0);
     HEAP32[$663>>2] = $661;
     $664 = $6;
     $665 = $32;
     $666 = ((($665)) + 28|0);
     HEAP32[$666>>2] = $664;
     $667 = $1;
     $668 = ((($667)) + 80|0);
     $669 = $32;
     _TokenList_PushBack($668,$669);
     $670 = $2;
     _BasicScanner_Match($670);
     break;
    }
   }
   $615 = $2;
   _BasicScanner_Match($615);
   $31 = 0;
   while(1) {
    $616 = $2;
    $617 = ((($616)) + 564|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = ($618|0)==(30);
    if ($619) {
     $620 = $31;
     $621 = (($620) + 1)|0;
     $31 = $621;
    } else {
     $622 = $2;
     $623 = ((($622)) + 564|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = ($624|0)==(31);
     if ($625) {
      $626 = $31;
      $627 = (($626) + -1)|0;
      $31 = $627;
     }
    }
    $628 = $2;
    _BasicScanner_Match($628);
    $629 = $31;
    $630 = ($629|0)==(0);
    if ($630) {
     break;
    }
    $631 = $2;
    $632 = ((($631)) + 564|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = ($633|0)==(2);
    if ($634) {
     break;
    }
   }
   $635 = $1;
   $636 = $5;
   $637 = $6;
   _Scanner_PushToken($635,145,16416,0,$636,$637);
  }
 } while(0);
 _StrBuilder_Destroy($9);
 STACKTOP = sp;return;
}
function _BasicScannerStack_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_BasicScannerStack_PopGet($2)|0);
 _BasicScanner_Delete($3);
 STACKTOP = sp;return;
}
function _Scanner_Match($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 80|0);
 _TokenList_PopFront($7);
 $8 = $1;
 $9 = ((($8)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 _Scanner_BuyTokens($12);
 STACKTOP = sp;return;
}
function _Scanner_TokenAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 2;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _Scanner_LexemeAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $2 = $12;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $2 = 16416;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _Scanner_IsActiveAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 32|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&1;
  $$expand_i1_val = $14&1;
  HEAP8[$2>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$2>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$2>>0]|0;
 $15 = $$pre_trunc&1;
 STACKTOP = sp;return ($15|0);
}
function _AddStandardMacro($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 dest=$7; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (_mallocinit(36,$7)|0);
 $6 = $8;
 $9 = $4;
 $10 = (___strdup($9)|0);
 $11 = $6;
 HEAP32[$11>>2] = $10;
 $12 = $6;
 $13 = ((($12)) + 8|0);
 $14 = $5;
 $15 = (_PPToken_Create($14,6)|0);
 _PPTokenArray_PushBack($13,$15);
 $16 = $6;
 $17 = ((($16)) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 $19 = ((($18)) + 4|0);
 $20 = $4;
 $21 = $6;
 (_MacroMap_SetAt($19,$20,$21)|0);
 STACKTOP = sp;return 1;
}
function _PrintPreprocessedToStringCore2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $6 = $3;
  $7 = (_Scanner_TokenAt($6,0)|0);
  $8 = ($7|0)!=(2);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = (_Scanner_TokenAt($9,0)|0);
  $4 = $10;
  $11 = $3;
  $12 = (_Scanner_LexemeAt($11,0)|0);
  $5 = $12;
  $13 = $3;
  $14 = (_Scanner_IsActiveAt($13,0)|0);
  L4: do {
   if ($14) {
    $15 = $4;
    switch ($15|0) {
    case 159: case 158: case 157: case 1:  {
     break L4;
     break;
    }
    case 156: case 155: case 154: case 153: case 152: case 151: case 150: case 149: case 148: case 147: case 146: case 145: case 144:  {
     $16 = $2;
     (_StrBuilder_Append($16,2320)|0);
     break L4;
     break;
    }
    case 7: case 6: case 5: case 4:  {
     $17 = $2;
     (_StrBuilder_Append($17,2318)|0);
     break L4;
     break;
    }
    default: {
     $18 = $2;
     $19 = $5;
     (_StrBuilder_Append($18,$19)|0);
     break L4;
    }
    }
   }
  } while(0);
  $20 = $3;
  _Scanner_Match($20);
 }
 STACKTOP = sp;return;
}
function _PrintPreprocessedToString2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $6 = sp + 260|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 (_Scanner_InitString($6,5467,$8)|0);
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  _memset(($7|0),0,260)|0;
  $11 = $5;
  _GetFullPathS($11,$7);
  _Scanner_IncludeFile($6,$7,2,1);
  _Scanner_Match($6);
 }
 $12 = $3;
 _PrintPreprocessedToStringCore2($12,$6);
 _Scanner_Destroy($6);
 STACKTOP = sp;return;
}
function _Scanner_ScannerItemAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $10 = $2;
 $11 = ((($10)) + 76|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 if ($13) {
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $5 = 0;
 $14 = $2;
 $15 = ((($14)) + 80|0);
 $16 = HEAP32[$15>>2]|0;
 $6 = $16;
 while(1) {
  $17 = $6;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
  $21 = $6;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $6 = $23;
 }
 $24 = $3;
 $25 = $5;
 $26 = ($24|0)>=($25|0);
 if ($26) {
  $27 = $5;
  $7 = $27;
  while(1) {
   $28 = $7;
   $29 = $3;
   $30 = ($28|0)<=($29|0);
   $31 = $2;
   if (!($30)) {
    break;
   }
   _Scanner_BuyTokens($31);
   $32 = $7;
   $33 = (($32) + 1)|0;
   $7 = $33;
  }
  $34 = ((($31)) + 80|0);
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $4 = $36;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $8 = 0;
 $37 = $2;
 $38 = ((($37)) + 80|0);
 $39 = HEAP32[$38>>2]|0;
 $9 = $39;
 while(1) {
  $40 = $9;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   label = 15;
   break;
  }
  $42 = $8;
  $43 = $3;
  $44 = ($42|0)==($43|0);
  if ($44) {
   break;
  }
  $46 = $8;
  $47 = (($46) + 1)|0;
  $8 = $47;
  $48 = $9;
  $49 = ((($48)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $9 = $50;
 }
 if ((label|0) == 15) {
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $45 = $9;
 $4 = $45;
 $51 = $4;
 STACKTOP = sp;return ($51|0);
}
function _Scanner_FileIndexAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _Scanner_LineAt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_Scanner_ScannerItemAt($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _Scanner_MatchGet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ((($8)) + 80|0);
 $10 = (_TokenList_PopFrontGet($9)|0);
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = ((($12)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 _Scanner_BuyTokens($16);
 STACKTOP = sp;return;
}
function _BasicScannerStack_PopGet($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $12 = $2;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 568|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _BasicScanner_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _BasicScanner_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TFileMapToStrArray($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 _FileArray_Reserve($8,$11);
 $12 = $2;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $14;
 $4 = 0;
 while(1) {
  $17 = $4;
  $18 = $2;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $5 = $26;
  $27 = $5;
  $6 = $27;
  while(1) {
   $28 = $6;
   $29 = ($28|0)!=(0|0);
   if (!($29)) {
    break;
   }
   $30 = $6;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $7 = $32;
   $33 = $7;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)>=(0);
   if ($36) {
    $37 = $7;
    $38 = ((($37)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $3;
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($39|0)<($42|0);
    if ($43) {
     $44 = $7;
     $45 = $3;
     $46 = HEAP32[$45>>2]|0;
     $47 = $7;
     $48 = ((($47)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($46) + ($49<<2)|0);
     HEAP32[$50>>2] = $44;
     $51 = $6;
     $52 = ((($51)) + 12|0);
     HEAP32[$52>>2] = 0;
    }
   }
   $53 = $6;
   $54 = HEAP32[$53>>2]|0;
   $6 = $54;
  }
  $55 = $4;
  $56 = (($55) + 1)|0;
  $4 = $56;
 }
 STACKTOP = sp;return;
}
function _FinalMatch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 88|0);
  $11 = $3;
  _TokenList_Swap($10,$11);
 }
 $12 = $2;
 _Scanner_Match($12);
 $13 = $2;
 $14 = (_Scanner_ScannerItemAt($13,0)|0);
 $4 = $14;
 while(1) {
  $15 = $4;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(2);
   if ($20) {
    $21 = $4;
    $22 = ((($21)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0);
    if ($24) {
     $25 = $4;
     $26 = ((($25)) + 32|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&1;
     if ($28) {
      $29 = $4;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (_IsPreprocessorTokenPhase($31)|0);
      $72 = $32;
     } else {
      $72 = 1;
     }
    } else {
     $72 = 0;
    }
   } else {
    $72 = 0;
   }
  } else {
   $72 = 0;
  }
  $33 = $4;
  if (!($72)) {
   break;
  }
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $5 = $35;
  HEAP32[$6>>2] = 0;
  $36 = $2;
  _Scanner_MatchGet($36,$6);
  $37 = $2;
  $38 = ((($37)) + 96|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   label = 12;
  } else {
   $41 = $2;
   $42 = ((($41)) + 96|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(1);
   $45 = $5;
   $46 = ($45|0)==(159);
   $or$cond = $44 & $46;
   if ($or$cond) {
    label = 12;
   } else {
    $52 = HEAP32[$6>>2]|0;
    _Token_Delete($52);
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $47 = HEAP32[$6>>2]|0;
   $48 = ((($47)) + 36|0);
   HEAP32[$48>>2] = 0;
   $49 = $2;
   $50 = ((($49)) + 88|0);
   $51 = HEAP32[$6>>2]|0;
   _TokenList_PushBack($50,$51);
   HEAP32[$6>>2] = 0;
  }
  $53 = $5;
  $54 = ($53|0)==(144);
  if ($54) {
   $55 = $2;
   $56 = ((($55)) + 96|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[$56>>2] = $58;
  } else {
   $59 = $5;
   $60 = ($59|0)==(159);
   if ($60) {
    $61 = $2;
    $62 = ((($61)) + 96|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + -1)|0;
    HEAP32[$62>>2] = $64;
   }
  }
  $65 = $2;
  $66 = (_Scanner_ScannerItemAt($65,0)|0);
  $4 = $66;
 }
 $67 = ($33|0)!=(0|0);
 if (!($67)) {
  $71 = 22;
  STACKTOP = sp;return ($71|0);
 }
 $68 = $4;
 $69 = ((($68)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70;
 STACKTOP = sp;return ($71|0);
}
function _IsPreprocessorTokenPhase($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0;
 var $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(10);
 $4 = $1;
 $5 = ($4|0)==(5);
 $or$cond = $3 | $5;
 $6 = $1;
 $7 = ($6|0)==(6);
 $or$cond3 = $or$cond | $7;
 $8 = $1;
 $9 = ($8|0)==(7);
 $or$cond5 = $or$cond3 | $9;
 $10 = $1;
 $11 = ($10|0)==(4);
 $or$cond7 = $or$cond5 | $11;
 $12 = $1;
 $13 = ($12|0)==(17);
 $or$cond9 = $or$cond7 | $13;
 $14 = $1;
 $15 = ($14|0)==(18);
 $or$cond11 = $or$cond9 | $15;
 $16 = $1;
 $17 = ($16|0)==(144);
 $or$cond13 = $or$cond11 | $17;
 $18 = $1;
 $19 = ($18|0)==(145);
 $or$cond15 = $or$cond13 | $19;
 $20 = $1;
 $21 = ($20|0)==(146);
 $or$cond17 = $or$cond15 | $21;
 $22 = $1;
 $23 = ($22|0)==(147);
 $or$cond19 = $or$cond17 | $23;
 $24 = $1;
 $25 = ($24|0)==(148);
 $or$cond21 = $or$cond19 | $25;
 $26 = $1;
 $27 = ($26|0)==(149);
 $or$cond23 = $or$cond21 | $27;
 $28 = $1;
 $29 = ($28|0)==(150);
 $or$cond25 = $or$cond23 | $29;
 $30 = $1;
 $31 = ($30|0)==(151);
 $or$cond27 = $or$cond25 | $31;
 $32 = $1;
 $33 = ($32|0)==(152);
 $or$cond29 = $or$cond27 | $33;
 $34 = $1;
 $35 = ($34|0)==(153);
 $or$cond31 = $or$cond29 | $35;
 $36 = $1;
 $37 = ($36|0)==(154);
 $or$cond33 = $or$cond31 | $37;
 $38 = $1;
 $39 = ($38|0)==(155);
 $or$cond35 = $or$cond33 | $39;
 $40 = $1;
 $41 = ($40|0)==(156);
 $or$cond37 = $or$cond35 | $41;
 $42 = $1;
 $43 = ($42|0)==(157);
 $or$cond39 = $or$cond37 | $43;
 $44 = $1;
 $45 = ($44|0)==(158);
 $or$cond41 = $or$cond39 | $45;
 if ($or$cond41) {
  $48 = 1;
  STACKTOP = sp;return ($48|0);
 }
 $46 = $1;
 $47 = ($46|0)==(159);
 $48 = $47;
 STACKTOP = sp;return ($48|0);
}
function _PPTokenArray_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _PPTokenArray_PopFront($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $2 = $9;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(1);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 4|0);
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) - 1)|0;
  $23 = $22<<2;
  _memmove(($15|0),($18|0),($23|0))|0;
 }
 $24 = $1;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -1)|0;
 HEAP32[$25>>2] = $27;
 $28 = $2;
 STACKTOP = sp;return ($28|0);
}
function _PPTokenArray_Clear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _PPToken_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 $15 = $1;
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _PPTokenArray_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _PPTokenArray_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _PPTokenArray_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _PPTokenArray_AppendCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_PPToken_Clone($15)|0);
  _PPTokenArray_PushBack($10,$16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _PPTokenArray_AppendMove($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $3;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _PPTokenArray_PushBack($10,$15);
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = (($17) + ($18<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = $4;
  $21 = (($20) + 1)|0;
  $4 = $21;
 }
 STACKTOP = sp;return;
}
function _PPTokenArray_Print($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _PPTokenArray_Erase($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $6 = $7;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $3;
  if (!($10)) {
   break;
  }
  $12 = HEAP32[$11>>2]|0;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _PPToken_Delete($15);
  $16 = $6;
  $17 = (($16) + 1)|0;
  $6 = $17;
 }
 $18 = ((($11)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(1);
 if ($20) {
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = (($22) + ($23<<2)|0);
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $5;
  $28 = (($26) + ($27<<2)|0);
  $29 = $3;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = (($31) - ($32))|0;
  $34 = $33<<2;
  _memmove(($24|0),($28|0),($34|0))|0;
 }
 $35 = $3;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = (($37) - ($38))|0;
 $40 = $3;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 STACKTOP = sp;return;
}
function _TokenArrayMap_SetAt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = (_HashMap_SetAt($8,$9,$10,$6)|0);
 $7 = $11;
 $12 = HEAP32[$6>>2]|0;
 _PPTokenArray_Delete($12);
 $13 = $7;
 STACKTOP = sp;return ($13|0);
}
function _TokenArrayMap_Lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$expand_i1_val = 0;
  HEAP8[$3>>0] = $$expand_i1_val;
 } else {
  $9 = $4;
  $10 = $5;
  $11 = $6;
  $12 = (_HashMap_Lookup($9,$10,$11)|0);
  $$expand_i1_val2 = $12&1;
  HEAP8[$3>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$3>>0]|0;
 $13 = $$pre_trunc&1;
 STACKTOP = sp;return ($13|0);
}
function _TokenArrayMap_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _HashMap_Destroy($2,7);
 STACKTOP = sp;return;
}
function _PPTokenArray_DeleteVoid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _PPTokenArray_Delete($2);
 STACKTOP = sp;return;
}
function _PPTokenSet_PushUnique($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_PPTokenSet_Find($5,$8)|0);
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $2;
  $13 = $3;
  _PPTokenSet_Push($12,$13);
  STACKTOP = sp;return;
 } else {
  $14 = $3;
  _PPToken_Delete($14);
  STACKTOP = sp;return;
 }
}
function _PPTokenSet_Find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $3;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_strcmp($11,$18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   break;
  }
  $26 = $5;
  $27 = (($26) + 1)|0;
  $5 = $27;
 }
 if ((label|0) == 6) {
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = (($22) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $4 = $25;
 $28 = $4;
 STACKTOP = sp;return ($28|0);
}
function _PPTokenSet_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16<<1;
  $4 = $17;
  $18 = $4;
  $19 = ($18|0)==(0);
  $spec$store$select = $19 ? 1 : $17;
  $4 = $spec$store$select;
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
  $22 = $5;
  $23 = $4;
  $24 = $23<<2;
  $25 = (_realloc($22,$24)|0);
  $5 = $25;
  $26 = $5;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $5;
   $29 = $2;
   HEAP32[$29>>2] = $28;
   $30 = $4;
   $31 = $2;
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = $30;
  }
 }
 $33 = $3;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38<<2)|0);
 HEAP32[$39>>2] = $33;
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function _SetIntersection($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $4;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $3;
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $6 = $20;
   $21 = $3;
   $22 = HEAP32[$21>>2]|0;
   $23 = $3;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($22) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $7 = $27;
   $28 = $4;
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $8 = $30;
   $31 = $4;
   $32 = HEAP32[$31>>2]|0;
   $33 = $4;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($32) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $9 = $37;
   while(1) {
    $38 = $6;
    $39 = $7;
    $40 = ($38|0)!=($39|0);
    if (!($40)) {
     label = 16;
     break;
    }
    $41 = $8;
    $42 = $9;
    $43 = ($41|0)!=($42|0);
    if (!($43)) {
     label = 16;
     break;
    }
    $44 = $6;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $8;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_strcmp($46,$49)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $52 = $6;
     $53 = ((($52)) + 20|0);
     $6 = $53;
    } else {
     $54 = $8;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $6;
     $58 = ((($57)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (_strcmp($56,$59)|0);
     $61 = ($60|0)!=(0);
     if ($61) {
      $62 = $5;
      $63 = $6;
      $64 = (_PPToken_Clone($63)|0);
      _PPTokenSet_PushUnique($62,$64);
      $65 = $6;
      $66 = ((($65)) + 20|0);
      $6 = $66;
     }
     $67 = $8;
     $68 = ((($67)) + 20|0);
     $8 = $68;
    }
   }
   if ((label|0) == 16) {
    STACKTOP = sp;return;
   }
  }
 }
 $69 = $3;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  $73 = $5;
  $74 = $3;
  _TokenSetAppendCopy($73,$74);
  STACKTOP = sp;return;
 }
 $75 = $4;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0);
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $79 = $5;
 $80 = $4;
 _TokenSetAppendCopy($79,$80);
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 $10 = $3;
 $11 = ($10|0)<=(7);
 $12 = $2;
 if ($11) {
  $13 = ((($12)) + 12|0);
  $4 = $13;
  $14 = $2;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = 7;
  $16 = $4;
  $17 = $2;
  HEAP32[$17>>2] = $16;
  STACKTOP = sp;return;
 }
 $18 = ((($12)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<=(7);
 if ($20) {
  $21 = $3;
  $22 = (($21) + 1)|0;
  $23 = $22;
  $24 = (_malloc($23)|0);
  $4 = $24;
  $25 = $4;
  $26 = $2;
  $27 = ((($26)) + 12|0);
  ;HEAP8[$25>>0]=HEAP8[$27>>0]|0;HEAP8[$25+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$27+3>>0]|0;HEAP8[$25+4>>0]=HEAP8[$27+4>>0]|0;HEAP8[$25+5>>0]=HEAP8[$27+5>>0]|0;HEAP8[$25+6>>0]=HEAP8[$27+6>>0]|0;
 } else {
  $28 = $2;
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = (($30) + 1)|0;
  $32 = $31;
  $33 = (_realloc($29,$32)|0);
  $4 = $33;
 }
 $34 = $4;
 $35 = $2;
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = $4;
  HEAP8[$40>>0] = 0;
 }
 $41 = $3;
 $42 = $2;
 $43 = ((($42)) + 8|0);
 HEAP32[$43>>2] = $41;
 STACKTOP = sp;return;
}
function _LocalStrBuilder_Grow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15|0) / 2)&-1;
 $17 = (($12) + ($16))|0;
 $4 = $17;
 $18 = $4;
 $19 = $3;
 $20 = ($18|0)<($19|0);
 if ($20) {
  $21 = $3;
  $4 = $21;
 }
 $22 = $2;
 $23 = $4;
 _LocalStrBuilder_Reserve($22,$23);
 STACKTOP = sp;return;
}
function _LocalStrBuilder_AppendChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 _LocalStrBuilder_Grow($4,$8);
 $9 = $3;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 HEAP8[$15>>0] = $9;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = (($17) + ($21)|0);
 HEAP8[$22>>0] = 0;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function _IntegerStack_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16<<1;
  $4 = $17;
  $18 = $4;
  $19 = ($18|0)==(0);
  $spec$store$select = $19 ? 1 : $17;
  $4 = $spec$store$select;
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
  $22 = $5;
  $23 = $4;
  $24 = $23<<2;
  $25 = (_realloc($22,$24)|0);
  $5 = $25;
  $26 = $5;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $5;
   $29 = $2;
   HEAP32[$29>>2] = $28;
   $30 = $4;
   $31 = $2;
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = $30;
  }
 }
 $33 = $3;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38<<2)|0);
 HEAP32[$39>>2] = $33;
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function _IntegerStack_Pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((5472|0),(2336|0),7264,(5478|0));
  // unreachable;
 }
}
function _IsActive($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 468|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 do {
  if ($6) {
   $7 = $1;
   $8 = ((($7)) + 456|0);
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $1;
    $13 = ((($12)) + 456|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $1;
    $16 = ((($15)) + 456|0);
    $17 = ((($16)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) - 1)|0;
    $20 = (($14) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(1);
    if (!($22)) {
     break;
    }
   }
   $2 = 1;
  }
 } while(0);
 $23 = $2;
 $24 = $23&1;
 STACKTOP = sp;return ($24|0);
}
function _Output_Append($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_IsActive($6)|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $5;
 (_StrBuilder_Append($8,$9)|0);
 STACKTOP = sp;return;
}
function _GetFuncName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $1 = 0;
  } else {
   $6 = $2;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(33);
   if ($8) {
    $9 = $2;
    $3 = $9;
    $10 = $3;
    $11 = ((($10)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $1 = $12;
    break;
   } else {
    $1 = 0;
    break;
   }
  }
 } while(0);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _GetDeclaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   $2 = 0;
  } else {
   $12 = $3;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(33);
   $15 = $3;
   if ($14) {
    $5 = $15;
    $16 = $5;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $5;
    $20 = ((($19)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_Declaration_FindDeclarator($18,$21)|0);
    $6 = $22;
    $23 = $6;
    $24 = $4;
    HEAP32[$24>>2] = $23;
    $25 = $5;
    $26 = ((($25)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $2 = $27;
    break;
   }
   $28 = HEAP32[$15>>2]|0;
   $29 = ($28|0)==(36);
   $30 = $3;
   if ($29) {
    $7 = $30;
    $31 = $7;
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(34);
    if ($34) {
     $35 = $7;
     $36 = ((($35)) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $4;
     $39 = (_GetDeclaration($37,$38)|0);
     $2 = $39;
     break;
    } else {
     $2 = 0;
     break;
    }
   } else {
    $40 = HEAP32[$30>>2]|0;
    $41 = ($40|0)==(31);
    if ($41) {
     $42 = $3;
     $8 = $42;
     $43 = $8;
     $44 = ((($43)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $4;
     $47 = (_GetDeclaration($45,$46)|0);
     $2 = $47;
     break;
    } else {
     $2 = 0;
     break;
    }
   }
  }
 } while(0);
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _InstantiateNew($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 16|0;
 $10 = sp + 12|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = (_IsActive($13)|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $4;
 $16 = ((($15)) + 488|0);
 $17 = (_HashMap_Lookup($16,5495,$8)|0);
 $18 = $17&1;
 $9 = $18;
 $19 = $9;
 $20 = $19&1;
 if (!($20)) {
  $21 = $4;
  $22 = ((($21)) + 488|0);
  $23 = HEAP32[$8>>2]|0;
  (_HashMap_SetAt($22,5495,$23,$10)|0);
  $24 = $4;
  $25 = ((($24)) + 476|0);
  (_StrBuilder_Append($25,5509)|0);
  $26 = $4;
  $27 = ((($26)) + 476|0);
  (_StrBuilder_Append($27,5558)|0);
  $28 = $4;
  $29 = ((($28)) + 476|0);
  (_StrBuilder_Append($29,5571)|0);
  $30 = $4;
  $31 = ((($30)) + 476|0);
  (_StrBuilder_Append($31,5636)|0);
  $32 = $4;
  $33 = ((($32)) + 500|0);
  (_StrBuilder_Append($33,2320)|0);
  $34 = $4;
  $35 = ((($34)) + 500|0);
  (_StrBuilder_Append($35,5644)|0);
  $36 = $4;
  $37 = ((($36)) + 500|0);
  (_StrBuilder_Append($37,5694)|0);
  $38 = $4;
  $39 = ((($38)) + 500|0);
  (_StrBuilder_Append($39,5766)|0);
  $40 = $4;
  $41 = ((($40)) + 500|0);
  (_StrBuilder_Append($41,5794)|0);
  $42 = $4;
  $43 = ((($42)) + 500|0);
  (_StrBuilder_Append($43,5829)|0);
  $44 = $4;
  $45 = ((($44)) + 500|0);
  (_StrBuilder_Append($45,5843)|0);
 }
 $46 = $5;
 $47 = $4;
 $48 = $6;
 $49 = ((($48)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $7;
 _TExpression_CodePrintSpaces($46,$47,$50,$51);
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
 $52 = $4;
 _Output_Append($11,$52,4602);
 $53 = $4;
 $54 = ((($53)) + 412|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&1;
 $57 = $56&1;
 $12 = $57;
 $58 = $4;
 $59 = ((($58)) + 412|0);
 HEAP8[$59>>0] = 1;
 $60 = $5;
 $61 = $4;
 $62 = $6;
 $63 = ((($62)) + 48|0);
 $64 = HEAP32[$63>>2]|0;
 _TTypeName_CodePrint($60,$61,$64,$11);
 $65 = $12;
 $66 = $65&1;
 $67 = $4;
 $68 = ((($67)) + 412|0);
 $69 = $66&1;
 HEAP8[$68>>0] = $69;
 $70 = $4;
 _Output_Append($11,$70,4604);
 $71 = $6;
 $72 = ((($71)) + 36|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = $4;
  _Output_Append($11,$75,4642);
 }
 $76 = $5;
 $77 = $4;
 $78 = $6;
 $79 = ((($78)) + 48|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 4|0);
 $82 = $6;
 $83 = ((($82)) + 48|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 16|0);
 $86 = $6;
 $87 = ((($86)) + 36|0);
 _TInitializerList_CodePrint($76,$77,$81,$85,$87,$11);
 $88 = $6;
 $89 = ((($88)) + 36|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)!=(0|0);
 if ($91) {
  $92 = $4;
  _Output_Append($11,$92,4646);
 }
 $93 = $7;
 (_StrBuilder_Append($93,5846)|0);
 $94 = $7;
 $95 = HEAP32[$11>>2]|0;
 (_StrBuilder_Append($94,$95)|0);
 $96 = $7;
 (_StrBuilder_Append($96,4604)|0);
 _StrBuilder_Destroy($11);
 STACKTOP = sp;return;
}
function _TExpression_CodePrintSpaces($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $6;
 $16 = ($15|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = $6;
 $18 = HEAP32[$17>>2]|0;
 switch ($18|0) {
 case 36:  {
  $19 = $6;
  $8 = $19;
  $20 = $4;
  $21 = $5;
  $22 = $8;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $7;
  _TExpression_CodePrintSpaces($20,$21,$24,$25);
  STACKTOP = sp;return;
  break;
 }
 case 37:  {
  $26 = $6;
  $9 = $26;
  $27 = $4;
  $28 = $5;
  $29 = $9;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $7;
  _TExpression_CodePrintSpaces($27,$28,$31,$32);
  STACKTOP = sp;return;
  break;
 }
 case 34:  {
  $33 = $6;
  $10 = $33;
  $34 = $10;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $11 = $36;
  while(1) {
   $37 = $11;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    break;
   }
   $39 = $5;
   $40 = $11;
   $41 = ((($40)) + 8|0);
   $42 = $7;
   _TNodeClueList_CodePrint($39,$41,$42);
   $43 = $11;
   $44 = HEAP32[$43>>2]|0;
   $11 = $44;
  }
  STACKTOP = sp;return;
  break;
 }
 case 33:  {
  $45 = $6;
  $12 = $45;
  $46 = $5;
  $47 = $12;
  $48 = ((($47)) + 24|0);
  $49 = $7;
  _TNodeClueList_CodePrint($46,$48,$49);
  STACKTOP = sp;return;
  break;
 }
 case 38:  {
  ___assert_fail((5472|0),(2336|0),8626,(5875|0));
  // unreachable;
  break;
 }
 case 35:  {
  ___assert_fail((5472|0),(2336|0),8631,(5875|0));
  // unreachable;
  break;
 }
 case 31:  {
  $50 = $6;
  $13 = $50;
  $51 = $5;
  $52 = $13;
  $53 = ((($52)) + 40|0);
  $54 = $7;
  _TNodeClueList_CodePrint($51,$53,$54);
  STACKTOP = sp;return;
  break;
 }
 case 32:  {
  $55 = $6;
  $14 = $55;
  $56 = $5;
  $57 = $14;
  $58 = ((($57)) + 36|0);
  $59 = $7;
  _TNodeClueList_CodePrint($56,$58,$59);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _TTypeName_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = $7;
 _TSpecifierQualifierList_CodePrint($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 16|0);
 $17 = $7;
 _TDeclarator_CodePrint($13,$14,$16,$17);
 STACKTOP = sp;return;
}
function _TInitializerList_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp + 16|0;
 $13 = sp + 53|0;
 $14 = sp + 4|0;
 $15 = sp + 52|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $10;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $10;
  $21 = HEAP32[$20>>2]|0;
  $22 = $10;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)==($24|0);
  if ($25) {
   $26 = $10;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if ($31) {
    ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
    HEAP8[$13>>0] = 0;
    $32 = $6;
    $33 = $7;
    $34 = $8;
    $35 = $9;
    _InstanciateInit($32,$33,$34,$35,0,0,$13,$12);
    $36 = HEAP8[$13>>0]|0;
    $37 = $36&1;
    $38 = $11;
    $39 = $7;
    if ($37) {
     $40 = HEAP32[$12>>2]|0;
     _Output_Append($38,$39,$40);
    } else {
     _Output_Append($38,$39,14534);
    }
    _StrBuilder_Destroy($12);
    STACKTOP = sp;return;
   }
  }
 }
 $41 = $10;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
  HEAP8[$15>>0] = 0;
  $44 = $6;
  $45 = $7;
  $46 = $8;
  $47 = $9;
  _InstanciateInit($44,$45,$46,$47,0,0,$15,$14);
  $48 = $11;
  $49 = $7;
  $50 = HEAP32[$14>>2]|0;
  _Output_Append($48,$49,$50);
  _StrBuilder_Destroy($14);
  STACKTOP = sp;return;
 }
 $51 = $10;
 $52 = HEAP32[$51>>2]|0;
 $16 = $52;
 while(1) {
  $53 = $16;
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   break;
  }
  $55 = $6;
  $56 = $7;
  $57 = $9;
  $58 = $8;
  $59 = $16;
  $60 = $11;
  _TInitializerListItem_CodePrint($55,$56,$57,$58,$59,$60);
  $61 = $16;
  $62 = ((($61)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $16 = $63;
 }
 STACKTOP = sp;return;
}
function _ArgumentExpression_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  $12 = $5;
  $13 = $6;
  $14 = ((($13)) + 8|0);
  $15 = $7;
  _TNodeClueList_CodePrint($12,$14,$15);
  $16 = $7;
  $17 = $5;
  _Output_Append($16,$17,4610);
 }
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = HEAP32[$20>>2]|0;
 $22 = $7;
 _TExpression_CodePrint($18,$19,$21,$22);
 STACKTOP = sp;return;
}
function _TNodeClueList_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 412|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 while(1) {
  $14 = $6;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  L7: do {
   switch ($18|0) {
   case 144:  {
    $7 = 1;
    $19 = $3;
    $20 = ((($19)) + 456|0);
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)>(0);
    if ($23) {
     $24 = $3;
     $25 = ((($24)) + 456|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $3;
     $28 = ((($27)) + 456|0);
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) - 1)|0;
     $32 = (($26) + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $7 = 0;
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     label = 0;
     $7 = 0;
    }
    $35 = $7;
    $36 = $35&1;
    if ($36) {
     $37 = $3;
     $38 = ((($37)) + 456|0);
     $39 = $7;
     $40 = $39&1;
     $41 = $40&1;
     _IntegerStack_PushBack($38,$41);
     break L7;
    } else {
     $42 = $5;
     $43 = $3;
     $44 = $6;
     $45 = HEAP32[$44>>2]|0;
     _Output_Append($42,$43,$45);
     $46 = $5;
     $47 = $3;
     _Output_Append($46,$47,2320);
     $48 = $3;
     $49 = ((($48)) + 456|0);
     $50 = $7;
     $51 = $50&1;
     $52 = $51&1;
     _IntegerStack_PushBack($49,$52);
     break L7;
    }
    break;
   }
   case 159:  {
    $53 = $3;
    $54 = ((($53)) + 456|0);
    _IntegerStack_Pop($54);
    break;
   }
   case 156:  {
    $55 = $5;
    $56 = $3;
    $57 = $6;
    $58 = HEAP32[$57>>2]|0;
    _Output_Append($55,$56,$58);
    $59 = $5;
    $60 = $3;
    _Output_Append($59,$60,2320);
    break;
   }
   case 145:  {
    $61 = $6;
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0|0);
    if ($63) {
     $64 = $6;
     $65 = HEAP32[$64>>2]|0;
     $66 = (_strcmp($65,14105)|0);
     $67 = ($66|0)==(0);
     if ($67) {
      $68 = $3;
      $69 = ((($68)) + 400|0);
      HEAP8[$69>>0] = 1;
     } else {
      label = 17;
     }
    } else {
     label = 17;
    }
    do {
     if ((label|0) == 17) {
      label = 0;
      $70 = $6;
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)!=(0|0);
      if ($72) {
       $73 = $6;
       $74 = HEAP32[$73>>2]|0;
       $75 = (_strcmp($74,14123)|0);
       $76 = ($75|0)==(0);
       if ($76) {
        $77 = $3;
        $78 = ((($77)) + 400|0);
        HEAP8[$78>>0] = 0;
        break;
       }
      }
      $79 = $5;
      $80 = $3;
      $81 = $6;
      $82 = HEAP32[$81>>2]|0;
      _Output_Append($79,$80,$82);
     }
    } while(0);
    $83 = $5;
    $84 = $3;
    _Output_Append($83,$84,2320);
    break;
   }
   case 147: case 148: case 149: case 151: case 150: case 146: case 155:  {
    $85 = $5;
    $86 = $3;
    $87 = $6;
    $88 = HEAP32[$87>>2]|0;
    _Output_Append($85,$86,$88);
    $89 = $5;
    $90 = $3;
    _Output_Append($89,$90,2320);
    break;
   }
   case 7: case 6:  {
    break;
   }
   case 5:  {
    $91 = $3;
    $92 = ((($91)) + 401|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&1;
    $95 = $5;
    $96 = $3;
    if ($94) {
     $97 = $6;
     $98 = HEAP32[$97>>2]|0;
     _Output_Append($95,$96,$98);
     break L7;
    } else {
     _Output_Append($95,$96,2318);
     break L7;
    }
    break;
   }
   case 4:  {
    $99 = $3;
    $100 = ((($99)) + 401|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&1;
    if ($102) {
     $103 = $5;
     $104 = $3;
     $105 = $6;
     $106 = HEAP32[$105>>2]|0;
     _Output_Append($103,$104,$106);
    }
    break;
   }
   case 17:  {
    $107 = $5;
    $108 = $3;
    _Output_Append($107,$108,2320);
    break;
   }
   case 157:  {
    $109 = $3;
    $110 = ((($109)) + 400|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&1;
    if (!($112)) {
     $113 = $5;
     $114 = $3;
     $115 = $6;
     $116 = HEAP32[$115>>2]|0;
     _Output_Append($113,$114,$116);
     $117 = $3;
     $118 = ((($117)) + 468|0);
     HEAP8[$118>>0] = 0;
    }
    break;
   }
   case 158:  {
    $119 = $3;
    $120 = ((($119)) + 400|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&1;
    if (!($122)) {
     $123 = $3;
     $124 = ((($123)) + 468|0);
     HEAP8[$124>>0] = 1;
    }
    break;
   }
   case 10:  {
    $125 = $5;
    $126 = $3;
    $127 = $6;
    $128 = HEAP32[$127>>2]|0;
    _Output_Append($125,$126,$128);
    break;
   }
   default: {
    $129 = $5;
    $130 = $3;
    $131 = $6;
    $132 = HEAP32[$131>>2]|0;
    _Output_Append($129,$130,$132);
   }
   }
  } while(0);
  $133 = $6;
  $134 = ((($133)) + 36|0);
  $135 = HEAP32[$134>>2]|0;
  $6 = $135;
 }
 STACKTOP = sp;return;
}
function _TExpression_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer = sp + 40|0;
 $14 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $19 = $6;
 $20 = ($19|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = $6;
 $22 = HEAP32[$21>>2]|0;
 switch ($22|0) {
 case 36:  {
  $23 = $6;
  $8 = $23;
  $24 = $4;
  $25 = $5;
  $26 = $8;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $7;
  _TExpression_CodePrint($24,$25,$28,$29);
  $30 = $5;
  $31 = $8;
  $32 = ((($31)) + 24|0);
  $33 = $7;
  _TNodeClueList_CodePrint($30,$32,$33);
  $34 = $7;
  $35 = $5;
  $36 = $8;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_TokenToString($38)|0);
  _Output_Append($34,$35,$39);
  $40 = $4;
  $41 = $5;
  $42 = $6;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $7;
  _TExpression_CodePrint($40,$41,$44,$45);
  STACKTOP = sp;return;
  break;
 }
 case 37:  {
  $46 = $6;
  $9 = $46;
  $47 = $4;
  $48 = $5;
  $49 = $9;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $7;
  _TExpression_CodePrint($47,$48,$51,$52);
  $53 = $5;
  $54 = $9;
  $55 = ((($54)) + 20|0);
  $56 = $7;
  _TNodeClueList_CodePrint($53,$55,$56);
  $57 = $7;
  $58 = $5;
  _Output_Append($57,$58,4626);
  $59 = $4;
  $60 = $5;
  $61 = $9;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $7;
  _TExpression_CodePrint($59,$60,$63,$64);
  $65 = $5;
  $66 = $9;
  $67 = ((($66)) + 28|0);
  $68 = $7;
  _TNodeClueList_CodePrint($65,$67,$68);
  $69 = $7;
  $70 = $5;
  _Output_Append($69,$70,4616);
  $71 = $4;
  $72 = $5;
  $73 = $9;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $7;
  _TExpression_CodePrint($71,$72,$75,$76);
  STACKTOP = sp;return;
  break;
 }
 case 34:  {
  $77 = $6;
  $10 = $77;
  $78 = $10;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $11 = $80;
  while(1) {
   $81 = $11;
   $82 = ($81|0)!=(0|0);
   if (!($82)) {
    break;
   }
   $83 = $5;
   $84 = $11;
   $85 = ((($84)) + 8|0);
   $86 = $7;
   _TNodeClueList_CodePrint($83,$85,$86);
   $87 = $7;
   $88 = $5;
   $89 = $11;
   $90 = ((($89)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   _Output_Append($87,$88,$91);
   $92 = $11;
   $93 = HEAP32[$92>>2]|0;
   $11 = $93;
  }
  STACKTOP = sp;return;
  break;
 }
 case 33:  {
  $94 = $6;
  $12 = $94;
  $95 = $12;
  $96 = ((($95)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0|0);
  $99 = $5;
  $100 = $12;
  $101 = ((($100)) + 24|0);
  $102 = $7;
  _TNodeClueList_CodePrint($99,$101,$102);
  if ($98) {
   $103 = $7;
   $104 = $5;
   _Output_Append($103,$104,4602);
   $105 = $4;
   $106 = $5;
   $107 = $12;
   $108 = ((($107)) + 12|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $7;
   _TExpression_CodePrint($105,$106,$109,$110);
   $111 = $5;
   $112 = $12;
   $113 = ((($112)) + 32|0);
   $114 = $7;
   _TNodeClueList_CodePrint($111,$113,$114);
   $115 = $7;
   $116 = $5;
   _Output_Append($115,$116,4604);
   STACKTOP = sp;return;
  }
  $117 = $12;
  $118 = ((($117)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(14);
  if (!($120)) {
   $138 = $7;
   $139 = $5;
   $140 = $12;
   $141 = ((($140)) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   _Output_Append($138,$139,$142);
   STACKTOP = sp;return;
  }
  $121 = $5;
  $122 = ((($121)) + 404|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123>>>0)<(3);
  if ($124) {
   $125 = $12;
   $126 = ((($125)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($127)) + 2|0);
   $129 = (_strtol($128,0,2)|0);
   $13 = $129;
   $130 = $13;
   HEAP32[$vararg_buffer>>2] = $130;
   (_snprintf($14,33,14142,$vararg_buffer)|0);
   $131 = $7;
   $132 = $5;
   _Output_Append($131,$132,$14);
   STACKTOP = sp;return;
  } else {
   $133 = $7;
   $134 = $5;
   $135 = $12;
   $136 = ((($135)) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   _Output_Append($133,$134,$137);
   STACKTOP = sp;return;
  }
  break;
 }
 case 38:  {
  $143 = $6;
  $15 = $143;
  $144 = $4;
  $145 = $5;
  $146 = $15;
  $147 = $7;
  _TPrimaryExpressionLambda_CodePrint($144,$145,$146,$147);
  STACKTOP = sp;return;
  break;
 }
 case 35:  {
  $148 = $6;
  $16 = $148;
  $149 = $4;
  $150 = $5;
  $151 = $16;
  $152 = $7;
  _TPostfixExpression_CodePrint($149,$150,$151,$152);
  STACKTOP = sp;return;
  break;
 }
 case 31:  {
  $153 = $6;
  $17 = $153;
  $154 = $5;
  $155 = $17;
  $156 = ((($155)) + 40|0);
  $157 = $7;
  _TNodeClueList_CodePrint($154,$156,$157);
  $158 = $17;
  $159 = ((($158)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($160|0)==(116);
  if (!($161)) {
   $195 = $7;
   $196 = $5;
   $197 = $6;
   $198 = ((($197)) + 4|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = (_TokenToString($199)|0);
   _Output_Append($195,$196,$200);
   $201 = $4;
   $202 = $5;
   $203 = $17;
   $204 = ((($203)) + 8|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $7;
   _TExpression_CodePrint($201,$202,$205,$206);
   STACKTOP = sp;return;
  }
  $162 = $17;
  $163 = ((($162)) + 12|0);
  $164 = ((($163)) + 4|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)>(0);
  $168 = $7;
  $169 = $5;
  _Output_Append($168,$169,4895);
  if ($167) {
   $170 = $5;
   $171 = $17;
   $172 = ((($171)) + 48|0);
   $173 = $7;
   _TNodeClueList_CodePrint($170,$172,$173);
   $174 = $7;
   $175 = $5;
   _Output_Append($174,$175,4602);
   $176 = $4;
   $177 = $5;
   $178 = $17;
   $179 = ((($178)) + 12|0);
   $180 = $7;
   _TTypeName_CodePrint($176,$177,$179,$180);
   $181 = $5;
   $182 = $17;
   $183 = ((($182)) + 56|0);
   $184 = $7;
   _TNodeClueList_CodePrint($181,$183,$184);
   $185 = $7;
   $186 = $5;
   _Output_Append($185,$186,4604);
   STACKTOP = sp;return;
  } else {
   $187 = $4;
   $188 = $5;
   $189 = $17;
   $190 = ((($189)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $7;
   _TExpression_CodePrint($187,$188,$191,$192);
   $193 = $7;
   $194 = $5;
   _Output_Append($193,$194,16416);
   STACKTOP = sp;return;
  }
  break;
 }
 case 32:  {
  $207 = $6;
  $18 = $207;
  $208 = $5;
  $209 = $18;
  $210 = ((($209)) + 36|0);
  $211 = $7;
  _TNodeClueList_CodePrint($208,$210,$211);
  $212 = $7;
  $213 = $5;
  _Output_Append($212,$213,4602);
  $214 = $4;
  $215 = $5;
  $216 = $18;
  $217 = ((($216)) + 8|0);
  $218 = $7;
  _TTypeName_CodePrint($214,$215,$217,$218);
  $219 = $5;
  $220 = $18;
  $221 = ((($220)) + 44|0);
  $222 = $7;
  _TNodeClueList_CodePrint($219,$221,$222);
  $223 = $7;
  $224 = $5;
  _Output_Append($223,$224,4604);
  $225 = $4;
  $226 = $5;
  $227 = $18;
  $228 = ((($227)) + 4|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $7;
  _TExpression_CodePrint($225,$226,$229,$230);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _ArgumentExpressionList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $6;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $5;
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = $8;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $7;
  _ArgumentExpression_CodePrint($14,$15,$20,$21);
  $22 = $8;
  $23 = (($22) + 1)|0;
  $8 = $23;
 }
 STACKTOP = sp;return;
}
function _TPostfixExpression_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1104|0);
 $9 = sp + 1068|0;
 $11 = sp + 1052|0;
 $12 = sp + 1040|0;
 $16 = sp;
 $17 = sp + 1028|0;
 $19 = sp + 1012|0;
 $20 = sp + 1000|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(160);
 if ($24) {
  $25 = $6;
  $26 = ((($25)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $6;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $4;
    $34 = $5;
    $35 = $6;
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $7;
    _TExpression_CodePrint($33,$34,$37,$38);
   }
   $39 = $5;
   $40 = $6;
   $41 = ((($40)) + 52|0);
   $42 = $7;
   _TNodeClueList_CodePrint($39,$41,$42);
   $43 = $7;
   $44 = $5;
   _Output_Append($43,$44,4602);
   $45 = $4;
   $46 = $5;
   $47 = $6;
   $48 = ((($47)) + 48|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $7;
   _TTypeName_CodePrint($45,$46,$49,$50);
   $51 = $5;
   $52 = $6;
   $53 = ((($52)) + 60|0);
   $54 = $7;
   _TNodeClueList_CodePrint($51,$53,$54);
   $55 = $7;
   $56 = $5;
   _Output_Append($55,$56,4604);
   $57 = $5;
   $58 = $6;
   $59 = ((($58)) + 68|0);
   $60 = $7;
   _TNodeClueList_CodePrint($57,$59,$60);
   $61 = $6;
   $62 = ((($61)) + 36|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0|0);
   if ($64) {
    $65 = $7;
    $66 = $5;
    _Output_Append($65,$66,4642);
   }
   $67 = $4;
   $68 = $5;
   $69 = $6;
   $70 = ((($69)) + 48|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($71)) + 4|0);
   $73 = $6;
   $74 = ((($73)) + 36|0);
   $75 = $7;
   _TInitializerList_CodePrint($67,$68,$72,0,$74,$75);
   $76 = $5;
   $77 = $6;
   $78 = ((($77)) + 84|0);
   $79 = $7;
   _TNodeClueList_CodePrint($76,$78,$79);
   $80 = $6;
   $81 = ((($80)) + 36|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if ($83) {
    $84 = $7;
    $85 = $5;
    _Output_Append($84,$85,4646);
   }
  }
 }
 $86 = $6;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 L12: do {
  switch ($88|0) {
  case 160:  {
   $89 = $5;
   $90 = $4;
   $91 = $6;
   $92 = $7;
   _InstantiateNew($89,$90,$91,$92);
   break;
  }
  case 37:  {
   $93 = $6;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)!=(0|0);
   if ($96) {
    $97 = $4;
    $98 = $5;
    $99 = $6;
    $100 = ((($99)) + 12|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $7;
    _TExpression_CodePrint($97,$98,$101,$102);
   }
   $103 = $5;
   $104 = $6;
   $105 = ((($104)) + 52|0);
   $106 = $7;
   _TNodeClueList_CodePrint($103,$105,$106);
   $107 = $7;
   $108 = $5;
   _Output_Append($107,$108,14755);
   $109 = $5;
   $110 = $6;
   $111 = ((($110)) + 60|0);
   $112 = $7;
   _TNodeClueList_CodePrint($109,$111,$112);
   $113 = $7;
   $114 = $5;
   $115 = $6;
   $116 = ((($115)) + 44|0);
   $117 = HEAP32[$116>>2]|0;
   _Output_Append($113,$114,$117);
   break;
  }
  case 56:  {
   $118 = $6;
   $119 = ((($118)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120|0)!=(0|0);
   if ($121) {
    $122 = $4;
    $123 = $5;
    $124 = $6;
    $125 = ((($124)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $7;
    _TExpression_CodePrint($122,$123,$126,$127);
   }
   $128 = $5;
   $129 = $6;
   $130 = ((($129)) + 52|0);
   $131 = $7;
   _TNodeClueList_CodePrint($128,$130,$131);
   $132 = $7;
   $133 = $5;
   _Output_Append($132,$133,4978);
   $134 = $5;
   $135 = $6;
   $136 = ((($135)) + 60|0);
   $137 = $7;
   _TNodeClueList_CodePrint($134,$136,$137);
   $138 = $7;
   $139 = $5;
   $140 = $6;
   $141 = ((($140)) + 44|0);
   $142 = HEAP32[$141>>2]|0;
   _Output_Append($138,$139,$142);
   break;
  }
  case 46:  {
   $143 = $6;
   $144 = ((($143)) + 12|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($145|0)!=(0|0);
   if ($146) {
    $147 = $4;
    $148 = $5;
    $149 = $6;
    $150 = ((($149)) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $7;
    _TExpression_CodePrint($147,$148,$151,$152);
   }
   $153 = $5;
   $154 = $6;
   $155 = ((($154)) + 52|0);
   $156 = $7;
   _TNodeClueList_CodePrint($153,$155,$156);
   $157 = $7;
   $158 = $5;
   _Output_Append($157,$158,4630);
   $159 = $4;
   $160 = $5;
   $161 = $6;
   $162 = ((($161)) + 16|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $7;
   _TExpression_CodePrint($159,$160,$163,$164);
   $165 = $5;
   $166 = $6;
   $167 = ((($166)) + 60|0);
   $168 = $7;
   _TNodeClueList_CodePrint($165,$167,$168);
   $169 = $7;
   $170 = $5;
   _Output_Append($169,$170,4634);
   break;
  }
  case 30:  {
   $171 = $6;
   $172 = ((($171)) + 12|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (_GetFuncName($173)|0);
   $8 = $174;
   $175 = $8;
   $176 = ($175|0)!=(0|0);
   if ($176) {
    $177 = $8;
    $178 = (_strcmp($177,5851)|0);
    $179 = ($178|0)==(0);
    if ($179) {
     $180 = $6;
     $181 = ((($180)) + 20|0);
     $182 = ((($181)) + 4|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)==(1);
     if (!($184)) {
      break L12;
     }
     ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $185 = $6;
     $186 = ((($185)) + 20|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = HEAP32[$187>>2]|0;
     $189 = HEAP32[$188>>2]|0;
     _GetTypeName($189,$9);
     $190 = $7;
     (_StrBuilder_Append($190,4590)|0);
     $191 = $7;
     $192 = HEAP32[$9>>2]|0;
     (_StrBuilder_Append($191,$192)|0);
     $193 = $7;
     (_StrBuilder_Append($193,4590)|0);
     _StrBuilder_Destroy($9);
     break L12;
    }
   }
   $194 = $8;
   $195 = ($194|0)!=(0|0);
   if ($195) {
    $196 = $8;
    $197 = (_strcmp($196,5860)|0);
    $198 = ($197|0)==(0);
    if ($198) {
     $199 = $6;
     $200 = ((($199)) + 20|0);
     $201 = ((($200)) + 4|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(1);
     if (!($203)) {
      break L12;
     }
     $204 = $6;
     $205 = ((($204)) + 20|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = HEAP32[$206>>2]|0;
     $208 = HEAP32[$207>>2]|0;
     $209 = (_Expression_GetTypeName($208)|0);
     $10 = $209;
     ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
     ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
     $210 = $4;
     $211 = $5;
     $212 = $6;
     $213 = ((($212)) + 20|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = HEAP32[$214>>2]|0;
     $216 = HEAP32[$215>>2]|0;
     _TExpression_CodePrint($210,$211,$216,$11);
     $217 = $4;
     $218 = $5;
     $219 = $10;
     $220 = ((($219)) + 4|0);
     $221 = $10;
     $222 = ((($221)) + 16|0);
     $223 = HEAP32[$11>>2]|0;
     _InstanciateDestroy($217,$218,0,$220,$222,$223,0,$12);
     $224 = $4;
     $225 = $5;
     $226 = $6;
     $227 = ((($226)) + 12|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = $7;
     _TExpression_CodePrintSpaces($224,$225,$228,$229);
     $230 = ((($12)) + 4|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($231|0)>(0);
     if ($232) {
      $233 = $7;
      $234 = HEAP32[$12>>2]|0;
      (_StrBuilder_Append($233,$234)|0);
     }
     _StrBuilder_Destroy($11);
     _StrBuilder_Destroy($12);
     break L12;
    }
   }
   $13 = 0;
   $14 = 0;
   $235 = $6;
   $236 = ((($235)) + 20|0);
   $237 = ((($236)) + 4|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = ($238|0)==(1);
   do {
    if ($239) {
     $240 = $6;
     $241 = ((($240)) + 20|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$243>>2]|0;
     $245 = (_Expression_GetTypeName($244)|0);
     $14 = $245;
     $246 = $14;
     $247 = ($246|0)!=(0|0);
     if ($247) {
      $248 = $14;
      $249 = ((($248)) + 4|0);
      $250 = (_DeclarationSpecifiers_GetMainSpecifier($249,7)|0);
      $15 = $250;
      $251 = $15;
      $252 = ($251|0)!=(0|0);
      if ($252) {
       $253 = $15;
       $254 = ((($253)) + 16|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = ($255|0)!=(0|0);
       if ($256) {
        $257 = $4;
        $258 = $15;
        $259 = ((($258)) + 16|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = (_FindStructUnionSpecifierByName($257,$260)|0);
        $15 = $261;
       }
       $262 = $15;
       $263 = ((($262)) + 24|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = ($264|0)!=(0|0);
       if (!($265)) {
        break;
       }
       $13 = 1;
       $266 = $4;
       $267 = $5;
       $268 = $6;
       $269 = ((($268)) + 12|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = $7;
       _TExpression_CodePrintSpaces($266,$267,$270,$271);
       _memset(($16|0),0,1000)|0;
       $272 = $15;
       _GetOrGenerateStructTagName($272,$16,1000);
       $273 = $7;
       $274 = $5;
       _Output_Append($273,$274,$16);
       $275 = $7;
       $276 = $5;
       _Output_Append($275,$276,4638);
       $277 = $7;
       $278 = $5;
       $279 = $8;
       _Output_Append($277,$278,$279);
       $280 = $4;
       $281 = $5;
       $282 = $15;
       $283 = $8;
       $284 = $5;
       $285 = ((($284)) + 500|0);
       $286 = $5;
       $287 = ((($286)) + 476|0);
       _UnionTypeDefault($280,$281,$282,0,5868,$283,$285,$287);
       break;
      }
      $288 = $14;
      $289 = ((($288)) + 16|0);
      $290 = ((($289)) + 8|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = ($291|0)!=(0|0);
      if ($292) {
       $293 = $14;
       $294 = ((($293)) + 16|0);
       $295 = ((($294)) + 8|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = ((($296)) + 52|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = ($298|0)==(5);
       $300 = $8;
       $301 = ($300|0)!=(0|0);
       $or$cond = $299 & $301;
       if ($or$cond) {
        $302 = $8;
        $303 = (_strcmp($302,5870)|0);
        $304 = ($303|0)==(0);
        if ($304) {
         $13 = 1;
         HEAP32[$17>>2] = 0;
         $305 = $6;
         $306 = ((($305)) + 16|0);
         $307 = HEAP32[$306>>2]|0;
         $308 = (_GetDeclaration($307,$17)|0);
         $18 = $308;
         ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
         ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
         $309 = $4;
         $310 = $5;
         $311 = $6;
         $312 = ((($311)) + 16|0);
         $313 = HEAP32[$312>>2]|0;
         _TExpression_CodePrint($309,$310,$313,$19);
         $314 = $4;
         $315 = $5;
         $316 = $18;
         $317 = ((($316)) + 4|0);
         _InstanciateVectorPush($314,$315,$317,$20);
         $318 = $4;
         $319 = $5;
         $320 = $6;
         $321 = ((($320)) + 12|0);
         $322 = HEAP32[$321>>2]|0;
         $323 = $7;
         _TExpression_CodePrintSpaces($318,$319,$322,$323);
         $324 = ((($20)) + 4|0);
         $325 = HEAP32[$324>>2]|0;
         $326 = ($325|0)>(0);
         if ($326) {
          $327 = $7;
          $328 = HEAP32[$20>>2]|0;
          (_StrBuilder_Append($327,$328)|0);
         }
         _StrBuilder_Destroy($19);
         _StrBuilder_Destroy($20);
        }
       }
      }
     }
    }
   } while(0);
   $329 = $6;
   $330 = ((($329)) + 12|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = ($331|0)!=(0|0);
   if ($332) {
    $333 = $13;
    $334 = $333&1;
    if (!($334)) {
     $335 = $4;
     $336 = $5;
     $337 = $6;
     $338 = ((($337)) + 12|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $7;
     _TExpression_CodePrint($335,$336,$339,$340);
    }
   }
   $341 = $5;
   $342 = $6;
   $343 = ((($342)) + 52|0);
   $344 = $7;
   _TNodeClueList_CodePrint($341,$343,$344);
   $345 = $7;
   $346 = $5;
   _Output_Append($345,$346,4602);
   $347 = $4;
   $348 = $5;
   $349 = $6;
   $350 = ((($349)) + 20|0);
   $351 = $7;
   _ArgumentExpressionList_CodePrint($347,$348,$350,$351);
   $352 = $5;
   $353 = $6;
   $354 = ((($353)) + 60|0);
   $355 = $7;
   _TNodeClueList_CodePrint($352,$354,$355);
   $356 = $7;
   $357 = $5;
   _Output_Append($356,$357,4604);
   break;
  }
  case 57:  {
   $358 = $6;
   $359 = ((($358)) + 12|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = ($360|0)!=(0|0);
   if ($361) {
    $362 = $4;
    $363 = $5;
    $364 = $6;
    $365 = ((($364)) + 12|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = $7;
    _TExpression_CodePrint($362,$363,$366,$367);
   }
   $368 = $5;
   $369 = $6;
   $370 = ((($369)) + 52|0);
   $371 = $7;
   _TNodeClueList_CodePrint($368,$370,$371);
   $372 = $7;
   $373 = $5;
   _Output_Append($372,$373,4981);
   break;
  }
  case 58:  {
   $374 = $6;
   $375 = ((($374)) + 12|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = ($376|0)!=(0|0);
   if ($377) {
    $378 = $4;
    $379 = $5;
    $380 = $6;
    $381 = ((($380)) + 12|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = $7;
    _TExpression_CodePrint($378,$379,$382,$383);
   }
   $384 = $5;
   $385 = $6;
   $386 = ((($385)) + 52|0);
   $387 = $7;
   _TNodeClueList_CodePrint($384,$386,$387);
   $388 = $7;
   $389 = $5;
   _Output_Append($388,$389,4984);
   break;
  }
  default: {
  }
  }
 } while(0);
 $390 = $6;
 $391 = ((($390)) + 32|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = ($392|0)!=(0|0);
 if (!($393)) {
  STACKTOP = sp;return;
 }
 $394 = $4;
 $395 = $5;
 $396 = $6;
 $397 = ((($396)) + 32|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = $7;
 _TPostfixExpression_CodePrint($394,$395,$398,$399);
 STACKTOP = sp;return;
}
function _GetTypeName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_Expression_GetTypeName($6)|0);
 $4 = $7;
 $8 = $3;
 _StrBuilder_Clear($8);
 _memset(($5|0),0,548)|0;
 $9 = ((($5)) + 412|0);
 HEAP8[$9>>0] = 1;
 $10 = ((($5)) + 468|0);
 HEAP8[$10>>0] = 1;
 $11 = $4;
 $12 = $3;
 _TTypeName_CodePrint(0,$5,$11,$12);
 STACKTOP = sp;return;
}
function _Expression_GetTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 36:  {
  $5 = $2;
  $6 = ((($5)) + 32|0);
  $1 = $6;
  break;
 }
 case 38:  {
  $7 = $2;
  $8 = ((($7)) + 40|0);
  $1 = $8;
  break;
 }
 case 31:  {
  $9 = $2;
  $10 = ((($9)) + 12|0);
  $1 = $10;
  break;
 }
 case 32:  {
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $1 = $12;
  break;
 }
 case 33:  {
  $13 = $2;
  $14 = ((($13)) + 40|0);
  $1 = $14;
  break;
 }
 case 35:  {
  $15 = $2;
  $16 = ((($15)) + 92|0);
  $1 = $16;
  break;
 }
 case 34:  {
  $17 = $2;
  $18 = ((($17)) + 12|0);
  $1 = $18;
  break;
 }
 case 37:  {
  $19 = $2;
  $20 = ((($19)) + 36|0);
  $1 = $20;
  break;
 }
 default: {
  ___assert_fail((5472|0),(2336|0),12824,(7181|0));
  // unreachable;
 }
 }
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _InstanciateDestroy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1760|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1760|0);
 $vararg_buffer10 = sp + 1648|0;
 $vararg_buffer6 = sp + 1640|0;
 $vararg_buffer2 = sp + 1632|0;
 $vararg_buffer = sp + 1624|0;
 $20 = sp + 1708|0;
 $24 = sp + 1664|0;
 $26 = sp + 1424|0;
 $27 = sp + 416|0;
 $28 = sp + 208|0;
 $29 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $31 = $6&1;
 $14 = $31;
 $15 = $7;
 $32 = $9;
 $33 = (_IsActive($32)|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $12;
 $35 = (_PointerList_IsPointerToObject($34)|0);
 $36 = $35&1;
 $16 = $36;
 $37 = $12;
 $38 = (_PointerList_IsAutoPointerToObject($37)|0);
 $39 = $38&1;
 $17 = $39;
 $40 = $11;
 $41 = (_SpecifierQualifierList_GetMainSpecifier($40)|0);
 $18 = $41;
 $42 = $18;
 $43 = ($42|0)==(0|0);
 if ($43) {
  STACKTOP = sp;return;
 }
 $44 = $18;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(5);
 $47 = $18;
 if ($46) {
  $19 = $47;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if (!($51)) {
   $78 = $17;
   $79 = $78&1;
   if (!($79)) {
    STACKTOP = sp;return;
   }
   $80 = $15;
   $81 = $10;
   $82 = $81<<2;
   $83 = $8;
   $84 = (_GetFreeStr($83)|0);
   $85 = $13;
   HEAP32[$vararg_buffer>>2] = $84;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $85;
   _StrBuilder_AppendFmtLn($80,$82,6351,$vararg_buffer);
   STACKTOP = sp;return;
  }
  ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
  $52 = $8;
  $53 = ((($52)) + 24|0);
  $54 = $19;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_SymbolMap_FindTypedefFirstTarget($53,$56,$20)|0);
  $21 = $57;
  $58 = $21;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = $12;
   $61 = HEAP32[$60>>2]|0;
   $22 = $61;
   while(1) {
    $62 = $22;
    $63 = ($62|0)!=(0|0);
    if (!($63)) {
     break;
    }
    ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;HEAP32[$24+24>>2]=0|0;HEAP32[$24+28>>2]=0|0;
    $64 = (_mallocinit(32,$24)|0);
    $23 = $64;
    $65 = $23;
    $66 = $22;
    _Pointer_CopyFrom($65,$66);
    $67 = $23;
    _PointerList_PushBack($20,$67);
    $68 = $22;
    $69 = ((($68)) + 20|0);
    $70 = HEAP32[$69>>2]|0;
    $22 = $70;
   }
   $71 = $8;
   $72 = $9;
   $73 = $21;
   $74 = $13;
   $75 = $14;
   $76 = $75&1;
   $77 = $15;
   _InstanciateDestroy($71,$72,0,$73,$20,$74,$76,$77);
  }
  _Declarator_Destroy($20);
  STACKTOP = sp;return;
 }
 $86 = HEAP32[$47>>2]|0;
 $87 = ($86|0)==(7);
 $88 = $18;
 if (!($87)) {
  $125 = HEAP32[$88>>2]|0;
  $126 = ($125|0)==(6);
  if (!($126)) {
   STACKTOP = sp;return;
  }
  $127 = $18;
  $128 = (_DeclarationSpecifier_As_EnumSpecifier($127)|0);
  $30 = $128;
  $129 = $8;
  $130 = ((($129)) + 24|0);
  $131 = $30;
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (_SymbolMap_FindCompleteEnumSpecifier($130,$133)|0);
  $30 = $134;
  $135 = $17;
  $136 = $135&1;
  if (!($136)) {
   STACKTOP = sp;return;
  }
  $137 = $15;
  $138 = $10;
  $139 = $138<<2;
  $140 = $8;
  $141 = (_GetFreeStr($140)|0);
  $142 = $13;
  HEAP32[$vararg_buffer10>>2] = $141;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $142;
  _StrBuilder_AppendFmtLn($137,$139,6351,$vararg_buffer10);
  STACKTOP = sp;return;
 }
 $25 = $88;
 $89 = $17;
 $90 = $89&1;
 if ($90) {
  _memset(($26|0),0,200)|0;
  _memset(($27|0),0,1000)|0;
  $91 = $25;
  _GetOrGenerateStructTagName($91,$27,1000);
  (_strcat($26,$27)|0);
  (_strcat($26,6366)|0);
  $92 = $15;
  $93 = $10;
  $94 = $93<<2;
  $95 = $13;
  HEAP32[$vararg_buffer2>>2] = $26;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $95;
  _StrBuilder_AppendFmtIdent($92,$94,6374,$vararg_buffer2);
  $96 = $14;
  $97 = $96&1;
  if ($97) {
   $98 = $15;
   (_StrBuilder_Append($98,4618)|0);
   $99 = $15;
   (_StrBuilder_Append($99,2320)|0);
  }
  $100 = $8;
  $101 = $25;
  $102 = $9;
  $103 = $9;
  $104 = ((($103)) + 500|0);
  $105 = $9;
  $106 = ((($105)) + 476|0);
  (_InstantiateDeleteForStruct($100,$101,$102,$104,$106)|0);
  STACKTOP = sp;return;
 }
 $107 = $16;
 $108 = $107&1;
 if ($108) {
  STACKTOP = sp;return;
 }
 _memset(($28|0),0,200)|0;
 $109 = $25;
 _GetOrGenerateStructTagName($109,$28,200);
 _memset(($29|0),0,200)|0;
 (_strcat($29,$28)|0);
 (_strcat($29,6381)|0);
 $110 = $15;
 $111 = $10;
 $112 = $111<<2;
 $113 = $13;
 HEAP32[$vararg_buffer6>>2] = $29;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $113;
 _StrBuilder_AppendFmtIdent($110,$112,6390,$vararg_buffer6);
 $114 = $14;
 $115 = $114&1;
 if ($115) {
  $116 = $15;
  (_StrBuilder_Append($116,4618)|0);
  $117 = $15;
  (_StrBuilder_Append($117,2320)|0);
 }
 $118 = $8;
 $119 = $25;
 $120 = $9;
 $121 = $9;
 $122 = ((($121)) + 500|0);
 $123 = $9;
 $124 = ((($123)) + 476|0);
 (_InstantiateDestroyForStruct($118,$119,$120,$122,$124)|0);
 STACKTOP = sp;return;
}
function _DeclarationSpecifiers_GetMainSpecifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $7 = $5;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $6 = $16;
  $17 = $6;
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = ($18|0)==($19|0);
  if ($20) {
   break;
  }
  $22 = $5;
  $23 = (($22) + 1)|0;
  $5 = $23;
 }
 if ((label|0) == 6) {
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 $21 = $6;
 $4 = $21;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _FindStructUnionSpecifierByName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 24|0);
 $7 = $3;
 $8 = (_SymbolMap_FindCompleteStructUnionSpecifier($6,$7)|0);
 $4 = $8;
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _GetOrGenerateStructTagName($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 HEAP8[$7>>0] = 0;
 $8 = $3;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $4;
  $13 = $3;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  (_strcpy($12,$15)|0);
  STACKTOP = sp;return;
 }
 $16 = $3;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $6 = $18;
 $19 = $6;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $29 = $4;
  $30 = HEAP32[3959]|0;
  HEAP32[$vararg_buffer>>2] = $30;
  (_sprintf($29,7204,$vararg_buffer)|0);
  $31 = HEAP32[3959]|0;
  $32 = (($31) + 1)|0;
  HEAP32[3959] = $32;
  STACKTOP = sp;return;
 }
 while(1) {
  $21 = $6;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $24 = $6;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  (_strcat($23,$26)|0);
  $27 = $6;
  $28 = HEAP32[$27>>2]|0;
  $6 = $28;
 }
 STACKTOP = sp;return;
}
function _UnionTypeDefault($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(832|0);
 $vararg_buffer12 = sp + 704|0;
 $vararg_buffer10 = sp + 696|0;
 $vararg_buffer5 = sp + 680|0;
 $vararg_buffer1 = sp + 672|0;
 $vararg_buffer = sp + 664|0;
 $16 = sp + 464|0;
 $17 = sp + 256|0;
 $18 = sp + 788|0;
 $20 = sp + 776|0;
 $21 = sp + 772|0;
 $22 = sp + 48|0;
 $23 = sp + 768|0;
 $24 = sp + 756|0;
 $25 = sp + 744|0;
 $26 = sp + 732|0;
 $27 = sp + 32|0;
 $29 = sp + 716|0;
 $30 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $31 = $9;
 $32 = (_IsActive($31)|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 _memset(($16|0),0,200)|0;
 $33 = $10;
 _GetOrGenerateStructTagName($33,$16,200);
 _memset(($17|0),0,200)|0;
 HEAP32[$vararg_buffer>>2] = $16;
 (_snprintf($17,200,6084,$vararg_buffer)|0);
 $34 = $9;
 $35 = ((($34)) + 488|0);
 $36 = (_HashMap_Lookup($35,$17,$18)|0);
 $37 = $36&1;
 $19 = $37;
 $38 = $19;
 $39 = $38&1;
 if (!($39)) {
  ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
  $40 = $8;
  $41 = $10;
  (_FindRuntimeID($40,$41,$20)|0);
  HEAP32[$21>>2] = 0;
  $42 = $9;
  $43 = ((($42)) + 488|0);
  $44 = HEAP32[$18>>2]|0;
  (_HashMap_SetAt($43,$17,$44,$21)|0);
  $45 = $9;
  $46 = ((($45)) + 476|0);
  $47 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $47;
  _StrBuilder_AppendFmt($46,6096,$vararg_buffer1);
  _StrBuilder_Destroy($20);
 }
 _memset(($22|0),0,200)|0;
 (_strcat($22,$16)|0);
 $48 = $13;
 (_strcat($22,$48)|0);
 $49 = $9;
 $50 = ((($49)) + 488|0);
 $51 = (_HashMap_Lookup($50,$22,$18)|0);
 $52 = $51&1;
 $19 = $52;
 $53 = $19;
 $54 = $53&1;
 if ($54) {
  STACKTOP = sp;return;
 }
 $55 = $9;
 $56 = ((($55)) + 488|0);
 $57 = HEAP32[$18>>2]|0;
 (_HashMap_SetAt($56,$22,$57,$23)|0);
 $58 = $15;
 $59 = $13;
 HEAP32[$vararg_buffer5>>2] = $16;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $59;
 $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
 HEAP32[$vararg_ptr9>>2] = $16;
 _StrBuilder_AppendFmt($58,6121,$vararg_buffer5);
 $60 = $14;
 _StrBuilder_AppendFmt($60,2320,$vararg_buffer10);
 $61 = $14;
 $62 = $13;
 HEAP32[$vararg_buffer12>>2] = $16;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $62;
 $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
 HEAP32[$vararg_ptr16>>2] = $16;
 _StrBuilder_AppendFmt($61,6155,$vararg_buffer12);
 $63 = $14;
 (_StrBuilder_Append($63,6188)|0);
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
 $64 = $8;
 $65 = $10;
 _FindUnionSetOf($64,$65,$24);
 ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
 $66 = $8;
 $67 = $10;
 (_FindRuntimeID($66,$67,$25)|0);
 ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
 $68 = $11;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $11;
  _ParameterTypeList_GetArgsString($70,$26);
 } else {
  $71 = $12;
  (_StrBuilder_Append($26,$71)|0);
 }
 HEAP32[$27>>2] = 5868;
 $72 = ((($27)) + 4|0);
 $73 = $12;
 HEAP32[$72>>2] = $73;
 $74 = ((($27)) + 8|0);
 HEAP32[$74>>2] = 5954;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$25>>2]|0;
 HEAP32[$75>>2] = $76;
 $77 = $14;
 _StrBuilder_Template($77,5957,$27,2,1);
 _StrBuilder_Destroy($25);
 $28 = 0;
 while(1) {
  $78 = $28;
  $79 = ((($24)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($78|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = HEAP32[$24>>2]|0;
  $83 = $28;
  $84 = (($82) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)!=(0|0);
  if ($86) {
   ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
   $87 = $8;
   $88 = HEAP32[$24>>2]|0;
   $89 = $28;
   $90 = (($88) + ($89<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($91)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   (_FindIDValue($87,$93,$29)|0);
   HEAP32[$30>>2] = 5977;
   $94 = ((($30)) + 4|0);
   $95 = HEAP32[$24>>2]|0;
   $96 = $28;
   $97 = (($95) + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$94>>2] = $100;
   $101 = ((($30)) + 8|0);
   HEAP32[$101>>2] = 5982;
   $102 = ((($101)) + 4|0);
   $103 = $13;
   HEAP32[$102>>2] = $103;
   $104 = ((($101)) + 8|0);
   HEAP32[$104>>2] = 5989;
   $105 = ((($104)) + 4|0);
   $106 = HEAP32[$29>>2]|0;
   HEAP32[$105>>2] = $106;
   $107 = ((($104)) + 8|0);
   HEAP32[$107>>2] = 5995;
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$26>>2]|0;
   HEAP32[$108>>2] = $109;
   $110 = $14;
   _StrBuilder_Template($110,6191,$30,4,1);
   _StrBuilder_Destroy($29);
  }
  $111 = $28;
  $112 = (($111) + 1)|0;
  $28 = $112;
 }
 $113 = $14;
 _StrBuilder_Template($113,6063,0,0,1);
 _StrBuilder_Destroy($26);
 $114 = $14;
 (_StrBuilder_Append($114,5843)|0);
 _HashMap_Destroy($24,0);
 STACKTOP = sp;return;
}
function _InstanciateVectorPush($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr38 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $vararg_buffer35 = sp + 336|0;
 $vararg_buffer33 = sp + 328|0;
 $vararg_buffer31 = sp + 320|0;
 $vararg_buffer29 = sp + 312|0;
 $vararg_buffer27 = sp + 304|0;
 $vararg_buffer25 = sp + 296|0;
 $vararg_buffer23 = sp + 288|0;
 $vararg_buffer21 = sp + 280|0;
 $vararg_buffer19 = sp + 272|0;
 $vararg_buffer17 = sp + 264|0;
 $vararg_buffer15 = sp + 256|0;
 $vararg_buffer13 = sp + 248|0;
 $vararg_buffer11 = sp + 240|0;
 $vararg_buffer6 = sp + 224|0;
 $vararg_buffer1 = sp + 208|0;
 $vararg_buffer = sp + 200|0;
 $8 = sp + 364|0;
 $9 = sp + 352|0;
 $10 = sp;
 $11 = sp + 348|0;
 $13 = sp + 344|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $5;
 $15 = (_IsActive($14)|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 _TDeclarationSpecifiers_CodePrint($16,$17,$18,$8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $19 = $6;
 _DeclarationSpecifiers_PrintNameMangling($19,$9);
 _memset(($10|0),0,200)|0;
 $20 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $20;
 (_snprintf($10,200,6710,$vararg_buffer)|0);
 $21 = $7;
 (_StrBuilder_Append($21,$10)|0);
 $22 = $5;
 $23 = ((($22)) + 488|0);
 $24 = (_HashMap_Lookup($23,$10,$11)|0);
 $25 = $24&1;
 $12 = $25;
 $26 = $12;
 $27 = $26&1;
 if (!($27)) {
  $28 = $5;
  $29 = ((($28)) + 488|0);
  $30 = HEAP32[$11>>2]|0;
  (_HashMap_SetAt($29,$10,$30,$13)|0);
  $31 = $5;
  $32 = ((($31)) + 476|0);
  $33 = HEAP32[$9>>2]|0;
  $34 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $10;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $33;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $34;
  _StrBuilder_AppendFmt($32,6725,$vararg_buffer1);
  $35 = $5;
  $36 = ((($35)) + 500|0);
  $37 = HEAP32[$9>>2]|0;
  $38 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $10;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $37;
  $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $38;
  _StrBuilder_AppendFmt($36,6773,$vararg_buffer6);
  $39 = $5;
  $40 = ((($39)) + 500|0);
  _StrBuilder_AppendFmt($40,6822,$vararg_buffer11);
  $41 = $5;
  $42 = ((($41)) + 500|0);
  _StrBuilder_AppendFmt($42,6859,$vararg_buffer13);
  $43 = $5;
  $44 = ((($43)) + 500|0);
  _StrBuilder_AppendFmt($44,6892,$vararg_buffer15);
  $45 = $5;
  $46 = ((($45)) + 500|0);
  _StrBuilder_AppendFmt($46,6920,$vararg_buffer17);
  $47 = $5;
  $48 = ((($47)) + 500|0);
  _StrBuilder_AppendFmt($48,6952,$vararg_buffer19);
  $49 = $5;
  $50 = ((($49)) + 500|0);
  _StrBuilder_AppendFmt($50,7009,$vararg_buffer21);
  $51 = $5;
  $52 = ((($51)) + 500|0);
  _StrBuilder_AppendFmt($52,7029,$vararg_buffer23);
  $53 = $5;
  $54 = ((($53)) + 500|0);
  _StrBuilder_AppendFmt($54,7056,$vararg_buffer25);
  $55 = $5;
  $56 = ((($55)) + 500|0);
  _StrBuilder_AppendFmt($56,7084,$vararg_buffer27);
  $57 = $5;
  $58 = ((($57)) + 500|0);
  _StrBuilder_AppendFmt($58,7094,$vararg_buffer29);
  $59 = $5;
  $60 = ((($59)) + 500|0);
  _StrBuilder_AppendFmt($60,7128,$vararg_buffer31);
  $61 = $5;
  $62 = ((($61)) + 500|0);
  _StrBuilder_AppendFmt($62,7148,$vararg_buffer33);
  $63 = $5;
  $64 = ((($63)) + 500|0);
  $65 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer35>>2] = $10;
  $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
  HEAP32[$vararg_ptr38>>2] = $65;
  _StrBuilder_AppendFmt($64,5843,$vararg_buffer35);
 }
 _StrBuilder_Destroy($9);
 _StrBuilder_Destroy($8);
 STACKTOP = sp;return;
}
function _TStructDeclarator_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $8;
 $14 = HEAP32[$13>>2]|0;
 $15 = $9;
 _TDeclarator_CodePrint($11,$12,$14,$15);
 $16 = $8;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $6;
 $21 = $8;
 $22 = ((($21)) + 20|0);
 $23 = $9;
 _TNodeClueList_CodePrint($20,$22,$23);
 $24 = $6;
 $25 = ((($24)) + 404|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)<(4);
 if ($27) {
  $28 = $9;
  $29 = $6;
  _Output_Append($28,$29,5903);
 }
 $30 = $9;
 $31 = $6;
 _Output_Append($30,$31,4622);
 $32 = $6;
 _memcpy(($10|0),($32|0),548)|0;
 $33 = ((($10)) + 400|0);
 HEAP8[$33>>0] = 1;
 $34 = ((($10)) + 401|0);
 HEAP8[$34>>0] = 0;
 $35 = $5;
 $36 = $8;
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 $39 = $8;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $9;
 _TInitializer_CodePrint($35,$10,$37,$38,$41,$42);
 $43 = $6;
 $44 = ((($43)) + 404|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45>>>0)<(4);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $9;
 $48 = $6;
 _Output_Append($47,$48,5906);
 STACKTOP = sp;return;
}
function _TDeclarator_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = $7;
 _TPointerList_CodePrint($8,$9,$10);
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 _TDirectDeclarator_CodePrint($11,$12,$15,$16);
 STACKTOP = sp;return;
}
function _TInitializer_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $10;
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $10;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(28);
 $17 = $6;
 $18 = $7;
 if ($16) {
  $19 = $8;
  $20 = $9;
  $21 = $10;
  $22 = $11;
  _TInitializerListType_CodePrint($17,$18,$19,$20,$21,$22);
  STACKTOP = sp;return;
 } else {
  $23 = $10;
  $24 = $11;
  _TExpression_CodePrint($17,$18,$23,$24);
  STACKTOP = sp;return;
 }
}
function _TSpecifierQualifierList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $8;
  $16 = ($15|0)>(0);
  if ($16) {
   $17 = $5;
   $18 = ((($17)) + 412|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&1;
   if ($20) {
    $21 = $7;
    $22 = $5;
    _Output_Append($21,$22,2318);
   }
  }
  $23 = $6;
  $24 = HEAP32[$23>>2]|0;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $9 = $27;
  $28 = $9;
  $29 = HEAP32[$28>>2]|0;
  switch ($29|0) {
  case 5:  {
   $30 = $5;
   $31 = $9;
   $32 = $7;
   _TSingleTypeSpecifier_CodePrint($30,$31,$32);
   break;
  }
  case 8:  {
   $33 = $5;
   $34 = $9;
   $35 = $7;
   _StorageSpecifier_CodePrint($33,$34,$35);
   break;
  }
  case 13:  {
   $36 = $5;
   $37 = $9;
   $38 = $7;
   _TTypeQualifier_CodePrint($36,$37,$38);
   break;
  }
  case 14:  {
   $39 = $5;
   $40 = $9;
   $41 = $7;
   _TFunctionSpecifier_CodePrint($39,$40,$41);
   break;
  }
  case 7:  {
   $42 = $4;
   $43 = $5;
   $44 = $9;
   $45 = $7;
   _TStructUnionSpecifier_CodePrint($42,$43,$44,$45);
   break;
  }
  case 6:  {
   $46 = $4;
   $47 = $5;
   $48 = $9;
   $49 = $7;
   _TEnumSpecifier_CodePrint($46,$47,$48,$49);
   break;
  }
  default: {
  }
  }
  $50 = $8;
  $51 = (($50) + 1)|0;
  $8 = $51;
 }
 STACKTOP = sp;return;
}
function _TSingleTypeSpecifier_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 $9 = $5;
 _TNodeClueList_CodePrint($6,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9);
 $14 = $5;
 $15 = $3;
 $16 = $4;
 if ($13) {
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  _Output_Append($14,$15,$18);
  STACKTOP = sp;return;
 } else {
  $19 = ((($16)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_TokenToString($20)|0);
  _Output_Append($14,$15,$21);
  STACKTOP = sp;return;
 }
}
function _StorageSpecifier_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = $5;
 _TNodeClueList_CodePrint($6,$8,$9);
 $10 = $5;
 $11 = $3;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_TokenToString($14)|0);
 _Output_Append($10,$11,$15);
 STACKTOP = sp;return;
}
function _TTypeQualifier_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = $5;
 _TNodeClueList_CodePrint($6,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(86);
 if (!($13)) {
  $28 = $5;
  $29 = $3;
  $30 = $4;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_TokenToString($32)|0);
  _Output_Append($28,$29,$33);
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = ((($14)) + 404|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)<=(4);
 if ($17) {
  $18 = $5;
  $19 = $3;
  _Output_Append($18,$19,5903);
 }
 $20 = $5;
 $21 = $3;
 _Output_Append($20,$21,4650);
 $22 = $3;
 $23 = ((($22)) + 404|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24>>>0)<(4);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $5;
 $27 = $3;
 _Output_Append($26,$27,5906);
 STACKTOP = sp;return;
}
function _TFunctionSpecifier_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 8|0);
 $9 = $5;
 _TNodeClueList_CodePrint($6,$8,$9);
 $10 = $5;
 $11 = $3;
 $12 = $4;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_TokenToString($14)|0);
 _Output_Append($10,$11,$15);
 STACKTOP = sp;return;
}
function _TStructUnionSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $5;
 $12 = ((($11)) + 412|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if (!($14)) {
  $15 = $5;
  $16 = $6;
  $17 = ((($16)) + 48|0);
  $18 = $7;
  _TNodeClueList_CodePrint($15,$17,$18);
 }
 $19 = $6;
 $20 = ((($19)) + 4|0);
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)>(0);
 $24 = $6;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(118);
 if ($23) {
  if ($27) {
   $28 = $7;
   $29 = $5;
   _Output_Append($28,$29,4909);
  } else {
   $30 = $6;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(121);
   if ($33) {
    $34 = $7;
    $35 = $5;
    _Output_Append($34,$35,4931);
   }
  }
  $36 = $5;
  $37 = ((($36)) + 412|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&1;
  if ($39) {
   $40 = $7;
   $41 = $5;
   _Output_Append($40,$41,2318);
  }
  $42 = $6;
  $43 = ((($42)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $5;
   $47 = $6;
   $48 = ((($47)) + 24|0);
   $49 = $7;
   _TUnionSet_CodePrint($46,$48,$49);
  }
 } else {
  if ($27) {
   $50 = $7;
   $51 = $5;
   _Output_Append($50,$51,4909);
  } else {
   $52 = $6;
   $53 = ((($52)) + 20|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(121);
   if ($55) {
    $56 = $7;
    $57 = $5;
    _Output_Append($56,$57,4931);
   }
  }
  $58 = $5;
  $59 = ((($58)) + 412|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&1;
  if ($61) {
   $62 = $7;
   $63 = $5;
   _Output_Append($62,$63,2318);
  }
  $64 = $6;
  $65 = ((($64)) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0|0);
  if ($67) {
   $68 = $5;
   $69 = $6;
   $70 = ((($69)) + 24|0);
   $71 = $7;
   _TUnionSet_CodePrint($68,$70,$71);
  }
 }
 $72 = $5;
 $73 = ((($72)) + 412|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&1;
 if (!($75)) {
  $76 = $5;
  $77 = $6;
  $78 = ((($77)) + 56|0);
  $79 = $7;
  _TNodeClueList_CodePrint($76,$78,$79);
 }
 $80 = $6;
 $81 = ((($80)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0|0);
 if ($83) {
  $84 = $7;
  $85 = $5;
  $86 = $6;
  $87 = ((($86)) + 16|0);
  $88 = HEAP32[$87>>2]|0;
  _Output_Append($84,$85,$88);
 } else {
  $89 = $6;
  $90 = ((($89)) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)!=(0|0);
  if ($92) {
   dest=$8; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $93 = $6;
   _GetOrGenerateStructTagName($93,$8,100);
   $94 = $7;
   $95 = $5;
   _Output_Append($94,$95,$8);
  }
 }
 $96 = $6;
 $97 = ((($96)) + 4|0);
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)>(0);
 if (!($100)) {
  STACKTOP = sp;return;
 }
 $101 = $5;
 $102 = $6;
 $103 = ((($102)) + 64|0);
 $104 = $7;
 _TNodeClueList_CodePrint($101,$103,$104);
 $105 = $7;
 $106 = $5;
 _Output_Append($105,$106,4642);
 $9 = 0;
 while(1) {
  $107 = $9;
  $108 = $6;
  $109 = ((($108)) + 4|0);
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($107|0)<($111|0);
  if (!($112)) {
   break;
  }
  $113 = $6;
  $114 = ((($113)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $9;
  $117 = (($115) + ($116<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $10 = $118;
  $119 = $4;
  $120 = $5;
  $121 = $10;
  $122 = $7;
  _TAnyStructDeclaration_CodePrint($119,$120,$121,$122);
  $123 = $9;
  $124 = (($123) + 1)|0;
  $9 = $124;
 }
 $125 = $5;
 $126 = $6;
 $127 = ((($126)) + 72|0);
 $128 = $7;
 _TNodeClueList_CodePrint($125,$127,$128);
 $129 = $7;
 $130 = $5;
 _Output_Append($129,$130,4646);
 STACKTOP = sp;return;
}
function _TEnumSpecifier_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 16|0);
 $12 = $7;
 _TNodeClueList_CodePrint($9,$11,$12);
 $13 = $7;
 $14 = $5;
 _Output_Append($13,$14,4770);
 $15 = $5;
 $16 = ((($15)) + 412|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if ($18) {
  $19 = $7;
  $20 = $5;
  _Output_Append($19,$20,2318);
 }
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 24|0);
 $24 = $7;
 _TNodeClueList_CodePrint($21,$23,$24);
 $25 = $7;
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 _Output_Append($25,$26,$29);
 $30 = $5;
 $31 = $6;
 $32 = ((($31)) + 32|0);
 $33 = $7;
 _TNodeClueList_CodePrint($30,$32,$33);
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $7;
 $39 = $5;
 _Output_Append($38,$39,4642);
 $40 = $6;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $8 = $42;
 while(1) {
  $43 = $8;
  $44 = ($43|0)!=(0|0);
  if (!($44)) {
   break;
  }
  $45 = $4;
  $46 = $5;
  $47 = $8;
  $48 = $7;
  _TEnumerator_CodePrint($45,$46,$47,$48);
  $49 = $8;
  $50 = HEAP32[$49>>2]|0;
  $8 = $50;
 }
 $51 = $5;
 $52 = $6;
 $53 = ((($52)) + 40|0);
 $54 = $7;
 _TNodeClueList_CodePrint($51,$53,$54);
 $55 = $7;
 $56 = $5;
 _Output_Append($55,$56,4646);
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $17 = $8;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $9 = $19;
  $20 = $9;
  $21 = HEAP32[$20>>2]|0;
  switch ($21|0) {
  case 5:  {
   $22 = $5;
   $23 = $9;
   $24 = $7;
   _TSingleTypeSpecifier_CodePrint($22,$23,$24);
   break;
  }
  case 7:  {
   $25 = $4;
   $26 = $5;
   $27 = $9;
   $28 = $7;
   _TStructUnionSpecifier_CodePrint($25,$26,$27,$28);
   break;
  }
  case 6:  {
   $29 = $4;
   $30 = $5;
   $31 = $9;
   $32 = $7;
   _TEnumSpecifier_CodePrint($29,$30,$31,$32);
   break;
  }
  case 8:  {
   $33 = $5;
   $34 = $9;
   $35 = $7;
   _StorageSpecifier_CodePrint($33,$34,$35);
   break;
  }
  case 13:  {
   $36 = $5;
   $37 = $9;
   $38 = $7;
   _TTypeQualifier_CodePrint($36,$37,$38);
   break;
  }
  case 14:  {
   $39 = $5;
   $40 = $9;
   $41 = $7;
   _TFunctionSpecifier_CodePrint($39,$40,$41);
   break;
  }
  default: {
  }
  }
  $42 = $8;
  $43 = (($42) + 1)|0;
  $8 = $43;
 }
 STACKTOP = sp;return;
}
function _TInitDeclarator_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $10;
 $15 = HEAP32[$14>>2]|0;
 $16 = $11;
 _TDeclarator_CodePrint($12,$13,$15,$16);
 $17 = $10;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $7;
 $22 = $10;
 $23 = ((($22)) + 12|0);
 $24 = $11;
 _TNodeClueList_CodePrint($21,$23,$24);
 $25 = $11;
 $26 = $7;
 _Output_Append($25,$26,4622);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $11;
 _TInitializer_CodePrint($27,$28,$29,$30,$33,$34);
 STACKTOP = sp;return;
}
function _TInitDeclaratorList_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $15 = $1&1;
 $7 = $15;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $16 = $10;
 $17 = HEAP32[$16>>2]|0;
 $13 = $17;
 while(1) {
  $18 = $13;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   break;
  }
  $20 = $13;
  $21 = HEAP32[$20>>2]|0;
  $22 = (_Declarator_IsAutoArray($21)|0);
  $23 = $22&1;
  $14 = $23;
  $24 = $14;
  $25 = $24&1;
  $26 = $25&1;
  $27 = $7;
  $28 = $27&1;
  $29 = $28&1;
  $30 = ($26|0)==($29|0);
  if ($30) {
   $31 = $12;
   $32 = ($31|0)>(0);
   if ($32) {
    $33 = $11;
    $34 = $8;
    _Output_Append($33,$34,4610);
   }
   $35 = $6;
   $36 = $8;
   $37 = $13;
   $38 = HEAP32[$37>>2]|0;
   $39 = $9;
   $40 = $13;
   $41 = $11;
   _TInitDeclarator_CodePrint($35,$36,$38,$39,$40,$41);
   $42 = $12;
   $43 = (($42) + 1)|0;
   $12 = $43;
  }
  $44 = $13;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $13 = $46;
 }
 $47 = $12;
 STACKTOP = sp;return ($47|0);
}
function _Declarator_IsAutoArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(5);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function _FindValue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 while(1) {
  $10 = $9;
  $11 = $8;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $6;
  $14 = $7;
  $15 = $9;
  $16 = (($14) + ($15<<3)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_strlen($17)|0);
  $19 = ($13|0)==($18|0);
  if ($19) {
   $20 = $5;
   $21 = $7;
   $22 = $9;
   $23 = (($21) + ($22<<3)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $6;
   $26 = (_strncmp($20,$24,$25)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    label = 5;
    break;
   }
  }
  $33 = $9;
  $34 = (($33) + 1)|0;
  $9 = $34;
 }
 if ((label|0) == 5) {
  $28 = $7;
  $29 = $9;
  $30 = (($28) + ($29<<3)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $4 = $32;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 7) {
  $4 = 4626;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _StrBuilder_Template($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $18 = $6;
 $10 = $18;
 $11 = 0;
 while(1) {
  $19 = $11;
  $20 = $9;
  $21 = $20<<2;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $5;
  (_StrBuilder_AppendChar($23,32)|0);
  $24 = $11;
  $25 = (($24) + 1)|0;
  $11 = $25;
 }
 while(1) {
  $26 = $10;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(32);
  if (!($29)) {
   break;
  }
  $12 = 0;
  while(1) {
   $30 = $12;
   $31 = ($30|0)<(4);
   if (!($31)) {
    break;
   }
   $32 = $5;
   (_StrBuilder_AppendChar($32,32)|0);
   $33 = $12;
   $34 = (($33) + 1)|0;
   $12 = $34;
  }
  $35 = $10;
  $36 = ((($35)) + 1|0);
  $10 = $36;
 }
 while(1) {
  $37 = $10;
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)!=(0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)==(36);
  $44 = $10;
  L16: do {
   if ($43) {
    $45 = ((($44)) + 1|0);
    $10 = $45;
    $46 = $10;
    $13 = $46;
    $14 = 0;
    $47 = $10;
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = ($49|0)!=(0);
    L18: do {
     if ($50) {
      $51 = $10;
      $52 = HEAP8[$51>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($53|0)>=(97);
      if ($54) {
       $55 = $10;
       $56 = HEAP8[$55>>0]|0;
       $57 = $56 << 24 >> 24;
       $58 = ($57|0)<=(122);
       if (!($58)) {
        label = 16;
       }
      } else {
       label = 16;
      }
      do {
       if ((label|0) == 16) {
        label = 0;
        $59 = $10;
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($61|0)>=(65);
        if ($62) {
         $63 = $10;
         $64 = HEAP8[$63>>0]|0;
         $65 = $64 << 24 >> 24;
         $66 = ($65|0)<=(90);
         if ($66) {
          break;
         }
        }
        $67 = $10;
        $68 = HEAP8[$67>>0]|0;
        $69 = $68 << 24 >> 24;
        $70 = ($69|0)>=(95);
        if (!($70)) {
         break L18;
        }
       }
      } while(0);
      $71 = $10;
      $72 = ((($71)) + 1|0);
      $10 = $72;
      $73 = $14;
      $74 = (($73) + 1)|0;
      $14 = $74;
      while(1) {
       $75 = $10;
       $76 = HEAP8[$75>>0]|0;
       $77 = $76 << 24 >> 24;
       $78 = ($77|0)!=(0);
       if (!($78)) {
        break L18;
       }
       $79 = $10;
       $80 = HEAP8[$79>>0]|0;
       $81 = $80 << 24 >> 24;
       $82 = ($81|0)>=(97);
       if ($82) {
        $83 = $10;
        $84 = HEAP8[$83>>0]|0;
        $85 = $84 << 24 >> 24;
        $86 = ($85|0)<=(122);
        if (!($86)) {
         label = 23;
        }
       } else {
        label = 23;
       }
       do {
        if ((label|0) == 23) {
         label = 0;
         $87 = $10;
         $88 = HEAP8[$87>>0]|0;
         $89 = $88 << 24 >> 24;
         $90 = ($89|0)>=(65);
         if ($90) {
          $91 = $10;
          $92 = HEAP8[$91>>0]|0;
          $93 = $92 << 24 >> 24;
          $94 = ($93|0)<=(90);
          if ($94) {
           break;
          }
         }
         $95 = $10;
         $96 = HEAP8[$95>>0]|0;
         $97 = $96 << 24 >> 24;
         $98 = ($97|0)>=(48);
         if ($98) {
          $99 = $10;
          $100 = HEAP8[$99>>0]|0;
          $101 = $100 << 24 >> 24;
          $102 = ($101|0)<=(57);
          if ($102) {
           break;
          }
         }
         $103 = $10;
         $104 = HEAP8[$103>>0]|0;
         $105 = $104 << 24 >> 24;
         $106 = ($105|0)>=(95);
         if (!($106)) {
          break L18;
         }
        }
       } while(0);
       $107 = $10;
       $108 = ((($107)) + 1|0);
       $10 = $108;
       $109 = $14;
       $110 = (($109) + 1)|0;
       $14 = $110;
      }
     }
    } while(0);
    $111 = $13;
    $112 = $14;
    $113 = $7;
    $114 = $8;
    $115 = (_FindValue($111,$112,$113,$114)|0);
    $15 = $115;
    $116 = $5;
    $117 = $15;
    (_StrBuilder_Append($116,$117)|0);
   } else {
    $118 = HEAP8[$44>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = ($119|0)==(10);
    if (!($120)) {
     $148 = $10;
     $149 = HEAP8[$148>>0]|0;
     $150 = $149 << 24 >> 24;
     $151 = ($150|0)!=(8);
     if ($151) {
      $152 = $5;
      $153 = $10;
      $154 = HEAP8[$153>>0]|0;
      (_StrBuilder_AppendChar($152,$154)|0);
     }
     $155 = $10;
     $156 = ((($155)) + 1|0);
     $10 = $156;
     break;
    }
    $121 = $5;
    $122 = $10;
    $123 = HEAP8[$122>>0]|0;
    (_StrBuilder_AppendChar($121,$123)|0);
    $124 = $10;
    $125 = ((($124)) + 1|0);
    $10 = $125;
    $126 = $10;
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    $129 = ($128|0)!=(0);
    if ($129) {
     $16 = 0;
     while(1) {
      $130 = $16;
      $131 = $9;
      $132 = $131<<2;
      $133 = ($130|0)<($132|0);
      if (!($133)) {
       break;
      }
      $134 = $5;
      (_StrBuilder_AppendChar($134,32)|0);
      $135 = $16;
      $136 = (($135) + 1)|0;
      $16 = $136;
     }
     while(1) {
      $137 = $10;
      $138 = HEAP8[$137>>0]|0;
      $139 = $138 << 24 >> 24;
      $140 = ($139|0)==(32);
      if (!($140)) {
       break L16;
      }
      $17 = 0;
      while(1) {
       $141 = $17;
       $142 = ($141|0)<(4);
       if (!($142)) {
        break;
       }
       $143 = $5;
       (_StrBuilder_AppendChar($143,32)|0);
       $144 = $17;
       $145 = (($144) + 1)|0;
       $17 = $145;
      }
      $146 = $10;
      $147 = ((($146)) + 1|0);
      $10 = $147;
     }
    }
   }
  } while(0);
 }
 STACKTOP = sp;return;
}
function _FindUnionSetOf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $4;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 24|0);
  $17 = $4;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_SymbolMap_FindCompleteStructUnionSpecifier($16,$19)|0);
  $4 = $20;
 }
 $21 = $4;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $4;
  $24 = ((($23)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $4;
   $28 = ((($27)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $6 = $29;
   while(1) {
    $30 = $6;
    $31 = ($30|0)!=(0|0);
    if (!($31)) {
     break;
    }
    $32 = $3;
    $33 = ((($32)) + 24|0);
    $34 = $6;
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_SymbolMap_FindCompleteStructUnionSpecifier($33,$36)|0);
    $7 = $37;
    $38 = $3;
    $39 = $7;
    $40 = $5;
    _FindUnionSetOf($38,$39,$40);
    $41 = $6;
    $42 = HEAP32[$41>>2]|0;
    $6 = $42;
   }
   STACKTOP = sp;return;
  }
 }
 HEAP32[$8>>2] = 0;
 $43 = $5;
 $44 = $4;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 (_HashMap_SetAt($43,$46,0,$8)|0);
 STACKTOP = sp;return;
}
function _SyntaxTree_PrintCodeToString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $6 = sp + 36|0;
 $8 = sp + 20|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _memset(($6|0),0,548)|0;
 $12 = ((($6)) + 1|0);
 HEAP8[$12>>0] = 1;
 $13 = ((($6)) + 468|0);
 HEAP8[$13>>0] = 1;
 $14 = $4;
 _memcpy(($6|0),($14|0),452)|0;
 HEAP32[3957] = 0;
 HEAP32[3958] = 0;
 $7 = 0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 (_StrBuilder_Reserve($8,400000)|0);
 $9 = 0;
 while(1) {
  $15 = $9;
  $16 = $3;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $9;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $10 = $24;
  $25 = ((($6)) + 476|0);
  _StrBuilder_Clear($25);
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $26 = $3;
  $27 = $10;
  _TAnyDeclaration_CodePrint($26,$6,$27,$11);
  $28 = (_IsActive($6)|0);
  if ($28) {
   $29 = ((($6)) + 476|0);
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)>(0);
   if ($32) {
    (_StrBuilder_Append($8,2320)|0);
    $33 = ((($6)) + 476|0);
    $34 = HEAP32[$33>>2]|0;
    (_StrBuilder_Append($8,$34)|0);
    (_StrBuilder_Append($8,2320)|0);
   }
  }
  $35 = HEAP32[$11>>2]|0;
  (_StrBuilder_Append($8,$35)|0);
  _StrBuilder_Destroy($11);
  $36 = $5;
  $37 = HEAP32[$8>>2]|0;
  (_StrBuilder_Append($36,$37)|0);
  _StrBuilder_Clear($8);
  $38 = $7;
  $39 = (($38) + 1)|0;
  $7 = $39;
  $40 = $9;
  $41 = (($40) + 1)|0;
  $9 = $41;
 }
 $42 = ((($6)) + 500|0);
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)>(0);
 if (!($45)) {
  _StrBuilder_Destroy($8);
  STACKTOP = sp;return;
 }
 $46 = $5;
 (_StrBuilder_Append($46,2320)|0);
 $47 = $5;
 (_StrBuilder_Append($47,2320)|0);
 $48 = $5;
 $49 = ((($6)) + 500|0);
 $50 = HEAP32[$49>>2]|0;
 (_StrBuilder_Append($48,$50)|0);
 $51 = $5;
 (_StrBuilder_Append($51,2320)|0);
 _StrBuilder_Destroy($8);
 STACKTOP = sp;return;
}
function _TAnyDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 3:  {
  $10 = $5;
  $11 = $6;
  $12 = $7;
  _TEofDeclaration_CodePrint($10,$11,$12);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $13 = $4;
  $14 = $5;
  $15 = $6;
  $16 = $7;
  _TStaticAssertDeclaration_CodePrint($13,$14,$15,$16);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $17 = $4;
  $18 = $5;
  $19 = $6;
  $20 = $7;
  _TDeclaration_CodePrint($17,$18,$19,$20);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _InstantiateDestroyForPolymorphicType($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 48|0;
 $13 = sp + 296|0;
 $16 = sp + 276|0;
 $17 = sp + 264|0;
 $18 = sp + 32|0;
 $20 = sp + 248|0;
 $21 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = $6;
 $23 = (_IsActive($22)|0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $7;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $5;
  $29 = ((($28)) + 24|0);
  $30 = $7;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_SymbolMap_FindCompleteStructUnionSpecifier($29,$32)|0);
  $7 = $33;
 }
 _memset(($10|0),0,200)|0;
 $34 = $7;
 _GetOrGenerateStructTagName($34,$10,200);
 $11 = 5868;
 $12 = 5909;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 $35 = $5;
 $36 = $7;
 _FindUnionSetOf($35,$36,$13);
 $14 = 0;
 while(1) {
  $37 = $14;
  $38 = ((($13)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = HEAP32[$13>>2]|0;
  $42 = $14;
  $43 = (($41) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $5;
   $47 = ((($46)) + 24|0);
   $48 = HEAP32[$13>>2]|0;
   $49 = $14;
   $50 = (($48) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_SymbolMap_FindCompleteStructUnionSpecifier($47,$53)|0);
   $15 = $54;
   $55 = $15;
   $56 = ($55|0)!=(0|0);
   if (!($56)) {
    label = 9;
    break;
   }
   $57 = $5;
   $58 = $15;
   $59 = $6;
   $60 = $6;
   $61 = ((($60)) + 500|0);
   $62 = $6;
   $63 = ((($62)) + 476|0);
   (_InstantiateDeleteForStruct($57,$58,$59,$61,$63)|0);
  }
  $64 = $14;
  $65 = (($64) + 1)|0;
  $14 = $65;
 }
 if ((label|0) == 9) {
  ___assert_fail((5472|0),(2336|0),10299,(5917|0));
  // unreachable;
 }
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
 $66 = $5;
 $67 = $7;
 (_FindRuntimeID($66,$67,$16)|0);
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
 $68 = $8;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $8;
  _ParameterTypeList_GetArgsString($70,$17);
 } else {
  $71 = $11;
  (_StrBuilder_Append($17,$71)|0);
 }
 HEAP32[$18>>2] = 5868;
 $72 = ((($18)) + 4|0);
 $73 = $11;
 HEAP32[$72>>2] = $73;
 $74 = ((($18)) + 8|0);
 HEAP32[$74>>2] = 5954;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$16>>2]|0;
 HEAP32[$75>>2] = $76;
 $77 = $9;
 $78 = $6;
 $79 = ((($78)) + 472|0);
 $80 = HEAP32[$79>>2]|0;
 _StrBuilder_Template($77,5957,$18,2,$80);
 _StrBuilder_Destroy($16);
 $19 = 0;
 while(1) {
  $81 = $19;
  $82 = ((($13)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)<($83|0);
  if (!($84)) {
   break;
  }
  $85 = HEAP32[$13>>2]|0;
  $86 = $19;
  $87 = (($85) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)!=(0|0);
  if ($89) {
   ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
   $90 = $5;
   $91 = HEAP32[$13>>2]|0;
   $92 = $19;
   $93 = (($91) + ($92<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($94)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   (_FindIDValue($90,$96,$20)|0);
   HEAP32[$21>>2] = 5977;
   $97 = ((($21)) + 4|0);
   $98 = HEAP32[$13>>2]|0;
   $99 = $19;
   $100 = (($98) + ($99<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($101)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP32[$97>>2] = $103;
   $104 = ((($21)) + 8|0);
   HEAP32[$104>>2] = 5982;
   $105 = ((($104)) + 4|0);
   $106 = $12;
   HEAP32[$105>>2] = $106;
   $107 = ((($104)) + 8|0);
   HEAP32[$107>>2] = 5989;
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$20>>2]|0;
   HEAP32[$108>>2] = $109;
   $110 = ((($107)) + 8|0);
   HEAP32[$110>>2] = 5995;
   $111 = ((($110)) + 4|0);
   $112 = HEAP32[$17>>2]|0;
   HEAP32[$111>>2] = $112;
   $113 = $9;
   $114 = $6;
   $115 = ((($114)) + 472|0);
   $116 = HEAP32[$115>>2]|0;
   _StrBuilder_Template($113,6000,$21,4,$116);
   _StrBuilder_Destroy($20);
  }
  $117 = $19;
  $118 = (($117) + 1)|0;
  $19 = $118;
 }
 $119 = $9;
 $120 = $6;
 $121 = ((($120)) + 472|0);
 $122 = HEAP32[$121>>2]|0;
 _StrBuilder_Template($119,6063,0,0,$122);
 _StrBuilder_Destroy($17);
 _HashMap_Destroy($13,0);
 STACKTOP = sp;return;
}
function _InstantiateDeleteForStruct($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val21 = 0, $$expand_i1_val23 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1312|0);
 $vararg_buffer18 = sp + 1264|0;
 $vararg_buffer16 = sp + 1256|0;
 $vararg_buffer13 = sp + 1248|0;
 $vararg_buffer10 = sp + 1240|0;
 $vararg_buffer8 = sp + 1232|0;
 $vararg_buffer4 = sp + 1224|0;
 $vararg_buffer2 = sp + 1216|0;
 $vararg_buffer = sp + 1208|0;
 $5 = sp + 1297|0;
 $11 = sp + 208|0;
 $12 = sp;
 $13 = sp + 1272|0;
 $15 = sp + 1268|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $16 = $8;
 $17 = (_IsActive($16)|0);
 if (!($17)) {
  $$expand_i1_val = 0;
  HEAP8[$5>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 _memset(($11|0),0,1000)|0;
 $18 = $7;
 _GetOrGenerateStructTagName($18,$11,1000);
 _memset(($12|0),0,200)|0;
 (_strcat($12,$11)|0);
 (_strcat($12,6366)|0);
 $19 = $8;
 $20 = ((($19)) + 488|0);
 $21 = (_HashMap_Lookup($20,$12,$13)|0);
 $22 = $21&1;
 $14 = $22;
 $23 = $14;
 $24 = $23&1;
 if ($24) {
  $$expand_i1_val21 = 0;
  HEAP8[$5>>0] = $$expand_i1_val21;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 } else {
  $25 = $6;
  $26 = $7;
  $27 = $8;
  $28 = $9;
  $29 = $10;
  (_InstantiateDestroyForStruct($25,$26,$27,$28,$29)|0);
  $30 = $10;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _StrBuilder_AppendFmt($30,6534,$vararg_buffer);
  $31 = $9;
  _StrBuilder_AppendFmt($31,2320,$vararg_buffer2);
  $32 = $9;
  HEAP32[$vararg_buffer4>>2] = $11;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $11;
  _StrBuilder_AppendFmt($32,6572,$vararg_buffer4);
  $33 = $9;
  _StrBuilder_AppendFmt($33,6611,$vararg_buffer8);
  $34 = $9;
  HEAP32[$vararg_buffer10>>2] = $11;
  _StrBuilder_AppendFmt($34,6625,$vararg_buffer10);
  $35 = $9;
  $36 = $6;
  $37 = (_GetFreeStr($36)|0);
  HEAP32[$vararg_buffer13>>2] = $37;
  _StrBuilder_AppendFmt($35,6649,$vararg_buffer13);
  $38 = $9;
  _StrBuilder_AppendFmt($38,6666,$vararg_buffer16);
  $39 = $9;
  _StrBuilder_AppendFmt($39,5843,$vararg_buffer18);
  $40 = $8;
  $41 = ((($40)) + 488|0);
  $42 = HEAP32[$13>>2]|0;
  (_HashMap_SetAt($41,$12,$42,$15)|0);
  $$expand_i1_val23 = 1;
  HEAP8[$5>>0] = $$expand_i1_val23;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _FindRuntimeID($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ($11|0)==(0|0);
 if ($12) {
  ___assert_fail((5472|0),(2336|0),9742,(14538|0));
  // unreachable;
 }
 $13 = $5;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $4;
  $18 = ((($17)) + 24|0);
  $19 = $5;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_SymbolMap_FindCompleteStructUnionSpecifier($18,$21)|0);
  $5 = $22;
 }
 $23 = $5;
 $24 = ($23|0)==(0|0);
 if ($24) {
  ___assert_fail((5472|0),(2336|0),9752,(14538|0));
  // unreachable;
 }
 $7 = 0;
 $25 = $5;
 $26 = ($25|0)!=(0|0);
 do {
  if ($26) {
   $27 = $5;
   $28 = ((($27)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $4;
    $32 = ((($31)) + 24|0);
    $33 = $5;
    $34 = ((($33)) + 24|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_SymbolMap_FindCompleteStructUnionSpecifier($32,$37)|0);
    $5 = $38;
    $39 = $5;
    $40 = ($39|0)!=(0|0);
    if ($40) {
     $41 = $5;
     $42 = ((($41)) + 4|0);
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)>(0);
     if ($45) {
      $46 = $5;
      $47 = ((($46)) + 4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = HEAP32[$48>>2]|0;
      $50 = (_AnyStructDeclaration_As_StructDeclaration($49)|0);
      $8 = $50;
      $51 = $8;
      $52 = ($51|0)!=(0|0);
      if (!($52)) {
       break;
      }
      $53 = $8;
      $54 = ((($53)) + 16|0);
      $55 = HEAP32[$54>>2]|0;
      $9 = $55;
      $56 = $9;
      $57 = ($56|0)!=(0|0);
      if (!($57)) {
       break;
      }
      $58 = $9;
      $59 = HEAP32[$58>>2]|0;
      $60 = (_Declarator_GetName($59)|0);
      $10 = $60;
      $61 = $6;
      $62 = $10;
      (_StrBuilder_Set($61,$62)|0);
      break;
     }
    }
    $63 = $5;
    $64 = ($63|0)!=(0|0);
    if ($64) {
     $65 = $5;
     $66 = ((($65)) + 24|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0|0);
     if ($68) {
      $69 = $4;
      $70 = $5;
      $71 = $6;
      $72 = (_FindRuntimeID($69,$70,$71)|0);
      $3 = $72;
      $74 = $3;
      STACKTOP = sp;return ($74|0);
     }
    }
   }
  }
 } while(0);
 $73 = $7;
 $3 = $73;
 $74 = $3;
 STACKTOP = sp;return ($74|0);
}
function _ParameterTypeList_GetArgsString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = (_Parameter_GetName($13)|0);
  $6 = $14;
  $15 = $6;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = $4;
   $18 = ($17|0)>(0);
   if ($18) {
    $19 = $3;
    (_StrBuilder_Append($19,6267)|0);
   }
   $20 = $3;
   $21 = $6;
   (_StrBuilder_Append($20,$21)|0);
  }
  $22 = $4;
  $23 = (($22) + 1)|0;
  $4 = $23;
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $5 = $26;
 }
 STACKTOP = sp;return;
}
function _FindIDValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = $4;
 $14 = (_SyntaxTree_GetFinalTypeDeclaration($12,$13)|0);
 $6 = $14;
 $7 = 0;
 $8 = 0;
 $15 = $6;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $7 = 1;
  $17 = $6;
  $18 = ((($17)) + 4|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(1);
  if ($21) {
   $22 = $6;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_DeclarationSpecifier_As_StructUnionSpecifier($26)|0);
   $8 = $27;
   $28 = $8;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $3;
    $33 = ((($32)) + 24|0);
    $34 = $8;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_SymbolMap_FindCompleteStructUnionSpecifier($33,$36)|0);
    $8 = $37;
   }
  }
 } else {
  $7 = 2;
  $38 = $3;
  $39 = ((($38)) + 24|0);
  $40 = $4;
  $41 = (_SymbolMap_FindCompleteStructUnionSpecifier($39,$40)|0);
  $8 = $41;
 }
 $42 = $8;
 $43 = ($42|0)!=(0|0);
 if (!($43)) {
  $72 = $7;
  STACKTOP = sp;return ($72|0);
 }
 $44 = $8;
 $45 = ((($44)) + 4|0);
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)>(0);
 if (!($48)) {
  $72 = $7;
  STACKTOP = sp;return ($72|0);
 }
 $49 = $8;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = (_AnyStructDeclaration_As_StructDeclaration($52)|0);
 $9 = $53;
 $54 = $9;
 $55 = ($54|0)!=(0|0);
 if (!($55)) {
  $72 = $7;
  STACKTOP = sp;return ($72|0);
 }
 $56 = $9;
 $57 = ((($56)) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $10 = $58;
 $59 = $10;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  $72 = $7;
  STACKTOP = sp;return ($72|0);
 }
 _memset(($11|0),0,548)|0;
 $61 = ((($11)) + 1|0);
 HEAP8[$61>>0] = 1;
 $62 = ((($11)) + 468|0);
 HEAP8[$62>>0] = 1;
 $63 = $3;
 $64 = $10;
 $65 = HEAP32[$64>>2]|0;
 $66 = $9;
 $67 = ((($66)) + 4|0);
 $68 = $10;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $5;
 _TInitializer_CodePrint($63,$11,$65,$67,$70,$71);
 $72 = $7;
 STACKTOP = sp;return ($72|0);
}
function _DeclarationSpecifier_As_StructUnionSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(7);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _SyntaxTree_GetFinalTypeDeclaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 24|0);
 $6 = $3;
 $7 = (_SymbolMap_FindTypedefDeclarationTarget($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _InstanciateInit($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1600|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1600|0);
 $vararg_buffer22 = sp + 256|0;
 $vararg_buffer18 = sp + 248|0;
 $vararg_buffer15 = sp + 240|0;
 $vararg_buffer12 = sp + 232|0;
 $vararg_buffer9 = sp + 224|0;
 $vararg_buffer5 = sp + 216|0;
 $vararg_buffer2 = sp + 208|0;
 $vararg_buffer = sp + 200|0;
 $21 = sp + 1540|0;
 $25 = sp + 1496|0;
 $34 = sp + 1460|0;
 $35 = sp + 1448|0;
 $37 = sp + 1376|0;
 $39 = sp + 824|0;
 $41 = sp;
 $43 = sp + 268|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $45 = $12;
 $46 = ($45|0)!=(0|0);
 $47 = $14;
 $48 = ($47|0)!=(0|0);
 $or$cond = $46 & $48;
 if ($or$cond) {
  $49 = $14;
  HEAP8[$49>>0] = 1;
 }
 $50 = $11;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $11;
  $53 = (_PointerList_IsPointerToObject($52)|0);
  $55 = $53;
 } else {
  $55 = 0;
 }
 $54 = $55&1;
 $16 = $54;
 $56 = $11;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = $11;
  $59 = (_PointerList_IsAutoPointerToObject($58)|0);
  $61 = $59;
 } else {
  $61 = 0;
 }
 $60 = $61&1;
 $17 = $60;
 $62 = $11;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $11;
  $65 = (_PointerList_IsAutoPointerToAutoPointer($64)|0);
  $67 = $65;
 } else {
  $67 = 0;
 }
 $66 = $67&1;
 $18 = $66;
 $68 = $10;
 $69 = (_SpecifierQualifierList_GetMainSpecifier($68)|0);
 $19 = $69;
 $70 = $19;
 $71 = ($70|0)==(0|0);
 if ($71) {
  STACKTOP = sp;return;
 }
 $72 = $19;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(5);
 $75 = $19;
 if (!($74)) {
  $235 = HEAP32[$75>>2]|0;
  $236 = ($235|0)==(7);
  $237 = $19;
  if ($236) {
   $40 = $237;
   $238 = $16;
   $239 = $238&1;
   if (!($239)) {
    $240 = $17;
    $241 = $240&1;
    if (!($241)) {
     $242 = $18;
     $243 = $242&1;
     if (!($243)) {
      $247 = $8;
      $248 = $40;
      $249 = $9;
      $250 = $9;
      $251 = ((($250)) + 476|0);
      (_InstantiateInitForStruct($247,$248,$249,$251)|0);
      _memset(($41|0),0,200)|0;
      $252 = $40;
      $253 = ((($252)) + 16|0);
      $254 = HEAP32[$253>>2]|0;
      (_strcatupper($41,$254)|0);
      (_strcat($41,6321)|0);
      $255 = $15;
      $256 = $9;
      $257 = ((($256)) + 472|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $258<<2;
      (_StrBuilder_AppendIdent($255,$259,$41)|0);
      STACKTOP = sp;return;
     }
    }
   }
   $244 = $15;
   $245 = $8;
   $246 = (_GetNullStr($245)|0);
   HEAP32[$vararg_buffer12>>2] = $246;
   _StrBuilder_AppendFmt($244,5464,$vararg_buffer12);
   STACKTOP = sp;return;
  }
  $260 = HEAP32[$237>>2]|0;
  $261 = ($260|0)==(6);
  if (!($261)) {
   STACKTOP = sp;return;
  }
  $262 = $19;
  $263 = (_DeclarationSpecifier_As_EnumSpecifier($262)|0);
  $42 = $263;
  $264 = $8;
  $265 = ((($264)) + 24|0);
  $266 = $42;
  $267 = ((($266)) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (_SymbolMap_FindCompleteEnumSpecifier($265,$268)|0);
  $42 = $269;
  $270 = $42;
  $271 = ($270|0)==(0|0);
  if ($271) {
   ___assert_fail((5472|0),(2336|0),10730,(6327|0));
   // unreachable;
  }
  $272 = $12;
  $273 = ($272|0)!=(0|0);
  if ($273) {
   $274 = $15;
   $275 = $9;
   $276 = ((($275)) + 472|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = $277<<2;
   $279 = $13;
   HEAP32[$vararg_buffer15>>2] = $279;
   _StrBuilder_AppendFmtIdent($274,$278,6343,$vararg_buffer15);
   $280 = $9;
   _memcpy(($43|0),($280|0),548)|0;
   $281 = $8;
   $282 = $11;
   $283 = $10;
   $284 = $12;
   $285 = $15;
   _TInitializer_CodePrint($281,$43,$282,$283,$284,$285);
   STACKTOP = sp;return;
  }
  $286 = $42;
  $287 = ((($286)) + 8|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ($288|0)!=(0|0);
  if ($289) {
   $290 = $42;
   $291 = ((($290)) + 8|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = ((($292)) + 4|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $294;
  } else {
   $295 = 6349;
  }
  $44 = $295;
  $296 = $16;
  $297 = $296&1;
  if (!($297)) {
   $298 = $17;
   $299 = $298&1;
   if (!($299)) {
    $300 = $18;
    $301 = $300&1;
    if (!($301)) {
     $306 = $15;
     $307 = $13;
     $308 = $44;
     HEAP32[$vararg_buffer22>>2] = $307;
     $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
     HEAP32[$vararg_ptr25>>2] = $308;
     _StrBuilder_AppendFmt($306,6302,$vararg_buffer22);
     STACKTOP = sp;return;
    }
   }
  }
  $302 = $15;
  $303 = $13;
  $304 = $8;
  $305 = (_GetNullStr($304)|0);
  HEAP32[$vararg_buffer18>>2] = $303;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $305;
  _StrBuilder_AppendFmt($302,6302,$vararg_buffer18);
  STACKTOP = sp;return;
 }
 $20 = $75;
 $76 = $20;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)==(9);
 if ($79) {
  ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
  $80 = $8;
  $81 = ((($80)) + 24|0);
  $82 = $20;
  $83 = ((($82)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_SymbolMap_FindTypedefFirstTarget($81,$84,$21)|0);
  $22 = $85;
  $86 = $22;
  $87 = ($86|0)!=(0|0);
  if (!($87)) {
   STACKTOP = sp;return;
  }
  $88 = $11;
  $89 = HEAP32[$88>>2]|0;
  $23 = $89;
  while(1) {
   $90 = $23;
   $91 = ($90|0)!=(0|0);
   if (!($91)) {
    break;
   }
   ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;HEAP32[$25+16>>2]=0|0;HEAP32[$25+20>>2]=0|0;HEAP32[$25+24>>2]=0|0;HEAP32[$25+28>>2]=0|0;
   $92 = (_mallocinit(32,$25)|0);
   $24 = $92;
   $93 = $24;
   $94 = $23;
   _Pointer_CopyFrom($93,$94);
   $95 = $24;
   _PointerList_PushBack($21,$95);
   $96 = $23;
   $97 = ((($96)) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $23 = $98;
  }
  $99 = $8;
  $100 = $9;
  $101 = $22;
  $102 = $12;
  $103 = $13;
  $104 = $14;
  $105 = $15;
  _InstanciateInit($99,$100,$101,$21,$102,$103,$104,$105);
  _Declarator_Destroy($21);
  STACKTOP = sp;return;
 }
 $106 = $20;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(118);
 if (!($109)) {
  $110 = $20;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(121);
  if (!($113)) {
   $205 = $20;
   $206 = ((($205)) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($207|0)==(96);
   if ($208) {
    STACKTOP = sp;return;
   }
   $209 = $12;
   $210 = ($209|0)!=(0|0);
   if ($210) {
    $211 = $15;
    $212 = $9;
    $213 = ((($212)) + 472|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = $214<<2;
    $216 = $13;
    HEAP32[$vararg_buffer2>>2] = $216;
    _StrBuilder_AppendFmtIdent($211,$215,6294,$vararg_buffer2);
    $217 = $9;
    _memcpy(($39|0),($217|0),548)|0;
    $218 = $8;
    $219 = $11;
    $220 = $10;
    $221 = $12;
    $222 = $15;
    _TInitializer_CodePrint($218,$39,$219,$220,$221,$222);
    STACKTOP = sp;return;
   }
   $223 = $16;
   $224 = $223&1;
   if (!($224)) {
    $225 = $17;
    $226 = $225&1;
    if (!($226)) {
     $227 = $18;
     $228 = $227&1;
     if (!($228)) {
      $233 = $15;
      $234 = $13;
      HEAP32[$vararg_buffer9>>2] = $234;
      _StrBuilder_AppendFmt($233,6312,$vararg_buffer9);
      STACKTOP = sp;return;
     }
    }
   }
   $229 = $15;
   $230 = $13;
   $231 = $8;
   $232 = (_GetNullStr($231)|0);
   HEAP32[$vararg_buffer5>>2] = $230;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = $232;
   _StrBuilder_AppendFmt($229,6302,$vararg_buffer5);
   STACKTOP = sp;return;
  }
 }
 $26 = 0;
 $27 = 0;
 $114 = $27;
 $115 = $114&1;
 if ($115) {
  STACKTOP = sp;return;
 }
 $116 = $20;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = $20;
  $119 = ((($118)) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)!=(0|0);
  if ($121) {
   $122 = $8;
   $123 = ((($122)) + 24|0);
   $124 = $20;
   $125 = ((($124)) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (_SymbolMap_FindCompleteStructUnionSpecifier($123,$126)|0);
   $26 = $127;
  }
 }
 $128 = $26;
 $129 = ($128|0)!=(0|0);
 if ($129) {
  $130 = $26;
  $131 = ((($130)) + 24|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)!=(0|0);
  $135 = $133;
 } else {
  $135 = 0;
 }
 $134 = $135&1;
 $28 = $134;
 $136 = $26;
 $137 = ($136|0)!=(0|0);
 if ($137) {
  $138 = $26;
  $139 = ((($138)) + 4|0);
  $140 = ((($139)) + 4|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)>(0);
  if ($142) {
   $143 = $15;
   $144 = $9;
   $145 = ((($144)) + 472|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146<<2;
   (_StrBuilder_AppendIdent($143,$147,4642)|0);
   $148 = $28;
   $149 = $148&1;
   L91: do {
    if (!($149)) {
     $29 = 0;
     $30 = 0;
     while(1) {
      $150 = $30;
      $151 = $26;
      $152 = ((($151)) + 4|0);
      $153 = ((($152)) + 4|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ($150|0)<($154|0);
      if (!($155)) {
       break L91;
      }
      $156 = $26;
      $157 = ((($156)) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $30;
      $160 = (($158) + ($159<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $31 = $161;
      $162 = $31;
      $163 = (_AnyStructDeclaration_As_StructDeclaration($162)|0);
      $32 = $163;
      $164 = $32;
      $165 = ($164|0)!=(0|0);
      if ($165) {
       $166 = $32;
       $167 = ((($166)) + 16|0);
       $168 = HEAP32[$167>>2]|0;
       $33 = $168;
       ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;
       ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;
       while(1) {
        $169 = $33;
        $170 = ($169|0)!=(0|0);
        if (!($170)) {
         break;
        }
        $171 = $29;
        $172 = ($171|0)>(0);
        if ($172) {
         $173 = $15;
         (_StrBuilder_Append($173,6267)|0);
        }
        $174 = $29;
        $175 = (($174) + 1)|0;
        $29 = $175;
        $176 = $33;
        $177 = ((($176)) + 4|0);
        $178 = HEAP32[$177>>2]|0;
        $36 = $178;
        dest=$37; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
        HEAP32[$37>>2] = 33;
        _StrBuilder_Clear($34);
        _StrBuilder_Clear($35);
        $179 = $33;
        $180 = HEAP32[$179>>2]|0;
        $181 = (_Declarator_GetName($180)|0);
        $38 = $181;
        (_StrBuilder_Append($34,14755)|0);
        $182 = $38;
        (_StrBuilder_Append($34,$182)|0);
        $183 = $8;
        $184 = $9;
        $185 = $32;
        $186 = ((($185)) + 4|0);
        $187 = $33;
        $188 = HEAP32[$187>>2]|0;
        $189 = $36;
        $190 = HEAP32[$34>>2]|0;
        $191 = $14;
        $192 = $15;
        _InstanciateInit($183,$184,$186,$188,$189,$190,$191,$192);
        _PrimaryExpressionValue_Destroy($37);
        $193 = $33;
        $194 = ((($193)) + 8|0);
        $195 = HEAP32[$194>>2]|0;
        $33 = $195;
       }
       _StrBuilder_Destroy($34);
       _StrBuilder_Destroy($35);
      }
      $196 = $30;
      $197 = (($196) + 1)|0;
      $30 = $197;
     }
    }
   } while(0);
   $198 = $15;
   $199 = $9;
   $200 = ((($199)) + 472|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201<<2;
   (_StrBuilder_AppendIdent($198,$202,4646)|0);
   STACKTOP = sp;return;
  }
 }
 $203 = $15;
 $204 = $13;
 HEAP32[$vararg_buffer>>2] = $204;
 _StrBuilder_AppendFmt($203,6270,$vararg_buffer);
 STACKTOP = sp;return;
}
function _PointerList_IsPointerToObject($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $3 = $14;
   $15 = $3;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $2 = 1;
   }
  }
 }
 $17 = $2;
 $18 = $17&1;
 STACKTOP = sp;return ($18|0);
}
function _PointerList_IsAutoPointerToObject($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 L1: do {
  if ($8) {
   $9 = $3;
   $10 = ((($9)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $4 = 0;
    while(1) {
     $13 = $4;
     $14 = $3;
     $15 = ((($14)) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($13|0)<($16|0);
     if (!($17)) {
      break L1;
     }
     $18 = $3;
     $19 = $4;
     $20 = (($18) + ($19<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($21)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (_IsAutoToken($23)|0);
     if ($24) {
      break;
     }
     $25 = $4;
     $26 = (($25) + 1)|0;
     $4 = $26;
    }
    $2 = 1;
   }
  }
 } while(0);
 $27 = $2;
 $28 = $27&1;
 STACKTOP = sp;return ($28|0);
}
function _PointerList_IsAutoPointerToAutoPointer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 do {
  if ($7) {
   $8 = $3;
   $9 = ((($8)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = $3;
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_IsAutoToken($15)|0);
    if ($16) {
     $17 = $3;
     $18 = ((($17)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $3 = $19;
     $20 = $3;
     $21 = ($20|0)!=(0|0);
     if ($21) {
      $22 = $3;
      $23 = ((($22)) + 16|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = $3;
       $27 = HEAP32[$26>>2]|0;
       $28 = ((($27)) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (_IsAutoToken($29)|0);
       if ($30) {
        $2 = 1;
        break;
       }
      }
      $31 = $3;
      $32 = ((($31)) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)==(2);
      if ($34) {
       $35 = $3;
       $36 = HEAP32[$35>>2]|0;
       $37 = ((($36)) + 4|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (_IsAutoToken($38)|0);
       if ($39) {
        $47 = 1;
       } else {
        $40 = $3;
        $41 = ((($40)) + 4|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ((($42)) + 4|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = (_IsAutoToken($44)|0);
        $47 = $45;
       }
       $46 = $47&1;
       $2 = $46;
      }
     }
    }
   }
  }
 } while(0);
 $48 = $2;
 $49 = $48&1;
 STACKTOP = sp;return ($49|0);
}
function _SpecifierQualifierList_GetMainSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $5 = $3;
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   label = 8;
   break;
  }
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $4 = $14;
  $15 = $4;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(5);
  if ($17) {
   break;
  }
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(7);
  if ($20) {
   break;
  }
  $21 = $4;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(6);
  if ($23) {
   break;
  }
  $25 = $3;
  $26 = (($25) + 1)|0;
  $3 = $26;
 }
 if ((label|0) == 8) {
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $24 = $4;
 $2 = $24;
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function _Declarator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _PointerList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _DirectDeclarator_Delete($5);
 STACKTOP = sp;return;
}
function _AnyStructDeclaration_As_StructDeclaration($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(11);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _Declarator_GetName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 12;
   break;
  }
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $3;
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)!=(0);
   if ($19) {
    label = 7;
    break;
   }
  }
  $22 = $3;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = $3;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_Declarator_GetName($28)|0);
   $4 = $29;
   $30 = $4;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    label = 10;
    break;
   }
  }
  $33 = $3;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $3 = $35;
 }
 if ((label|0) == 7) {
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $1 = $21;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 10) {
  $32 = $4;
  $1 = $32;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 12) {
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _PrimaryExpressionValue_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 40|0);
 _TypeName_Destroy($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _Expression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 32|0);
 _TokenList_Destroy($13);
 STACKTOP = sp;return;
}
function _GetNullStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 40|0);
 $5 = (_MacroMap_Find($4,14552)|0);
 $6 = ($5|0)!=(0|0);
 $7 = $6&1;
 $2 = $7;
 $8 = $2;
 $9 = $8&1;
 $10 = $9 ? 14552 : 6349;
 STACKTOP = sp;return ($10|0);
}
function _InstantiateInitForStruct($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer1 = sp + 208|0;
 $vararg_buffer = sp + 200|0;
 $4 = sp + 371|0;
 $10 = sp;
 $11 = sp + 348|0;
 $13 = sp + 344|0;
 $14 = sp + 332|0;
 $20 = sp + 300|0;
 $21 = sp + 288|0;
 $23 = sp + 216|0;
 $25 = sp + 368|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $26 = $6;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $6;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $5;
   $33 = ((($32)) + 24|0);
   $34 = $6;
   $35 = ((($34)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_SymbolMap_FindCompleteStructUnionSpecifier($33,$36)|0);
   $6 = $37;
  }
 }
 $38 = $6;
 $39 = ($38|0)==(0|0);
 if ($39) {
  ___assert_fail((5472|0),(2336|0),11108,(6673|0));
  // unreachable;
 }
 $40 = $6;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $6;
  $43 = ((($42)) + 24|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0|0);
  $47 = $45;
 } else {
  $47 = 0;
 }
 $46 = $47&1;
 $9 = $46;
 $48 = $9;
 $49 = $48&1;
 do {
  if ($49) {
   $50 = $7;
   $51 = ((($50)) + 472|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$51>>2] = $53;
   $54 = $5;
   $55 = $7;
   $56 = $6;
   $57 = $8;
   _InstantiateDestroyForPolymorphicType($54,$55,$56,0,$57);
   $58 = $7;
   $59 = ((($58)) + 472|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + -1)|0;
   HEAP32[$59>>2] = $61;
  } else {
   $62 = $6;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    $64 = $6;
    $65 = ((($64)) + 4|0);
    $66 = ((($65)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)>(0);
    if ($68) {
     _memset(($10|0),0,200)|0;
     $69 = $6;
     $70 = ((($69)) + 16|0);
     $71 = HEAP32[$70>>2]|0;
     (_strcatupper($10,$71)|0);
     (_strcat($10,6321)|0);
     $72 = $7;
     $73 = ((($72)) + 488|0);
     $74 = (_HashMap_Lookup($73,$10,$11)|0);
     $75 = $74&1;
     $12 = $75;
     $76 = $12;
     $77 = $76&1;
     if ($77) {
      $$expand_i1_val = 0;
      HEAP8[$4>>0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$4>>0]|0;
      $146 = $$pre_trunc&1;
      STACKTOP = sp;return ($146|0);
     }
     $78 = $7;
     $79 = ((($78)) + 488|0);
     $80 = HEAP32[$11>>2]|0;
     (_HashMap_SetAt($79,$10,$80,$13)|0);
     $81 = $7;
     $82 = ((($81)) + 472|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + -1)|0;
     HEAP32[$82>>2] = $84;
     $85 = $9;
     $86 = $85&1;
     if ($86) {
      break;
     }
     ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $87 = $7;
     $88 = ((($87)) + 472|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $89<<2;
     (_StrBuilder_AppendIdent($14,$90,4642)|0);
     $15 = 0;
     $16 = 0;
     while(1) {
      $91 = $16;
      $92 = $6;
      $93 = ((($92)) + 4|0);
      $94 = ((($93)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($91|0)<($95|0);
      if (!($96)) {
       break;
      }
      $97 = $6;
      $98 = ((($97)) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $16;
      $101 = (($99) + ($100<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $17 = $102;
      $103 = $17;
      $104 = (_AnyStructDeclaration_As_StructDeclaration($103)|0);
      $18 = $104;
      $105 = $18;
      $106 = ($105|0)!=(0|0);
      if ($106) {
       $107 = $18;
       $108 = ((($107)) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $19 = $109;
       ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
       ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
       while(1) {
        $110 = $19;
        $111 = ($110|0)!=(0|0);
        if (!($111)) {
         break;
        }
        $112 = $15;
        $113 = ($112|0)>(0);
        if ($113) {
         (_StrBuilder_Append($14,6267)|0);
        }
        $114 = $15;
        $115 = (($114) + 1)|0;
        $15 = $115;
        $116 = $19;
        $117 = ((($116)) + 4|0);
        $118 = HEAP32[$117>>2]|0;
        $22 = $118;
        dest=$23; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
        HEAP32[$23>>2] = 33;
        _StrBuilder_Clear($20);
        _StrBuilder_Clear($21);
        $119 = $19;
        $120 = HEAP32[$119>>2]|0;
        $121 = (_Declarator_GetName($120)|0);
        $24 = $121;
        (_StrBuilder_Append($20,14755)|0);
        $122 = $24;
        (_StrBuilder_Append($20,$122)|0);
        HEAP8[$25>>0] = 0;
        $123 = $5;
        $124 = $7;
        $125 = $18;
        $126 = ((($125)) + 4|0);
        $127 = $19;
        $128 = HEAP32[$127>>2]|0;
        $129 = $22;
        $130 = HEAP32[$20>>2]|0;
        _InstanciateInit($123,$124,$126,$128,$129,$130,$25,$14);
        _PrimaryExpressionValue_Destroy($23);
        $131 = $19;
        $132 = ((($131)) + 8|0);
        $133 = HEAP32[$132>>2]|0;
        $19 = $133;
       }
       _StrBuilder_Destroy($20);
       _StrBuilder_Destroy($21);
      }
      $134 = $16;
      $135 = (($134) + 1)|0;
      $16 = $135;
     }
     $136 = $7;
     $137 = ((($136)) + 472|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138<<2;
     (_StrBuilder_AppendIdent($14,$139,4646)|0);
     $140 = $8;
     HEAP32[$vararg_buffer>>2] = $10;
     _StrBuilder_AppendFmt($140,6698,$vararg_buffer);
     $141 = $8;
     (_StrBuilder_Append($141,2318)|0);
     $142 = $8;
     $143 = HEAP32[$14>>2]|0;
     (_StrBuilder_Append($142,$143)|0);
     $144 = $8;
     (_StrBuilder_Append($144,2320)|0);
     break;
    }
   }
   $145 = $8;
   _StrBuilder_AppendFmt($145,6513,$vararg_buffer1);
  }
 } while(0);
 $$expand_i1_val4 = 1;
 HEAP8[$4>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$4>>0]|0;
 $146 = $$pre_trunc&1;
 STACKTOP = sp;return ($146|0);
}
function _strcatupper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = ((($9)) + 1|0);
  $2 = $10;
 }
 while(1) {
  $11 = $3;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (_toupper($16)|0);
  $18 = $17&255;
  $19 = $2;
  HEAP8[$19>>0] = $18;
  $20 = $2;
  $21 = ((($20)) + 1|0);
  $2 = $21;
  $22 = $3;
  $23 = ((($22)) + 1|0);
  $3 = $23;
 }
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _DeclarationSpecifier_As_EnumSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(6);
  if ($7) {
   $8 = $2;
   $1 = $8;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $1 = 0;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _GetFreeStr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = (_SymbolMap_FindFunction($4,14557)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $12 = 1;
 } else {
  $7 = $1;
  $8 = ((($7)) + 40|0);
  $9 = (_MacroMap_Find($8,14557)|0);
  $10 = ($9|0)!=(0|0);
  $12 = $10;
 }
 $11 = $12&1;
 $2 = $11;
 $13 = $2;
 $14 = $13&1;
 $15 = $14 ? 14557 : 14557;
 STACKTOP = sp;return ($15|0);
}
function _InstantiateDestroyForStruct($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr15 = 0, $vararg_ptr27 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(768|0);
 $vararg_buffer28 = sp + 600|0;
 $vararg_buffer24 = sp + 592|0;
 $vararg_buffer22 = sp + 584|0;
 $vararg_buffer19 = sp + 576|0;
 $vararg_buffer16 = sp + 568|0;
 $vararg_buffer12 = sp + 560|0;
 $vararg_buffer10 = sp + 552|0;
 $vararg_buffer6 = sp + 544|0;
 $vararg_buffer4 = sp + 536|0;
 $vararg_buffer1 = sp + 528|0;
 $vararg_buffer = sp + 520|0;
 $5 = sp + 762|0;
 $11 = sp + 416|0;
 $12 = sp + 208|0;
 $13 = sp + 736|0;
 $16 = sp + 724|0;
 $17 = sp + 712|0;
 $18 = sp;
 $24 = sp + 680|0;
 $25 = sp + 612|0;
 $27 = sp + 604|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $28 = $8;
 $29 = (_IsActive($28)|0);
 if (!($29)) {
  $$expand_i1_val = 0;
  HEAP8[$5>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $149 = $$pre_trunc&1;
  STACKTOP = sp;return ($149|0);
 }
 $30 = $7;
 $31 = ((($30)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $6;
  $35 = ((($34)) + 24|0);
  $36 = $7;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_SymbolMap_FindCompleteStructUnionSpecifier($35,$38)|0);
  $7 = $39;
 }
 $40 = $7;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $$expand_i1_val31 = 0;
  HEAP8[$5>>0] = $$expand_i1_val31;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $149 = $$pre_trunc&1;
  STACKTOP = sp;return ($149|0);
 }
 dest=$11; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $42 = $7;
 _GetOrGenerateStructTagName($42,$11,100);
 _memset(($12|0),0,200)|0;
 (_strcat($12,$11)|0);
 (_strcat($12,6381)|0);
 $43 = $8;
 $44 = ((($43)) + 488|0);
 $45 = (_HashMap_Lookup($44,$12,$13)|0);
 $46 = $45&1;
 $14 = $46;
 $47 = $14;
 $48 = $47&1;
 if ($48) {
  $$expand_i1_val33 = 0;
  HEAP8[$5>>0] = $$expand_i1_val33;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $149 = $$pre_trunc&1;
  STACKTOP = sp;return ($149|0);
 }
 $49 = $7;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $7;
  $52 = ((($51)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  $56 = $54;
 } else {
  $56 = 0;
 }
 $55 = $56&1;
 $15 = $55;
 $57 = $15;
 $58 = $57&1;
 do {
  if ($58) {
   ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
   _StrBuilder_AppendFmt($16,2320,$vararg_buffer);
   HEAP32[$vararg_buffer1>>2] = $11;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $11;
   _StrBuilder_AppendFmt($16,6398,$vararg_buffer1);
   (_StrBuilder_Append($16,6188)|0);
   $59 = $8;
   $60 = ((($59)) + 472|0);
   HEAP32[$60>>2] = 1;
   $61 = $6;
   $62 = $8;
   $63 = $7;
   _InstantiateDestroyForPolymorphicType($61,$62,$63,0,$16);
   _StrBuilder_AppendFmt($16,5843,$vararg_buffer4);
   $64 = $9;
   $65 = HEAP32[$16>>2]|0;
   (_StrBuilder_Append($64,$65)|0);
   _StrBuilder_Destroy($16);
   $66 = $8;
   $67 = ((($66)) + 472|0);
   HEAP32[$67>>2] = 0;
   $68 = $10;
   HEAP32[$vararg_buffer6>>2] = $11;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $11;
   _StrBuilder_AppendFmt($68,6436,$vararg_buffer6);
  } else {
   $69 = $7;
   $70 = ($69|0)!=(0|0);
   if ($70) {
    $71 = $7;
    $72 = ((($71)) + 4|0);
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)>(0);
    if ($75) {
     $76 = $8;
     $77 = ((($76)) + 472|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($78) + 1)|0;
     HEAP32[$77>>2] = $79;
     ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     _StrBuilder_AppendFmt($17,2320,$vararg_buffer10);
     $80 = $7;
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $7;
     $84 = ((($83)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $82;
     $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr15>>2] = $85;
     _StrBuilder_AppendFmt($17,6398,$vararg_buffer12);
     (_StrBuilder_Append($17,6188)|0);
     _memset(($18|0),0,200)|0;
     $86 = $7;
     $87 = ((($86)) + 16|0);
     $88 = HEAP32[$87>>2]|0;
     HEAP32[$vararg_buffer16>>2] = $88;
     (_snprintf($18,200,6475,$vararg_buffer16)|0);
     $89 = $6;
     $90 = ((($89)) + 24|0);
     $91 = (_FindOverloadedFunction($90,5860,$18)|0);
     $92 = ($91|0)!=(0|0);
     if ($92) {
      HEAP32[$vararg_buffer19>>2] = $18;
      _StrBuilder_AppendFmt($17,6497,$vararg_buffer19);
     }
     $19 = 0;
     $20 = 0;
     while(1) {
      $93 = $20;
      $94 = $7;
      $95 = ((($94)) + 4|0);
      $96 = ((($95)) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($93|0)<($97|0);
      if (!($98)) {
       break;
      }
      $99 = $7;
      $100 = ((($99)) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $20;
      $103 = (($101) + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $21 = $104;
      $105 = $21;
      $106 = (_AnyStructDeclaration_As_StructDeclaration($105)|0);
      $22 = $106;
      $107 = $22;
      $108 = ($107|0)!=(0|0);
      if ($108) {
       $109 = $22;
       $110 = ((($109)) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $23 = $111;
       ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
       while(1) {
        $112 = $23;
        $113 = ($112|0)!=(0|0);
        if (!($113)) {
         break;
        }
        $114 = $19;
        $115 = (($114) + 1)|0;
        $19 = $115;
        dest=$25; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
        HEAP32[$25>>2] = 33;
        _StrBuilder_Clear($24);
        $116 = $23;
        $117 = HEAP32[$116>>2]|0;
        $118 = (_Declarator_GetName($117)|0);
        $26 = $118;
        (_StrBuilder_Set($24,6509)|0);
        $119 = $26;
        (_StrBuilder_Append($24,$119)|0);
        $120 = $6;
        $121 = $8;
        $122 = $22;
        $123 = ((($122)) + 4|0);
        $124 = $23;
        $125 = HEAP32[$124>>2]|0;
        $126 = HEAP32[$24>>2]|0;
        _InstanciateDestroy($120,$121,1,$123,$125,$126,1,$17);
        _PrimaryExpressionValue_Destroy($25);
        $127 = $23;
        $128 = ((($127)) + 8|0);
        $129 = HEAP32[$128>>2]|0;
        $23 = $129;
       }
       _StrBuilder_Destroy($24);
      }
      $130 = $20;
      $131 = (($130) + 1)|0;
      $20 = $131;
     }
     _StrBuilder_AppendFmt($17,5843,$vararg_buffer22);
     $132 = $9;
     $133 = HEAP32[$17>>2]|0;
     (_StrBuilder_Append($132,$133)|0);
     $134 = $10;
     $135 = $7;
     $136 = ((($135)) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $7;
     $139 = ((($138)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     HEAP32[$vararg_buffer24>>2] = $137;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = $140;
     _StrBuilder_AppendFmt($134,6436,$vararg_buffer24);
     _StrBuilder_Destroy($17);
     break;
    }
   }
   $141 = $9;
   _StrBuilder_AppendFmt($141,6513,$vararg_buffer28);
  }
 } while(0);
 $142 = $8;
 $143 = ((($142)) + 488|0);
 $144 = HEAP32[$13>>2]|0;
 (_HashMap_SetAt($143,$12,$144,$27)|0);
 $145 = $8;
 $146 = ((($145)) + 472|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($147) + -1)|0;
 HEAP32[$146>>2] = $148;
 $$expand_i1_val35 = 1;
 HEAP8[$5>>0] = $$expand_i1_val35;
 $$pre_trunc = HEAP8[$5>>0]|0;
 $149 = $$pre_trunc&1;
 STACKTOP = sp;return ($149|0);
}
function _FindOverloadedFunction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 L1: do {
  if ($14) {
   $15 = $4;
   $16 = $5;
   $17 = (_SymbolMap_GetAssocAt($15,$16,$8,$9)|0);
   $10 = $17;
   while(1) {
    $18 = $10;
    $19 = ($18|0)!=(0|0);
    if (!($19)) {
     break L1;
    }
    $20 = $10;
    $21 = ((($20)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(1);
    if ($24) {
     $25 = $10;
     $26 = ((($25)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $5;
     $29 = (_strcmp($27,$28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      $31 = $10;
      $32 = ((($31)) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $7 = $33;
      $34 = $7;
      $35 = ((($34)) + 16|0);
      $36 = HEAP32[$35>>2]|0;
      $11 = $36;
      $37 = $11;
      $38 = ($37|0)!=(0|0);
      if ($38) {
       $39 = $11;
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)!=(0|0);
       if ($41) {
        $42 = $11;
        $43 = HEAP32[$42>>2]|0;
        $44 = ((($43)) + 8|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)!=(0|0);
        if ($46) {
         $47 = $11;
         $48 = HEAP32[$47>>2]|0;
         $49 = ((($48)) + 8|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ((($50)) + 100|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = $6;
         $54 = (_strcmp($52,$53)|0);
         $55 = ($54|0)==(0);
         if ($55) {
          break;
         }
        }
       }
      }
     }
    }
    $57 = $10;
    $58 = HEAP32[$57>>2]|0;
    $10 = $58;
   }
   $56 = $7;
   $3 = $56;
   $59 = $3;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $3 = 0;
 $59 = $3;
 STACKTOP = sp;return ($59|0);
}
function _DeclarationSpecifiers_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $4;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $5 = $16;
  $17 = $5;
  $18 = HEAP32[$17>>2]|0;
  switch ($18|0) {
  case 5:  {
   $19 = $5;
   $20 = $3;
   _TSingleTypeSpecifier_PrintNameMangling($19,$20);
   break;
  }
  case 7:  {
   $21 = $5;
   $6 = $21;
   $22 = $3;
   (_StrBuilder_Append($22,7328)|0);
   $23 = $3;
   (_StrBuilder_Append($23,4638)|0);
   $24 = $3;
   $25 = $6;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   (_StrBuilder_Append($24,$27)|0);
   break;
  }
  default: {
  }
  }
  $28 = $4;
  $29 = (($28) + 1)|0;
  $4 = $29;
 }
 STACKTOP = sp;return;
}
function _BasicScanner_InitCore($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 564|0);
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = ((($4)) + 568|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 560|0);
 HEAP32[$7>>2] = -1;
 $8 = $1;
 $9 = ((($8)) + 556|0);
 HEAP8[$9>>0] = 1;
 $10 = $1;
 $11 = ((($10)) + 557|0);
 HEAP8[$11>>0] = 0;
 $12 = $1;
 $13 = ((($12)) + 24|0);
 _StrBuilder_Init($13);
 STACKTOP = sp;return;
}
function _BasicScanner_Init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 _BasicScanner_InitCore($7);
 $8 = $3;
 $9 = $5;
 $10 = (_Stream_OpenString($8,$9)|0);
 $11 = $10&1;
 $6 = $11;
 $12 = $6;
 $13 = $12&1;
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 36|0);
  $16 = $4;
  (_strncpy($15,$16,260)|0);
 }
 $17 = $6;
 $18 = $17&1;
 $19 = $18 ? 1 : 0;
 $20 = ($19|0)!=(0);
 STACKTOP = sp;return ($20|0);
}
function _BasicScanner_InitFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _BasicScanner_InitCore($5);
 $6 = $2;
 $7 = $3;
 $8 = (_Stream_OpenFile($6,$7)|0);
 $9 = $8&1;
 $4 = $9;
 $10 = $4;
 $11 = $10&1;
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 36|0);
  $14 = $3;
  (_strncpy($13,$14,260)|0);
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 296|0);
  _GetFullDirS($15,$17);
 }
 $18 = $4;
 $19 = $18&1;
 $20 = $19 ? 1 : 0;
 $21 = ($20|0)!=(0);
 STACKTOP = sp;return ($21|0);
}
function _BasicScanner_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Stream_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 24|0);
 _StrBuilder_Destroy($4);
 STACKTOP = sp;return;
}
function _BasicScanner_Next($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0;
 var $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond5 = 0, $or$cond51 = 0, $or$cond53 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond59 = 0, $or$cond61 = 0, $or$cond63 = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond71 = 0, $or$cond73 = 0;
 var $or$cond75 = 0, $or$cond77 = 0, $or$cond79 = 0, $or$cond81 = 0, $or$cond83 = 0, $or$cond85 = 0, $or$cond87 = 0, $or$cond9 = 0, $or$cond90 = 0, $or$cond92 = 0, $or$cond94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $9 = $1;
 $10 = ((($9)) + 564|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(158);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 564|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(159);
  if (!($16)) {
   $2 = 0;
   $19 = $1;
   $20 = ((($19)) + 24|0);
   _StrBuilder_Clear($20);
   $21 = $1;
   $22 = ((($21)) + 564|0);
   HEAP32[$22>>2] = 0;
   $23 = $1;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $2 = $25;
   $26 = $1;
   $27 = (_Stream_LookAhead($26)|0);
   $3 = $27;
   $28 = $1;
   $29 = (_Stream_LookAhead2($28)|0);
   $4 = $29;
   $30 = $2;
   $31 = ($30|0)==(46);
   $32 = $3;
   $33 = ($32|0)==(46);
   $or$cond = $31 & $33;
   if ($or$cond) {
    $34 = $1;
    (_BasicScanner_MatchChar($34)|0);
    $35 = $1;
    $36 = (_BasicScanner_MatchChar($35)|0);
    $2 = $36;
    $37 = $2;
    $38 = ($37|0)!=(46);
    if ($38) {
     $39 = $1;
     $40 = ((($39)) + 564|0);
     HEAP32[$40>>2] = 22;
    }
    $41 = $1;
    (_BasicScanner_MatchChar($41)|0);
    $42 = $1;
    $43 = ((($42)) + 564|0);
    HEAP32[$43>>2] = 81;
    STACKTOP = sp;return;
   }
   $5 = 0;
   while(1) {
    $44 = $5;
    $45 = ($44>>>0)<(29);
    if (!($45)) {
     break;
    }
    $46 = $5;
    $47 = (16 + ($46<<3)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    $51 = $2;
    $52 = ($50|0)==($51|0);
    if ($52) {
     $53 = $5;
     $54 = (16 + ($53<<3)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($55)) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = $3;
     $60 = ($58|0)==($59|0);
     if ($60) {
      label = 12;
      break;
     }
    }
    $71 = $5;
    $72 = (($71) + 1)|0;
    $5 = $72;
   }
   if ((label|0) == 12) {
    $61 = $5;
    $62 = (16 + ($61<<3)|0);
    $63 = ((($62)) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $1;
    $66 = ((($65)) + 564|0);
    HEAP32[$66>>2] = $64;
    $67 = $1;
    (_BasicScanner_MatchChar($67)|0);
    $68 = $1;
    (_BasicScanner_MatchChar($68)|0);
    $69 = $1;
    $70 = ((($69)) + 556|0);
    HEAP8[$70>>0] = 0;
    STACKTOP = sp;return;
   }
   $73 = $2;
   $74 = ($73|0)==(42);
   $75 = $3;
   $76 = ($75|0)==(47);
   $or$cond3 = $74 & $76;
   if ($or$cond3) {
    $77 = $1;
    $78 = ((($77)) + 564|0);
    HEAP32[$78>>2] = 7;
    $79 = $1;
    $80 = (_BasicScanner_MatchChar($79)|0);
    $2 = $80;
    $81 = $1;
    $82 = (_BasicScanner_MatchChar($81)|0);
    $2 = $82;
    STACKTOP = sp;return;
   }
   $6 = 0;
   while(1) {
    $83 = $6;
    $84 = ($83>>>0)<(25);
    if (!($84)) {
     break;
    }
    $85 = $6;
    $86 = (256 + ($85<<3)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = HEAP8[$87>>0]|0;
    $89 = $88 << 24 >> 24;
    $90 = $2;
    $91 = ($89|0)==($90|0);
    $92 = $6;
    if ($91) {
     label = 19;
     break;
    }
    $101 = (($92) + 1)|0;
    $6 = $101;
   }
   if ((label|0) == 19) {
    $93 = (256 + ($92<<3)|0);
    $94 = ((($93)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $1;
    $97 = ((($96)) + 564|0);
    HEAP32[$97>>2] = $95;
    $98 = $1;
    (_BasicScanner_MatchChar($98)|0);
    $99 = $1;
    $100 = ((($99)) + 556|0);
    HEAP8[$100>>0] = 0;
    STACKTOP = sp;return;
   }
   $102 = $2;
   $103 = ($102|0)==(34);
   if (!($103)) {
    $104 = $2;
    $105 = ($104|0)==(76);
    $106 = $3;
    $107 = ($106|0)==(34);
    $or$cond5 = $105 & $107;
    if (!($or$cond5)) {
     $108 = $2;
     $109 = ($108|0)==(117);
     $110 = $3;
     $111 = ($110|0)==(56);
     $or$cond7 = $109 & $111;
     $112 = $4;
     $113 = ($112|0)==(34);
     $or$cond9 = $or$cond7 & $113;
     if (!($or$cond9)) {
      $145 = $2;
      $146 = ($145|0)==(39);
      if (!($146)) {
       $147 = $2;
       $148 = ($147|0)==(76);
       $149 = $3;
       $150 = ($149|0)==(34);
       $or$cond11 = $148 & $150;
       if (!($or$cond11)) {
        $151 = $2;
        $152 = ($151|0)==(117);
        $153 = $3;
        $154 = ($153|0)==(56);
        $or$cond13 = $152 & $154;
        $155 = $4;
        $156 = ($155|0)==(39);
        $or$cond15 = $or$cond13 & $156;
        if (!($or$cond15)) {
         $187 = $2;
         $188 = ($187|0)>=(97);
         $189 = $2;
         $190 = ($189|0)<=(122);
         $or$cond17 = $188 & $190;
         if (!($or$cond17)) {
          $191 = $2;
          $192 = ($191|0)>=(65);
          $193 = $2;
          $194 = ($193|0)<=(90);
          $or$cond19 = $192 & $194;
          $195 = $2;
          $196 = ($195|0)==(95);
          $or$cond21 = $or$cond19 | $196;
          if (!($or$cond21)) {
           $233 = $2;
           $234 = ($233|0)==(48);
           do {
            if ($234) {
             $235 = $3;
             $236 = ($235|0)==(98);
             $237 = $3;
             $238 = ($237|0)==(66);
             $or$cond31 = $236 | $238;
             $239 = $3;
             $240 = ($239|0)==(120);
             $or$cond33 = $or$cond31 | $240;
             $241 = $3;
             $242 = ($241|0)==(88);
             $or$cond35 = $or$cond33 | $242;
             if (!($or$cond35)) {
              $243 = $3;
              $244 = ($243|0)>=(48);
              $245 = $3;
              $246 = ($245|0)<=(57);
              $or$cond37 = $244 & $246;
              if (!($or$cond37)) {
               break;
              }
             }
             $247 = $1;
             $248 = (_BasicScanner_MatchChar($247)|0);
             $2 = $248;
             $249 = $2;
             $250 = ($249|0)==(120);
             $251 = $2;
             $252 = ($251|0)==(88);
             $or$cond39 = $250 | $252;
             do {
              if ($or$cond39) {
               $253 = $1;
               $254 = ((($253)) + 564|0);
               HEAP32[$254>>2] = 12;
              } else {
               $255 = $2;
               $256 = ($255|0)==(98);
               $257 = $2;
               $258 = ($257|0)==(66);
               $or$cond41 = $256 | $258;
               if ($or$cond41) {
                $259 = $1;
                $260 = ((($259)) + 564|0);
                HEAP32[$260>>2] = 14;
                break;
               }
               $261 = $3;
               $262 = ($261|0)>=(48);
               $263 = $3;
               $264 = ($263|0)<=(57);
               $or$cond43 = $262 & $264;
               if ($or$cond43) {
                $265 = $1;
                $266 = ((($265)) + 564|0);
                HEAP32[$266>>2] = 13;
                break;
               } else {
                ___assert_fail((5472|0),(2336|0),11814,(7157|0));
                // unreachable;
               }
              }
             } while(0);
             $267 = $1;
             $268 = (_BasicScanner_MatchChar($267)|0);
             $2 = $268;
             L59: while(1) {
              $269 = $2;
              $270 = ($269|0)>=(48);
              $271 = $2;
              $272 = ($271|0)<=(57);
              $or$cond45 = $270 & $272;
              do {
               if (!($or$cond45)) {
                $273 = $2;
                $274 = ($273|0)>=(65);
                $275 = $2;
                $276 = ($275|0)<=(70);
                $or$cond47 = $274 & $276;
                if ($or$cond47) {
                 break;
                }
                $277 = $2;
                $278 = ($277|0)>=(97);
                $279 = $2;
                $280 = ($279|0)<=(102);
                $281 = $278 ? $280 : 0;
                if (!($281)) {
                 break L59;
                }
               }
              } while(0);
              $282 = $1;
              $283 = (_BasicScanner_MatchChar($282)|0);
              $2 = $283;
             }
             $284 = $2;
             $285 = ($284|0)==(117);
             $286 = $2;
             $287 = ($286|0)==(85);
             $or$cond51 = $285 | $287;
             if ($or$cond51) {
              $288 = $1;
              $289 = (_BasicScanner_MatchChar($288)|0);
              $2 = $289;
             }
             $290 = $2;
             $291 = ($290|0)==(108);
             $292 = $2;
             $293 = ($292|0)==(76);
             $or$cond53 = $291 | $293;
             if ($or$cond53) {
              $294 = $1;
              $295 = (_BasicScanner_MatchChar($294)|0);
              $2 = $295;
              $296 = $2;
              $297 = ($296|0)==(108);
              $298 = $2;
              $299 = ($298|0)==(76);
              $or$cond55 = $297 | $299;
              if ($or$cond55) {
               $300 = $1;
               $301 = (_BasicScanner_MatchChar($300)|0);
               $2 = $301;
               STACKTOP = sp;return;
              }
              $302 = $2;
              $303 = ($302|0)==(117);
              $304 = $2;
              $305 = ($304|0)==(85);
              $or$cond57 = $303 | $305;
              if (!($or$cond57)) {
               STACKTOP = sp;return;
              }
              $306 = $1;
              $307 = (_BasicScanner_MatchChar($306)|0);
              $2 = $307;
              STACKTOP = sp;return;
             }
             $308 = $2;
             $309 = ($308|0)==(105);
             $310 = $2;
             $311 = ($310|0)==(73);
             $or$cond59 = $309 | $311;
             if (!($or$cond59)) {
              STACKTOP = sp;return;
             }
             $312 = $1;
             $313 = (_BasicScanner_MatchChar($312)|0);
             $2 = $313;
             $314 = $2;
             $315 = ($314|0)==(51);
             if ($315) {
              $316 = $1;
              $317 = (_BasicScanner_MatchChar($316)|0);
              $2 = $317;
              $318 = $2;
              $319 = ($318|0)==(50);
              if (!($319)) {
               STACKTOP = sp;return;
              }
              $320 = $1;
              $321 = (_BasicScanner_MatchChar($320)|0);
              $2 = $321;
              STACKTOP = sp;return;
             }
             $322 = $2;
             $323 = ($322|0)==(49);
             if ($323) {
              $324 = $1;
              $325 = (_BasicScanner_MatchChar($324)|0);
              $2 = $325;
              $326 = $2;
              $327 = ($326|0)==(54);
              if (!($327)) {
               STACKTOP = sp;return;
              }
              $328 = $1;
              $329 = (_BasicScanner_MatchChar($328)|0);
              $2 = $329;
              STACKTOP = sp;return;
             }
             $330 = $2;
             $331 = ($330|0)==(54);
             if ($331) {
              $332 = $1;
              $333 = (_BasicScanner_MatchChar($332)|0);
              $2 = $333;
              $334 = $2;
              $335 = ($334|0)==(52);
              if (!($335)) {
               STACKTOP = sp;return;
              }
              $336 = $1;
              $337 = (_BasicScanner_MatchChar($336)|0);
              $2 = $337;
              STACKTOP = sp;return;
             } else {
              $338 = $2;
              $339 = ($338|0)==(56);
              if (!($339)) {
               STACKTOP = sp;return;
              }
              $340 = $1;
              $341 = (_BasicScanner_MatchChar($340)|0);
              $2 = $341;
              STACKTOP = sp;return;
             }
            }
           } while(0);
           $342 = $2;
           $343 = ($342|0)>=(48);
           $344 = $2;
           $345 = ($344|0)<=(57);
           $or$cond61 = $343 & $345;
           if ($or$cond61) {
            $346 = $1;
            $347 = ((($346)) + 564|0);
            HEAP32[$347>>2] = 11;
            $348 = $1;
            $349 = (_BasicScanner_MatchChar($348)|0);
            $2 = $349;
            while(1) {
             $350 = $2;
             $351 = ($350|0)>=(48);
             $352 = $2;
             $353 = ($352|0)<=(57);
             $354 = $351 ? $353 : 0;
             if (!($354)) {
              break;
             }
             $355 = $1;
             $356 = (_BasicScanner_MatchChar($355)|0);
             $2 = $356;
            }
            $357 = $2;
            $358 = ($357|0)==(117);
            $359 = $2;
            $360 = ($359|0)==(85);
            $or$cond63 = $358 | $360;
            if ($or$cond63) {
             $361 = $1;
             $362 = (_BasicScanner_MatchChar($361)|0);
             $2 = $362;
            }
            $363 = $2;
            $364 = ($363|0)==(108);
            $365 = $2;
            $366 = ($365|0)==(76);
            $or$cond65 = $364 | $366;
            do {
             if ($or$cond65) {
              $367 = $1;
              $368 = (_BasicScanner_MatchChar($367)|0);
              $2 = $368;
              $369 = $2;
              $370 = ($369|0)==(108);
              $371 = $2;
              $372 = ($371|0)==(76);
              $or$cond67 = $370 | $372;
              if ($or$cond67) {
               $373 = $1;
               $374 = (_BasicScanner_MatchChar($373)|0);
               $2 = $374;
               break;
              }
              $375 = $2;
              $376 = ($375|0)==(117);
              $377 = $2;
              $378 = ($377|0)==(85);
              $or$cond69 = $376 | $378;
              if (!($or$cond69)) {
               break;
              }
              $379 = $1;
              $380 = (_BasicScanner_MatchChar($379)|0);
              $2 = $380;
             } else {
              $381 = $2;
              $382 = ($381|0)==(105);
              $383 = $2;
              $384 = ($383|0)==(73);
              $or$cond71 = $382 | $384;
              if ($or$cond71) {
               $385 = $1;
               $386 = (_BasicScanner_MatchChar($385)|0);
               $2 = $386;
               $387 = $2;
               $388 = ($387|0)==(51);
               if ($388) {
                $389 = $1;
                $390 = (_BasicScanner_MatchChar($389)|0);
                $2 = $390;
                $391 = $2;
                $392 = ($391|0)==(50);
                if (!($392)) {
                 break;
                }
                $393 = $1;
                $394 = (_BasicScanner_MatchChar($393)|0);
                $2 = $394;
                break;
               }
               $395 = $2;
               $396 = ($395|0)==(49);
               if ($396) {
                $397 = $1;
                $398 = (_BasicScanner_MatchChar($397)|0);
                $2 = $398;
                $399 = $2;
                $400 = ($399|0)==(54);
                if (!($400)) {
                 break;
                }
                $401 = $1;
                $402 = (_BasicScanner_MatchChar($401)|0);
                $2 = $402;
                break;
               }
               $403 = $2;
               $404 = ($403|0)==(54);
               if ($404) {
                $405 = $1;
                $406 = (_BasicScanner_MatchChar($405)|0);
                $2 = $406;
                $407 = $2;
                $408 = ($407|0)==(52);
                if (!($408)) {
                 break;
                }
                $409 = $1;
                $410 = (_BasicScanner_MatchChar($409)|0);
                $2 = $410;
                break;
               } else {
                $411 = $2;
                $412 = ($411|0)==(56);
                if (!($412)) {
                 break;
                }
                $413 = $1;
                $414 = (_BasicScanner_MatchChar($413)|0);
                $2 = $414;
                break;
               }
              }
              $415 = $2;
              $416 = ($415|0)==(46);
              L141: do {
               if ($416) {
                $417 = $1;
                $418 = (_BasicScanner_MatchChar($417)|0);
                $2 = $418;
                $419 = $1;
                $420 = ((($419)) + 564|0);
                HEAP32[$420>>2] = 15;
                while(1) {
                 $421 = $2;
                 $422 = ($421|0)>=(48);
                 $423 = $2;
                 $424 = ($423|0)<=(57);
                 $425 = $422 ? $424 : 0;
                 if (!($425)) {
                  break L141;
                 }
                 $426 = $1;
                 $427 = (_BasicScanner_MatchChar($426)|0);
                 $2 = $427;
                }
               }
              } while(0);
              $428 = $1;
              $429 = ((($428)) + 8|0);
              $430 = HEAP32[$429>>2]|0;
              $431 = ($430|0)==(101);
              if ($431) {
               label = 128;
              } else {
               $432 = $1;
               $433 = ((($432)) + 8|0);
               $434 = HEAP32[$433>>2]|0;
               $435 = ($434|0)==(69);
               if ($435) {
                label = 128;
               }
              }
              L149: do {
               if ((label|0) == 128) {
                $436 = $1;
                $437 = (_BasicScanner_MatchChar($436)|0);
                $2 = $437;
                $438 = $2;
                $439 = ($438|0)==(45);
                $440 = $2;
                $441 = ($440|0)==(43);
                $or$cond73 = $439 | $441;
                if ($or$cond73) {
                 $442 = $1;
                 $443 = (_BasicScanner_MatchChar($442)|0);
                 $2 = $443;
                }
                while(1) {
                 $444 = $2;
                 $445 = ($444|0)>=(48);
                 $446 = $2;
                 $447 = ($446|0)<=(57);
                 $448 = $445 ? $447 : 0;
                 if (!($448)) {
                  break L149;
                 }
                 $449 = $1;
                 $450 = (_BasicScanner_MatchChar($449)|0);
                 $2 = $450;
                }
               }
              } while(0);
              $451 = $2;
              $452 = ($451|0)==(76);
              $453 = $2;
              $454 = ($453|0)==(108);
              $or$cond75 = $452 | $454;
              $455 = $2;
              $456 = ($455|0)==(70);
              $or$cond77 = $or$cond75 | $456;
              $457 = $2;
              $458 = ($457|0)==(102);
              $or$cond79 = $or$cond77 | $458;
              if (!($or$cond79)) {
               break;
              }
              $459 = $1;
              $460 = (_BasicScanner_MatchChar($459)|0);
              $2 = $460;
             }
            } while(0);
            $461 = $1;
            $462 = ((($461)) + 556|0);
            HEAP8[$462>>0] = 0;
            STACKTOP = sp;return;
           }
           $463 = $2;
           $464 = ($463|0)==(10);
           $465 = $2;
           $466 = ($465|0)==(13);
           $or$cond81 = $464 | $466;
           if ($or$cond81) {
            $467 = $1;
            $468 = ((($467)) + 564|0);
            HEAP32[$468>>2] = 17;
            $469 = $2;
            $470 = ($469|0)==(13);
            $471 = $3;
            $472 = ($471|0)==(10);
            $or$cond83 = $470 & $472;
            $473 = $1;
            if ($or$cond83) {
             _Stream_Match($473);
             $474 = $1;
             $475 = ((($474)) + 8|0);
             $476 = HEAP32[$475>>2]|0;
             $2 = $476;
             $477 = $1;
             $478 = (_BasicScanner_MatchChar($477)|0);
             $2 = $478;
            } else {
             $479 = (_BasicScanner_MatchChar($473)|0);
             $2 = $479;
             $480 = $1;
             $481 = ((($480)) + 24|0);
             _StrBuilder_Clear($481);
             $482 = $1;
             $483 = ((($482)) + 24|0);
             (_StrBuilder_Append($483,7175)|0);
            }
            $484 = $1;
            $485 = ((($484)) + 556|0);
            HEAP8[$485>>0] = 1;
            STACKTOP = sp;return;
           }
           $486 = $2;
           $487 = ($486|0)==(0);
           if ($487) {
            $488 = $1;
            $489 = ((($488)) + 557|0);
            $490 = HEAP8[$489>>0]|0;
            $491 = $490&1;
            $492 = $1;
            $493 = ((($492)) + 564|0);
            if ($491) {
             HEAP32[$493>>2] = 158;
            } else {
             HEAP32[$493>>2] = 159;
            }
            $494 = $1;
            $495 = ((($494)) + 556|0);
            HEAP8[$495>>0] = 0;
            STACKTOP = sp;return;
           }
           $496 = $2;
           $497 = ($496|0)==(12);
           if ($497) {
            $498 = $1;
            $499 = ((($498)) + 564|0);
            HEAP32[$499>>2] = 10;
            $500 = $1;
            (_BasicScanner_MatchChar($500)|0);
            STACKTOP = sp;return;
           }
           $501 = $2;
           $502 = ($501|0)==(32);
           $503 = $2;
           $504 = ($503|0)==(9);
           $or$cond85 = $502 | $504;
           if ($or$cond85) {
            $505 = $1;
            $506 = ((($505)) + 564|0);
            HEAP32[$506>>2] = 10;
            $507 = $1;
            $508 = (_BasicScanner_MatchChar($507)|0);
            $2 = $508;
            while(1) {
             $509 = $2;
             $510 = ($509|0)==(32);
             $511 = $2;
             $512 = ($511|0)==(9);
             $513 = $510 ? 1 : $512;
             if (!($513)) {
              break;
             }
             $514 = $1;
             $515 = (_BasicScanner_MatchChar($514)|0);
             $2 = $515;
            }
            STACKTOP = sp;return;
           }
           $516 = $2;
           $517 = ($516|0)<(32);
           if ($517) {
            $518 = $1;
            $519 = ((($518)) + 564|0);
            HEAP32[$519>>2] = 10;
           }
           $520 = $1;
           $521 = ((($520)) + 8|0);
           $522 = HEAP32[$521>>2]|0;
           $523 = ($522|0)==(35);
           if ($523) {
            $524 = $1;
            $525 = (_BasicScanner_MatchChar($524)|0);
            $2 = $525;
            $526 = $1;
            $527 = ((($526)) + 556|0);
            $528 = HEAP8[$527>>0]|0;
            $529 = $528&1;
            $530 = $1;
            $531 = ((($530)) + 564|0);
            if ($529) {
             HEAP32[$531>>2] = 21;
             STACKTOP = sp;return;
            } else {
             HEAP32[$531>>2] = 25;
             STACKTOP = sp;return;
            }
           }
           $532 = $2;
           $533 = ($532|0)==(47);
           if (!($533)) {
            $585 = $2;
            $586 = ($585|0)==(92);
            do {
             if ($586) {
              $587 = $3;
              $588 = ($587|0)==(10);
              $589 = $3;
              $590 = ($589|0)==(13);
              $or$cond90 = $588 | $590;
              if (!($or$cond90)) {
               break;
              }
              $591 = $1;
              $592 = (_BasicScanner_MatchChar($591)|0);
              $2 = $592;
              $593 = $2;
              $594 = ($593|0)==(13);
              do {
               if ($594) {
                $595 = $1;
                $596 = (_BasicScanner_MatchChar($595)|0);
                $2 = $596;
                $597 = $2;
                $598 = ($597|0)==(10);
                if (!($598)) {
                 break;
                }
                $599 = $1;
                $600 = (_BasicScanner_MatchChar($599)|0);
                $2 = $600;
               } else {
                $601 = $2;
                $602 = ($601|0)==(10);
                if (!($602)) {
                 break;
                }
                $603 = $1;
                (_BasicScanner_MatchChar($603)|0);
               }
              } while(0);
              $604 = $1;
              $605 = ((($604)) + 24|0);
              (_StrBuilder_Set($605,7178)|0);
              $606 = $1;
              $607 = ((($606)) + 564|0);
              HEAP32[$607>>2] = 18;
              $608 = $1;
              $609 = ((($608)) + 556|0);
              HEAP8[$609>>0] = 0;
              STACKTOP = sp;return;
             }
            } while(0);
            $610 = $2;
            $611 = ($610|0)==(2);
            if ($611) {
             $612 = $1;
             $613 = (_BasicScanner_MatchChar($612)|0);
             $2 = $613;
             $614 = $1;
             $615 = ((($614)) + 564|0);
             HEAP32[$615>>2] = 16;
             $616 = $1;
             $617 = ((($616)) + 556|0);
             HEAP8[$617>>0] = 0;
             STACKTOP = sp;return;
            }
            $618 = $2;
            $619 = ($618|0)==(92);
            $620 = $1;
            if ($619) {
             $621 = (_BasicScanner_MatchChar($620)|0);
             $2 = $621;
             $622 = $1;
             $623 = ((($622)) + 564|0);
             HEAP32[$623>>2] = 47;
             STACKTOP = sp;return;
            }
            $624 = ((($620)) + 564|0);
            $625 = HEAP32[$624>>2]|0;
            $626 = ($625|0)==(22);
            if ($626) {
             ___assert_fail((5472|0),(2336|0),12186,(7157|0));
             // unreachable;
            } else {
             STACKTOP = sp;return;
            }
           }
           $534 = $3;
           $535 = ($534|0)==(47);
           if ($535) {
            $536 = $1;
            $537 = ((($536)) + 564|0);
            HEAP32[$537>>2] = 4;
            $538 = $1;
            $539 = (_BasicScanner_MatchChar($538)|0);
            $2 = $539;
            $540 = $1;
            $541 = (_BasicScanner_MatchChar($540)|0);
            $2 = $541;
            while(1) {
             $542 = $2;
             $543 = ($542|0)!=(13);
             $544 = $2;
             $545 = ($544|0)!=(10);
             $or$cond87 = $543 & $545;
             $546 = $2;
             $547 = ($546|0)!=(0);
             $or$cond92 = $or$cond87 & $547;
             if (!($or$cond92)) {
              break;
             }
             $548 = $1;
             $549 = (_BasicScanner_MatchChar($548)|0);
             $2 = $549;
            }
            STACKTOP = sp;return;
           }
           $550 = $3;
           $551 = ($550|0)==(42);
           $552 = $1;
           $553 = ((($552)) + 564|0);
           if (!($551)) {
            HEAP32[$553>>2] = 38;
            $583 = $1;
            $584 = (_BasicScanner_MatchChar($583)|0);
            $2 = $584;
            STACKTOP = sp;return;
           }
           HEAP32[$553>>2] = 5;
           $554 = $1;
           $555 = (_BasicScanner_MatchChar($554)|0);
           $2 = $555;
           $556 = $1;
           $557 = (_BasicScanner_MatchChar($556)|0);
           $2 = $557;
           $558 = $2;
           $559 = ($558|0)==(64);
           if ($559) {
            $560 = $1;
            $561 = ((($560)) + 564|0);
            HEAP32[$561>>2] = 6;
            $562 = $1;
            $563 = (_BasicScanner_MatchChar($562)|0);
            $2 = $563;
            STACKTOP = sp;return;
           }
           L240: while(1) {
            $564 = $2;
            $565 = ($564|0)==(42);
            do {
             if ($565) {
              $566 = $1;
              $567 = (_BasicScanner_MatchChar($566)|0);
              $2 = $567;
              $568 = $2;
              $569 = ($568|0)==(47);
              if ($569) {
               break L240;
              }
             } else {
              $572 = $2;
              $573 = ($572|0)==(13);
              $574 = $1;
              if (!($573)) {
               $582 = (_BasicScanner_MatchChar($574)|0);
               $2 = $582;
               break;
              }
              _Stream_Match($574);
              $575 = $1;
              $576 = ((($575)) + 8|0);
              $577 = HEAP32[$576>>2]|0;
              $2 = $577;
              $578 = $2;
              $579 = ($578|0)==(10);
              if (!($579)) {
               break;
              }
              $580 = $1;
              $581 = (_BasicScanner_MatchChar($580)|0);
              $2 = $581;
             }
            } while(0);
           }
           $570 = $1;
           $571 = (_BasicScanner_MatchChar($570)|0);
           $2 = $571;
           STACKTOP = sp;return;
          }
         }
         $197 = $1;
         $198 = ((($197)) + 564|0);
         HEAP32[$198>>2] = 9;
         $199 = $1;
         $200 = (_BasicScanner_MatchChar($199)|0);
         $2 = $200;
         while(1) {
          $201 = $2;
          $202 = ($201|0)>=(97);
          $203 = $2;
          $204 = ($203|0)<=(122);
          $or$cond23 = $202 & $204;
          if (!($or$cond23)) {
           $205 = $2;
           $206 = ($205|0)>=(65);
           $207 = $2;
           $208 = ($207|0)<=(90);
           $or$cond25 = $206 & $208;
           if (!($or$cond25)) {
            $209 = $2;
            $210 = ($209|0)>=(48);
            $211 = $2;
            $212 = ($211|0)<=(57);
            $or$cond27 = $210 & $212;
            $213 = $2;
            $214 = ($213|0)==(95);
            $or$cond94 = $or$cond27 | $214;
            if (!($or$cond94)) {
             break;
            }
           }
          }
          $215 = $1;
          $216 = (_BasicScanner_MatchChar($215)|0);
          $2 = $216;
         }
         $8 = 0;
         while(1) {
          $217 = $8;
          $218 = ($217>>>0)<(59);
          if (!($218)) {
           break;
          }
          $219 = $1;
          $220 = $8;
          $221 = (464 + ($220<<3)|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = (_BasicScanner_IsLexeme($219,$222)|0);
          $224 = $8;
          if ($223) {
           label = 62;
           break;
          }
          $230 = (($224) + 1)|0;
          $8 = $230;
         }
         if ((label|0) == 62) {
          $225 = (464 + ($224<<3)|0);
          $226 = ((($225)) + 4|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = $1;
          $229 = ((($228)) + 564|0);
          HEAP32[$229>>2] = $227;
         }
         $231 = $1;
         $232 = ((($231)) + 556|0);
         HEAP8[$232>>0] = 0;
         STACKTOP = sp;return;
        }
       }
      }
      $157 = $2;
      $158 = ($157|0)==(117);
      if ($158) {
       $159 = $1;
       $160 = (_BasicScanner_MatchChar($159)|0);
       $2 = $160;
       $161 = $1;
       $162 = (_BasicScanner_MatchChar($161)|0);
       $2 = $162;
      } else {
       $163 = $2;
       $164 = ($163|0)==(76);
       if ($164) {
        $165 = $1;
        $166 = (_BasicScanner_MatchChar($165)|0);
        $2 = $166;
       }
      }
      $167 = $1;
      $168 = ((($167)) + 564|0);
      HEAP32[$168>>2] = 85;
      $7 = 0;
      while(1) {
       $169 = $7;
       $170 = ($169|0)<(4);
       if (!($170)) {
        break;
       }
       $171 = $1;
       $172 = (_BasicScanner_MatchChar($171)|0);
       $2 = $172;
       $173 = $2;
       $174 = ($173|0)==(92);
       $175 = $1;
       $176 = (_BasicScanner_MatchChar($175)|0);
       $2 = $176;
       if ($174) {
        $177 = $1;
        $178 = (_BasicScanner_MatchChar($177)|0);
        $2 = $178;
       }
       $179 = $2;
       $180 = ($179|0)==(39);
       $181 = $1;
       $182 = (_BasicScanner_MatchChar($181)|0);
       $2 = $182;
       if ($180) {
        break;
       }
       $183 = $7;
       $184 = (($183) + 1)|0;
       $7 = $184;
      }
      $185 = $1;
      $186 = ((($185)) + 556|0);
      HEAP8[$186>>0] = 0;
      STACKTOP = sp;return;
     }
    }
   }
   $114 = $2;
   $115 = ($114|0)==(117);
   if ($115) {
    $116 = $1;
    $117 = (_BasicScanner_MatchChar($116)|0);
    $2 = $117;
    $118 = $1;
    $119 = (_BasicScanner_MatchChar($118)|0);
    $2 = $119;
   } else {
    $120 = $2;
    $121 = ($120|0)==(76);
    if ($121) {
     $122 = $1;
     $123 = (_BasicScanner_MatchChar($122)|0);
     $2 = $123;
    }
   }
   $124 = $1;
   $125 = ((($124)) + 564|0);
   HEAP32[$125>>2] = 8;
   $126 = $1;
   $127 = (_BasicScanner_MatchChar($126)|0);
   $2 = $127;
   while(1) {
    $128 = $2;
    $129 = ($128|0)==(34);
    if ($129) {
     label = 30;
     break;
    }
    $132 = $2;
    $133 = ($132|0)==(92);
    if ($133) {
     $134 = $1;
     $135 = (_BasicScanner_MatchChar($134)|0);
     $2 = $135;
     $136 = $1;
     $137 = (_BasicScanner_MatchChar($136)|0);
     $2 = $137;
    } else {
     $138 = $2;
     $139 = ($138|0)==(0);
     $140 = $1;
     if ($139) {
      label = 34;
      break;
     }
     $142 = (_BasicScanner_MatchChar($140)|0);
     $2 = $142;
    }
   }
   if ((label|0) == 30) {
    $130 = $1;
    $131 = (_BasicScanner_MatchChar($130)|0);
    $2 = $131;
   }
   else if ((label|0) == 34) {
    $141 = ((($140)) + 564|0);
    HEAP32[$141>>2] = 2;
   }
   $143 = $1;
   $144 = ((($143)) + 556|0);
   HEAP8[$144>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = $1;
 $18 = ((($17)) + 564|0);
 HEAP32[$18>>2] = 2;
 STACKTOP = sp;return;
}
function _BasicScanner_MatchChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&255;
 (_StrBuilder_AppendChar($3,$7)|0);
 $8 = $1;
 _Stream_Match($8);
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _IsAutoToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(86);
 STACKTOP = sp;return ($3|0);
}
function _AnyDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 2:  {
    $6 = $1;
    _StaticAssertDeclaration_Delete($6);
    break L1;
    break;
   }
   case 1:  {
    $7 = $1;
    _Declaration_Delete($7);
    break L1;
    break;
   }
   case 3:  {
    $8 = $1;
    _EofDeclaration_Delete($8);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TDeclarations_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _Declarations_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _TDeclarations_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _StructDeclarationList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _AnyStructDeclaration_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _AnyStructDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 2:  {
    $6 = $1;
    _StaticAssertDeclaration_Delete($6);
    break L1;
    break;
   }
   case 11:  {
    $7 = $1;
    _StructDeclaration_Delete($7);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TStructDeclarationList_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _StructDeclarationList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _TStructDeclarationList_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _BlockItemList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _BlockItem_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _BlockItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   do {
    switch ($5|0) {
    case 19:  {
     $6 = $1;
     _ForStatement_Delete($6);
     break L1;
     break;
    }
    case 29:  {
     $7 = $1;
     _DeferStatement_Delete($7);
     break L1;
     break;
    }
    case 20:  {
     $8 = $1;
     _JumpStatement_Delete($8);
     break L1;
     break;
    }
    case 16:  {
     $9 = $1;
     _ExpressionStatement_Delete($9);
     break L1;
     break;
    }
    case 1:  {
     $10 = $1;
     _Declaration_Delete($10);
     break L1;
     break;
    }
    case 25:  {
     $11 = $1;
     _IfStatement_Delete($11);
     break L1;
     break;
    }
    case 24:  {
     $12 = $1;
     _TryBlockStatement_Delete($12);
     break L1;
     break;
    }
    case 22:  {
     $13 = $1;
     _WhileStatement_Delete($13);
     break L1;
     break;
    }
    case 17:  {
     $14 = $1;
     _SwitchStatement_Delete($14);
     break L1;
     break;
    }
    case 21:  {
     $15 = $1;
     _AsmStatement_Delete($15);
     break L1;
     break;
    }
    case 23:  {
     $16 = $1;
     _DoStatement_Delete($16);
     break L1;
     break;
    }
    case 18:  {
     $17 = $1;
     _LabeledStatement_Delete($17);
     break L1;
     break;
    }
    case 15:  {
     $18 = $1;
     _CompoundStatement_Delete($18);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TBlockItemList_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _BlockItemList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _TBlockItemList_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _CompoundStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _BlockItemList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _TokenList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 _TokenList_Destroy($9);
 $10 = $1;
 _free($10);
 STACKTOP = sp;return;
}
function _LabeledStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Statement_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _Expression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 $14 = ((($13)) + 20|0);
 _TokenList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 28|0);
 _TokenList_Destroy($16);
 $17 = $1;
 _free($17);
 STACKTOP = sp;return;
}
function _Statement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   do {
    switch ($5|0) {
    case 19:  {
     $6 = $1;
     _ForStatement_Delete($6);
     break L1;
     break;
    }
    case 29:  {
     $7 = $1;
     _DeferStatement_Delete($7);
     break L1;
     break;
    }
    case 20:  {
     $8 = $1;
     _JumpStatement_Delete($8);
     break L1;
     break;
    }
    case 16:  {
     $9 = $1;
     _ExpressionStatement_Delete($9);
     break L1;
     break;
    }
    case 25:  {
     $10 = $1;
     _IfStatement_Delete($10);
     break L1;
     break;
    }
    case 24:  {
     $11 = $1;
     _TryBlockStatement_Delete($11);
     break L1;
     break;
    }
    case 22:  {
     $12 = $1;
     _WhileStatement_Delete($12);
     break L1;
     break;
    }
    case 17:  {
     $13 = $1;
     _SwitchStatement_Delete($13);
     break L1;
     break;
    }
    case 21:  {
     $14 = $1;
     _AsmStatement_Delete($14);
     break L1;
     break;
    }
    case 23:  {
     $15 = $1;
     _DoStatement_Delete($15);
     break L1;
     break;
    }
    case 18:  {
     $16 = $1;
     _LabeledStatement_Delete($16);
     break L1;
     break;
    }
    case 15:  {
     $17 = $1;
     _CompoundStatement_Delete($17);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _ForStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _AnyDeclaration_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _Expression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 _Expression_Delete($12);
 $13 = $1;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _Expression_Delete($15);
 $16 = $1;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 _Statement_Delete($18);
 $19 = $1;
 $20 = ((($19)) + 24|0);
 _TokenList_Destroy($20);
 $21 = $1;
 $22 = ((($21)) + 32|0);
 _TokenList_Destroy($22);
 $23 = $1;
 $24 = ((($23)) + 40|0);
 _TokenList_Destroy($24);
 $25 = $1;
 $26 = ((($25)) + 48|0);
 _TokenList_Destroy($26);
 $27 = $1;
 $28 = ((($27)) + 56|0);
 _TokenList_Destroy($28);
 $29 = $1;
 _free($29);
 STACKTOP = sp;return;
}
function _WhileStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _Statement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TokenList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _DoStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _Statement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TokenList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 36|0);
 _TokenList_Destroy($17);
 $18 = $1;
 $19 = ((($18)) + 44|0);
 _TokenList_Destroy($19);
 $20 = $1;
 _free($20);
 STACKTOP = sp;return;
}
function _TryBlockStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _CompoundStatement_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _CompoundStatement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TokenList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 36|0);
 _TokenList_Destroy($17);
 $18 = $1;
 _free($18);
 STACKTOP = sp;return;
}
function _ExpressionStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _TokenList_Destroy($8);
 $9 = $1;
 _free($9);
 STACKTOP = sp;return;
}
function _JumpStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _Expression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 16|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 24|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 32|0);
 _TokenList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _AsmStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TokenList_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _SwitchStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _Statement_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TokenList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _IfStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _Expression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 _Statement_Delete($12);
 $13 = $1;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 _Statement_Delete($15);
 $16 = $1;
 $17 = ((($16)) + 28|0);
 _TokenList_Destroy($17);
 $18 = $1;
 $19 = ((($18)) + 36|0);
 _TokenList_Destroy($19);
 $20 = $1;
 $21 = ((($20)) + 44|0);
 _TokenList_Destroy($21);
 $22 = $1;
 $23 = ((($22)) + 52|0);
 _TokenList_Destroy($23);
 $24 = $1;
 $25 = ((($24)) + 60|0);
 _TokenList_Destroy($25);
 $26 = $1;
 $27 = ((($26)) + 68|0);
 _TokenList_Destroy($27);
 $28 = $1;
 $29 = ((($28)) + 76|0);
 _TokenList_Destroy($29);
 $30 = $1;
 $31 = ((($30)) + 84|0);
 _TokenList_Destroy($31);
 $32 = $1;
 _free($32);
 STACKTOP = sp;return;
}
function _DeferStatement_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _TokenList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _Statement_Delete($8);
 STACKTOP = sp;return;
}
function _Declaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _DeclarationSpecifiers_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 _InitDeclaratorList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 _CompoundStatement_Delete($10);
 $11 = $1;
 $12 = ((($11)) + 36|0);
 _TokenList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 44|0);
 _TokenList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 52|0);
 _TokenList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 60|0);
 _TokenList_Destroy($18);
 $19 = $1;
 _free($19);
 STACKTOP = sp;return;
}
function _TypeName_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _SpecifierQualifierList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 16|0);
 _Declarator_Destroy($5);
 STACKTOP = sp;return;
}
function _PrimaryExpressionValue_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _PrimaryExpressionValue_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _PrimaryExpressionLambda_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 40|0);
 _TypeName_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 _TokenList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 16|0);
 _TokenList_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 24|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 32|0);
 _TokenList_Destroy($13);
 $14 = $1;
 _free($14);
 STACKTOP = sp;return;
}
function _ArgumentExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _TokenList_Destroy($5);
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 _Expression_Delete($7);
 $8 = $1;
 _free($8);
 STACKTOP = sp;return;
}
function _ArgumentExpressionList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16<<1;
  $4 = $17;
  $18 = $4;
  $19 = ($18|0)==(0);
  $spec$store$select = $19 ? 1 : $17;
  $4 = $spec$store$select;
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
  $22 = $5;
  $23 = $4;
  $24 = $23<<2;
  $25 = (_realloc($22,$24)|0);
  $5 = $25;
  $26 = $5;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $5;
   $29 = $2;
   HEAP32[$29>>2] = $28;
   $30 = $4;
   $31 = $2;
   $32 = ((($31)) + 8|0);
   HEAP32[$32>>2] = $30;
  }
 }
 $33 = $3;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38<<2)|0);
 HEAP32[$39>>2] = $33;
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function _ArgumentExpressionList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _ArgumentExpression_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _PostfixExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 20|0);
 _ArgumentExpressionList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 92|0);
 _TypeName_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $1;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _Expression_Delete($13);
 $14 = $1;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 _Expression_Delete($16);
 $17 = $1;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 _PostfixExpression_Delete($19);
 $20 = $1;
 $21 = ((($20)) + 36|0);
 _InitializerList_Destroy($21);
 $22 = $1;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = $1;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 _TypeName_Delete($27);
 $28 = $1;
 $29 = ((($28)) + 52|0);
 _TokenList_Destroy($29);
 $30 = $1;
 $31 = ((($30)) + 60|0);
 _TokenList_Destroy($31);
 $32 = $1;
 $33 = ((($32)) + 68|0);
 _TokenList_Destroy($33);
 $34 = $1;
 $35 = ((($34)) + 76|0);
 _TokenList_Destroy($35);
 $36 = $1;
 $37 = ((($36)) + 84|0);
 _TokenList_Destroy($37);
 $38 = $1;
 _free($38);
 STACKTOP = sp;return;
}
function _InitializerList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _InitializerListItem_Delete($12);
 }
 STACKTOP = sp;return;
}
function _TypeName_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TypeName_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _BinaryExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 32|0);
 _TypeName_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _Expression_Delete($8);
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _Expression_Delete($11);
 $12 = $1;
 $13 = ((($12)) + 24|0);
 _TokenList_Destroy($13);
 $14 = $1;
 _free($14);
 STACKTOP = sp;return;
}
function _UnaryExpressionOperator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TypeName_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 40|0);
 _TokenList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 48|0);
 _TokenList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 56|0);
 _TokenList_Destroy($14);
 $15 = $1;
 _free($15);
 STACKTOP = sp;return;
}
function _CastExpressionType_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _TypeName_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 36|0);
 _TokenList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 44|0);
 _TokenList_Destroy($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _TernaryExpression_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 36|0);
 _TypeName_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _Expression_Delete($8);
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _Expression_Delete($11);
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 _Expression_Delete($14);
 $15 = $1;
 $16 = ((($15)) + 20|0);
 _TokenList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 28|0);
 _TokenList_Destroy($18);
 $19 = $1;
 _free($19);
 STACKTOP = sp;return;
}
function _PrimaryExpressionLiteralItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _TokenList_Destroy($8);
 $9 = $1;
 _free($9);
 STACKTOP = sp;return;
}
function _PrimaryExpressionLiteral_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 12|0);
 _TypeName_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 _PrimaryExpressionLiteralItemList_Destroy($7);
 $8 = $1;
 _free($8);
 STACKTOP = sp;return;
}
function _PrimaryExpressionLiteralItemList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _PrimaryExpressionLiteralItem_Delete($11);
 }
 STACKTOP = sp;return;
}
function _EofDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TokenList_Destroy($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _StaticAssertDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TokenList_Destroy($15);
 $16 = $1;
 $17 = ((($16)) + 36|0);
 _TokenList_Destroy($17);
 $18 = $1;
 $19 = ((($18)) + 44|0);
 _TokenList_Destroy($19);
 $20 = $1;
 $21 = ((($20)) + 52|0);
 _TokenList_Destroy($21);
 $22 = $1;
 _free($22);
 STACKTOP = sp;return;
}
function _Enumerator_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $1 = $0;
 dest=$3; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = (_mallocinit(40,$3)|0);
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 36|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 $9 = $2;
 $10 = ((($9)) + 36|0);
 $11 = $8&1;
 HEAP8[$10>>0] = $11;
 $12 = $2;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___strdup($16)|0);
 $18 = $2;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _Enumerator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _Expression_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 12|0);
 _TokenList_Destroy($11);
 $12 = $1;
 $13 = ((($12)) + 20|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 28|0);
 _TokenList_Destroy($15);
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _EnumeratorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _Enumerator_Delete($11);
 }
 STACKTOP = sp;return;
}
function _EnumSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 8|0;
 $1 = $0;
 dest=$3; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = 6;
 $6 = (_mallocinit(48,$3)|0);
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (___strdup($13)|0);
  $17 = $14;
 } else {
  $17 = 0;
 }
 $15 = $2;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $17;
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $4 = $20;
 while(1) {
  $21 = $4;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $24 = (_Enumerator_Clone($23)|0);
  $5 = $24;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  $29 = $5;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  if ($28) {
   HEAP32[$31>>2] = $29;
   $32 = $5;
   $33 = $2;
   $34 = ((($33)) + 8|0);
   $35 = ((($34)) + 4|0);
   HEAP32[$35>>2] = $32;
  } else {
   $36 = ((($31)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$37>>2] = $29;
   $38 = $5;
   $39 = $2;
   $40 = ((($39)) + 8|0);
   $41 = ((($40)) + 4|0);
   HEAP32[$41>>2] = $38;
  }
  $42 = $4;
  $43 = HEAP32[$42>>2]|0;
  $4 = $43;
 }
 $44 = $2;
 STACKTOP = sp;return ($44|0);
}
function _EnumSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 _EnumeratorList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 16|0);
 _TokenList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 24|0);
 _TokenList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 32|0);
 _TokenList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 40|0);
 _TokenList_Destroy($16);
 $17 = $1;
 _free($17);
 STACKTOP = sp;return;
}
function _UnionSetItem_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $1 = $0;
 dest=$3; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = (_mallocinit(40,$3)|0);
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (___strdup($7)|0);
 $9 = $2;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = $18;
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _UnionSetItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 16|0);
 _TokenList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 24|0);
 _TokenList_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 32|0);
 _TokenList_Destroy($12);
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _TUnionSet_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 while(1) {
  $8 = $4;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = (_UnionSetItem_Clone($10)|0);
  $5 = $11;
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $5;
  $16 = $3;
  if ($14) {
   HEAP32[$16>>2] = $15;
   $17 = $5;
   $18 = $3;
   $19 = ((($18)) + 4|0);
   HEAP32[$19>>2] = $17;
  } else {
   $20 = ((($16)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$21>>2] = $15;
   $22 = $5;
   $23 = $3;
   $24 = ((($23)) + 4|0);
   HEAP32[$24>>2] = $22;
  }
  $25 = $4;
  $26 = HEAP32[$25>>2]|0;
  $4 = $26;
 }
 STACKTOP = sp;return;
}
function _TUnionSet_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $2 = $10;
  $11 = $3;
  _UnionSetItem_Delete($11);
 }
 $12 = $1;
 $13 = ((($12)) + 8|0);
 _TokenList_Destroy($13);
 $14 = $1;
 $15 = ((($14)) + 16|0);
 _TokenList_Destroy($15);
 STACKTOP = sp;return;
}
function _TUnionSet_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
 } else {
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$10>>2] = $7;
 }
 $11 = $3;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _StructUnionSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $1 = $0;
 dest=$3; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = 7;
 $4 = (_mallocinit(80,$3)|0);
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (___strdup($11)|0);
  $15 = $12;
 } else {
  $15 = 0;
 }
 $13 = $2;
 $14 = ((($13)) + 16|0);
 HEAP32[$14>>2] = $15;
 $16 = $1;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = $18;
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = $2;
 $24 = ((($23)) + 24|0);
 _TUnionSet_CopyTo($22,$24);
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _StructUnionSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _StructDeclarationList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $1;
 $10 = ((($9)) + 24|0);
 _TUnionSet_Destroy($10);
 $11 = $1;
 $12 = ((($11)) + 48|0);
 _TokenList_Destroy($12);
 $13 = $1;
 $14 = ((($13)) + 56|0);
 _TokenList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 64|0);
 _TokenList_Destroy($16);
 $17 = $1;
 $18 = ((($17)) + 72|0);
 _TokenList_Destroy($18);
 $19 = $1;
 _free($19);
 STACKTOP = sp;return;
}
function _TSingleTypeSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 12|0);
 _TokenList_Destroy($6);
 STACKTOP = sp;return;
}
function _SingleTypeSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
 HEAP32[$3>>2] = 5;
 $4 = (_mallocinit(20,$3)|0);
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $20 = 0;
  $18 = $2;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $20;
  $21 = $2;
  STACKTOP = sp;return ($21|0);
 }
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___strdup($16)|0);
 $20 = $17;
 $18 = $2;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $20;
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _SingleTypeSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TSingleTypeSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _AtomicTypeSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 _TypeName_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 32|0);
 _TokenList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 40|0);
 _TokenList_Destroy($9);
 $10 = $1;
 $11 = ((($10)) + 48|0);
 _TokenList_Destroy($11);
 $12 = $1;
 _free($12);
 STACKTOP = sp;return;
}
function _PointerList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _Pointer_Delete($12);
 }
 STACKTOP = sp;return;
}
function _DirectDeclarator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TDirectDeclarator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _Declarator_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return;
}
function _Declarator_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _DirectDeclarator_Delete($6);
 $7 = $3;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $19 = $2;
  $20 = $3;
  _PointerList_CopyTo($19,$20);
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_DirectDeclarator_Clone($15)|0);
 $17 = $3;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = $3;
 _PointerList_CopyTo($19,$20);
 STACKTOP = sp;return;
}
function _DirectDeclarator_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 16|0;
 $4 = sp;
 $1 = $0;
 dest=$3; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = (_mallocinit(104,$3)|0);
 $2 = $5;
 $6 = $1;
 $7 = ((($6)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 100|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (___strdup($12)|0);
  $16 = $13;
 } else {
  $16 = 0;
 }
 $14 = $2;
 $15 = ((($14)) + 100|0);
 HEAP32[$15>>2] = $16;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = (___strdup($21)|0);
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = $2;
 HEAP32[$23>>2] = $24;
 $25 = $1;
 $26 = ((($25)) + 20|0);
 $27 = $2;
 $28 = ((($27)) + 20|0);
 _ParameterTypeList_CopyTo($26,$28);
 $29 = $1;
 $30 = ((($29)) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = ((($32)) + 52|0);
 HEAP32[$33>>2] = $31;
 $34 = $1;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 HEAP32[$4>>2] = 0;
 $38 = ((($4)) + 4|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($4)) + 8|0);
 HEAP32[$39>>2] = 0;
 $40 = (_mallocinit(12,$4)|0);
 $41 = $2;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = $1;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $2;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 _Declarator_CopyToAbstractDeclarator($45,$48);
 $49 = $2;
 STACKTOP = sp;return ($49|0);
}
function _PointerList_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 while(1) {
  $9 = $4;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;HEAP32[$6+24>>2]=0|0;HEAP32[$6+28>>2]=0|0;
  $11 = (_mallocinit(32,$6)|0);
  $5 = $11;
  $12 = $5;
  $13 = $4;
  _Pointer_CopyFrom($12,$13);
  $14 = $3;
  $15 = $5;
  _PointerList_PushBack($14,$15);
  $16 = $4;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _Declarator_CopyToAbstractDeclarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Declarator_CopyTo($4,$5);
 $6 = $3;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $3;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function _Declarator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _Declarator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _ParameterTypeList_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 24|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $3;
 $11 = ((($10)) + 24|0);
 $12 = $9&1;
 HEAP8[$11>>0] = $12;
 $13 = $2;
 $14 = ((($13)) + 25|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&1;
 $17 = $3;
 $18 = ((($17)) + 25|0);
 $19 = $16&1;
 HEAP8[$18>>0] = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $4 = $21;
 while(1) {
  $22 = $4;
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   break;
  }
  $24 = $4;
  $25 = (_Parameter_Clone($24)|0);
  $5 = $25;
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  $29 = $5;
  $30 = $3;
  if ($28) {
   HEAP32[$30>>2] = $29;
   $31 = $5;
   $32 = $3;
   $33 = ((($32)) + 4|0);
   HEAP32[$33>>2] = $31;
  } else {
   $34 = ((($30)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = $29;
   $37 = $5;
   $38 = $3;
   $39 = ((($38)) + 4|0);
   HEAP32[$39>>2] = $37;
  }
  $40 = $4;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $4 = $42;
 }
 STACKTOP = sp;return;
}
function _TInitDeclarator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _Declarator_Delete($3);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Initializer_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TokenList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 20|0);
 _TokenList_Destroy($10);
 STACKTOP = sp;return;
}
function _Initializer_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 36:  {
    $6 = $1;
    _BinaryExpression_Delete($6);
    break L1;
    break;
   }
   case 38:  {
    $7 = $1;
    _PrimaryExpressionLambda_Delete($7);
    break L1;
    break;
   }
   case 31:  {
    $8 = $1;
    _UnaryExpressionOperator_Delete($8);
    break L1;
    break;
   }
   case 32:  {
    $9 = $1;
    _CastExpressionType_Delete($9);
    break L1;
    break;
   }
   case 28:  {
    $10 = $1;
    _InitializerListType_Delete($10);
    break L1;
    break;
   }
   case 33:  {
    $11 = $1;
    _PrimaryExpressionValue_Delete($11);
    break L1;
    break;
   }
   case 35:  {
    $12 = $1;
    _PostfixExpression_Delete($12);
    break L1;
    break;
   }
   case 34:  {
    $13 = $1;
    _PrimaryExpressionLiteral_Delete($13);
    break L1;
    break;
   }
   case 37:  {
    $14 = $1;
    _TernaryExpression_Delete($14);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _InitDeclarator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TInitDeclarator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _ParameterTypeList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _ParameterList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 8|0);
 _TokenList_Destroy($4);
 $5 = $1;
 $6 = ((($5)) + 16|0);
 _TokenList_Destroy($6);
 STACKTOP = sp;return;
}
function _ParameterList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _Parameter_Delete($12);
 }
 STACKTOP = sp;return;
}
function _Parameter_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $1 = $0;
 dest=$3; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = 39;
 $4 = (_mallocinit(44,$3)|0);
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = $2;
 $8 = ((($7)) + 20|0);
 _Declarator_CopyToAbstractDeclarator($6,$8);
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 $13 = $2;
 $14 = ((($13)) + 40|0);
 $15 = $12&1;
 HEAP8[$14>>0] = $15;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = $2;
 $19 = ((($18)) + 8|0);
 _DeclarationSpecifiers_CopyTo($17,$19);
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _Parameter_GetName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = (_Declarator_GetName($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _TDirectDeclarator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $1;
 $5 = ((($4)) + 100|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 _Declarator_Delete($9);
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _DirectDeclarator_Delete($12);
 $13 = $1;
 $14 = ((($13)) + 20|0);
 _ParameterTypeList_Destroy($14);
 $15 = $1;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 _Expression_Delete($17);
 $18 = $1;
 $19 = ((($18)) + 56|0);
 _TokenList_Destroy($19);
 $20 = $1;
 $21 = ((($20)) + 64|0);
 _TokenList_Destroy($21);
 $22 = $1;
 $23 = ((($22)) + 72|0);
 _TokenList_Destroy($23);
 $24 = $1;
 $25 = ((($24)) + 80|0);
 _TokenList_Destroy($25);
 $26 = $1;
 $27 = ((($26)) + 88|0);
 _TokenList_Destroy($27);
 STACKTOP = sp;return;
}
function _DeclarationSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 13:  {
  $5 = $2;
  $6 = (_TTypeQualifier_Clone($5)|0);
  $1 = $6;
  break;
 }
 case 7:  {
  $7 = $2;
  $8 = (_StructUnionSpecifier_Clone($7)|0);
  $1 = $8;
  break;
 }
 case 8:  {
  $9 = $2;
  $10 = (_StorageSpecifier_Clone($9)|0);
  $1 = $10;
  break;
 }
 case 9:  {
  $11 = $2;
  $12 = (_AtomicTypeSpecifier_Clone($11)|0);
  $1 = $12;
  break;
 }
 case 5:  {
  $13 = $2;
  $14 = (_SingleTypeSpecifier_Clone($13)|0);
  $1 = $14;
  break;
 }
 case 12:  {
  $15 = $2;
  $16 = (_AlignmentSpecifier_Clone($15)|0);
  $1 = $16;
  break;
 }
 case 14:  {
  $17 = $2;
  $18 = (_FunctionSpecifier_Clone($17)|0);
  $1 = $18;
  break;
 }
 case 6:  {
  $19 = $2;
  $20 = (_EnumSpecifier_Clone($19)|0);
  $1 = $20;
  break;
 }
 default: {
  ___assert_fail((5472|0),(2336|0),13504,(7225|0));
  // unreachable;
 }
 }
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _TTypeQualifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 HEAP32[$3>>2] = 13;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 8|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 $6 = (_mallocinit(16,$3)|0);
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _StorageSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 HEAP32[$3>>2] = 8;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 8|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 $6 = (_mallocinit(16,$3)|0);
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _AtomicTypeSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $1 = $0;
 dest=$3; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$3>>2] = 9;
 $4 = (_mallocinit(56,$3)|0);
 $2 = $4;
 ___assert_fail((5472|0),(2336|0),14200,(7277|0));
 // unreachable;
 return (0)|0;
}
function _AlignmentSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $1 = $0;
 HEAP32[$3>>2] = 12;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (_mallocinit(8,$3)|0);
 $2 = $5;
 ___assert_fail((5472|0),(2336|0),13782,(7252|0));
 // unreachable;
 return (0)|0;
}
function _FunctionSpecifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 HEAP32[$3>>2] = 14;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 8|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 $6 = (_mallocinit(16,$3)|0);
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 STACKTOP = sp;return ($12|0);
}
function _HasAutoArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 while(1) {
  $7 = $3;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $3;
  $4 = $9;
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_Declarator_IsAutoArray($11)|0);
  if ($12) {
   break;
  }
  $13 = $3;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $3 = $15;
 }
 if ((label|0) == 6) {
  $16 = $2;
  $17 = $16&1;
  STACKTOP = sp;return ($17|0);
 }
 $2 = 1;
 $16 = $2;
 $17 = $16&1;
 STACKTOP = sp;return ($17|0);
}
function _InitDeclarator_FindName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_Declarator_GetName($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _TAlignmentSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _AlignmentSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TAlignmentSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _StructDeclaratorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _InitDeclarator_Delete($12);
 }
 STACKTOP = sp;return;
}
function _StructDeclaratorList_Add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $12 = ((($8)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $7;
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 }
}
function _TStructDeclaration_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _SpecifierQualifierList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 16|0);
 _StructDeclaratorList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 24|0);
 _TokenList_Destroy($7);
 STACKTOP = sp;return;
}
function _SpecifierQualifierList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _SpecifierQualifier_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _StructDeclaration_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TStructDeclaration_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _Pointer_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TPointer_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TPointer_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _TypeQualifierList_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 24|0);
 _TokenList_Destroy($4);
 STACKTOP = sp;return;
}
function _TypeQualifierList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $1;
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _TypeQualifier_Delete($11);
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 STACKTOP = sp;return;
}
function _PointerList_PopFront($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 _Pointer_Delete($13);
 STACKTOP = sp;return;
}
function _TypeQualifierList_CopyFrom($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 _TypeQualifierList_Destroy($7);
 $8 = $2;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$4+16>>2]|0;
 $5 = 0;
 while(1) {
  $9 = $5;
  $10 = $3;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $5;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_TTypeQualifier_Clone($17)|0);
  $6 = $18;
  $19 = $2;
  $20 = $6;
  _TypeQualifierList_PushBack($19,$20);
  $21 = $5;
  $22 = (($21) + 1)|0;
  $5 = $22;
 }
 STACKTOP = sp;return;
}
function _TypeQualifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TTypeQualifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TypeQualifierList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ($7|0)>(4);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $10 = $2;
 $11 = $2;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13<<2)|0);
 HEAP32[$14>>2] = $9;
 $15 = $2;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _TTypeQualifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _TokenList_Destroy($3);
 STACKTOP = sp;return;
}
function _TStorageSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _TokenList_Destroy($3);
 STACKTOP = sp;return;
}
function _StorageSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TStorageSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _SpecifierQualifierList_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = $2;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_SpecifierQualifier_Clone($15)|0);
  _SpecifierQualifierList_PushBack($10,$16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _SpecifierQualifierList_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _TSpecifierQualifierList_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _SpecifierQualifier_Clone($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 13:  {
  $5 = $2;
  $6 = (_TTypeQualifier_Clone($5)|0);
  $1 = $6;
  break;
 }
 case 7:  {
  $7 = $2;
  $8 = (_StructUnionSpecifier_Clone($7)|0);
  $1 = $8;
  break;
 }
 case 9:  {
  $9 = $2;
  $10 = (_AtomicTypeSpecifier_Clone($9)|0);
  $1 = $10;
  break;
 }
 case 5:  {
  $11 = $2;
  $12 = (_SingleTypeSpecifier_Clone($11)|0);
  $1 = $12;
  break;
 }
 case 6:  {
  $13 = $2;
  $14 = (_EnumSpecifier_Clone($13)|0);
  $1 = $14;
  break;
 }
 default: {
  ___assert_fail((5472|0),(2336|0),14556,(7303|0));
  // unreachable;
 }
 }
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _SpecifierQualifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 13:  {
    $6 = $1;
    _TypeQualifier_Delete($6);
    break L1;
    break;
   }
   case 7:  {
    $7 = $1;
    _StructUnionSpecifier_Delete($7);
    break L1;
    break;
   }
   case 9:  {
    $8 = $1;
    _AtomicTypeSpecifier_Delete($8);
    break L1;
    break;
   }
   case 5:  {
    $9 = $1;
    _SingleTypeSpecifier_Delete($9);
    break L1;
    break;
   }
   case 6:  {
    $10 = $1;
    _EnumSpecifier_Delete($10);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TSpecifierQualifierList_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _SpecifierQualifierList_CanAdd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $8 = $19;
  $20 = $8;
  $21 = HEAP32[$20>>2]|0;
  $cond = ($21|0)==(5);
  L4: do {
   if ($cond) {
    $22 = $8;
    $9 = $22;
    $23 = $9;
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    switch ($25|0) {
    case 104:  {
     $6 = 1;
     break L4;
     break;
    }
    case 9:  {
     $5 = 1;
     break L4;
     break;
    }
    default: {
     break L4;
    }
    }
   }
  } while(0);
  $26 = $7;
  $27 = (($26) + 1)|0;
  $7 = $27;
 }
 $28 = $3;
 $29 = ($28|0)==(9);
 if ($29) {
  $30 = $5;
  $31 = $30&1;
  if (!($31)) {
   $32 = $6;
   $33 = $32&1;
   if (!($33)) {
    $4 = 1;
   }
  }
 } else {
  $4 = 1;
 }
 $34 = $4;
 $35 = $34&1;
 STACKTOP = sp;return ($35|0);
}
function _DeclarationSpecifiers_CanAddSpeficier($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 while(1) {
  $14 = $11;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = $11;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $12 = $23;
  $24 = $12;
  $25 = HEAP32[$24>>2]|0;
  L4: do {
   switch ($25|0) {
   case 5:  {
    $26 = $12;
    $13 = $26;
    $27 = $13;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $cond = ($29|0)==(9);
    if ($cond) {
     $9 = 1;
     break L4;
    } else {
     $10 = 1;
     break L4;
    }
    break;
   }
   case 7:  {
    $30 = $12;
    $7 = $30;
    break;
   }
   case 6:  {
    $31 = $12;
    $8 = $31;
    break;
   }
   default: {
   }
   }
  } while(0);
  $32 = $11;
  $33 = (($32) + 1)|0;
  $11 = $33;
 }
 $34 = $4;
 $35 = ($34|0)==(9);
 do {
  if ($35) {
   $36 = $7;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $7;
    $39 = ((($38)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = $7;
     $43 = ((($42)) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $5;
     $46 = (_strcmp($44,$45)|0);
     $47 = ($46|0)==(0);
     if ($47) {
      break;
     }
    }
    $6 = 1;
    break;
   }
   $48 = $8;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = $8;
    $51 = ((($50)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)!=(0|0);
    if ($53) {
     $54 = $8;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $5;
     $58 = (_strcmp($56,$57)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      break;
     }
    }
    $6 = 1;
    break;
   } else {
    $60 = $9;
    $61 = $60&1;
    if ($61) {
     break;
    }
    $62 = $10;
    $63 = $62&1;
    if ($63) {
     break;
    }
    $6 = 1;
    break;
   }
  } else {
   $6 = 1;
  }
 } while(0);
 $64 = $6;
 $65 = $64&1;
 STACKTOP = sp;return ($65|0);
}
function _TDeclarationSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP32[$4>>2]|0;
   switch ($5|0) {
   case 13:  {
    $6 = $1;
    _TypeQualifier_Delete($6);
    break L1;
    break;
   }
   case 7:  {
    $7 = $1;
    _StructUnionSpecifier_Delete($7);
    break L1;
    break;
   }
   case 8:  {
    $8 = $1;
    _StorageSpecifier_Delete($8);
    break L1;
    break;
   }
   case 9:  {
    $9 = $1;
    _AtomicTypeSpecifier_Delete($9);
    break L1;
    break;
   }
   case 5:  {
    $10 = $1;
    _SingleTypeSpecifier_Delete($10);
    break L1;
    break;
   }
   case 12:  {
    $11 = $1;
    _AlignmentSpecifier_Delete($11);
    break L1;
    break;
   }
   case 14:  {
    $12 = $1;
    _FunctionSpecifier_Delete($12);
    break L1;
    break;
   }
   case 6:  {
    $13 = $1;
    _EnumSpecifier_Delete($13);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _FunctionSpecifier_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TFunctionSpecifier_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _DeclarationSpecifiers_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (($12) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $5 = $15;
  $16 = $3;
  $17 = $5;
  $18 = (_DeclarationSpecifier_Clone($17)|0);
  _DeclarationSpecifiers_PushBack($16,$18);
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
 }
 STACKTOP = sp;return;
}
function _DeclarationSpecifiers_PushBack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $4 = $16;
  $17 = $4;
  $18 = ($17|0)==(0);
  $spec$store$select = $18 ? 1 : $16;
  $4 = $spec$store$select;
  $19 = $2;
  $20 = $4;
  _TDeclarationSpecifiers_Reserve($19,$20);
 }
 $21 = $3;
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $24 = $2;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($23) + ($26<<2)|0);
 HEAP32[$27>>2] = $21;
 $28 = $2;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function _DeclarationSpecifiers_CopyTo_SpecifierQualifierList($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $4;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $5 = $16;
  $17 = $5;
  $18 = HEAP32[$17>>2]|0;
  $6 = $18;
  $19 = $6;
  switch ($19|0) {
  case 6: case 5: case 9: case 7: case 13:  {
   $20 = $3;
   $21 = $5;
   $22 = (_DeclarationSpecifier_Clone($21)|0);
   _SpecifierQualifierList_PushBack($20,$22);
   break;
  }
  default: {
  }
  }
  $23 = $4;
  $24 = (($23) + 1)|0;
  $4 = $24;
 }
 STACKTOP = sp;return;
}
function _DeclarationSpecifiers_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  if (!($7)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _TDeclarationSpecifier_Delete($12);
  $13 = $2;
  $14 = (($13) + 1)|0;
  $2 = $14;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _TDeclarationSpecifiers_Reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = $3;
 $14 = $13<<2;
 $15 = (_realloc($12,$14)|0);
 $4 = $15;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function _TFunctionSpecifier_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 _TokenList_Destroy($3);
 STACKTOP = sp;return;
}
function _InitDeclaratorList_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _InitDeclarator_Delete($12);
 }
 STACKTOP = sp;return;
}
function _Parameter_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 8|0);
 _DeclarationSpecifiers_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 20|0);
 _Declarator_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 32|0);
 _TokenList_Destroy($9);
 $10 = $1;
 _free($10);
 STACKTOP = sp;return;
}
function _TDesignator_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _Expression_Delete($6);
 $7 = $1;
 $8 = ((($7)) + 12|0);
 _TokenList_Destroy($8);
 $9 = $1;
 $10 = ((($9)) + 20|0);
 _TokenList_Destroy($10);
 STACKTOP = sp;return;
}
function _Designator_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TDesignator_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _TInitializerListType_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _InitializerList_Destroy($3);
 $4 = $1;
 $5 = ((($4)) + 12|0);
 _TokenList_Destroy($5);
 $6 = $1;
 $7 = ((($6)) + 20|0);
 _TokenList_Destroy($7);
 $8 = $1;
 $9 = ((($8)) + 28|0);
 _TokenList_Destroy($9);
 STACKTOP = sp;return;
}
function _InitializerListType_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TInitializerListType_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _InitializerListItem_Delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 _TInitializerListItem_Destroy($4);
 $5 = $1;
 _free($5);
 STACKTOP = sp;return;
}
function _Designation_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
  $12 = $3;
  _Designator_Delete($12);
 }
 $13 = $1;
 $14 = ((($13)) + 8|0);
 _TokenList_Destroy($14);
 STACKTOP = sp;return;
}
function _TInitializerListItem_Destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _Designation_Destroy($2);
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _Initializer_Delete($5);
 $6 = $1;
 $7 = ((($6)) + 24|0);
 _TokenList_Destroy($7);
 STACKTOP = sp;return;
}
function _TPostfixExpressionCore_Evaluate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $9;
 $10 = $2;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  (_EvaluateConstantExpression($16,$5)|0);
 }
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 switch ($19|0) {
 case 30:  {
  $23 = $2;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  (_EvaluateConstantExpression($25,$4)|0);
  break;
 }
 case 46:  {
  $20 = $2;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  (_EvaluateConstantExpression($22,$6)|0);
  break;
 }
 default: {
 }
 }
 $26 = $2;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return 1;
 }
 $30 = HEAP32[$4>>2]|0;
 HEAP32[$7>>2] = $30;
 $31 = $2;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 (_TPostfixExpressionCore_Evaluate($33,$7)|0);
 $34 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $34;
 STACKTOP = sp;return 1;
}
function _PrimaryExpressionLiteralItemList_Add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $3;
 $8 = $2;
 if ($6) {
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $12 = ((($8)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$13>>2] = $7;
  $14 = $3;
  $15 = $2;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = $14;
  STACKTOP = sp;return;
 }
}
function _TypeName_Swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$5+20>>2]|0;HEAP32[$4+24>>2]=HEAP32[$5+24>>2]|0;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$6+24>>2]=HEAP32[$7+24>>2]|0;
 $8 = $3;
 ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$8+24>>2]=HEAP32[$4+24>>2]|0;
 STACKTOP = sp;return;
}
function _TypeName_CopyTo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = $3;
 $10 = ((($9)) + 4|0);
 _SpecifierQualifierList_CopyTo($8,$10);
 $11 = $2;
 $12 = ((($11)) + 16|0);
 $13 = $3;
 $14 = ((($13)) + 16|0);
 _Declarator_CopyToAbstractDeclarator($12,$14);
 STACKTOP = sp;return;
}
function _ParameterList_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $4 = $6;
 while(1) {
  $7 = $4;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = $3;
  _Parameter_PrintNameMangling($9,$10);
  $11 = $4;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $4 = $13;
 }
 STACKTOP = sp;return;
}
function _Parameter_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = $3;
 _DeclarationSpecifiers_PrintNameMangling($5,$6);
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = $3;
 _TDeclarator_PrintNameMangling($8,$9);
 $10 = $2;
 $11 = ((($10)) + 40|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&1;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $3;
 (_StrBuilder_Append($14,4638)|0);
 STACKTOP = sp;return;
}
function _TSingleTypeSpecifier_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(9);
 $8 = $3;
 $9 = $2;
 if ($7) {
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  (_StrBuilder_Append($8,$11)|0);
  STACKTOP = sp;return;
 } else {
  $12 = ((($9)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_TokenToString($13)|0);
  (_StrBuilder_Append($8,$14)|0);
  STACKTOP = sp;return;
 }
}
function _TDeclarator_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _TPointerList_PrintNameMangling($4,$5);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 _TDirectDeclarator_PrintNameMangling($8,$9);
 STACKTOP = sp;return;
}
function _Parser_Match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = (_Parser_HasError($5)|0);
 if ($6) {
  $2 = 22;
 } else {
  $7 = $3;
  $8 = ((($7)) + 20|0);
  $9 = $4;
  $10 = (_FinalMatch($8,$9)|0);
  $2 = $10;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _Parser_HasError($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = ((($7)) + 76|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _SetWarning($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 16|0;
 $4 = sp + 20|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $6 = $2;
 $7 = ((($6)) + 20|0);
 _Scanner_GetFilePositionString($7,$4);
 HEAP32[$5>>2] = $varargs;
 $8 = $3;
 _StrBuilder_AppendFmtV($4,$8,$5);
 $9 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 (_printf(5121,$vararg_buffer)|0);
 _StrBuilder_Destroy($4);
 STACKTOP = sp;return;
}
function _SetError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_HasError($5)|0);
 $7 = $2;
 if ($6) {
  $16 = ((($7)) + 4|0);
  HEAP8[$16>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $8 = ((($7)) + 20|0);
  $9 = $2;
  $10 = ((($9)) + 8|0);
  _Scanner_GetFilePositionString($8,$10);
  $11 = $2;
  $12 = ((($11)) + 4|0);
  HEAP8[$12>>0] = 1;
  HEAP32[$4>>2] = $varargs;
  $13 = $2;
  $14 = ((($13)) + 8|0);
  $15 = $3;
  _StrBuilder_AppendFmtV($14,$15,$4);
  STACKTOP = sp;return;
 }
}
function _GetCurrentLine($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_Parser_HasError($3)|0);
 if ($4) {
  $1 = -1;
 } else {
  $5 = $2;
  $6 = ((($5)) + 20|0);
  $7 = (_Scanner_LineAt($6,0)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _GetFileIndex($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_Parser_HasError($3)|0);
 if ($4) {
  $1 = -1;
 } else {
  $5 = $2;
  $6 = ((($5)) + 20|0);
  $7 = (_Scanner_FileIndexAt($6,0)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _Parser_LookAheadToken($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 22;
 $5 = $1;
 $6 = (_Parser_HasError($5)|0);
 if ($6) {
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 $3 = 1;
 while(1) {
  $7 = $3;
  $8 = ($7|0)<(10);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 20|0);
  $11 = $3;
  $12 = (_Scanner_TokenAt($10,$11)|0);
  $2 = $12;
  $13 = $1;
  $14 = ((($13)) + 20|0);
  $15 = $3;
  $16 = (_Scanner_IsActiveAt($14,$15)|0);
  $17 = $16&1;
  $4 = $17;
  $18 = $4;
  $19 = $18&1;
  if ($19) {
   $20 = $2;
   $21 = (_IsPreprocessorTokenPhase($20)|0);
   if (!($21)) {
    label = 7;
    break;
   }
  }
  $22 = $3;
  $23 = (($22) + 1)|0;
  $3 = $23;
 }
 if ((label|0) == 7) {
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _Parser_LookAheadLexeme($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = (_Parser_HasError($7)|0);
 if ($8) {
  $1 = 16416;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $3 = 0;
 $9 = $2;
 $10 = (_Parser_HasError($9)|0);
 L5: do {
  if (!($10)) {
   $4 = 1;
   while(1) {
    $11 = $4;
    $12 = ($11|0)<(10);
    if (!($12)) {
     break L5;
    }
    $13 = $2;
    $14 = ((($13)) + 20|0);
    $15 = $4;
    $16 = (_Scanner_TokenAt($14,$15)|0);
    $5 = $16;
    $17 = $2;
    $18 = ((($17)) + 20|0);
    $19 = $4;
    $20 = (_Scanner_IsActiveAt($18,$19)|0);
    $21 = $20&1;
    $6 = $21;
    $22 = $6;
    $23 = $22&1;
    if ($23) {
     $24 = $5;
     $25 = (_IsPreprocessorTokenPhase($24)|0);
     if (!($25)) {
      break;
     }
    }
    $30 = $4;
    $31 = (($30) + 1)|0;
    $4 = $31;
   }
   $26 = $2;
   $27 = ((($26)) + 20|0);
   $28 = $4;
   $29 = (_Scanner_LexemeAt($27,$28)|0);
   $3 = $29;
  }
 } while(0);
 $32 = $3;
 $1 = $32;
 $33 = $1;
 STACKTOP = sp;return ($33|0);
}
function _Parser_CurrentTokenType($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = (_Parser_HasError($4)|0);
 if ($5) {
  $1 = 22;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 $6 = $2;
 $7 = ((($6)) + 20|0);
 $8 = (_Scanner_TokenAt($7,0)|0);
 $3 = $8;
 $9 = $3;
 $10 = (_IsPreprocessorTokenPhase($9)|0);
 if ($10) {
  $11 = $2;
  _SetError($11,7336,$vararg_buffer);
 }
 $12 = $3;
 $1 = $12;
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _Parser_MatchToken($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_Parser_HasError($8)|0);
 if ($9) {
  $3 = 2;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 $10 = $4;
 $11 = (_Parser_CurrentTokenType($10)|0);
 $7 = $11;
 $12 = $5;
 $13 = $7;
 $14 = ($12|0)!=($13|0);
 $15 = $4;
 if ($14) {
  $16 = $5;
  $17 = (_TokenToString($16)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  _SetError($15,7362,$vararg_buffer);
  $3 = 2;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $18 = $6;
  (_Parser_Match($15,$18)|0);
  $19 = $4;
  $20 = (_Parser_CurrentTokenType($19)|0);
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _GetCompletationMessage($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 16416;
 $3 = $1;
 $4 = (_Parser_HasError($3)|0);
 do {
  if ($4) {
   $5 = $1;
   $6 = ((($5)) + 20|0);
   $7 = ((($6)) + 76|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&1;
   $10 = $1;
   if ($9) {
    $11 = ((($10)) + 20|0);
    $12 = ((($11)) + 64|0);
    $13 = HEAP32[$12>>2]|0;
    $2 = $13;
    break;
   } else {
    $14 = ((($10)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $2 = $15;
    break;
   }
  }
 } while(0);
 $16 = $2;
 STACKTOP = sp;return ($16|0);
}
function _Lexeme($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_Parser_HasError($3)|0);
 if ($4) {
  $1 = 16416;
 } else {
  $5 = $2;
  $6 = ((($5)) + 20|0);
  $7 = (_Scanner_LexemeAt($6,0)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _ErrorOrEof($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_Parser_HasError($2)|0);
 if ($3) {
  $7 = 1;
 } else {
  $4 = $1;
  $5 = (_Parser_CurrentTokenType($4)|0);
  $6 = ($5|0)==(2);
  $7 = $6;
 }
 STACKTOP = sp;return ($7|0);
}
function _IsFirstOfPrimaryExpression($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 138: case 30: case 15: case 13: case 14: case 12: case 11: case 85: case 8: case 9:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _PrimaryExpressionLiteral($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 32|0;
 $8 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 $11 = (_Parser_CurrentTokenType($10)|0);
 $4 = $11;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = 34;
 $12 = (_mallocinit(40,$6)|0);
 $5 = $12;
 $13 = $5;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 while(1) {
  $15 = $4;
  $16 = ($15|0)==(8);
  if (!($16)) {
   break;
  }
  HEAP32[$8>>2] = 0;
  $17 = ((($8)) + 4|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($8)) + 8|0);
  ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;
  $19 = (_mallocinit(16,$8)|0);
  $7 = $19;
  $20 = $2;
  $21 = (_Lexeme($20)|0);
  $9 = $21;
  $22 = $9;
  $23 = (___strdup($22)|0);
  $24 = $7;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $7;
  $28 = ((($27)) + 8|0);
  $29 = (_Parser_Match($26,$28)|0);
  $4 = $29;
  $30 = $5;
  $31 = ((($30)) + 4|0);
  $32 = $7;
  _PrimaryExpressionLiteralItemList_Add($31,$32);
 }
 STACKTOP = sp;return;
}
function _PrimaryExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 180|0;
 $11 = sp + 104|0;
 $13 = sp + 32|0;
 $14 = sp + 28|0;
 $2 = $0;
 $3 = $1;
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $3;
 HEAP32[$16>>2] = 0;
 $17 = $2;
 $18 = (_Parser_CurrentTokenType($17)|0);
 $4 = $18;
 $19 = $2;
 $20 = (_Lexeme($19)|0);
 $5 = $20;
 $21 = $4;
 $22 = (_IsFirstOfPrimaryExpression($21)|0);
 if (!($22)) {
  $23 = $2;
  _SetError($23,7384,$vararg_buffer);
 }
 $24 = $4;
 switch ($24|0) {
 case 8:  {
  $25 = $2;
  $26 = $3;
  _PrimaryExpressionLiteral($25,$26);
  break;
 }
 case 9:  {
  $27 = $2;
  $28 = ((($27)) + 136|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $5;
  $31 = (_SymbolMap_Find($29,$30)|0);
  $6 = $31;
  $32 = $6;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $34 = $2;
   $35 = ((($34)) + 140|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&1;
   if (!($37)) {
    $38 = $5;
    $39 = (_strcmp($38,7428)|0);
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = $5;
     $42 = (_strcmp($41,5860)|0);
     $43 = ($42|0)==(0);
     if (!($43)) {
      $44 = $2;
      $45 = $5;
      HEAP32[$vararg_buffer1>>2] = $45;
      _SetWarning($44,7441,$vararg_buffer1);
     }
    }
   }
  }
  dest=$8; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$8>>2] = 33;
  $46 = (_mallocinit(68,$8)|0);
  $7 = $46;
  $47 = $4;
  $48 = $7;
  $49 = ((($48)) + 4|0);
  HEAP32[$49>>2] = $47;
  $50 = $5;
  $51 = (___strdup($50)|0);
  $52 = $7;
  $53 = ((($52)) + 8|0);
  HEAP32[$53>>2] = $51;
  $54 = $6;
  $55 = ($54|0)!=(0|0);
  if ($55) {
   $56 = $6;
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(1);
   if ($58) {
    $59 = $6;
    $60 = $7;
    $61 = ((($60)) + 16|0);
    HEAP32[$61>>2] = $59;
    $62 = $7;
    $63 = ((($62)) + 16|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $5;
    $66 = (_Declaration_FindDeclarator($64,$65)|0);
    $9 = $66;
    $67 = $9;
    $68 = $7;
    $69 = ((($68)) + 40|0);
    $70 = ((($69)) + 16|0);
    _Declarator_CopyToAbstractDeclarator($67,$70);
    $71 = $7;
    $72 = ((($71)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 4|0);
    $75 = $7;
    $76 = ((($75)) + 40|0);
    $77 = ((($76)) + 4|0);
    _DeclarationSpecifiers_CopyTo_SpecifierQualifierList($74,$77);
   }
  }
  $78 = $6;
  $79 = ($78|0)!=(0|0);
  if ($79) {
   $80 = $6;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(39);
   if ($82) {
    $83 = $6;
    $84 = $7;
    $85 = ((($84)) + 20|0);
    HEAP32[$85>>2] = $83;
    $86 = $7;
    $87 = ((($86)) + 20|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ((($88)) + 20|0);
    $90 = $7;
    $91 = ((($90)) + 40|0);
    $92 = ((($91)) + 16|0);
    _Declarator_CopyToAbstractDeclarator($89,$92);
    $93 = $7;
    $94 = ((($93)) + 20|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 8|0);
    $97 = $7;
    $98 = ((($97)) + 40|0);
    $99 = ((($98)) + 4|0);
    _DeclarationSpecifiers_CopyTo_SpecifierQualifierList($96,$99);
   }
  }
  $100 = $2;
  $101 = $7;
  $102 = ((($101)) + 24|0);
  (_Parser_Match($100,$102)|0);
  $103 = $7;
  $104 = $3;
  HEAP32[$104>>2] = $103;
  break;
 }
 case 15: case 13: case 14: case 12: case 11: case 85:  {
  dest=$11; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$11>>2] = 33;
  $105 = (_mallocinit(68,$11)|0);
  $10 = $105;
  $106 = $4;
  $107 = $10;
  $108 = ((($107)) + 4|0);
  HEAP32[$108>>2] = $106;
  $109 = $2;
  $110 = (_Lexeme($109)|0);
  $111 = (___strdup($110)|0);
  $112 = $10;
  $113 = ((($112)) + 8|0);
  HEAP32[$113>>2] = $111;
  $114 = $2;
  $115 = $10;
  $116 = ((($115)) + 24|0);
  (_Parser_Match($114,$116)|0);
  $117 = $10;
  $118 = $3;
  HEAP32[$118>>2] = $117;
  break;
 }
 case 30:  {
  dest=$13; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$13>>2] = 33;
  $119 = (_mallocinit(68,$13)|0);
  $12 = $119;
  $120 = $2;
  $121 = $12;
  $122 = ((($121)) + 24|0);
  (_Parser_Match($120,$122)|0);
  $123 = $2;
  _Expression($123,$14);
  $124 = $2;
  $125 = $12;
  $126 = ((($125)) + 32|0);
  (_Parser_MatchToken($124,31,$126)|0);
  $127 = $4;
  $128 = $12;
  $129 = ((($128)) + 4|0);
  HEAP32[$129>>2] = $127;
  $130 = $2;
  $131 = (_Lexeme($130)|0);
  $132 = (___strdup($131)|0);
  $133 = $12;
  $134 = ((($133)) + 8|0);
  HEAP32[$134>>2] = $132;
  $135 = HEAP32[$14>>2]|0;
  $136 = $12;
  $137 = ((($136)) + 12|0);
  HEAP32[$137>>2] = $135;
  $138 = $12;
  $139 = $3;
  HEAP32[$139>>2] = $138;
  break;
 }
 case 138:  {
  $140 = $2;
  _GenericSelection($140);
  break;
 }
 default: {
  $141 = $2;
  _SetError($141,7479,$vararg_buffer3);
 }
 }
 $142 = $3;
 $143 = HEAP32[$142>>2]|0;
 $144 = ($143|0)==(0|0);
 if (!($144)) {
  STACKTOP = sp;return;
 }
 $145 = $2;
 _SetError($145,7496,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _Expression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 72|0;
 $6 = sp + 64|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $3;
 HEAP32[$9>>2] = 0;
 $10 = $2;
 _AssignmentExpression($10,$4);
 $11 = HEAP32[$4>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $2;
 $14 = (_Parser_CurrentTokenType($13)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)==(34);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $2;
 (_Parser_Match($17,0)|0);
 $18 = $2;
 _Expression($18,$6);
 dest=$8; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$8>>2] = 36;
 $19 = (_mallocinit(60,$8)|0);
 $7 = $19;
 $20 = $2;
 $21 = $7;
 $22 = ((($21)) + 16|0);
 _GetPosition($20,$22);
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[$6>>2]|0;
 $28 = $7;
 $29 = ((($28)) + 12|0);
 HEAP32[$29>>2] = $27;
 $30 = $7;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 34;
 $32 = $7;
 $33 = $3;
 HEAP32[$33>>2] = $32;
 STACKTOP = sp;return;
}
function _GenericSelection($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = $1;
 _SetError($2,7518,$vararg_buffer);
 STACKTOP = sp;return;
}
function _TypeName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 _Specifier_Qualifier_List($5,$7);
 HEAP32[$4>>2] = 0;
 $8 = $2;
 _Declarator($8,1,$4);
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$4>>2]|0;
 _Declarator_Swap($12,$13);
 $14 = HEAP32[$4>>2]|0;
 _Declarator_Delete($14);
 STACKTOP = sp;return;
}
function _Specifier_Qualifier_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 36|0;
 $8 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Parser_CurrentTokenType($9)|0);
 $4 = $10;
 $11 = $2;
 $12 = (_Lexeme($11)|0);
 $5 = $12;
 $13 = $2;
 $14 = $4;
 $15 = $5;
 $16 = (_TTypeSpecifier_IsFirst($13,$14,$15)|0);
 do {
  if ($16) {
   $17 = $3;
   $18 = $4;
   $19 = (_SpecifierQualifierList_CanAdd($17,$18)|0);
   if (!($19)) {
    $25 = $2;
    _SetError($25,7757,$vararg_buffer);
    break;
   }
   HEAP32[$6>>2] = 0;
   $20 = $2;
   _Type_Specifier($20,$6);
   $21 = HEAP32[$6>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $3;
    $24 = HEAP32[$6>>2]|0;
    _SpecifierQualifierList_PushBack($23,$24);
   }
  } else {
   $26 = $4;
   $27 = (_TTypeQualifier_IsFirst($26)|0);
   if ($27) {
    HEAP32[$8>>2] = 13;
    $28 = ((($8)) + 4|0);
    HEAP32[$28>>2] = 0;
    $29 = ((($8)) + 8|0);
    ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;
    $30 = (_mallocinit(16,$8)|0);
    $7 = $30;
    $31 = $2;
    $32 = $7;
    (_Type_Qualifier($31,$32)|0);
    $33 = $3;
    $34 = $7;
    $35 = (_TypeQualifier_As_SpecifierQualifier($34)|0);
    _SpecifierQualifierList_PushBack($33,$35);
    break;
   } else {
    $36 = $2;
    $37 = $4;
    $38 = (_TokenToString($37)|0);
    HEAP32[$vararg_buffer1>>2] = $38;
    _SetError($36,7790,$vararg_buffer1);
    break;
   }
  }
 } while(0);
 $39 = $2;
 $40 = (_Parser_CurrentTokenType($39)|0);
 $4 = $40;
 $41 = $2;
 $42 = (_Lexeme($41)|0);
 $5 = $42;
 $43 = $4;
 $44 = (_TTypeQualifier_IsFirst($43)|0);
 $45 = $2;
 if ($44) {
  $46 = $3;
  _Specifier_Qualifier_List($45,$46);
  STACKTOP = sp;return;
 }
 $47 = $4;
 $48 = $5;
 $49 = (_TTypeSpecifier_IsFirst($45,$47,$48)|0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $3;
 $51 = $4;
 $52 = (_SpecifierQualifierList_CanAdd($50,$51)|0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $2;
 $54 = $3;
 _Specifier_Qualifier_List($53,$54);
 STACKTOP = sp;return;
}
function _Declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $3 = $0;
 $9 = $1&1;
 $4 = $9;
 $5 = $2;
 $10 = $5;
 HEAP32[$10>>2] = 0;
 HEAP32[$7>>2] = 0;
 $11 = ((($7)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($7)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = (_mallocinit(12,$7)|0);
 $6 = $13;
 $14 = $3;
 $15 = (_Parser_CurrentTokenType($14)|0);
 $8 = $15;
 $16 = $8;
 $17 = ($16|0)==(32);
 if ($17) {
  $18 = $3;
  $19 = $6;
  _Pointer($18,$19);
 }
 $20 = $3;
 $21 = $4;
 $22 = $21&1;
 $23 = $6;
 $24 = ((($23)) + 8|0);
 _Direct_Declarator($20,$22,$24);
 $25 = $6;
 $26 = $5;
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function _HasPostfixExpressionContinuation($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 switch ($3|0) {
 case 58: case 57: case 56: case 37: case 46: case 30:  {
  $$expand_i1_val = 1;
  HEAP8[$1>>0] = $$expand_i1_val;
  break;
 }
 default: {
  $$expand_i1_val2 = 0;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $4 = $$pre_trunc&1;
 STACKTOP = sp;return ($4|0);
}
function _PostfixExpressionJump($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(672|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $13 = sp + 560|0;
 $14 = sp + 440|0;
 $16 = sp + 312|0;
 $17 = sp + 280|0;
 $18 = sp + 160|0;
 $27 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $28 = $9;
 HEAP32[$28>>2] = 0;
 $10 = 0;
 $29 = $6;
 $30 = (_IsFunction($29)|0);
 do {
  if ($30) {
   dest=$13; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$13>>2] = 38;
   $31 = (_mallocinit(68,$13)|0);
   $12 = $31;
   $32 = $12;
   $33 = ((($32)) + 8|0);
   $34 = $7;
   _TokenList_Swap($33,$34);
   $35 = $12;
   $36 = ((($35)) + 40|0);
   $37 = $6;
   _TypeName_Swap($36,$37);
   $38 = $5;
   $39 = $12;
   $40 = ((($39)) + 4|0);
   _Compound_Statement($38,$40);
   $41 = $5;
   $42 = (_Parser_CurrentTokenType($41)|0);
   $11 = $42;
   $43 = $11;
   $44 = (_HasPostfixExpressionContinuation($43)|0);
   if ($44) {
    dest=$14; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$14>>2] = 35;
    $45 = (_mallocinit(120,$14)|0);
    $10 = $45;
    $46 = $12;
    $47 = $10;
    $48 = ((($47)) + 12|0);
    HEAP32[$48>>2] = $46;
    $49 = $10;
    $50 = $9;
    HEAP32[$50>>2] = $49;
    break;
   } else {
    $51 = $12;
    $52 = $9;
    HEAP32[$52>>2] = $51;
    break;
   }
  } else {
   dest=$16; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$16>>2] = 35;
   $53 = (_mallocinit(120,$16)|0);
   $15 = $53;
   ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;HEAP32[$17+20>>2]=0|0;HEAP32[$17+24>>2]=0|0;
   HEAP32[$17>>2] = 26;
   $54 = (_mallocinit(28,$17)|0);
   $55 = $15;
   $56 = ((($55)) + 48|0);
   HEAP32[$56>>2] = $54;
   $57 = $5;
   $58 = $15;
   $59 = ((($58)) + 68|0);
   (_Parser_MatchToken($57,52,$59)|0);
   $60 = $15;
   $61 = ((($60)) + 48|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $6;
   _TypeName_Swap($62,$63);
   $64 = $15;
   $65 = ((($64)) + 52|0);
   $66 = $7;
   _TokenList_Swap($65,$66);
   $67 = $15;
   $68 = ((($67)) + 60|0);
   $69 = $8;
   _TokenList_Swap($68,$69);
   $70 = $5;
   $71 = $15;
   $72 = ((($71)) + 36|0);
   _Initializer_List($70,$72);
   $73 = $5;
   $74 = (_Parser_CurrentTokenType($73)|0);
   $75 = ($74|0)==(34);
   if ($75) {
    $76 = $5;
    (_Parser_Match($76,0)|0);
   }
   $77 = $5;
   $78 = $15;
   $79 = ((($78)) + 84|0);
   (_Parser_MatchToken($77,54,$79)|0);
   $80 = $5;
   $81 = (_Parser_CurrentTokenType($80)|0);
   $11 = $81;
   $82 = $11;
   $83 = (_HasPostfixExpressionContinuation($82)|0);
   if ($83) {
    dest=$18; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$18>>2] = 35;
    $84 = (_mallocinit(120,$18)|0);
    $10 = $84;
    $85 = $15;
    $86 = $10;
    $87 = ((($86)) + 12|0);
    HEAP32[$87>>2] = $85;
    $88 = $10;
    $89 = $9;
    HEAP32[$89>>2] = $88;
    break;
   } else {
    $90 = $15;
    $91 = $9;
    HEAP32[$91>>2] = $90;
    break;
   }
  }
 } while(0);
 $92 = $5;
 $93 = (_Parser_CurrentTokenType($92)|0);
 $11 = $93;
 L14: while(1) {
  $94 = $11;
  $95 = (_HasPostfixExpressionContinuation($94)|0);
  if (!($95)) {
   label = 44;
   break;
  }
  $96 = $11;
  switch ($96|0) {
  case 30:  {
   $97 = $10;
   $98 = ($97|0)!=(0|0);
   if (!($98)) {
    label = 14;
    break L14;
   }
   $99 = $11;
   $100 = $10;
   $101 = ((($100)) + 4|0);
   HEAP32[$101>>2] = $99;
   $102 = $5;
   $103 = $10;
   $104 = ((($103)) + 52|0);
   $105 = (_Parser_Match($102,$104)|0);
   $11 = $105;
   $106 = $11;
   $107 = ($106|0)!=(31);
   if ($107) {
    $108 = $5;
    $109 = $10;
    $110 = ((($109)) + 20|0);
    _ArgumentExpressionList($108,$110);
   }
   $111 = $10;
   $112 = ((($111)) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)!=(0|0);
   if ($114) {
    $115 = $10;
    $116 = ((($115)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (_Expression_GetTypeName($117)|0);
    $19 = $118;
    $119 = $19;
    $120 = ($119|0)!=(0|0);
    if ($120) {
     $121 = $19;
     $122 = ((($121)) + 16|0);
     $123 = ((($122)) + 8|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)!=(0|0);
     if ($125) {
      $126 = $19;
      $127 = ((($126)) + 16|0);
      $128 = ((($127)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 20|0);
      $131 = ((($130)) + 24|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = $132&1;
      $134 = $133&1;
      $20 = $134;
      $135 = $19;
      $136 = ((($135)) + 16|0);
      $137 = ((($136)) + 8|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ((($138)) + 20|0);
      $140 = ((($139)) + 25|0);
      $141 = HEAP8[$140>>0]|0;
      $142 = $141&1;
      $143 = $142&1;
      $21 = $143;
      $144 = $19;
      $145 = ((($144)) + 16|0);
      $146 = ((($145)) + 8|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($147)) + 20|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($149|0)==(0|0);
      $151 = $150&1;
      $22 = $151;
      $152 = $10;
      $153 = ((($152)) + 20|0);
      $154 = ((($153)) + 4|0);
      $155 = HEAP32[$154>>2]|0;
      $23 = $155;
      $24 = 0;
      $156 = $21;
      $157 = $156&1;
      L27: do {
       if ($157) {
        $24 = 0;
       } else {
        $158 = $19;
        $159 = ((($158)) + 16|0);
        $160 = ((($159)) + 8|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ((($161)) + 20|0);
        $163 = HEAP32[$162>>2]|0;
        $25 = $163;
        while(1) {
         $164 = $25;
         $165 = ($164|0)!=(0|0);
         if (!($165)) {
          break L27;
         }
         $166 = $24;
         $167 = (($166) + 1)|0;
         $24 = $167;
         $168 = $24;
         $169 = $23;
         $170 = ($168|0)>($169|0);
         if ($170) {
          break;
         }
         $172 = $25;
         $173 = ((($172)) + 4|0);
         $174 = HEAP32[$173>>2]|0;
         $25 = $174;
        }
        $171 = $5;
        _SetError($171,7589,$vararg_buffer);
       }
      } while(0);
      $175 = $22;
      $176 = $175&1;
      if (!($176)) {
       $177 = $20;
       $178 = $177&1;
       if (!($178)) {
        $179 = $10;
        $180 = ((($179)) + 20|0);
        $181 = ((($180)) + 4|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = $24;
        $184 = ($182|0)>($183|0);
        if ($184) {
         $185 = $5;
         _SetError($185,7616,$vararg_buffer1);
        }
       }
      }
     }
    }
   }
   $186 = $5;
   $187 = $10;
   $188 = ((($187)) + 60|0);
   (_Parser_MatchToken($186,31,$188)|0);
   break;
  }
  case 46:  {
   $189 = $10;
   $190 = ($189|0)!=(0|0);
   if (!($190)) {
    label = 33;
    break L14;
   }
   $191 = $11;
   $192 = $10;
   $193 = ((($192)) + 4|0);
   HEAP32[$193>>2] = $191;
   $194 = $5;
   $195 = $10;
   $196 = ((($195)) + 52|0);
   (_Parser_MatchToken($194,46,$196)|0);
   $197 = $5;
   $198 = $10;
   $199 = ((($198)) + 16|0);
   _Expression($197,$199);
   $200 = $5;
   $201 = $10;
   $202 = ((($201)) + 60|0);
   (_Parser_MatchToken($200,48,$202)|0);
   break;
  }
  case 37:  {
   $203 = $11;
   $204 = $10;
   $205 = ((($204)) + 4|0);
   HEAP32[$205>>2] = $203;
   $206 = $5;
   $207 = $10;
   $208 = ((($207)) + 52|0);
   (_Parser_Match($206,$208)|0);
   $209 = $5;
   $210 = (_Lexeme($209)|0);
   $211 = (___strdup($210)|0);
   $212 = $10;
   $213 = ((($212)) + 44|0);
   HEAP32[$213>>2] = $211;
   $214 = $5;
   $215 = $10;
   $216 = ((($215)) + 60|0);
   (_Parser_MatchToken($214,9,$216)|0);
   break;
  }
  case 56:  {
   $217 = $10;
   $218 = ($217|0)!=(0|0);
   if (!($218)) {
    label = 37;
    break L14;
   }
   $219 = $11;
   $220 = $10;
   $221 = ((($220)) + 4|0);
   HEAP32[$221>>2] = $219;
   $222 = $5;
   $223 = $10;
   $224 = ((($223)) + 52|0);
   (_Parser_Match($222,$224)|0);
   $225 = $5;
   $226 = (_Lexeme($225)|0);
   $227 = (___strdup($226)|0);
   $228 = $10;
   $229 = ((($228)) + 44|0);
   HEAP32[$229>>2] = $227;
   $230 = $5;
   $231 = $10;
   $232 = ((($231)) + 60|0);
   (_Parser_MatchToken($230,9,$232)|0);
   break;
  }
  case 57: case 58:  {
   $233 = $10;
   $234 = ($233|0)!=(0|0);
   if (!($234)) {
    label = 40;
    break L14;
   }
   $235 = $11;
   $236 = $10;
   $237 = ((($236)) + 4|0);
   HEAP32[$237>>2] = $235;
   $238 = $5;
   $239 = $10;
   $240 = ((($239)) + 52|0);
   (_Parser_Match($238,$240)|0);
   break;
  }
  default: {
  }
  }
  $241 = $5;
  $242 = (_Parser_CurrentTokenType($241)|0);
  $11 = $242;
  $243 = $11;
  $244 = (_HasPostfixExpressionContinuation($243)|0);
  if (!($244)) {
   label = 44;
   break;
  }
  dest=$27; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$27>>2] = 35;
  $245 = (_mallocinit(120,$27)|0);
  $26 = $245;
  $246 = $26;
  $247 = $10;
  $248 = ((($247)) + 32|0);
  HEAP32[$248>>2] = $246;
  $249 = $26;
  $10 = $249;
 }
 if ((label|0) == 14) {
  ___assert_fail((7543|0),(2336|0),16551,(7567|0));
  // unreachable;
 }
 else if ((label|0) == 33) {
  ___assert_fail((7543|0),(2336|0),16607,(7567|0));
  // unreachable;
 }
 else if ((label|0) == 37) {
  ___assert_fail((7543|0),(2336|0),16627,(7567|0));
  // unreachable;
 }
 else if ((label|0) == 40) {
  ___assert_fail((7543|0),(2336|0),16637,(7567|0));
  // unreachable;
 }
 else if ((label|0) == 44) {
  STACKTOP = sp;return;
 }
}
function _IsFunction($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$1>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = ((($8)) + 16|0);
   $10 = ((($9)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 52|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(3);
   if ($14) {
    $$expand_i1_val2 = 0;
    HEAP8[$1>>0] = $$expand_i1_val2;
    break;
   }
   $15 = $2;
   $16 = ((($15)) + 16|0);
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $2;
    $23 = ((($22)) + 16|0);
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $$expand_i1_val4 = 0;
     HEAP8[$1>>0] = $$expand_i1_val4;
     break;
    }
   }
   $$expand_i1_val6 = 1;
   HEAP8[$1>>0] = $$expand_i1_val6;
  }
 } while(0);
 $$pre_trunc = HEAP8[$1>>0]|0;
 $30 = $$pre_trunc&1;
 STACKTOP = sp;return ($30|0);
}
function _Compound_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;HEAP32[$5+28>>2]=0|0;
 HEAP32[$5>>2] = 15;
 $8 = (_mallocinit(32,$5)|0);
 $4 = $8;
 $9 = $4;
 $10 = $3;
 HEAP32[$10>>2] = $9;
 ;HEAP32[$6>>2]=HEAP32[2012>>2]|0;HEAP32[$6+4>>2]=HEAP32[2012+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[2012+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[2012+12>>2]|0;
 $11 = $2;
 $12 = ((($11)) + 136|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($6)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = ((($15)) + 136|0);
 HEAP32[$16>>2] = $6;
 $17 = $2;
 $18 = $4;
 $19 = ((($18)) + 16|0);
 (_Parser_MatchToken($17,52,$19)|0);
 $20 = $2;
 $21 = (_Parser_CurrentTokenType($20)|0);
 $7 = $21;
 $22 = $7;
 $23 = ($22|0)!=(54);
 if ($23) {
  $24 = $2;
  $25 = $4;
  $26 = ((($25)) + 4|0);
  _Block_Item_List($24,$26);
 }
 $27 = $2;
 $28 = $4;
 $29 = ((($28)) + 24|0);
 (_Parser_MatchToken($27,54,$29)|0);
 $30 = ((($6)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = ((($32)) + 136|0);
 HEAP32[$33>>2] = $31;
 _SymbolMap_Destroy($6);
 STACKTOP = sp;return;
}
function _Initializer_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 36|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_Parser_CurrentTokenType($8)|0);
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)==(54);
 if ($11) {
  STACKTOP = sp;return;
 }
 dest=$6; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = (_mallocinit(36,$6)|0);
 $5 = $12;
 while(1) {
  $13 = $2;
  $14 = (_Parser_CurrentTokenType($13)|0);
  $4 = $14;
  $15 = $2;
  $16 = (_ErrorOrEof($15)|0);
  if ($16) {
   label = 11;
   break;
  }
  $17 = $3;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  $20 = $5;
  $21 = $3;
  if ($19) {
   HEAP32[$21>>2] = $20;
   $22 = $5;
   $23 = $3;
   $24 = ((($23)) + 4|0);
   HEAP32[$24>>2] = $22;
  } else {
   $25 = ((($21)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 20|0);
   HEAP32[$27>>2] = $20;
   $28 = $5;
   $29 = $3;
   $30 = ((($29)) + 4|0);
   HEAP32[$30>>2] = $28;
  }
  $31 = $4;
  $32 = ($31|0)==(46);
  $33 = $4;
  $34 = ($33|0)==(37);
  $or$cond = $32 | $34;
  if ($or$cond) {
   $35 = $2;
   $36 = $5;
   _Designation($35,$36);
  }
  $37 = $2;
  $38 = $5;
  $39 = ((($38)) + 16|0);
  _Initializer($37,$39);
  $40 = $2;
  $41 = (_Parser_CurrentTokenType($40)|0);
  $4 = $41;
  $42 = $4;
  $43 = ($42|0)==(34);
  if (!($43)) {
   label = 11;
   break;
  }
  dest=$7; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $44 = (_mallocinit(36,$7)|0);
  $5 = $44;
  $45 = $5;
  $46 = ((($45)) + 32|0);
  HEAP8[$46>>0] = 1;
  $47 = $2;
  $48 = $5;
  $49 = ((($48)) + 24|0);
  (_Parser_Match($47,$49)|0);
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _ArgumentExpressionList($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 52|0;
 $6 = sp + 32|0;
 $9 = sp + 8|0;
 $10 = sp;
 $2 = $0;
 $3 = $1;
 $11 = $2;
 _AssignmentExpression($11,$4);
 HEAP32[$6>>2] = 0;
 $12 = ((($6)) + 4|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($6)) + 8|0);
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;
 $14 = (_mallocinit(16,$6)|0);
 $5 = $14;
 $15 = HEAP32[$4>>2]|0;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 $17 = $3;
 $18 = $5;
 _ArgumentExpressionList_PushBack($17,$18);
 $19 = $2;
 $20 = (_Parser_CurrentTokenType($19)|0);
 $7 = $20;
 while(1) {
  $21 = $7;
  $22 = ($21|0)==(34);
  if (!($22)) {
   break;
  }
  HEAP32[$9>>2] = 0;
  $23 = ((($9)) + 4|0);
  HEAP8[$23>>0] = 0;
  $24 = ((($9)) + 8|0);
  ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;
  $25 = (_mallocinit(16,$9)|0);
  $8 = $25;
  $26 = $8;
  $27 = ((($26)) + 4|0);
  HEAP8[$27>>0] = 1;
  $28 = $2;
  $29 = $8;
  $30 = ((($29)) + 8|0);
  (_Parser_Match($28,$30)|0);
  $31 = $2;
  _AssignmentExpression($31,$10);
  $32 = HEAP32[$10>>2]|0;
  $33 = $8;
  HEAP32[$33>>2] = $32;
  $34 = $3;
  $35 = $8;
  _ArgumentExpressionList_PushBack($34,$35);
  $36 = $2;
  $37 = (_Parser_CurrentTokenType($36)|0);
  $7 = $37;
 }
 STACKTOP = sp;return;
}
function _PostfixExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 568|0;
 $9 = sp + 448|0;
 $11 = sp + 320|0;
 $12 = sp + 288|0;
 $14 = sp + 280|0;
 $15 = sp + 160|0;
 $24 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $25 = $3;
 HEAP32[$25>>2] = 0;
 $26 = $2;
 $27 = (_Parser_CurrentTokenType($26)|0);
 $4 = $27;
 $5 = 0;
 $28 = $4;
 $29 = ($28|0)==(30);
 do {
  if ($29) {
   $30 = $2;
   $31 = (_Parser_LookAheadLexeme($30)|0);
   $6 = $31;
   $32 = $2;
   $33 = (_Parser_LookAheadToken($32)|0);
   $7 = $33;
   $34 = $2;
   $35 = $7;
   $36 = $6;
   $37 = (_IsTypeName($34,$35,$36)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    ___assert_fail((5472|0),(2336|0),16686,(7643|0));
    // unreachable;
   }
   $39 = $2;
   _PrimaryExpression($39,$8);
   $40 = HEAP32[$8>>2]|0;
   $41 = $3;
   HEAP32[$41>>2] = $40;
   $42 = $2;
   $43 = (_Parser_CurrentTokenType($42)|0);
   $4 = $43;
   $44 = $4;
   $45 = (_HasPostfixExpressionContinuation($44)|0);
   if ($45) {
    dest=$9; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$9>>2] = 35;
    $46 = (_mallocinit(120,$9)|0);
    $5 = $46;
    $47 = HEAP32[$8>>2]|0;
    $48 = $5;
    $49 = ((($48)) + 12|0);
    HEAP32[$49>>2] = $47;
    $50 = $5;
    $51 = $3;
    HEAP32[$51>>2] = $50;
    break;
   } else {
    $52 = HEAP32[$8>>2]|0;
    $53 = $3;
    HEAP32[$53>>2] = $52;
    break;
   }
  } else {
   $54 = $4;
   $55 = ($54|0)==(160);
   if (!($55)) {
    $94 = $2;
    _PrimaryExpression($94,$14);
    $95 = $2;
    $96 = (_Parser_CurrentTokenType($95)|0);
    $4 = $96;
    $97 = $4;
    $98 = (_HasPostfixExpressionContinuation($97)|0);
    if ($98) {
     dest=$15; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     HEAP32[$15>>2] = 35;
     $99 = (_mallocinit(120,$15)|0);
     $5 = $99;
     $100 = HEAP32[$14>>2]|0;
     $101 = $5;
     $102 = ((($101)) + 12|0);
     HEAP32[$102>>2] = $100;
     $103 = $5;
     $104 = $3;
     HEAP32[$104>>2] = $103;
     break;
    } else {
     $105 = HEAP32[$14>>2]|0;
     $106 = $3;
     HEAP32[$106>>2] = $105;
     break;
    }
   }
   dest=$11; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$11>>2] = 35;
   $56 = (_mallocinit(120,$11)|0);
   $10 = $56;
   $57 = $2;
   $58 = $10;
   $59 = ((($58)) + 52|0);
   (_Parser_MatchToken($57,160,$59)|0);
   $60 = $10;
   $61 = ((($60)) + 4|0);
   HEAP32[$61>>2] = 160;
   $62 = $2;
   $63 = $10;
   $64 = ((($63)) + 52|0);
   (_Parser_MatchToken($62,30,$64)|0);
   $65 = $10;
   $66 = ((($65)) + 48|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    ___assert_fail((7661|0),(2336|0),16734,(7643|0));
    // unreachable;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;HEAP32[$12+20>>2]=0|0;HEAP32[$12+24>>2]=0|0;
   HEAP32[$12>>2] = 26;
   $69 = (_mallocinit(28,$12)|0);
   $70 = $10;
   $71 = ((($70)) + 48|0);
   HEAP32[$71>>2] = $69;
   $72 = $2;
   $73 = $10;
   $74 = ((($73)) + 48|0);
   $75 = HEAP32[$74>>2]|0;
   _TypeName($72,$75);
   $76 = $2;
   $77 = $10;
   $78 = ((($77)) + 60|0);
   (_Parser_MatchToken($76,31,$78)|0);
   $79 = $2;
   $80 = (_Parser_CurrentTokenType($79)|0);
   $13 = $80;
   $81 = $13;
   $82 = ($81|0)==(52);
   if ($82) {
    $83 = $2;
    $84 = $10;
    $85 = ((($84)) + 68|0);
    (_Parser_MatchToken($83,52,$85)|0);
    $86 = $2;
    $87 = $10;
    $88 = ((($87)) + 36|0);
    _Initializer_List($86,$88);
    $89 = $2;
    $90 = $10;
    $91 = ((($90)) + 76|0);
    (_Parser_MatchToken($89,54,$91)|0);
   }
   $92 = $10;
   $93 = $3;
   HEAP32[$93>>2] = $92;
  }
 } while(0);
 $107 = $2;
 $108 = (_Parser_CurrentTokenType($107)|0);
 $4 = $108;
 L23: while(1) {
  $109 = $4;
  $110 = (_HasPostfixExpressionContinuation($109)|0);
  if (!($110)) {
   label = 50;
   break;
  }
  $111 = $4;
  switch ($111|0) {
  case 30:  {
   $112 = $5;
   $113 = ($112|0)!=(0|0);
   if (!($113)) {
    label = 20;
    break L23;
   }
   $114 = $4;
   $115 = $5;
   $116 = ((($115)) + 4|0);
   HEAP32[$116>>2] = $114;
   $117 = $2;
   $118 = $5;
   $119 = ((($118)) + 52|0);
   $120 = (_Parser_Match($117,$119)|0);
   $4 = $120;
   $121 = $4;
   $122 = ($121|0)!=(31);
   if ($122) {
    $123 = $2;
    $124 = $5;
    $125 = ((($124)) + 20|0);
    _ArgumentExpressionList($123,$125);
   }
   $126 = $5;
   $127 = ((($126)) + 12|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)!=(0|0);
   if ($129) {
    $130 = $5;
    $131 = ((($130)) + 12|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (_Expression_GetTypeName($132)|0);
    $16 = $133;
    $134 = $16;
    $135 = ($134|0)!=(0|0);
    if ($135) {
     $136 = $16;
     $137 = ((($136)) + 16|0);
     $138 = ((($137)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)!=(0|0);
     if ($140) {
      $141 = $16;
      $142 = ((($141)) + 16|0);
      $143 = ((($142)) + 8|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($144)) + 20|0);
      $146 = ((($145)) + 24|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147&1;
      $149 = $148&1;
      $17 = $149;
      $150 = $16;
      $151 = ((($150)) + 16|0);
      $152 = ((($151)) + 8|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ((($153)) + 20|0);
      $155 = ((($154)) + 25|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $156&1;
      $158 = $157&1;
      $18 = $158;
      $159 = $16;
      $160 = ((($159)) + 16|0);
      $161 = ((($160)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ((($162)) + 20|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==(0|0);
      $166 = $165&1;
      $19 = $166;
      $167 = $5;
      $168 = ((($167)) + 20|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $20 = $170;
      $21 = 0;
      $171 = $18;
      $172 = $171&1;
      L36: do {
       if ($172) {
        $21 = 0;
       } else {
        $173 = $16;
        $174 = ((($173)) + 16|0);
        $175 = ((($174)) + 8|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ((($176)) + 20|0);
        $178 = HEAP32[$177>>2]|0;
        $22 = $178;
        while(1) {
         $179 = $22;
         $180 = ($179|0)!=(0|0);
         if (!($180)) {
          break L36;
         }
         $181 = $21;
         $182 = (($181) + 1)|0;
         $21 = $182;
         $183 = $21;
         $184 = $20;
         $185 = ($183|0)>($184|0);
         if ($185) {
          break;
         }
         $187 = $22;
         $188 = ((($187)) + 4|0);
         $189 = HEAP32[$188>>2]|0;
         $22 = $189;
        }
        $186 = $2;
        _SetError($186,7589,$vararg_buffer);
       }
      } while(0);
      $190 = $19;
      $191 = $190&1;
      if (!($191)) {
       $192 = $17;
       $193 = $192&1;
       if (!($193)) {
        $194 = $5;
        $195 = ((($194)) + 20|0);
        $196 = ((($195)) + 4|0);
        $197 = HEAP32[$196>>2]|0;
        $198 = $21;
        $199 = ($197|0)>($198|0);
        if ($199) {
         $200 = $2;
         _SetError($200,7616,$vararg_buffer1);
        }
       }
      }
     }
    }
   }
   $201 = $2;
   $202 = $5;
   $203 = ((($202)) + 60|0);
   (_Parser_MatchToken($201,31,$203)|0);
   break;
  }
  case 46:  {
   $204 = $5;
   $205 = ($204|0)!=(0|0);
   if (!($205)) {
    label = 39;
    break L23;
   }
   $206 = $4;
   $207 = $5;
   $208 = ((($207)) + 4|0);
   HEAP32[$208>>2] = $206;
   $209 = $2;
   $210 = $5;
   $211 = ((($210)) + 52|0);
   (_Parser_MatchToken($209,46,$211)|0);
   $212 = $2;
   $213 = $5;
   $214 = ((($213)) + 16|0);
   _Expression($212,$214);
   $215 = $2;
   $216 = $5;
   $217 = ((($216)) + 60|0);
   (_Parser_MatchToken($215,48,$217)|0);
   break;
  }
  case 37:  {
   $218 = $4;
   $219 = $5;
   $220 = ((($219)) + 4|0);
   HEAP32[$220>>2] = $218;
   $221 = $2;
   $222 = $5;
   $223 = ((($222)) + 52|0);
   (_Parser_Match($221,$223)|0);
   $224 = $2;
   $225 = (_Lexeme($224)|0);
   $226 = (___strdup($225)|0);
   $227 = $5;
   $228 = ((($227)) + 44|0);
   HEAP32[$228>>2] = $226;
   $229 = $2;
   $230 = $5;
   $231 = ((($230)) + 60|0);
   (_Parser_MatchToken($229,9,$231)|0);
   break;
  }
  case 56:  {
   $232 = $5;
   $233 = ($232|0)!=(0|0);
   if (!($233)) {
    label = 43;
    break L23;
   }
   $234 = $4;
   $235 = $5;
   $236 = ((($235)) + 4|0);
   HEAP32[$236>>2] = $234;
   $237 = $2;
   $238 = $5;
   $239 = ((($238)) + 52|0);
   (_Parser_Match($237,$239)|0);
   $240 = $2;
   $241 = (_Lexeme($240)|0);
   $242 = (___strdup($241)|0);
   $243 = $5;
   $244 = ((($243)) + 44|0);
   HEAP32[$244>>2] = $242;
   $245 = $2;
   $246 = $5;
   $247 = ((($246)) + 60|0);
   (_Parser_MatchToken($245,9,$247)|0);
   break;
  }
  case 57: case 58:  {
   $248 = $5;
   $249 = ($248|0)!=(0|0);
   if (!($249)) {
    label = 46;
    break L23;
   }
   $250 = $4;
   $251 = $5;
   $252 = ((($251)) + 4|0);
   HEAP32[$252>>2] = $250;
   $253 = $2;
   $254 = $5;
   $255 = ((($254)) + 52|0);
   (_Parser_Match($253,$255)|0);
   break;
  }
  default: {
  }
  }
  $256 = $2;
  $257 = (_Parser_CurrentTokenType($256)|0);
  $4 = $257;
  $258 = $4;
  $259 = (_HasPostfixExpressionContinuation($258)|0);
  if (!($259)) {
   label = 50;
   break;
  }
  dest=$24; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$24>>2] = 35;
  $260 = (_mallocinit(120,$24)|0);
  $23 = $260;
  $261 = $23;
  $262 = $5;
  $263 = ((($262)) + 32|0);
  HEAP32[$263>>2] = $261;
  $264 = $23;
  $5 = $264;
 }
 if ((label|0) == 20) {
  ___assert_fail((7543|0),(2336|0),16777,(7643|0));
  // unreachable;
 }
 else if ((label|0) == 39) {
  ___assert_fail((7543|0),(2336|0),16833,(7643|0));
  // unreachable;
 }
 else if ((label|0) == 43) {
  ___assert_fail((7543|0),(2336|0),16853,(7643|0));
  // unreachable;
 }
 else if ((label|0) == 46) {
  ___assert_fail((7543|0),(2336|0),16863,(7643|0));
  // unreachable;
 }
 else if ((label|0) == 50) {
  STACKTOP = sp;return;
 }
}
function _IsTypeName($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $3 = 0;
  $18 = $3;
  STACKTOP = sp;return ($18|0);
 }
 $10 = $5;
 switch ($10|0) {
 case 9:  {
  $11 = $4;
  $12 = ((($11)) + 136|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $6;
  $15 = (_SymbolMap_IsTypeName($13,$14)|0);
  $16 = $15&1;
  $7 = $16;
  break;
 }
 case 96: case 121: case 118: case 129: case 128: case 122: case 115: case 94: case 98: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 114: case 89: case 123: case 86: case 130: case 124: case 131: case 90:  {
  $7 = 1;
  break;
 }
 default: {
 }
 }
 $17 = $7;
 $3 = $17;
 $18 = $3;
 STACKTOP = sp;return ($18|0);
}
function _AssignmentExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 72|0;
 $7 = sp + 4|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 _ConditionalExpression($9,$4);
 $10 = HEAP32[$4>>2]|0;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = (_Parser_CurrentTokenType($12)|0);
 $5 = $13;
 $14 = $5;
 switch ($14|0) {
 case 74: case 73: case 72: case 82: case 83: case 71: case 70: case 69: case 68: case 67: case 42:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$7>>2] = 36;
 $15 = (_mallocinit(60,$7)|0);
 $6 = $15;
 $16 = $2;
 $17 = $6;
 $18 = ((($17)) + 24|0);
 (_Parser_Match($16,$18)|0);
 $19 = $2;
 _AssignmentExpression($19,$8);
 $20 = $2;
 $21 = $6;
 $22 = ((($21)) + 16|0);
 _GetPosition($20,$22);
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = $6;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $24;
 $27 = HEAP32[$8>>2]|0;
 $28 = $6;
 $29 = ((($28)) + 12|0);
 HEAP32[$29>>2] = $27;
 $30 = $5;
 $31 = $6;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = $6;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 STACKTOP = sp;return;
}
function _UnaryExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $7 = sp + 272|0;
 $8 = sp + 268|0;
 $10 = sp + 200|0;
 $11 = sp + 196|0;
 $13 = sp + 128|0;
 $14 = sp + 124|0;
 $16 = sp + 88|0;
 $18 = sp + 16|0;
 $21 = sp + 4|0;
 $22 = sp;
 $2 = $0;
 $3 = $1;
 $23 = $3;
 HEAP32[$23>>2] = 0;
 $24 = $2;
 $25 = (_Parser_CurrentTokenType($24)|0);
 $4 = $25;
 $26 = $2;
 $27 = (_Parser_LookAheadToken($26)|0);
 $5 = $27;
 $28 = $2;
 $29 = (_Parser_LookAheadLexeme($28)|0);
 $6 = $29;
 $30 = $4;
 $31 = ($30|0)==(160);
 if (!($31)) {
  $32 = $2;
  $33 = $5;
  $34 = $6;
  $35 = (_IsTypeName($32,$33,$34)|0);
  $36 = ($35|0)!=(0);
  if (!($36)) {
   $40 = $4;
   $41 = (_IsFirstOfPrimaryExpression($40)|0);
   if ($41) {
    $42 = $2;
    _PostfixExpression($42,$8);
    $43 = HEAP32[$8>>2]|0;
    $44 = $3;
    HEAP32[$44>>2] = $43;
    STACKTOP = sp;return;
   }
   $45 = $4;
   switch ($45|0) {
   case 58: case 57:  {
    dest=$10; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$10>>2] = 31;
    $46 = (_mallocinit(64,$10)|0);
    $9 = $46;
    $47 = $2;
    $48 = $9;
    $49 = ((($48)) + 40|0);
    (_Parser_Match($47,$49)|0);
    $50 = $2;
    _UnaryExpression($50,$11);
    $51 = $4;
    $52 = $9;
    $53 = ((($52)) + 4|0);
    HEAP32[$53>>2] = $51;
    $54 = HEAP32[$11>>2]|0;
    $55 = $9;
    $56 = ((($55)) + 8|0);
    HEAP32[$56>>2] = $54;
    $57 = $9;
    $58 = $3;
    HEAP32[$58>>2] = $57;
    STACKTOP = sp;return;
    break;
   }
   case 23: case 55: case 35: case 33: case 32: case 28:  {
    dest=$13; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$13>>2] = 31;
    $59 = (_mallocinit(64,$13)|0);
    $12 = $59;
    $60 = $2;
    $61 = $12;
    $62 = ((($61)) + 40|0);
    (_Parser_Match($60,$62)|0);
    $63 = $2;
    _CastExpression($63,$14);
    $64 = $4;
    $65 = $12;
    $66 = ((($65)) + 4|0);
    HEAP32[$66>>2] = $64;
    $67 = HEAP32[$14>>2]|0;
    $68 = $12;
    $69 = ((($68)) + 8|0);
    HEAP32[$69>>2] = $67;
    $70 = $12;
    $71 = $3;
    HEAP32[$71>>2] = $70;
    $72 = $4;
    $73 = ($72|0)==(28);
    if ($73) {
     $74 = HEAP32[$14>>2]|0;
     $75 = (_Expression_GetTypeName($74)|0);
     $76 = $12;
     $77 = ((($76)) + 12|0);
     _TypeName_CopyTo($75,$77);
     ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;HEAP32[$16+16>>2]=0|0;HEAP32[$16+20>>2]=0|0;HEAP32[$16+24>>2]=0|0;HEAP32[$16+28>>2]=0|0;
     $78 = (_mallocinit(32,$16)|0);
     $15 = $78;
     $79 = $12;
     $80 = ((($79)) + 12|0);
     $81 = ((($80)) + 16|0);
     $82 = $15;
     _PointerList_PushBack($81,$82);
     STACKTOP = sp;return;
    }
    $83 = $4;
    $84 = ($83|0)==(32);
    $85 = HEAP32[$14>>2]|0;
    $86 = (_Expression_GetTypeName($85)|0);
    $87 = $12;
    $88 = ((($87)) + 12|0);
    _TypeName_CopyTo($86,$88);
    if (!($84)) {
     STACKTOP = sp;return;
    }
    $89 = $12;
    $90 = ((($89)) + 12|0);
    $91 = ((($90)) + 16|0);
    _PointerList_PopFront($91);
    STACKTOP = sp;return;
    break;
   }
   case 116:  {
    dest=$18; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$18>>2] = 31;
    $92 = (_mallocinit(64,$18)|0);
    $17 = $92;
    $93 = $17;
    $94 = $3;
    HEAP32[$94>>2] = $93;
    $95 = $4;
    $96 = $17;
    $97 = ((($96)) + 4|0);
    HEAP32[$97>>2] = $95;
    $98 = $2;
    $99 = $17;
    $100 = ((($99)) + 40|0);
    (_Parser_MatchToken($98,116,$100)|0);
    $101 = $2;
    $102 = (_Parser_CurrentTokenType($101)|0);
    $103 = ($102|0)==(30);
    $104 = $2;
    if (!($103)) {
     _UnaryExpression($104,$22);
     $125 = HEAP32[$22>>2]|0;
     $126 = $17;
     $127 = ((($126)) + 8|0);
     HEAP32[$127>>2] = $125;
     STACKTOP = sp;return;
    }
    $105 = (_Parser_LookAheadLexeme($104)|0);
    $19 = $105;
    $106 = $2;
    $107 = (_Parser_LookAheadToken($106)|0);
    $20 = $107;
    $108 = $2;
    $109 = $20;
    $110 = $19;
    $111 = (_IsTypeName($108,$109,$110)|0);
    $112 = ($111|0)!=(0);
    $113 = $2;
    if ($112) {
     $114 = $17;
     $115 = ((($114)) + 48|0);
     (_Parser_MatchToken($113,30,$115)|0);
     $116 = $2;
     $117 = $17;
     $118 = ((($117)) + 12|0);
     _TypeName($116,$118);
     $119 = $2;
     $120 = $17;
     $121 = ((($120)) + 56|0);
     (_Parser_MatchToken($119,31,$121)|0);
     STACKTOP = sp;return;
    } else {
     _UnaryExpression($113,$21);
     $122 = HEAP32[$21>>2]|0;
     $123 = $17;
     $124 = ((($123)) + 8|0);
     HEAP32[$124>>2] = $122;
     STACKTOP = sp;return;
    }
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
  }
 }
 $37 = $2;
 _PostfixExpression($37,$7);
 $38 = HEAP32[$7>>2]|0;
 $39 = $3;
 HEAP32[$39>>2] = $38;
 STACKTOP = sp;return;
}
function _CastExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 112|0;
 $8 = sp + 80|0;
 $9 = sp + 72|0;
 $11 = sp + 12|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $2 = $0;
 $3 = $1;
 $15 = $3;
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = (_Parser_CurrentTokenType($16)|0);
 $4 = $17;
 $18 = $4;
 $19 = ($18|0)==(30);
 $20 = $2;
 if (!($19)) {
  _UnaryExpression($20,$14);
  $53 = HEAP32[$14>>2]|0;
  $54 = $3;
  HEAP32[$54>>2] = $53;
  STACKTOP = sp;return;
 }
 $21 = (_Parser_LookAheadLexeme($20)|0);
 $5 = $21;
 $22 = $2;
 $23 = (_Parser_LookAheadToken($22)|0);
 $6 = $23;
 $24 = $2;
 $25 = $6;
 $26 = $5;
 $27 = (_IsTypeName($24,$25,$26)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $50 = $2;
  _UnaryExpression($50,$13);
  $51 = HEAP32[$13>>2]|0;
  $52 = $3;
  HEAP32[$52>>2] = $51;
  STACKTOP = sp;return;
 }
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $29 = $2;
 (_Parser_MatchToken($29,30,$7)|0);
 ;HEAP32[$8>>2]=HEAP32[1984>>2]|0;HEAP32[$8+4>>2]=HEAP32[1984+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[1984+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[1984+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[1984+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[1984+20>>2]|0;HEAP32[$8+24>>2]=HEAP32[1984+24>>2]|0;
 $30 = $2;
 _TypeName($30,$8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $31 = $2;
 $32 = (_Parser_MatchToken($31,31,$9)|0);
 $4 = $32;
 $33 = $4;
 $34 = ($33|0)==(52);
 if ($34) {
  $35 = $2;
  $36 = $3;
  _PostfixExpressionJump($35,$8,$7,$9,$36);
 } else {
  dest=$11; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$11>>2] = 32;
  $37 = (_mallocinit(52,$11)|0);
  $10 = $37;
  $38 = $10;
  $39 = ((($38)) + 36|0);
  _TokenList_Swap($7,$39);
  $40 = $10;
  $41 = ((($40)) + 44|0);
  _TokenList_Swap($9,$41);
  $42 = $2;
  _CastExpression($42,$12);
  $43 = $10;
  $44 = ((($43)) + 8|0);
  _TypeName_Swap($44,$8);
  $45 = HEAP32[$12>>2]|0;
  $46 = $10;
  $47 = ((($46)) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $10;
  $49 = $3;
  HEAP32[$49>>2] = $48;
 }
 _TypeName_Destroy($8);
 _TokenList_Destroy($7);
 _TokenList_Destroy($9);
 STACKTOP = sp;return;
}
function _MultiplicativeExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _CastExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 switch ($17|0) {
 case 32: case 38: case 27:  {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $2;
  $20 = $6;
  $21 = ((($20)) + 16|0);
  _GetPosition($19,$21);
  $22 = $5;
  $23 = $6;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $6;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _CastExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
  break;
 }
 default: {
 }
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 switch ($40|0) {
 case 32: case 38: case 27:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _MultiplicativeExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _GetPosition($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (_GetCurrentLine($4)|0);
 $6 = $3;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = $2;
 $9 = (_GetFileIndex($8)|0);
 $10 = $3;
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _AdditiveExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _MultiplicativeExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 switch ($17|0) {
 case 35: case 33:  {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $2;
  $20 = $6;
  $21 = ((($20)) + 16|0);
  _GetPosition($19,$21);
  $22 = $5;
  $23 = $6;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $6;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _MultiplicativeExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
  break;
 }
 default: {
 }
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 switch ($40|0) {
 case 35: case 33:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _AdditiveExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _ShiftExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$off1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $switch = 0, $switch2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _AdditiveExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $$off = (($17) + -59)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _AdditiveExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $$off1 = (($40) + -59)|0;
 $switch2 = ($$off1>>>0)<(2);
 if (!($switch2)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _ShiftExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _RelationalExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _ShiftExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 switch ($17|0) {
 case 61: case 62: case 43: case 41:  {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _ShiftExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
  break;
 }
 default: {
 }
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 switch ($40|0) {
 case 61: case 62: case 43: case 41:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _RelationalExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _EqualityExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$off1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $switch = 0, $switch2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _RelationalExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $$off = (($17) + -63)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _RelationalExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $$off1 = (($40) + -63)|0;
 $switch2 = ($$off1>>>0)<(2);
 if (!($switch2)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _EqualityExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _AndExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _EqualityExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $cond = ($17|0)==(28);
 if ($cond) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _EqualityExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $cond1 = ($40|0)==(28);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _AndExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _ExclusiveOrExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _AndExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $cond = ($17|0)==(49);
 if ($cond) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _AndExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $cond1 = ($40|0)==(49);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _ExclusiveOrExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _InclusiveOrExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _ExclusiveOrExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $cond = ($17|0)==(53);
 if ($cond) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _ExclusiveOrExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $cond1 = ($40|0)==(53);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $5;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = $42;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $9;
 $51 = ((($50)) + 16|0);
 _GetPosition($49,$51);
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _InclusiveOrExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _LogicalAndExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _InclusiveOrExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $cond = ($17|0)==(65);
 if ($cond) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $6;
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  _GetPosition($26,$28);
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _InclusiveOrExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $cond1 = ($40|0)==(65);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $2;
 $43 = $9;
 $44 = ((($43)) + 16|0);
 _GetPosition($42,$44);
 $45 = $5;
 $46 = $9;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = $3;
 $49 = HEAP32[$48>>2]|0;
 $50 = $9;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = $49;
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _LogicalAndExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _LogicalOrExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 140|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $10 = sp + 4|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 _LogicalAndExpression($12,$4);
 $13 = HEAP32[$4>>2]|0;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $5 = $16;
 $17 = $5;
 $cond = ($17|0)==(66);
 if ($cond) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 36;
  $18 = (_mallocinit(60,$7)|0);
  $6 = $18;
  $19 = $2;
  $20 = $6;
  $21 = ((($20)) + 16|0);
  _GetPosition($19,$21);
  $22 = $5;
  $23 = $6;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = $6;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $2;
  $30 = $6;
  $31 = ((($30)) + 24|0);
  (_Parser_Match($29,$31)|0);
  $32 = $2;
  _LogicalAndExpression($32,$8);
  $33 = HEAP32[$8>>2]|0;
  $34 = $6;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = $33;
  $36 = $6;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $5 = $39;
 $40 = $5;
 $cond1 = ($40|0)==(66);
 if (!($cond1)) {
  STACKTOP = sp;return;
 }
 dest=$10; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$10>>2] = 36;
 $41 = (_mallocinit(60,$10)|0);
 $9 = $41;
 $42 = $2;
 $43 = $9;
 $44 = ((($43)) + 16|0);
 _GetPosition($42,$44);
 $45 = $5;
 $46 = $9;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = $3;
 $49 = HEAP32[$48>>2]|0;
 $50 = $9;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = $49;
 $52 = $2;
 $53 = $9;
 $54 = ((($53)) + 24|0);
 (_Parser_Match($52,$54)|0);
 $55 = $2;
 _LogicalOrExpression($55,$11);
 $56 = HEAP32[$11>>2]|0;
 $57 = $9;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $9;
 $60 = $3;
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _ConditionalExpression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 76|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 _LogicalOrExpression($9,$4);
 $10 = HEAP32[$4>>2]|0;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = (_Parser_CurrentTokenType($12)|0);
 $14 = ($13|0)==(44);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 dest=$6; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = 37;
 $15 = (_mallocinit(64,$6)|0);
 $5 = $15;
 $16 = $2;
 $17 = $5;
 $18 = ((($17)) + 20|0);
 (_Parser_Match($16,$18)|0);
 $19 = $2;
 _Expression($19,$7);
 $20 = $2;
 $21 = $5;
 $22 = ((($21)) + 28|0);
 (_Parser_MatchToken($20,39,$22)|0);
 $23 = $2;
 _ConditionalExpression($23,$8);
 $24 = $5;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 44;
 $26 = HEAP32[$4>>2]|0;
 $27 = $5;
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = $26;
 $29 = HEAP32[$7>>2]|0;
 $30 = $5;
 $31 = ((($30)) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = HEAP32[$8>>2]|0;
 $33 = $5;
 $34 = ((($33)) + 16|0);
 HEAP32[$34>>2] = $32;
 $35 = $5;
 $36 = $3;
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _Expression_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = 16;
 $7 = ((($5)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($5)) + 8|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;
 $9 = (_mallocinit(16,$5)|0);
 $4 = $9;
 $10 = $4;
 $11 = $3;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = (_Parser_CurrentTokenType($12)|0);
 $6 = $13;
 $14 = $6;
 $15 = ($14|0)!=(40);
 if ($15) {
  $16 = $2;
  $17 = $4;
  $18 = ((($17)) + 4|0);
  _Expression($16,$18);
 }
 $19 = $2;
 $20 = $4;
 $21 = ((($20)) + 8|0);
 (_Parser_MatchToken($19,40,$21)|0);
 STACKTOP = sp;return;
}
function _Selection_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $6 = sp + 64|0;
 $7 = sp + 48|0;
 $9 = sp + 40|0;
 $11 = sp;
 $2 = $0;
 $3 = $1;
 $12 = $2;
 $13 = (_Parser_CurrentTokenType($12)|0);
 $4 = $13;
 $14 = $4;
 switch ($14|0) {
 case 101:  {
  dest=$6; stop=dest+92|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$6>>2] = 25;
  $15 = (_mallocinit(92,$6)|0);
  $5 = $15;
  $16 = $5;
  $17 = $3;
  HEAP32[$17>>2] = $16;
  $18 = $2;
  $19 = $5;
  $20 = ((($19)) + 28|0);
  (_Parser_Match($18,$20)|0);
  $21 = $2;
  $22 = $5;
  $23 = ((($22)) + 36|0);
  (_Parser_MatchToken($21,30,$23)|0);
  ;HEAP32[$7>>2]=HEAP32[2012>>2]|0;HEAP32[$7+4>>2]=HEAP32[2012+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[2012+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[2012+12>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 136|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($7)) + 12|0);
  HEAP32[$27>>2] = $26;
  $28 = $2;
  $29 = ((($28)) + 136|0);
  HEAP32[$29>>2] = $7;
  $30 = $2;
  $31 = $5;
  $32 = ((($31)) + 4|0);
  $33 = (_Declaration($30,$32)|0);
  $34 = $33&1;
  $8 = $34;
  $35 = $8;
  $36 = $35&1;
  if ($36) {
   $37 = $2;
   $38 = (_Parser_CurrentTokenType($37)|0);
   $4 = $38;
   $39 = $2;
   $40 = $5;
   $41 = ((($40)) + 12|0);
   _Expression($39,$41);
   $42 = $2;
   $43 = (_Parser_CurrentTokenType($42)|0);
   $4 = $43;
   $44 = $4;
   $45 = ($44|0)==(40);
   if ($45) {
    $46 = $2;
    $47 = $5;
    $48 = ((($47)) + 44|0);
    (_Parser_MatchToken($46,40,$48)|0);
    $49 = $2;
    $50 = $5;
    $51 = ((($50)) + 8|0);
    _Expression($49,$51);
   }
   $52 = $2;
   $53 = $5;
   $54 = ((($53)) + 60|0);
   (_Parser_MatchToken($52,31,$54)|0);
  } else {
   HEAP32[$9>>2] = 0;
   $55 = $2;
   _Expression($55,$9);
   $56 = $2;
   $57 = (_Parser_CurrentTokenType($56)|0);
   $4 = $57;
   $58 = $4;
   $59 = ($58|0)==(40);
   if ($59) {
    $60 = $2;
    $61 = $5;
    $62 = ((($61)) + 44|0);
    (_Parser_Match($60,$62)|0);
    $63 = HEAP32[$9>>2]|0;
    $64 = $5;
    $65 = ((($64)) + 16|0);
    HEAP32[$65>>2] = $63;
    $66 = $2;
    $67 = $5;
    $68 = ((($67)) + 12|0);
    _Expression($66,$68);
   } else {
    $69 = $4;
    $70 = ($69|0)==(31);
    if ($70) {
     $71 = HEAP32[$9>>2]|0;
     $72 = $5;
     $73 = ((($72)) + 12|0);
     HEAP32[$73>>2] = $71;
    }
   }
   $74 = $2;
   $75 = (_Parser_CurrentTokenType($74)|0);
   $4 = $75;
   $76 = $4;
   $77 = ($76|0)==(40);
   if ($77) {
    $78 = $2;
    $79 = $5;
    $80 = ((($79)) + 52|0);
    (_Parser_MatchToken($78,40,$80)|0);
    $81 = $2;
    $82 = $5;
    $83 = ((($82)) + 8|0);
    _Expression($81,$83);
   }
   $84 = $2;
   $85 = $5;
   $86 = ((($85)) + 60|0);
   (_Parser_MatchToken($84,31,$86)|0);
  }
  $87 = $2;
  $88 = $5;
  $89 = ((($88)) + 20|0);
  (_Statement($87,$89)|0);
  $90 = $2;
  $91 = (_Parser_CurrentTokenType($90)|0);
  $4 = $91;
  $92 = $4;
  $93 = ($92|0)==(95);
  if ($93) {
   $94 = $2;
   $95 = $5;
   $96 = ((($95)) + 52|0);
   (_Parser_Match($94,$96)|0);
   $97 = $2;
   $98 = $5;
   $99 = ((($98)) + 24|0);
   (_Statement($97,$99)|0);
  }
  $100 = ((($7)) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $2;
  $103 = ((($102)) + 136|0);
  HEAP32[$103>>2] = $101;
  STACKTOP = sp;return;
  break;
 }
 case 119:  {
  dest=$11; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$11>>2] = 17;
  $104 = (_mallocinit(36,$11)|0);
  $10 = $104;
  $105 = $10;
  $106 = $3;
  HEAP32[$106>>2] = $105;
  $107 = $2;
  $108 = $10;
  $109 = ((($108)) + 12|0);
  (_Parser_Match($107,$109)|0);
  $110 = $2;
  $111 = $10;
  $112 = ((($111)) + 20|0);
  (_Parser_MatchToken($110,30,$112)|0);
  $113 = $2;
  $114 = $10;
  $115 = ((($114)) + 4|0);
  _Expression($113,$115);
  $116 = $2;
  $117 = $10;
  $118 = ((($117)) + 28|0);
  (_Parser_MatchToken($116,31,$118)|0);
  $119 = $2;
  $120 = $10;
  $121 = ((($120)) + 8|0);
  (_Statement($119,$121)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $7 = sp + 128|0;
 $9 = sp + 56|0;
 $10 = sp + 40|0;
 $13 = sp + 16|0;
 $17 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $18 = $2;
 $19 = (_Parser_CurrentTokenType($18)|0);
 $5 = $19;
 $20 = $5;
 $21 = ($20|0)==(132);
 if ($21) {
  dest=$7; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$7>>2] = 2;
  $22 = (_mallocinit(60,$7)|0);
  $6 = $22;
  $23 = $6;
  $24 = $3;
  HEAP32[$24>>2] = $23;
  $25 = $2;
  $26 = $6;
  _Static_Assert_Declaration($25,$26);
  $4 = 1;
  $130 = $4;
  $131 = $130&1;
  STACKTOP = sp;return ($131|0);
 }
 dest=$9; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$9>>2] = 1;
 $27 = (_mallocinit(68,$9)|0);
 $8 = $27;
 $28 = $5;
 $29 = ($28|0)==(40);
 if ($29) {
  $4 = 1;
 } else {
  $30 = $2;
  $31 = $2;
  $32 = (_Parser_CurrentTokenType($31)|0);
  $33 = $2;
  $34 = (_Lexeme($33)|0);
  $35 = (_Declaration_Specifiers_IsFirst($30,$32,$34)|0);
  if ($35) {
   $36 = $2;
   $37 = $8;
   $38 = ((($37)) + 4|0);
   _Declaration_Specifiers($36,$38);
   $4 = 1;
  }
 }
 $39 = $4;
 $40 = $39&1;
 $41 = $8;
 if (!($40)) {
  _Declaration_Delete($41);
  $130 = $4;
  $131 = $130&1;
  STACKTOP = sp;return ($131|0);
 }
 $42 = $3;
 HEAP32[$42>>2] = $41;
 $43 = $2;
 $44 = (_GetFileIndex($43)|0);
 $45 = $8;
 $46 = ((($45)) + 28|0);
 HEAP32[$46>>2] = $44;
 $47 = $2;
 $48 = (_GetCurrentLine($47)|0);
 $49 = $8;
 $50 = ((($49)) + 32|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = (_Parser_CurrentTokenType($51)|0);
 $5 = $52;
 $53 = $5;
 $54 = ($53|0)==(40);
 if ($54) {
  $55 = $2;
  $56 = $8;
  $57 = ((($56)) + 60|0);
  (_Parser_Match($55,$57)|0);
  $130 = $4;
  $131 = $130&1;
  STACKTOP = sp;return ($131|0);
 }
 ;HEAP32[$10>>2]=HEAP32[2012>>2]|0;HEAP32[$10+4>>2]=HEAP32[2012+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[2012+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[2012+12>>2]|0;
 $58 = $2;
 $59 = ((($58)) + 136|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($10)) + 12|0);
 HEAP32[$61>>2] = $60;
 $62 = $2;
 $63 = ((($62)) + 136|0);
 HEAP32[$63>>2] = $10;
 $64 = $2;
 $65 = $8;
 $66 = ((($65)) + 16|0);
 _Init_Declarator_List($64,$66);
 $67 = ((($10)) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $2;
 $70 = ((($69)) + 136|0);
 HEAP32[$70>>2] = $68;
 _SymbolMap_Destroy($10);
 $71 = $2;
 $72 = (_Parser_CurrentTokenType($71)|0);
 $5 = $72;
 $73 = $8;
 $74 = ((($73)) + 16|0);
 $75 = HEAP32[$74>>2]|0;
 $11 = $75;
 while(1) {
  $76 = $11;
  $77 = ($76|0)!=(0|0);
  if (!($77)) {
   break;
  }
  $78 = $11;
  $79 = (_InitDeclarator_FindName($78)|0);
  $12 = $79;
  $80 = $12;
  $81 = ($80|0)!=(0|0);
  if ($81) {
   $82 = $2;
   $83 = ((($82)) + 136|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $12;
   $86 = $8;
   (_SymbolMap_SetAt($84,$85,$86)|0);
  }
  $87 = $11;
  $88 = ((($87)) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $11 = $89;
 }
 $90 = $5;
 $91 = ($90|0)==(52);
 if (!($91)) {
  $127 = $2;
  $128 = $8;
  $129 = ((($128)) + 60|0);
  (_Parser_MatchToken($127,40,$129)|0);
  $130 = $4;
  $131 = $130&1;
  STACKTOP = sp;return ($131|0);
 }
 ;HEAP32[$13>>2]=HEAP32[2012>>2]|0;HEAP32[$13+4>>2]=HEAP32[2012+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[2012+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[2012+12>>2]|0;
 $92 = $8;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $14 = $94;
 $95 = $14;
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($96)) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 20|0);
 $100 = HEAP32[$99>>2]|0;
 $15 = $100;
 while(1) {
  $101 = $15;
  $102 = ($101|0)!=(0|0);
  if (!($102)) {
   break;
  }
  $103 = $15;
  $104 = ((($103)) + 20|0);
  $105 = (_Declarator_GetName($104)|0);
  $16 = $105;
  $106 = $16;
  $107 = ($106|0)!=(0|0);
  if ($107) {
   $108 = $16;
   $109 = $15;
   (_SymbolMap_SetAt($13,$108,$109)|0);
  }
  $110 = $15;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $15 = $112;
 }
 $113 = $2;
 $114 = ((($113)) + 136|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($13)) + 12|0);
 HEAP32[$116>>2] = $115;
 $117 = $2;
 $118 = ((($117)) + 136|0);
 HEAP32[$118>>2] = $13;
 $119 = $2;
 _Compound_Statement($119,$17);
 $120 = ((($13)) + 12|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $2;
 $123 = ((($122)) + 136|0);
 HEAP32[$123>>2] = $121;
 _SymbolMap_Destroy($13);
 $124 = HEAP32[$17>>2]|0;
 $125 = $8;
 $126 = ((($125)) + 24|0);
 HEAP32[$126>>2] = $124;
 $130 = $4;
 $131 = $130&1;
 STACKTOP = sp;return ($131|0);
}
function _Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 21|0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_Parser_HasError($8)|0);
 if ($9) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $45 = $$pre_trunc&1;
  STACKTOP = sp;return ($45|0);
 }
 $5 = 0;
 $10 = $3;
 $11 = (_Parser_CurrentTokenType($10)|0);
 $6 = $11;
 $12 = $3;
 $13 = (_Lexeme($12)|0);
 $7 = $13;
 $14 = $6;
 do {
  switch ($14|0) {
  case 141:  {
   $5 = 1;
   $15 = $3;
   $16 = $4;
   _Asm_Statement($15,$16);
   break;
  }
  case 52:  {
   $5 = 1;
   $17 = $3;
   $18 = $4;
   _Compound_Statement($17,$18);
   break;
  }
  case 92: case 88:  {
   $5 = 1;
   $19 = $3;
   $20 = $4;
   _Labeled_Statement($19,$20);
   break;
  }
  case 119: case 101:  {
   $5 = 1;
   $21 = $3;
   $22 = $4;
   _Selection_Statement($21,$22);
   break;
  }
  case 102:  {
   $5 = 1;
   $23 = $3;
   $24 = $4;
   _Iteration_Statement($23,$24);
   break;
  }
  case 93: case 99: case 125:  {
   $5 = 1;
   $25 = $3;
   $26 = $4;
   _Iteration_Statement($25,$26);
   break;
  }
  case 103:  {
   $5 = 1;
   $27 = $3;
   $28 = $4;
   _Defer_Statement($27,$28);
   break;
  }
  case 112: case 113: case 87: case 91: case 100:  {
   $5 = 1;
   $29 = $3;
   $30 = $4;
   _Jump_Statement($29,$30);
   break;
  }
  case 65: case 23: case 55: case 35: case 33: case 32: case 28: case 116: case 58: case 57: case 8: case 15: case 11: case 40: case 30: case 46:  {
   $5 = 1;
   $31 = $3;
   $32 = $4;
   _Expression_Statement($31,$32);
   break;
  }
  case 9:  {
   $33 = $3;
   $34 = $7;
   $35 = (_IsTypeName($33,9,$34)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    $37 = $3;
    $38 = (_Parser_LookAheadToken($37)|0);
    $39 = ($38|0)==(39);
    $40 = $3;
    $41 = $4;
    if ($39) {
     _Labeled_Statement($40,$41);
    } else {
     _Expression_Statement($40,$41);
    }
    $5 = 1;
   }
   break;
  }
  case 132: case 96: case 121: case 118: case 129: case 128: case 122: case 115: case 94: case 98: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 114: case 89: case 123: case 111: case 86: case 127: case 117: case 97: case 120: case 130: case 124: case 131: case 90: case 137: case 136: case 134: case 133:  {
   $5 = 0;
   break;
  }
  default: {
   $42 = $3;
   _SetError($42,7479,$vararg_buffer);
  }
  }
 } while(0);
 $43 = $5;
 $44 = $43&1;
 $$expand_i1_val2 = $44&1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $45 = $$pre_trunc&1;
 STACKTOP = sp;return ($45|0);
}
function _Defer_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_Parser_CurrentTokenType($7)|0);
 $4 = $8;
 $9 = $4;
 $cond = ($9|0)==(103);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = 29;
 $10 = ((($6)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($6)) + 8|0);
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 $12 = (_mallocinit(16,$6)|0);
 $5 = $12;
 $13 = $5;
 $14 = $3;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = $5;
 $17 = ((($16)) + 8|0);
 (_Parser_Match($15,$17)|0);
 $18 = $2;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 (_Statement($18,$20)|0);
 STACKTOP = sp;return;
}
function _Jump_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $6 = sp + 192|0;
 $8 = sp + 144|0;
 $10 = sp + 96|0;
 $12 = sp + 48|0;
 $14 = sp;
 $2 = $0;
 $3 = $1;
 $15 = $2;
 $16 = (_Parser_CurrentTokenType($15)|0);
 $4 = $16;
 $17 = $4;
 switch ($17|0) {
 case 100:  {
  dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$6>>2] = 20;
  $18 = (_mallocinit(40,$6)|0);
  $5 = $18;
  $19 = $4;
  $20 = $5;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $5;
  $23 = $3;
  HEAP32[$23>>2] = $22;
  $24 = $2;
  $25 = $5;
  $26 = ((($25)) + 16|0);
  (_Parser_Match($24,$26)|0);
  $27 = $2;
  $28 = (_Lexeme($27)|0);
  $29 = (___strdup($28)|0);
  $30 = $5;
  $31 = ((($30)) + 8|0);
  HEAP32[$31>>2] = $29;
  $32 = $2;
  $33 = $5;
  $34 = ((($33)) + 24|0);
  (_Parser_MatchToken($32,9,$34)|0);
  $35 = $2;
  $36 = $5;
  $37 = ((($36)) + 32|0);
  (_Parser_MatchToken($35,40,$37)|0);
  STACKTOP = sp;return;
  break;
 }
 case 91:  {
  dest=$8; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$8>>2] = 20;
  $38 = (_mallocinit(40,$8)|0);
  $7 = $38;
  $39 = $4;
  $40 = $7;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
  $42 = $7;
  $43 = $3;
  HEAP32[$43>>2] = $42;
  $44 = $2;
  $45 = $7;
  $46 = ((($45)) + 16|0);
  (_Parser_Match($44,$46)|0);
  $47 = $2;
  $48 = $7;
  $49 = ((($48)) + 32|0);
  (_Parser_MatchToken($47,40,$49)|0);
  STACKTOP = sp;return;
  break;
 }
 case 87:  {
  dest=$10; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$10>>2] = 20;
  $50 = (_mallocinit(40,$10)|0);
  $9 = $50;
  $51 = $4;
  $52 = $9;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $51;
  $54 = $9;
  $55 = $3;
  HEAP32[$55>>2] = $54;
  $56 = $2;
  $57 = $9;
  $58 = ((($57)) + 16|0);
  (_Parser_Match($56,$58)|0);
  $59 = $2;
  $60 = $9;
  $61 = ((($60)) + 32|0);
  (_Parser_MatchToken($59,40,$61)|0);
  STACKTOP = sp;return;
  break;
 }
 case 112:  {
  dest=$12; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$12>>2] = 20;
  $62 = (_mallocinit(40,$12)|0);
  $11 = $62;
  $63 = $4;
  $64 = $11;
  $65 = ((($64)) + 4|0);
  HEAP32[$65>>2] = $63;
  $66 = $11;
  $67 = $3;
  HEAP32[$67>>2] = $66;
  $68 = $2;
  $69 = $11;
  $70 = ((($69)) + 16|0);
  $71 = (_Parser_Match($68,$70)|0);
  $4 = $71;
  $72 = $4;
  $73 = ($72|0)!=(40);
  if ($73) {
   $74 = $2;
   $75 = $11;
   $76 = ((($75)) + 12|0);
   _Expression($74,$76);
  }
  $77 = $2;
  $78 = $11;
  $79 = ((($78)) + 32|0);
  (_Parser_MatchToken($77,40,$79)|0);
  STACKTOP = sp;return;
  break;
 }
 case 113:  {
  dest=$14; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$14>>2] = 20;
  $80 = (_mallocinit(40,$14)|0);
  $13 = $80;
  $81 = $4;
  $82 = $13;
  $83 = ((($82)) + 4|0);
  HEAP32[$83>>2] = $81;
  $84 = $13;
  $85 = $3;
  HEAP32[$85>>2] = $84;
  $86 = $2;
  $87 = $13;
  $88 = ((($87)) + 16|0);
  $89 = (_Parser_Match($86,$88)|0);
  $4 = $89;
  $90 = $4;
  $91 = ($90|0)!=(40);
  if ($91) {
   $92 = $2;
   $93 = $13;
   $94 = ((($93)) + 12|0);
   _Expression($92,$94);
  }
  $95 = $2;
  $96 = $13;
  $97 = ((($96)) + 32|0);
  (_Parser_MatchToken($95,40,$97)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Iteration_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 172|0;
 $8 = sp + 124|0;
 $10 = sp + 68|0;
 $12 = sp;
 $2 = $0;
 $3 = $1;
 $14 = $2;
 $15 = (_Parser_CurrentTokenType($14)|0);
 $4 = $15;
 $16 = $4;
 switch ($16|0) {
 case 125:  {
  dest=$6; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$6>>2] = 22;
  $17 = (_mallocinit(36,$6)|0);
  $5 = $17;
  $18 = $5;
  $19 = $3;
  HEAP32[$19>>2] = $18;
  $20 = $2;
  $21 = $5;
  $22 = ((($21)) + 12|0);
  (_Parser_Match($20,$22)|0);
  $23 = $2;
  $24 = $5;
  $25 = ((($24)) + 20|0);
  (_Parser_MatchToken($23,30,$25)|0);
  $26 = $2;
  $27 = $5;
  $28 = ((($27)) + 4|0);
  _Expression($26,$28);
  $29 = $2;
  $30 = $5;
  $31 = ((($30)) + 28|0);
  (_Parser_MatchToken($29,31,$31)|0);
  $32 = $2;
  $33 = $5;
  $34 = ((($33)) + 8|0);
  (_Statement($32,$34)|0);
  STACKTOP = sp;return;
  break;
 }
 case 102:  {
  dest=$8; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$8>>2] = 24;
  $35 = (_mallocinit(44,$8)|0);
  $7 = $35;
  $36 = $7;
  $37 = $3;
  HEAP32[$37>>2] = $36;
  $38 = $2;
  $39 = $7;
  $40 = ((($39)) + 12|0);
  (_Parser_Match($38,$40)|0);
  $41 = $2;
  $42 = $7;
  $43 = ((($42)) + 4|0);
  _Compound_Statement($41,$43);
  $44 = $2;
  $45 = (_Parser_CurrentTokenType($44)|0);
  $4 = $45;
  $46 = $4;
  $47 = ($46|0)==(126);
  if (!($47)) {
   STACKTOP = sp;return;
  }
  $48 = $2;
  $49 = $7;
  $50 = ((($49)) + 20|0);
  (_Parser_MatchToken($48,126,$50)|0);
  $51 = $2;
  $52 = $7;
  $53 = ((($52)) + 8|0);
  _Compound_Statement($51,$53);
  STACKTOP = sp;return;
  break;
 }
 case 93:  {
  dest=$10; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$10>>2] = 23;
  $54 = (_mallocinit(52,$10)|0);
  $9 = $54;
  $55 = $9;
  $56 = $3;
  HEAP32[$56>>2] = $55;
  $57 = $2;
  $58 = $9;
  $59 = ((($58)) + 12|0);
  (_Parser_Match($57,$59)|0);
  $60 = $2;
  $61 = $9;
  $62 = ((($61)) + 8|0);
  (_Statement($60,$62)|0);
  $63 = $2;
  $64 = (_Parser_CurrentTokenType($63)|0);
  $4 = $64;
  $65 = $2;
  $66 = $9;
  $67 = ((($66)) + 20|0);
  (_Parser_MatchToken($65,125,$67)|0);
  $68 = $2;
  $69 = $9;
  $70 = ((($69)) + 28|0);
  (_Parser_MatchToken($68,30,$70)|0);
  $71 = $2;
  $72 = $9;
  $73 = ((($72)) + 4|0);
  _Expression($71,$73);
  $74 = $2;
  $75 = $9;
  $76 = ((($75)) + 36|0);
  (_Parser_MatchToken($74,31,$76)|0);
  $77 = $2;
  $78 = $9;
  $79 = ((($78)) + 44|0);
  (_Parser_MatchToken($77,40,$79)|0);
  STACKTOP = sp;return;
  break;
 }
 case 99:  {
  dest=$12; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$12>>2] = 19;
  $80 = (_mallocinit(64,$12)|0);
  $11 = $80;
  $81 = $11;
  $82 = $3;
  HEAP32[$82>>2] = $81;
  $83 = $2;
  $84 = $11;
  $85 = ((($84)) + 24|0);
  (_Parser_Match($83,$85)|0);
  $86 = $2;
  $87 = $11;
  $88 = ((($87)) + 32|0);
  $89 = (_Parser_MatchToken($86,30,$88)|0);
  $4 = $89;
  $90 = $4;
  $91 = ($90|0)!=(40);
  $92 = $2;
  $93 = $11;
  do {
   if ($91) {
    $94 = ((($93)) + 4|0);
    $95 = (_Declaration($92,$94)|0);
    $96 = $95&1;
    $13 = $96;
    $97 = $13;
    $98 = $97&1;
    $99 = $2;
    $100 = (_Parser_CurrentTokenType($99)|0);
    $4 = $100;
    $101 = $4;
    $102 = ($101|0)!=(40);
    if ($98) {
     $103 = $2;
     $104 = $11;
     if ($102) {
      $105 = ((($104)) + 12|0);
      _Expression($103,$105);
      $106 = $2;
      $107 = $11;
      $108 = ((($107)) + 40|0);
      (_Parser_MatchToken($106,40,$108)|0);
      break;
     } else {
      $109 = ((($104)) + 40|0);
      (_Parser_MatchToken($103,40,$109)|0);
      break;
     }
    }
    if ($102) {
     $110 = $2;
     $111 = $11;
     $112 = ((($111)) + 8|0);
     _Expression($110,$112);
     $113 = $2;
     $114 = $11;
     $115 = ((($114)) + 40|0);
     (_Parser_MatchToken($113,40,$115)|0);
    }
    $116 = $2;
    $117 = (_Parser_CurrentTokenType($116)|0);
    $4 = $117;
    $118 = $4;
    $119 = ($118|0)!=(40);
    $120 = $2;
    $121 = $11;
    if ($119) {
     $122 = ((($121)) + 12|0);
     _Expression($120,$122);
     $123 = $2;
     $124 = $11;
     $125 = ((($124)) + 48|0);
     (_Parser_MatchToken($123,40,$125)|0);
     break;
    } else {
     $126 = ((($121)) + 48|0);
     (_Parser_MatchToken($120,40,$126)|0);
     break;
    }
   } else {
    $127 = ((($93)) + 40|0);
    (_Parser_MatchToken($92,40,$127)|0);
    $128 = $2;
    $129 = (_Parser_CurrentTokenType($128)|0);
    $4 = $129;
    $130 = $4;
    $131 = ($130|0)!=(40);
    $132 = $2;
    $133 = $11;
    if ($131) {
     $134 = ((($133)) + 12|0);
     _Expression($132,$134);
     $135 = $2;
     $136 = $11;
     $137 = ((($136)) + 48|0);
     (_Parser_MatchToken($135,40,$137)|0);
     break;
    } else {
     $138 = ((($133)) + 48|0);
     (_Parser_MatchToken($132,40,$138)|0);
     break;
    }
   }
  } while(0);
  $139 = $2;
  $140 = (_Parser_CurrentTokenType($139)|0);
  $4 = $140;
  $141 = $4;
  $142 = ($141|0)!=(31);
  if ($142) {
   $143 = $2;
   $144 = $11;
   $145 = ((($144)) + 16|0);
   _Expression($143,$145);
  }
  $146 = $2;
  $147 = $11;
  $148 = ((($147)) + 56|0);
  (_Parser_MatchToken($146,31,$148)|0);
  $149 = $2;
  $150 = $11;
  $151 = ((($150)) + 20|0);
  (_Statement($149,$151)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Labeled_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 dest=$5; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$5>>2] = 18;
 $7 = (_mallocinit(36,$5)|0);
 $4 = $7;
 $8 = $4;
 $9 = $3;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = (_Parser_CurrentTokenType($10)|0);
 $6 = $11;
 $12 = $6;
 $13 = $4;
 $14 = ((($13)) + 16|0);
 HEAP32[$14>>2] = $12;
 $15 = $6;
 $16 = ($15|0)==(9);
 if ($16) {
  $17 = $4;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   ___assert_fail((7704|0),(2336|0),18243,(7739|0));
   // unreachable;
  }
  $21 = $2;
  $22 = (_Lexeme($21)|0);
  $23 = (___strdup($22)|0);
  $24 = $4;
  $25 = ((($24)) + 12|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = $4;
  $28 = ((($27)) + 20|0);
  (_Parser_Match($26,$28)|0);
  $29 = $2;
  $30 = $4;
  $31 = ((($30)) + 28|0);
  (_Parser_MatchToken($29,39,$31)|0);
  $32 = $2;
  $33 = $4;
  $34 = ((($33)) + 4|0);
  (_Statement($32,$34)|0);
  STACKTOP = sp;return;
 }
 $35 = $6;
 $36 = ($35|0)==(88);
 if ($36) {
  $37 = $2;
  $38 = $4;
  $39 = ((($38)) + 20|0);
  (_Parser_Match($37,$39)|0);
  $40 = $2;
  $41 = $4;
  $42 = ((($41)) + 8|0);
  _ConstantExpression($40,$42);
  $43 = $2;
  $44 = $4;
  $45 = ((($44)) + 28|0);
  (_Parser_MatchToken($43,39,$45)|0);
  $46 = $2;
  $47 = $4;
  $48 = ((($47)) + 4|0);
  (_Statement($46,$48)|0);
  STACKTOP = sp;return;
 }
 $49 = $6;
 $50 = ($49|0)==(92);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $2;
 $52 = $4;
 $53 = ((($52)) + 20|0);
 (_Parser_Match($51,$53)|0);
 $54 = $2;
 $55 = $4;
 $56 = ((($55)) + 28|0);
 (_Parser_MatchToken($54,39,$56)|0);
 $57 = $2;
 $58 = $4;
 $59 = ((($58)) + 4|0);
 (_Statement($57,$59)|0);
 STACKTOP = sp;return;
}
function _Asm_Statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = 21;
 $7 = ((($5)) + 4|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $8 = (_mallocinit(12,$5)|0);
 $4 = $8;
 $9 = $4;
 $10 = $3;
 HEAP32[$10>>2] = $9;
 $11 = $2;
 (_Parser_MatchToken($11,141,0)|0);
 $12 = $2;
 $13 = (_Parser_CurrentTokenType($12)|0);
 $6 = $13;
 $14 = $6;
 $15 = ($14|0)==(52);
 $16 = $2;
 L1: do {
  if ($15) {
   (_Parser_Match($16,0)|0);
   while(1) {
    $17 = $2;
    $18 = (_ErrorOrEof($17)|0);
    if ($18) {
     break L1;
    }
    $19 = $2;
    $20 = (_Parser_CurrentTokenType($19)|0);
    $6 = $20;
    $21 = $6;
    $22 = ($21|0)==(54);
    $23 = $2;
    (_Parser_Match($23,0)|0);
    if ($22) {
     break L1;
    }
   }
  } else {
   $24 = (_Parser_CurrentTokenType($16)|0);
   $6 = $24;
   while(1) {
    $25 = $2;
    $26 = (_ErrorOrEof($25)|0);
    if ($26) {
     break L1;
    }
    $27 = $2;
    $28 = (_Parser_CurrentTokenType($27)|0);
    $6 = $28;
    $29 = $6;
    $30 = ($29|0)==(54);
    $31 = $6;
    $32 = ($31|0)==(40);
    $or$cond = $30 | $32;
    if ($or$cond) {
     break L1;
    }
    $33 = $2;
    (_Parser_Match($33,0)|0);
   }
  }
 } while(0);
 $34 = $2;
 $35 = (_Parser_CurrentTokenType($34)|0);
 $6 = $35;
 $36 = $6;
 $37 = ($36|0)==(40);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $2;
 (_Parser_Match($38,0)|0);
 STACKTOP = sp;return;
}
function _Block_Item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 HEAP32[$6>>2] = 0;
 HEAP32[$4>>2] = 0;
 $7 = $2;
 $8 = (_Statement($7,$4)|0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $3;
  HEAP32[$10>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $11 = $2;
  (_Declaration($11,$5)|0);
  $12 = HEAP32[$5>>2]|0;
  $13 = $3;
  HEAP32[$13>>2] = $12;
  STACKTOP = sp;return;
 }
}
function _Block_Item_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 while(1) {
  $6 = $2;
  $7 = (_ErrorOrEof($6)|0);
  if ($7) {
   label = 6;
   break;
  }
  HEAP32[$4>>2] = 0;
  $8 = $2;
  _Block_Item($8,$4);
  $9 = $3;
  $10 = HEAP32[$4>>2]|0;
  _BlockItemList_PushBack($9,$10);
  $11 = $2;
  $12 = (_Parser_CurrentTokenType($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = ($13|0)==(54);
  if ($14) {
   label = 6;
   break;
  }
  $15 = $2;
  $16 = (_ErrorOrEof($15)|0);
  if ($16) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function _Struct_Or_Union($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $4;
 switch ($7|0) {
 case 118:  {
  $8 = $4;
  $9 = $3;
  $10 = ((($9)) + 20|0);
  HEAP32[$10>>2] = $8;
  $11 = $2;
  $12 = $3;
  $13 = ((($12)) + 48|0);
  (_Parser_Match($11,$13)|0);
  STACKTOP = sp;return;
  break;
 }
 case 121:  {
  $14 = $4;
  $15 = $3;
  $16 = ((($15)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $2;
  $18 = $3;
  $19 = ((($18)) + 48|0);
  (_Parser_Match($17,$19)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _Static_Assert_Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)==(132);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 (_Parser_Match($9,$11)|0);
 $12 = $2;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 (_Parser_MatchToken($12,30,$14)|0);
 $15 = $2;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 _ConstantExpression($15,$17);
 $18 = $2;
 $19 = (_Parser_CurrentTokenType($18)|0);
 $4 = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)>=(3);
 if ($22) {
  $23 = $4;
  $24 = ($23|0)==(34);
  if ($24) {
   $25 = $2;
   $26 = $3;
   $27 = ((($26)) + 28|0);
   (_Parser_MatchToken($25,34,$27)|0);
   $28 = $3;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   _free($30);
   $31 = $2;
   $32 = (_Lexeme($31)|0);
   $33 = (___strdup($32)|0);
   $34 = $3;
   $35 = ((($34)) + 8|0);
   HEAP32[$35>>2] = $33;
   $36 = $2;
   $37 = $3;
   $38 = ((($37)) + 36|0);
   (_Parser_MatchToken($36,8,$38)|0);
  }
 } else {
  $39 = $2;
  $40 = $3;
  $41 = ((($40)) + 28|0);
  (_Parser_MatchToken($39,34,$41)|0);
  $42 = $3;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  _free($44);
  $45 = $2;
  $46 = (_Lexeme($45)|0);
  $47 = (___strdup($46)|0);
  $48 = $3;
  $49 = ((($48)) + 8|0);
  HEAP32[$49>>2] = $47;
  $50 = $2;
  $51 = $3;
  $52 = ((($51)) + 36|0);
  (_Parser_MatchToken($50,8,$52)|0);
 }
 $53 = $2;
 $54 = $3;
 $55 = ((($54)) + 44|0);
 (_Parser_MatchToken($53,31,$55)|0);
 $56 = $2;
 $57 = $3;
 $58 = ((($57)) + 52|0);
 (_Parser_MatchToken($56,40,$58)|0);
 STACKTOP = sp;return;
}
function _TTypeSpecifier_IsFirst($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = $4;
 switch ($7|0) {
 case 96: case 121: case 118: case 130: case 129: case 128: case 122: case 115: case 94: case 98: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 114: case 89: case 123:  {
  $6 = 1;
  break;
 }
 case 9:  {
  $8 = $3;
  $9 = $5;
  $10 = (_IsTypeName($8,9,$9)|0);
  $11 = ($10|0)!=(0);
  $12 = $11&1;
  $6 = $12;
  break;
 }
 default: {
 }
 }
 $13 = $6;
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _Type_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp;
 $7 = sp + 172|0;
 $9 = sp + 88|0;
 $11 = sp + 32|0;
 $14 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $15 = $2;
 $16 = (_Lexeme($15)|0);
 $4 = $16;
 $17 = $2;
 $18 = (_Parser_CurrentTokenType($17)|0);
 $5 = $18;
 $19 = $5;
 switch ($19|0) {
 case 129: case 128: case 122: case 115: case 94: case 98: case 110: case 109: case 108: case 107: case 106: case 105: case 104: case 114: case 89: case 123:  {
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP32[$7+16>>2]=0|0;
  HEAP32[$7>>2] = 5;
  $20 = (_mallocinit(20,$7)|0);
  $6 = $20;
  $21 = $5;
  $22 = $6;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = $6;
  $26 = ((($25)) + 12|0);
  (_Parser_Match($24,$26)|0);
  $27 = $6;
  $28 = $3;
  HEAP32[$28>>2] = $27;
  STACKTOP = sp;return;
  break;
 }
 case 130:  {
  $29 = $2;
  $30 = $3;
  _AtomicTypeSpecifier($29,$30);
  STACKTOP = sp;return;
  break;
 }
 case 121: case 118:  {
  dest=$9; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$9>>2] = 7;
  $31 = (_mallocinit(80,$9)|0);
  $8 = $31;
  $32 = $8;
  $33 = $3;
  HEAP32[$33>>2] = $32;
  $34 = $2;
  $35 = $8;
  _Struct_Or_Union_Specifier($34,$35);
  STACKTOP = sp;return;
  break;
 }
 case 96:  {
  dest=$11; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$11>>2] = 6;
  $36 = (_mallocinit(48,$11)|0);
  $10 = $36;
  $37 = $10;
  $38 = $3;
  HEAP32[$38>>2] = $37;
  $39 = $2;
  $40 = $10;
  _Enum_Specifier($39,$40);
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $41 = $2;
  $42 = $4;
  $43 = (_IsTypeName($41,9,$42)|0);
  $12 = $43;
  $44 = $12;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $71 = $2;
   _SetError($71,8125,$vararg_buffer);
   STACKTOP = sp;return;
  }
  ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;
  HEAP32[$14>>2] = 5;
  $46 = (_mallocinit(20,$14)|0);
  $13 = $46;
  $47 = $12;
  $48 = ($47|0)==(2);
  do {
   if ($48) {
    $49 = $13;
    $50 = ((($49)) + 4|0);
    HEAP32[$50>>2] = 118;
   } else {
    $51 = $12;
    $52 = ($51|0)==(3);
    if ($52) {
     $53 = $13;
     $54 = ((($53)) + 4|0);
     HEAP32[$54>>2] = 121;
     break;
    }
    $55 = $12;
    $56 = ($55|0)==(4);
    if ($56) {
     $57 = $13;
     $58 = ((($57)) + 4|0);
     HEAP32[$58>>2] = 96;
     break;
    } else {
     $59 = $5;
     $60 = $13;
     $61 = ((($60)) + 4|0);
     HEAP32[$61>>2] = $59;
     break;
    }
   }
  } while(0);
  $62 = $4;
  $63 = (___strdup($62)|0);
  $64 = $13;
  $65 = ((($64)) + 8|0);
  HEAP32[$65>>2] = $63;
  $66 = $2;
  $67 = $13;
  $68 = ((($67)) + 12|0);
  (_Parser_Match($66,$68)|0);
  $69 = $13;
  $70 = $3;
  HEAP32[$70>>2] = $69;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _TTypeQualifier_IsFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 130: case 124: case 131: case 90:  {
  $2 = 1;
  break;
 }
 case 86: case 46:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Type_Qualifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = (_Parser_CurrentTokenType($6)|0);
 $5 = $7;
 $8 = $5;
 switch ($8|0) {
 case 130: case 124: case 131: case 90:  {
  $9 = $5;
  $10 = $3;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  (_Parser_Match($12,$14)|0);
  $4 = 1;
  break;
 }
 case 86:  {
  $15 = $5;
  $16 = $3;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  $18 = $2;
  $19 = $3;
  $20 = ((($19)) + 8|0);
  (_Parser_Match($18,$20)|0);
  $4 = 1;
  break;
 }
 default: {
 }
 }
 $21 = $4;
 $22 = $21&1;
 STACKTOP = sp;return ($22|0);
}
function _TypeQualifier_As_SpecifierQualifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _Struct_Declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 36|0;
 $7 = sp + 4|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Parser_CurrentTokenType($9)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(39);
 if ($12) {
  $13 = $2;
  (_Parser_Match($13,0)|0);
  HEAP32[$5>>2] = 0;
  $14 = $2;
  _ConstantExpression($14,$5);
  $15 = HEAP32[$5>>2]|0;
  _Expression_Delete($15);
  STACKTOP = sp;return;
 }
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP32[$7+16>>2]=0|0;HEAP32[$7+20>>2]=0|0;HEAP32[$7+24>>2]=0|0;
 $16 = (_mallocinit(28,$7)|0);
 $6 = $16;
 $17 = $6;
 $18 = $3;
 HEAP32[$18>>2] = $17;
 $19 = $2;
 $20 = $6;
 _Declarator($19,0,$20);
 $21 = $2;
 $22 = (_Parser_CurrentTokenType($21)|0);
 $4 = $22;
 $23 = $4;
 $24 = ($23|0)==(39);
 if ($24) {
  $25 = $2;
  $26 = $6;
  $27 = ((($26)) + 12|0);
  (_Parser_Match($25,$27)|0);
  HEAP32[$8>>2] = 0;
  $28 = $2;
  _ConstantExpression($28,$8);
  $29 = HEAP32[$8>>2]|0;
  _Expression_Delete($29);
 }
 $30 = $4;
 $31 = ($30|0)==(42);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $2;
 $33 = $6;
 $34 = ((($33)) + 20|0);
 (_Parser_Match($32,$34)|0);
 $35 = $2;
 $36 = $6;
 $37 = ((($36)) + 4|0);
 _Initializer($35,$37);
 $38 = $2;
 $39 = (_Parser_CurrentTokenType($38)|0);
 $4 = $39;
 STACKTOP = sp;return;
}
function _Initializer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 4|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_Parser_CurrentTokenType($8)|0);
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)==(52);
 if ($11) {
  dest=$6; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$6>>2] = 28;
  $12 = (_mallocinit(36,$6)|0);
  $5 = $12;
  $13 = $5;
  $14 = $3;
  HEAP32[$14>>2] = $13;
  $15 = $2;
  $16 = $5;
  $17 = ((($16)) + 20|0);
  (_Parser_Match($15,$17)|0);
  $18 = $2;
  $19 = $5;
  $20 = ((($19)) + 4|0);
  _Initializer_List($18,$20);
  $21 = $2;
  $22 = $5;
  $23 = ((($22)) + 28|0);
  (_Parser_MatchToken($21,54,$23)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$7>>2] = 0;
  $24 = $2;
  _AssignmentExpression($24,$7);
  $25 = HEAP32[$7>>2]|0;
  $26 = $3;
  HEAP32[$26>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _Struct_Declarator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = 0;
 $6 = $2;
 _Struct_Declarator($6,$4);
 $7 = $3;
 $8 = HEAP32[$4>>2]|0;
 _StructDeclaratorList_Add($7,$8);
 while(1) {
  $9 = $2;
  $10 = (_ErrorOrEof($9)|0);
  if ($10) {
   label = 9;
   break;
  }
  $11 = $2;
  $12 = (_Parser_CurrentTokenType($11)|0);
  $5 = $12;
  $13 = $5;
  $14 = ($13|0)==(34);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = HEAP32[$4>>2]|0;
  $17 = ((($16)) + 12|0);
  (_Parser_Match($15,$17)|0);
  $18 = $2;
  $19 = $3;
  _Struct_Declarator_List($18,$19);
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $20 = $5;
 $21 = ($20|0)==(40);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $5;
 $23 = ($22|0)==(54);
 $24 = $2;
 if ($23) {
  _SetError($24,7811,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _SetError($24,7848,$vararg_buffer1);
  STACKTOP = sp;return;
 }
}
function _Struct_Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp + 64|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = (_Parser_CurrentTokenType($9)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)!=(132);
 if (!($12)) {
  dest=$8; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$8>>2] = 2;
  $30 = (_mallocinit(60,$8)|0);
  $7 = $30;
  $31 = $7;
  $32 = $3;
  HEAP32[$32>>2] = $31;
  $33 = $2;
  $34 = $7;
  _Static_Assert_Declaration($33,$34);
  STACKTOP = sp;return;
 }
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;HEAP32[$6+24>>2]=0|0;HEAP32[$6+28>>2]=0|0;
 HEAP32[$6>>2] = 11;
 $13 = (_mallocinit(32,$6)|0);
 $5 = $13;
 $14 = $5;
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = $5;
 $18 = ((($17)) + 4|0);
 _Specifier_Qualifier_List($16,$18);
 $19 = $2;
 $20 = (_Parser_CurrentTokenType($19)|0);
 $4 = $20;
 $21 = $4;
 $22 = ($21|0)!=(40);
 $23 = $2;
 $24 = $5;
 if ($22) {
  $25 = ((($24)) + 16|0);
  _Struct_Declarator_List($23,$25);
  $26 = $2;
  $27 = $5;
  $28 = ((($27)) + 24|0);
  (_Parser_MatchToken($26,40,$28)|0);
  STACKTOP = sp;return;
 } else {
  $29 = ((($24)) + 24|0);
  (_Parser_MatchToken($23,40,$29)|0);
  STACKTOP = sp;return;
 }
}
function _Struct_Declaration_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_ErrorOrEof($6)|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 HEAP32[$4>>2] = 0;
 $8 = $2;
 _Struct_Declaration($8,$4);
 $9 = $3;
 $10 = HEAP32[$4>>2]|0;
 _StructDeclarationList_PushBack($9,$10);
 $11 = $2;
 $12 = (_Parser_CurrentTokenType($11)|0);
 $5 = $12;
 $13 = $5;
 $14 = ($13|0)!=(54);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $2;
 $16 = $3;
 _Struct_Declaration_List($15,$16);
 STACKTOP = sp;return;
}
function _UnionSetItem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_Parser_CurrentTokenType($8)|0);
 $4 = $9;
 $10 = $2;
 $11 = (_Lexeme($10)|0);
 $5 = $11;
 dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = (_mallocinit(40,$7)|0);
 $6 = $12;
 $13 = $4;
 $14 = ($13|0)==(9);
 if ($14) {
  $15 = $5;
  $16 = (___strdup($15)|0);
  $17 = $6;
  $18 = ((($17)) + 12|0);
  HEAP32[$18>>2] = $16;
  $19 = $2;
  $20 = $6;
  $21 = ((($20)) + 24|0);
  (_Parser_Match($19,$21)|0);
  $22 = $3;
  $23 = $6;
  _TUnionSet_PushBack($22,$23);
  STACKTOP = sp;return;
 }
 $24 = $4;
 $25 = ($24|0)==(118);
 $26 = $4;
 $27 = ($26|0)==(121);
 $or$cond = $25 | $27;
 $28 = $2;
 if ($or$cond) {
  $29 = $6;
  $30 = ((($29)) + 16|0);
  (_Parser_Match($28,$30)|0);
  $31 = $5;
  $32 = (___strdup($31)|0);
  $33 = $6;
  $34 = ((($33)) + 12|0);
  HEAP32[$34>>2] = $32;
  $35 = $2;
  $36 = $6;
  $37 = ((($36)) + 24|0);
  (_Parser_MatchToken($35,9,$37)|0);
  $38 = $3;
  $39 = $6;
  _TUnionSet_PushBack($38,$39);
  STACKTOP = sp;return;
 } else {
  _SetError($28,7882,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _UnionSetList($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $2;
 $8 = $3;
 _UnionSetItem($7,$8);
 $9 = $2;
 $10 = (_Parser_CurrentTokenType($9)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(53);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $13;
 $18 = $2;
 $19 = $3;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 32|0);
 (_Parser_Match($18,$22)|0);
 $23 = $2;
 $24 = $3;
 _UnionSetList($23,$24);
 STACKTOP = sp;return;
}
function _UnionSet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)==(41);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = $3;
 $11 = ((($10)) + 8|0);
 (_Parser_Match($9,$11)|0);
 $12 = $2;
 $13 = $3;
 _UnionSetList($12,$13);
 $14 = $2;
 $15 = $3;
 $16 = ((($15)) + 16|0);
 (_Parser_MatchToken($14,43,$16)|0);
 STACKTOP = sp;return;
}
function _Struct_Or_Union_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 _Struct_Or_Union($6,$7);
 $8 = $2;
 $9 = (_Parser_CurrentTokenType($8)|0);
 $4 = $9;
 $10 = $2;
 $11 = (_Lexeme($10)|0);
 $5 = $11;
 $12 = $4;
 $13 = ($12|0)==(41);
 if ($13) {
  $14 = $2;
  $15 = $3;
  $16 = ((($15)) + 24|0);
  _UnionSet($14,$16);
  $17 = $2;
  $18 = (_Parser_CurrentTokenType($17)|0);
  $4 = $18;
 }
 $19 = $2;
 $20 = (_Parser_CurrentTokenType($19)|0);
 $4 = $20;
 $21 = $2;
 $22 = (_Lexeme($21)|0);
 $5 = $22;
 $23 = $4;
 $24 = ($23|0)==(9);
 do {
  if ($24) {
   $25 = $3;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = $5;
    $30 = (___strdup($29)|0);
    $31 = $3;
    $32 = ((($31)) + 16|0);
    HEAP32[$32>>2] = $30;
    $33 = $2;
    $34 = $3;
    $35 = ((($34)) + 56|0);
    (_Parser_Match($33,$35)|0);
    break;
   } else {
    ___assert_fail((7910|0),(2336|0),18915,(7942|0));
    // unreachable;
   }
  }
 } while(0);
 $36 = $3;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $2;
  $41 = ((($40)) + 136|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $3;
  $44 = ((($43)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $3;
  (_SymbolMap_SetAt($42,$45,$46)|0);
 }
 $47 = $2;
 $48 = (_Parser_CurrentTokenType($47)|0);
 $4 = $48;
 $49 = $4;
 $50 = ($49|0)==(52);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $2;
 $52 = $3;
 $53 = ((($52)) + 64|0);
 (_Parser_Match($51,$53)|0);
 $54 = $2;
 $55 = $3;
 $56 = ((($55)) + 4|0);
 _Struct_Declaration_List($54,$56);
 $57 = $2;
 $58 = $3;
 $59 = ((($58)) + 72|0);
 (_Parser_MatchToken($57,54,$59)|0);
 STACKTOP = sp;return;
}
function _Enumeration_Constant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Lexeme($5)|0);
 $4 = $6;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $4;
  $12 = (___strdup($11)|0);
  $13 = $3;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = $12;
  $15 = $2;
  $16 = $3;
  $17 = ((($16)) + 12|0);
  (_Parser_MatchToken($15,9,$17)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7968|0),(2336|0),18944,(7992|0));
  // unreachable;
 }
}
function _EnumeratorC($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $2;
 $7 = $3;
 _Enumeration_Constant($6,$7);
 $8 = $2;
 $9 = (_Parser_CurrentTokenType($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(42);
 if (!($11)) {
  $18 = $4;
  $19 = $18&1;
  STACKTOP = sp;return ($19|0);
 }
 $12 = $2;
 $13 = $3;
 $14 = ((($13)) + 20|0);
 (_Parser_Match($12,$14)|0);
 $15 = $2;
 $16 = $3;
 $17 = ((($16)) + 8|0);
 _ConstantExpression($15,$17);
 $4 = 1;
 $18 = $4;
 $19 = $18&1;
 STACKTOP = sp;return ($19|0);
}
function _Enumerator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_ErrorOrEof($7)|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 dest=$5; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $9 = (_mallocinit(40,$5)|0);
 $4 = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 $13 = $4;
 $14 = $3;
 if ($12) {
  HEAP32[$14>>2] = $13;
  $15 = $4;
  $16 = $3;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
 } else {
  $18 = ((($14)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$19>>2] = $13;
  $20 = $4;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $2;
 $24 = $4;
 (_EnumeratorC($23,$24)|0);
 $25 = $2;
 $26 = ((($25)) + 136|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $4;
 (_SymbolMap_SetAt($27,$30,$31)|0);
 $32 = $2;
 $33 = (_Parser_CurrentTokenType($32)|0);
 $6 = $33;
 $34 = $6;
 $35 = ($34|0)==(34);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $2;
 $37 = $4;
 $38 = ((($37)) + 28|0);
 (_Parser_Match($36,$38)|0);
 $39 = $2;
 $40 = (_Parser_CurrentTokenType($39)|0);
 $6 = $40;
 $41 = $4;
 $42 = ((($41)) + 36|0);
 HEAP8[$42>>0] = 1;
 $43 = $6;
 $44 = ($43|0)!=(54);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $2;
 $46 = $3;
 _Enumerator_List($45,$46);
 STACKTOP = sp;return;
}
function _Enum_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = ((($7)) + 16|0);
 (_Parser_MatchToken($6,96,$8)|0);
 $9 = $2;
 $10 = (_Parser_CurrentTokenType($9)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(9);
 if (!($12)) {
  $45 = $4;
  $46 = ($45|0)==(52);
  $47 = $2;
  if ($46) {
   $48 = $3;
   $49 = ((($48)) + 24|0);
   $50 = (_Parser_Match($47,$49)|0);
   $4 = $50;
   $51 = $2;
   $52 = $3;
   $53 = ((($52)) + 8|0);
   _Enumerator_List($51,$53);
   $54 = $2;
   $55 = $3;
   $56 = ((($55)) + 40|0);
   (_Parser_MatchToken($54,54,$56)|0);
   STACKTOP = sp;return;
  } else {
   _SetError($47,8054,$vararg_buffer);
   STACKTOP = sp;return;
  }
 }
 $13 = $2;
 $14 = (_Lexeme($13)|0);
 $5 = $14;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  ___assert_fail((8013|0),(2336|0),19011,(8039|0));
  // unreachable;
 }
 $19 = $5;
 $20 = (___strdup($19)|0);
 $21 = $3;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = $3;
 $25 = ((($24)) + 24|0);
 $26 = (_Parser_Match($23,$25)|0);
 $4 = $26;
 $27 = $2;
 $28 = ((($27)) + 136|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $3;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 (_SymbolMap_SetAt($29,$32,$33)|0);
 $34 = $4;
 $35 = ($34|0)==(52);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $2;
 $37 = $3;
 $38 = ((($37)) + 24|0);
 (_Parser_Match($36,$38)|0);
 $39 = $2;
 $40 = $3;
 $41 = ((($40)) + 8|0);
 _Enumerator_List($39,$41);
 $42 = $2;
 $43 = $3;
 $44 = ((($43)) + 40|0);
 (_Parser_MatchToken($42,54,$44)|0);
 STACKTOP = sp;return;
}
function _TFunctionSpecifier_IsFirst($0) {
 $0 = $0|0;
 var $$off = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$store$select = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $$off = (($3) + -133)|0;
 $switch = ($$off>>>0)<(4);
 $spec$store$select = $switch ? 1 : 0;
 $2 = $spec$store$select;
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Function_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $4;
 $$off = (($7) + -133)|0;
 $switch = ($$off>>>0)<(4);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 (_Parser_Match($11,$13)|0);
 STACKTOP = sp;return;
}
function _TStorageSpecifier_IsFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 111: case 86: case 127: case 117: case 97: case 120:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Storage_Class_Specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $4;
 switch ($7|0) {
 case 111: case 86: case 127: case 117: case 97: case 120:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $8 = $4;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = $3;
 $13 = ((($12)) + 8|0);
 (_Parser_Match($11,$13)|0);
 STACKTOP = sp;return;
}
function _Parameter_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (_Parser_CurrentTokenType($7)|0);
 $4 = $8;
 dest=$6; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$6>>2] = 39;
 $9 = (_mallocinit(44,$6)|0);
 $5 = $9;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 $13 = $5;
 $14 = $3;
 if ($12) {
  HEAP32[$14>>2] = $13;
  $15 = $5;
  $16 = $3;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
 } else {
  $18 = ((($14)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = $13;
  $21 = $5;
  $22 = $3;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $2;
 $25 = $5;
 _Parameter_Declaration($24,$25);
 $26 = $2;
 $27 = (_Parser_CurrentTokenType($26)|0);
 $4 = $27;
 $28 = $4;
 $29 = ($28|0)==(34);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $5;
 $31 = ((($30)) + 40|0);
 HEAP8[$31>>0] = 1;
 $32 = $2;
 $33 = $5;
 $34 = ((($33)) + 32|0);
 (_Parser_Match($32,$34)|0);
 $35 = $2;
 $36 = (_Parser_CurrentTokenType($35)|0);
 $4 = $36;
 $37 = $4;
 $38 = ($37|0)!=(81);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = $2;
 $40 = $3;
 _Parameter_List($39,$40);
 STACKTOP = sp;return;
}
function _Parameter_Declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 8|0);
 _Declaration_Specifiers($5,$7);
 HEAP32[$4>>2] = 0;
 $8 = $2;
 _Declarator($8,1,$4);
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $3;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$4>>2]|0;
 _Declarator_Swap($12,$13);
 $14 = HEAP32[$4>>2]|0;
 _Declarator_Delete($14);
 STACKTOP = sp;return;
}
function _Declaration_Specifiers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 64|0;
 $8 = sp + 60|0;
 $10 = sp + 40|0;
 $12 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $13 = $2;
 $14 = (_Parser_CurrentTokenType($13)|0);
 $4 = $14;
 $15 = $2;
 $16 = (_Lexeme($15)|0);
 $5 = $16;
 $17 = $4;
 $18 = (_TStorageSpecifier_IsFirst($17)|0);
 do {
  if ($18) {
   HEAP32[$7>>2] = 8;
   $19 = ((($7)) + 4|0);
   HEAP32[$19>>2] = 0;
   $20 = ((($7)) + 8|0);
   ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;
   $21 = (_mallocinit(16,$7)|0);
   $6 = $21;
   $22 = $2;
   $23 = $6;
   _Storage_Class_Specifier($22,$23);
   $24 = $3;
   $25 = $6;
   $26 = (_StorageSpecifier_As_DeclarationSpecifier($25)|0);
   _DeclarationSpecifiers_PushBack($24,$26);
  } else {
   $27 = $2;
   $28 = $4;
   $29 = $5;
   $30 = (_TTypeSpecifier_IsFirst($27,$28,$29)|0);
   if ($30) {
    $31 = $3;
    $32 = $4;
    $33 = $5;
    $34 = (_DeclarationSpecifiers_CanAddSpeficier($31,$32,$33)|0);
    if ($34) {
     HEAP32[$8>>2] = 0;
     $35 = $2;
     _Type_Specifier($35,$8);
     $36 = $3;
     $37 = HEAP32[$8>>2]|0;
     _DeclarationSpecifiers_PushBack($36,$37);
     break;
    } else {
     $38 = $2;
     _SetError($38,8142,$vararg_buffer);
     break;
    }
   }
   $39 = $4;
   $40 = (_TTypeQualifier_IsFirst($39)|0);
   if ($40) {
    HEAP32[$10>>2] = 13;
    $41 = ((($10)) + 4|0);
    HEAP32[$41>>2] = 0;
    $42 = ((($10)) + 8|0);
    ;HEAP32[$42>>2]=0|0;HEAP32[$42+4>>2]=0|0;
    $43 = (_mallocinit(16,$10)|0);
    $9 = $43;
    $44 = $2;
    $45 = $9;
    (_Type_Qualifier($44,$45)|0);
    $46 = $3;
    $47 = $9;
    $48 = (_TypeQualifier_As_SpecifierQualifier($47)|0);
    _DeclarationSpecifiers_PushBack($46,$48);
    break;
   }
   $49 = $4;
   $50 = (_TFunctionSpecifier_IsFirst($49)|0);
   if ($50) {
    HEAP32[$12>>2] = 14;
    $51 = ((($12)) + 4|0);
    HEAP32[$51>>2] = 0;
    $52 = ((($12)) + 8|0);
    ;HEAP32[$52>>2]=0|0;HEAP32[$52+4>>2]=0|0;
    $53 = (_mallocinit(16,$12)|0);
    $11 = $53;
    $54 = $2;
    $55 = $11;
    _Function_Specifier($54,$55);
    $56 = $3;
    $57 = $11;
    $58 = (_FunctionSpecifier_As_DeclarationSpecifier($57)|0);
    _DeclarationSpecifiers_PushBack($56,$58);
    break;
   }
   $59 = $4;
   $60 = (_TAlignmentSpecifier_IsFirst($59)|0);
   if (!($60)) {
    $61 = $2;
    _SetError($61,8157,$vararg_buffer1);
   }
  }
 } while(0);
 $62 = $2;
 $63 = (_Parser_CurrentTokenType($62)|0);
 $4 = $63;
 $64 = $2;
 $65 = (_Lexeme($64)|0);
 $5 = $65;
 $66 = $2;
 $67 = $4;
 $68 = $5;
 $69 = (_Declaration_Specifiers_IsFirst($66,$67,$68)|0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = $3;
 $71 = $4;
 $72 = $5;
 $73 = (_DeclarationSpecifiers_CanAddSpeficier($70,$71,$72)|0);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = $2;
 $75 = $3;
 _Declaration_Specifiers($74,$75);
 STACKTOP = sp;return;
}
function _Parameter_Type_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 _Parameter_List($6,$7);
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $16 = $3;
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $21 = $3;
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 8|0);
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(1);
    if ($26) {
     $27 = $3;
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(5);
     if ($33) {
      $34 = $3;
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($35)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = HEAP32[$37>>2]|0;
      $4 = $38;
      $39 = $4;
      $40 = ((($39)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(123);
      $43 = $3;
      $44 = ((($43)) + 25|0);
      $45 = $42&1;
      HEAP8[$44>>0] = $45;
     }
    }
   }
  }
 }
 $46 = $2;
 $47 = (_Parser_CurrentTokenType($46)|0);
 $5 = $47;
 $48 = $5;
 $49 = ($48|0)==(81);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $3;
 $51 = ((($50)) + 24|0);
 HEAP8[$51>>0] = 1;
 $52 = $2;
 $53 = $3;
 $54 = ((($53)) + 16|0);
 (_Parser_Match($52,$54)|0);
 STACKTOP = sp;return;
}
function _Direct_Declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$not = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $vararg_buffer = sp;
 $8 = sp + 352|0;
 $9 = sp + 248|0;
 $11 = sp + 136|0;
 $12 = sp + 124|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $3 = $0;
 $17 = $1&1;
 $4 = $17;
 $5 = $2;
 $18 = $5;
 HEAP32[$18>>2] = 0;
 $19 = $3;
 $20 = (_Parser_CurrentTokenType($19)|0);
 $6 = $20;
 $7 = 0;
 $21 = $3;
 $22 = (_ErrorOrEof($21)|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $6;
 switch ($23|0) {
 case 30:  {
  dest=$8; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $24 = (_mallocinit(104,$8)|0);
  $7 = $24;
  $25 = $3;
  $26 = $7;
  $27 = ((($26)) + 56|0);
  $28 = (_Parser_MatchToken($25,30,$27)|0);
  $6 = $28;
  $29 = $6;
  $30 = ($29|0)==(32);
  $31 = $6;
  $32 = ($31|0)==(9);
  $or$cond = $30 | $32;
  do {
   if ($or$cond) {
    $33 = $7;
    $34 = ((($33)) + 52|0);
    HEAP32[$34>>2] = 2;
    $35 = $3;
    $36 = $4;
    $37 = $36&1;
    $38 = $7;
    $39 = ((($38)) + 4|0);
    _Declarator($35,$37,$39);
   } else {
    $40 = $4;
    $41 = $40&1;
    if (!($41)) {
     $49 = $3;
     _SetError($49,8078,$vararg_buffer);
     break;
    }
    $42 = $7;
    $43 = ((($42)) + 52|0);
    HEAP32[$43>>2] = 3;
    $44 = $6;
    $45 = ($44|0)!=(31);
    if ($45) {
     $46 = $3;
     $47 = $7;
     $48 = ((($47)) + 20|0);
     _Parameter_Type_List($46,$48);
    }
   }
  } while(0);
  $50 = $3;
  $51 = $7;
  $52 = ((($51)) + 64|0);
  (_Parser_MatchToken($50,31,$52)|0);
  break;
 }
 case 9:  {
  dest=$9; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $53 = (_mallocinit(104,$9)|0);
  $7 = $53;
  $54 = $7;
  $55 = ((($54)) + 52|0);
  HEAP32[$55>>2] = 1;
  $56 = $3;
  $57 = (_Lexeme($56)|0);
  $10 = $57;
  $58 = $10;
  $59 = (___strdup($58)|0);
  $60 = $7;
  HEAP32[$60>>2] = $59;
  $61 = $3;
  $62 = (_GetCurrentLine($61)|0);
  $63 = $7;
  $64 = ((($63)) + 12|0);
  $65 = ((($64)) + 4|0);
  HEAP32[$65>>2] = $62;
  $66 = $3;
  $67 = (_GetFileIndex($66)|0);
  $68 = $7;
  $69 = ((($68)) + 12|0);
  HEAP32[$69>>2] = $67;
  $70 = $3;
  $71 = $7;
  $72 = ((($71)) + 56|0);
  (_Parser_Match($70,$72)|0);
  break;
 }
 default: {
 }
 }
 $73 = $7;
 $74 = ($73|0)==(0|0);
 if ($74) {
  dest=$11; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $75 = (_mallocinit(104,$11)|0);
  $7 = $75;
  $76 = (___strdup(16416)|0);
  $77 = $7;
  HEAP32[$77>>2] = $76;
  $78 = $3;
  $79 = (_GetCurrentLine($78)|0);
  $80 = $7;
  $81 = ((($80)) + 12|0);
  $82 = ((($81)) + 4|0);
  HEAP32[$82>>2] = $79;
  $83 = $3;
  $84 = (_GetFileIndex($83)|0);
  $85 = $7;
  $86 = ((($85)) + 12|0);
  HEAP32[$86>>2] = $84;
  $87 = $7;
  $88 = ((($87)) + 52|0);
  HEAP32[$88>>2] = 1;
 }
 $89 = $7;
 $90 = $5;
 HEAP32[$90>>2] = $89;
 while(1) {
  $91 = $3;
  $92 = (_Parser_CurrentTokenType($91)|0);
  $6 = $92;
  $93 = $6;
  switch ($93|0) {
  case 30:  {
   $94 = $3;
   $95 = $7;
   $96 = ((($95)) + 72|0);
   $97 = (_Parser_MatchToken($94,30,$96)|0);
   $6 = $97;
   $98 = $7;
   $99 = ((($98)) + 52|0);
   HEAP32[$99>>2] = 3;
   $100 = $6;
   $101 = ($100|0)!=(31);
   if ($101) {
    $102 = $3;
    $103 = $7;
    $104 = ((($103)) + 20|0);
    _Parameter_Type_List($102,$104);
   }
   $105 = $3;
   $106 = $7;
   $107 = ((($106)) + 80|0);
   $108 = (_Parser_MatchToken($105,31,$107)|0);
   $6 = $108;
   $109 = $6;
   $110 = ($109|0)==(9);
   if ($110) {
    $111 = $3;
    $112 = (_Lexeme($111)|0);
    $113 = (_strcmp($112,8102)|0);
    $114 = ($113|0)==(0);
    if ($114) {
     ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
     $115 = $7;
     $116 = HEAP32[$115>>2]|0;
     (_StrBuilder_Append($12,$116)|0);
     $117 = $7;
     $118 = ((($117)) + 20|0);
     _ParameterList_PrintNameMangling($118,$12);
     $119 = $3;
     $120 = $7;
     $121 = ((($120)) + 88|0);
     (_Parser_MatchToken($119,9,$121)|0);
     $122 = $7;
     $123 = ((($122)) + 96|0);
     HEAP8[$123>>0] = 1;
     $124 = HEAP32[$12>>2]|0;
     $125 = $7;
     $126 = ((($125)) + 100|0);
     HEAP32[$126>>2] = $124;
    }
   }
   break;
  }
  case 46:  {
   $127 = $7;
   $128 = ((($127)) + 52|0);
   HEAP32[$128>>2] = 4;
   $129 = $3;
   $130 = $7;
   $131 = ((($130)) + 72|0);
   $132 = (_Parser_MatchToken($129,46,$131)|0);
   $6 = $132;
   $133 = $6;
   $134 = ($133|0)==(117);
   do {
    if (!($134)) {
     $135 = $6;
     $136 = ($135|0)==(86);
     if ($136) {
      $137 = $7;
      $138 = ((($137)) + 52|0);
      HEAP32[$138>>2] = 5;
      $139 = $3;
      $140 = $7;
      $141 = ((($140)) + 80|0);
      (_Parser_MatchToken($139,86,$141)|0);
      break;
     }
     $142 = $6;
     $143 = ($142|0)!=(48);
     if ($143) {
      $144 = $3;
      $145 = $7;
      $146 = ((($145)) + 48|0);
      _AssignmentExpression($144,$146);
     }
    }
   } while(0);
   $147 = $3;
   $148 = $7;
   $149 = ((($148)) + 80|0);
   (_Parser_MatchToken($147,48,$149)|0);
   break;
  }
  default: {
  }
  }
  $150 = $3;
  $151 = (_Parser_CurrentTokenType($150)|0);
  $6 = $151;
  $152 = $6;
  $153 = ($152|0)!=(30);
  $154 = $6;
  $155 = ($154|0)!=(46);
  $or$cond3 = $153 & $155;
  if ($or$cond3) {
   break;
  }
  dest=$14; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $156 = (_mallocinit(104,$14)|0);
  $13 = $156;
  $157 = $13;
  $158 = $7;
  $159 = ((($158)) + 8|0);
  HEAP32[$159>>2] = $157;
  $160 = $13;
  $7 = $160;
 }
 $161 = $3;
 $162 = (_Parser_CurrentTokenType($161)|0);
 $6 = $162;
 $163 = $6;
 $164 = ($163|0)==(30);
 if ($164) {
  HEAP32[$15>>2] = 0;
  $165 = $3;
  $166 = $4;
  $167 = $166&1;
  _Direct_Declarator($165,$167,$15);
  $168 = HEAP32[$15>>2]|0;
  $169 = $7;
  $170 = ((($169)) + 8|0);
  HEAP32[$170>>2] = $168;
  STACKTOP = sp;return;
 }
 $171 = $4;
 $172 = $171&1;
 $$not = $172 ^ 1;
 $173 = $6;
 $174 = ($173|0)==(9);
 $or$cond5 = $$not & $174;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$16>>2] = 0;
 $175 = $3;
 $176 = $4;
 $177 = $176&1;
 _Direct_Declarator($175,$177,$16);
 $178 = HEAP32[$16>>2]|0;
 $179 = $7;
 $180 = ((($179)) + 8|0);
 HEAP32[$180>>2] = $178;
 STACKTOP = sp;return;
}
function _Type_Qualifier_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = 13;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($5)) + 8|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $8 = (_mallocinit(16,$5)|0);
 $4 = $8;
 $9 = $2;
 $10 = $4;
 (_Type_Qualifier($9,$10)|0);
 $11 = $3;
 $12 = $4;
 _TypeQualifierList_PushBack($11,$12);
 $13 = $2;
 $14 = (_Parser_CurrentTokenType($13)|0);
 $15 = (_IsTypeQualifierToken($14)|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = $3;
 _Type_Qualifier_List($16,$17);
 STACKTOP = sp;return;
}
function _IsTypeQualifierToken($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 switch ($3|0) {
 case 130: case 124: case 131: case 90:  {
  $2 = 1;
  break;
 }
 case 86:  {
  $2 = 1;
  break;
 }
 default: {
 }
 }
 $4 = $2;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _Pointer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;HEAP32[$5+28>>2]=0|0;
 $7 = (_mallocinit(32,$5)|0);
 $4 = $7;
 $8 = $2;
 $9 = (_Parser_CurrentTokenType($8)|0);
 $6 = $9;
 $10 = $6;
 $11 = ($10|0)==(32);
 if ($11) {
  $12 = $3;
  $13 = $4;
  _PointerList_PushBack($12,$13);
  $14 = $2;
  $15 = $4;
  $16 = ((($15)) + 24|0);
  (_Parser_Match($14,$16)|0);
 } else {
  $17 = $2;
  _SetError($17,8111,$vararg_buffer);
 }
 $18 = $2;
 $19 = (_Parser_CurrentTokenType($18)|0);
 $6 = $19;
 $20 = $6;
 $21 = (_IsTypeQualifierToken($20)|0);
 if ($21) {
  $22 = $2;
  $23 = $4;
  _Type_Qualifier_List($22,$23);
 }
 $24 = $2;
 $25 = (_Parser_CurrentTokenType($24)|0);
 $6 = $25;
 $26 = $6;
 $27 = ($26|0)==(32);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $2;
 $29 = $3;
 _Pointer($28,$29);
 STACKTOP = sp;return;
}
function _TAlignmentSpecifier_IsFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(137);
 STACKTOP = sp;return ($3|0);
}
function _AtomicTypeSpecifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 dest=$5; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$5>>2] = 9;
 $6 = (_mallocinit(56,$5)|0);
 $4 = $6;
 $7 = $4;
 $8 = (_AtomicTypeSpecifier_As_TypeSpecifier($7)|0);
 $9 = $3;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = $4;
 $12 = ((($11)) + 32|0);
 (_Parser_MatchToken($10,130,$12)|0);
 $13 = $2;
 $14 = $4;
 $15 = ((($14)) + 40|0);
 (_Parser_MatchToken($13,30,$15)|0);
 $16 = $2;
 $17 = $4;
 $18 = ((($17)) + 4|0);
 _TypeName($16,$18);
 $19 = $2;
 $20 = $4;
 $21 = ((($20)) + 48|0);
 (_Parser_MatchToken($19,31,$21)|0);
 STACKTOP = sp;return;
}
function _AtomicTypeSpecifier_As_TypeSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _Declaration_Specifiers_IsFirst($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = (_TStorageSpecifier_IsFirst($7)|0);
 if ($8) {
  $20 = 1;
 } else {
  $9 = $3;
  $10 = $4;
  $11 = $5;
  $12 = (_TTypeSpecifier_IsFirst($9,$10,$11)|0);
  if ($12) {
   $20 = 1;
  } else {
   $13 = $4;
   $14 = (_TTypeQualifier_IsFirst($13)|0);
   if ($14) {
    $20 = 1;
   } else {
    $15 = $4;
    $16 = (_TFunctionSpecifier_IsFirst($15)|0);
    if ($16) {
     $20 = 1;
    } else {
     $17 = $4;
     $18 = (_TFunctionSpecifier_IsFirst($17)|0);
     $20 = $18;
    }
   }
  }
 }
 $19 = $20&1;
 $6 = $19;
 $21 = $6;
 $22 = $21&1;
 STACKTOP = sp;return ($22|0);
}
function _StorageSpecifier_As_DeclarationSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _FunctionSpecifier_As_DeclarationSpecifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function _Designation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Designator_List($4,$5);
 $6 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 (_Parser_MatchToken($6,42,$8)|0);
 STACKTOP = sp;return;
}
function _Designator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp + 36|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;
 $9 = (_mallocinit(28,$5)|0);
 $4 = $9;
 $10 = $2;
 $11 = $4;
 _Designator($10,$11);
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 $15 = $4;
 $16 = $3;
 if ($14) {
  HEAP32[$16>>2] = $15;
  $17 = $4;
  $18 = $3;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
 } else {
  $20 = ((($16)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 8|0);
  HEAP32[$22>>2] = $15;
  $23 = $4;
  $24 = $3;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $23;
 }
 while(1) {
  $26 = $2;
  $27 = (_ErrorOrEof($26)|0);
  if ($27) {
   label = 11;
   break;
  }
  $28 = $2;
  $29 = (_Parser_CurrentTokenType($28)|0);
  $6 = $29;
  $30 = $6;
  $31 = ($30|0)==(46);
  $32 = $6;
  $33 = ($32|0)==(37);
  $or$cond = $31 | $33;
  if (!($or$cond)) {
   label = 11;
   break;
  }
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0;HEAP32[$8+24>>2]=0|0;
  $34 = (_mallocinit(28,$8)|0);
  $7 = $34;
  $35 = $2;
  $36 = $7;
  _Designator($35,$36);
  $37 = $3;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  $40 = $7;
  $41 = $3;
  if ($39) {
   HEAP32[$41>>2] = $40;
   $42 = $7;
   $43 = $3;
   $44 = ((($43)) + 4|0);
   HEAP32[$44>>2] = $42;
  } else {
   $45 = ((($41)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 8|0);
   HEAP32[$47>>2] = $40;
   $48 = $7;
   $49 = $3;
   $50 = ((($49)) + 4|0);
   HEAP32[$50>>2] = $48;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _Designator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_Parser_CurrentTokenType($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)==(46);
 if ($8) {
  $9 = $2;
  $10 = $3;
  $11 = ((($10)) + 12|0);
  (_Parser_Match($9,$11)|0);
  $12 = $2;
  $13 = $3;
  $14 = ((($13)) + 4|0);
  _ConstantExpression($12,$14);
  $15 = $2;
  $16 = $3;
  $17 = ((($16)) + 20|0);
  (_Parser_Match($15,$17)|0);
  $18 = $2;
  (_Parser_MatchToken($18,48,0)|0);
  STACKTOP = sp;return;
 }
 $19 = $4;
 $20 = ($19|0)==(37);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = $3;
 $23 = ((($22)) + 12|0);
 (_Parser_Match($21,$23)|0);
 $24 = $2;
 $25 = (_Lexeme($24)|0);
 $26 = (___strdup($25)|0);
 $27 = $3;
 HEAP32[$27>>2] = $26;
 $28 = $2;
 $29 = $3;
 $30 = ((($29)) + 20|0);
 (_Parser_MatchToken($28,9,$30)|0);
 STACKTOP = sp;return;
}
function _Init_Declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;
 $8 = (_mallocinit(28,$5)|0);
 $4 = $8;
 $9 = $2;
 $10 = $4;
 _Declarator($9,0,$10);
 $11 = $2;
 $12 = (_Parser_CurrentTokenType($11)|0);
 $6 = $12;
 $13 = $4;
 $14 = (_InitDeclarator_FindName($13)|0);
 $7 = $14;
 $15 = $7;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 136|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $7;
  $21 = $4;
  (_SymbolMap_SetAt($19,$20,$21)|0);
 }
 $22 = $4;
 $23 = $3;
 HEAP32[$23>>2] = $22;
 $24 = $6;
 $25 = ($24|0)==(42);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $2;
 $27 = $4;
 $28 = ((($27)) + 12|0);
 (_Parser_Match($26,$28)|0);
 $29 = $2;
 $30 = $4;
 $31 = ((($30)) + 4|0);
 _Initializer($29,$31);
 STACKTOP = sp;return;
}
function _Init_Declarator_List($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (_Parser_CurrentTokenType($6)|0);
 $4 = $7;
 HEAP32[$5>>2] = 0;
 $8 = $2;
 _Init_Declarator($8,$5);
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = HEAP32[$5>>2]|0;
 $13 = $3;
 if ($11) {
  HEAP32[$13>>2] = $12;
  $14 = HEAP32[$5>>2]|0;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = $14;
 } else {
  $17 = ((($13)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $12;
  $20 = HEAP32[$5>>2]|0;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $2;
 $24 = (_Parser_CurrentTokenType($23)|0);
 $4 = $24;
 $25 = $4;
 $26 = ($25|0)==(34);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $2;
 $28 = HEAP32[$5>>2]|0;
 $29 = ((($28)) + 12|0);
 (_Parser_Match($27,$29)|0);
 $30 = $2;
 $31 = $3;
 _Init_Declarator_List($30,$31);
 STACKTOP = sp;return;
}
function _Parse_Declarations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $9 = $2;
  $10 = (_ErrorOrEof($9)|0);
  $11 = $10 ^ 1;
  if (!($11)) {
   break;
  }
  HEAP32[$5>>2] = 0;
  $12 = $2;
  $13 = (_Declaration($12,$5)|0);
  $14 = $13&1;
  $6 = $14;
  $15 = $6;
  $16 = $15&1;
  if (!($16)) {
   label = 5;
   break;
  }
  $17 = $3;
  $18 = HEAP32[$5>>2]|0;
  _Declarations_PushBack($17,$18);
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
  $21 = $2;
  $22 = (_Parser_CurrentTokenType($21)|0);
  $23 = ($22|0)==(2);
  if ($23) {
   break;
  }
  $28 = $2;
  $29 = (_Parser_HasError($28)|0);
  if ($29) {
   break;
  }
 }
 if ((label|0) == 5) {
  $24 = $2;
  $25 = (_Parser_CurrentTokenType($24)|0);
  $26 = ($25|0)==(2);
  if ($26) {
   $27 = $2;
   (_Parser_Match($27,0)|0);
  }
 }
 $30 = $2;
 $31 = (_Parser_CurrentTokenType($30)|0);
 $32 = ($31|0)==(2);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 HEAP32[$8>>2] = 3;
 $33 = ((($8)) + 4|0);
 ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;
 $34 = (_mallocinit(12,$8)|0);
 $7 = $34;
 $35 = $2;
 $36 = $7;
 $37 = ((($36)) + 4|0);
 (_Parser_Match($35,$37)|0);
 $38 = $3;
 $39 = $7;
 _Declarations_PushBack($38,$39);
 STACKTOP = sp;return;
}
function _Parser_Main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _Parse_Declarations($4,$5);
 STACKTOP = sp;return;
}
function _BuildSyntaxTreeFromString($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $8 = $4;
 (_Parser_InitString($7,8174,$8)|0);
 $9 = $3;
 $10 = ((($9)) + 408|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$7>>2] = $11;
 $12 = $5;
 _Parser_Main($7,$12);
 $13 = ((($7)) + 20|0);
 $14 = ((($13)) + 28|0);
 $15 = $5;
 $16 = ((($15)) + 12|0);
 _TFileMapToStrArray($14,$16);
 $17 = (_GetCompletationMessage($7)|0);
 HEAP32[$vararg_buffer>>2] = $17;
 (_printf(5121,$vararg_buffer)|0);
 $18 = ((($7)) + 120|0);
 $19 = $5;
 $20 = ((($19)) + 24|0);
 _SymbolMap_Swap($18,$20);
 $21 = (_Parser_HasError($7)|0);
 if ($21) {
  $22 = ((($7)) + 20|0);
  _Scanner_PrintDebug($22);
 }
 $23 = ((($7)) + 20|0);
 $24 = ((($23)) + 4|0);
 $25 = $5;
 $26 = ((($25)) + 40|0);
 _MacroMap_Swap($24,$26);
 $27 = (_Parser_HasError($7)|0);
 $28 = $27 ^ 1;
 $29 = $28&1;
 $6 = $29;
 _Parser_Destroy($7);
 $30 = $6;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function _CompileText($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $8 = sp;
 $9 = sp + 576|0;
 $10 = sp + 568|0;
 $11 = sp + 560|0;
 $12 = sp + 552|0;
 $13 = sp + 544|0;
 $15 = sp + 88|0;
 $16 = sp + 36|0;
 $17 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 HEAP32[$9>>2] = 8181;
 $18 = ((($9)) + 4|0);
 HEAP32[$18>>2] = 8192;
 HEAP32[$8>>2] = $9;
 $19 = ((($8)) + 4|0);
 HEAP32[$10>>2] = 9459;
 $20 = ((($10)) + 4|0);
 HEAP32[$20>>2] = 9471;
 HEAP32[$19>>2] = $10;
 $21 = ((($19)) + 4|0);
 HEAP32[$11>>2] = 10756;
 $22 = ((($11)) + 4|0);
 HEAP32[$22>>2] = 10768;
 HEAP32[$21>>2] = $11;
 $23 = ((($21)) + 4|0);
 HEAP32[$12>>2] = 12714;
 $24 = ((($12)) + 4|0);
 HEAP32[$24>>2] = 12727;
 HEAP32[$23>>2] = $12;
 $25 = ((($23)) + 4|0);
 HEAP32[$13>>2] = 12942;
 $26 = ((($13)) + 4|0);
 HEAP32[$26>>2] = 12953;
 HEAP32[$25>>2] = $13;
 $27 = ((($25)) + 4|0);
 HEAP32[$27>>2] = 0;
 HEAP32[3956] = $8;
 $14 = 0;
 _memset(($15|0),0,452)|0;
 $28 = ((($15)) + 1|0);
 HEAP8[$28>>0] = 1;
 $29 = ((($15)) + 401|0);
 HEAP8[$29>>0] = 1;
 $30 = $5;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = ((($15)) + 402|0);
  HEAP8[$32>>0] = 1;
 } else {
  $33 = $5;
  $34 = (($33) - 1)|0;
  $35 = ((($15)) + 404|0);
  HEAP32[$35>>2] = $34;
 }
 $36 = $4;
 $37 = ((($15)) + 408|0);
 HEAP32[$37>>2] = $36;
 dest=$16; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $38 = $7;
 $39 = (_BuildSyntaxTreeFromString($15,$38,$16)|0);
 if (!($39)) {
  HEAP32[3956] = 0;
  $45 = $14;
  STACKTOP = sp;return ($45|0);
 }
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
 (_StrBuilder_Reserve($17,500)|0);
 $40 = ((($15)) + 402|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = $7;
  _PrintPreprocessedToString2($17,$43,0);
 } else {
  _SyntaxTree_PrintCodeToString($16,$15,$17);
 }
 $44 = HEAP32[$17>>2]|0;
 $14 = $44;
 HEAP32[3956] = 0;
 $45 = $14;
 STACKTOP = sp;return ($45|0);
}
function _ExpandMacro($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $14 = sp + 128|0;
 $15 = sp + 116|0;
 $17 = sp + 100|0;
 $20 = sp + 80|0;
 $21 = sp + 68|0;
 $22 = sp + 56|0;
 $23 = sp + 44|0;
 $24 = sp + 24|0;
 $25 = sp + 12|0;
 $26 = sp;
 $7 = $0;
 $8 = $1;
 $27 = $2&1;
 $9 = $27;
 $28 = $3&1;
 $10 = $28;
 $29 = $4&1;
 $11 = $29;
 $12 = $5;
 $13 = $6;
 $30 = $13;
 _PPTokenArray_Clear($30);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $31 = $7;
 _PPTokenArray_AppendCopy($15,$31);
 _PPTokenArray_Print($15);
 $16 = 0;
 L1: while(1) {
  $32 = ((($15)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)>(0);
  if (!($34)) {
   break;
  }
  _PPTokenArray_Print($14);
  $35 = (_PPTokenArray_PopFront($15)|0);
  $16 = $35;
  $36 = $16;
  $37 = (_PPToken_IsIdentifier($36)|0);
  if (!($37)) {
   $38 = $16;
   _PPTokenArray_PushBack($14,$38);
   $16 = 0;
   continue;
  }
  $39 = $10;
  $40 = $39&1;
  if ($40) {
   $41 = $16;
   $42 = (_PPToken_IsIdentifier($41)|0);
   if ($42) {
    $43 = $16;
    $44 = (_PPToken_IsLexeme($43,14094)|0);
    if ($44) {
     ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
     $45 = $8;
     _GatherDefinedOperator($15,$45,$17);
     _PPTokenArray_AppendMove($14,$17);
     $46 = $16;
     _PPToken_Delete($46);
     $16 = 0;
     _PPTokenArray_Destroy($17);
     continue;
    }
   }
  }
  $47 = $8;
  $48 = $16;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_MacroMap_Find($47,$50)|0);
  $18 = $51;
  $52 = $18;
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = $11;
   $55 = $54&1;
   if ($55) {
    $56 = $16;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    _free($58);
    $59 = (___strdup(6349)|0);
    $60 = $16;
    $61 = ((($60)) + 4|0);
    HEAP32[$61>>2] = $59;
    $62 = $16;
    HEAP32[$62>>2] = 1;
   }
   $63 = $16;
   _PPTokenArray_PushBack($14,$63);
   $16 = 0;
   continue;
  }
  $64 = $16;
  $65 = ((($64)) + 8|0);
  $66 = $18;
  $67 = HEAP32[$66>>2]|0;
  $68 = (_PPTokenSet_Find($65,$67)|0);
  $19 = $68;
  $69 = $19;
  $70 = ($69|0)!=(0|0);
  if ($70) {
   $71 = $16;
   _PPTokenArray_PushBack($14,$71);
   $16 = 0;
   continue;
  }
  ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
  _PPTokenArray_Print($15);
  $72 = $18;
  $73 = ((($72)) + 4|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&1;
  do {
   if ($75) {
    $94 = $9;
    $95 = $94&1;
    $96 = (_FillIn($15,$95,$20)|0);
    if ($96) {
     $97 = HEAP32[$15>>2]|0;
     $98 = HEAP32[$97>>2]|0;
     $99 = (_PPToken_IsOpenPar($98)|0);
     if ($99) {
      ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $100 = (_PPTokenArray_PopFront($15)|0);
      _PPToken_Delete($100);
      ;HEAP32[$24>>2]=HEAP32[2028>>2]|0;HEAP32[$24+4>>2]=HEAP32[2028+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[2028+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[2028+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[2028+16>>2]|0;
      $101 = $18;
      $102 = ((($101)) + 20|0);
      $103 = $9;
      $104 = $103&1;
      $105 = (_GatherArgs($15,$102,$23,$104,0,$24)|0);
      if ($105) {
       ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
       $107 = $16;
       $108 = ((($107)) + 8|0);
       $109 = ((($24)) + 8|0);
       _SetIntersection($108,$109,$25);
       $110 = $18;
       $111 = HEAP32[$110>>2]|0;
       $112 = (_PPToken_Create($111,0)|0);
       _PPTokenSet_PushUnique($25,$112);
       $113 = $16;
       _PPToken_Delete($113);
       $16 = 0;
       ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
       $114 = $8;
       $115 = $18;
       $116 = ((($115)) + 8|0);
       $117 = $10;
       $118 = $117&1;
       $119 = $11;
       $120 = $119&1;
       $121 = $12;
       _SubstituteArgs($114,$116,$23,$25,$118,$120,$121,$26);
       _PPTokenArray_AppendMove($26,$15);
       _PPTokenArray_Swap($26,$15);
       $122 = $18;
       $12 = $122;
       _PPTokenSet_Destroy($25);
       _PPTokenArray_Destroy($26);
       _TokenArrayMap_Destroy($23);
       _PPToken_Destroy($24);
       break;
      } else {
       _PPToken_Destroy($24);
       $106 = $16;
       _PPToken_Delete($106);
       $16 = 0;
       continue L1;
      }
     }
    }
    _PPTokenArray_Print($20);
    _PPTokenArray_AppendMove($20,$15);
    _PPTokenArray_Swap($20,$15);
    $123 = $16;
    _PPTokenArray_PushBack($14,$123);
    $16 = 0;
   } else {
    ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
    $76 = $16;
    $77 = ((($76)) + 8|0);
    _TokenSetAppendCopy($21,$77);
    $78 = $16;
    $79 = ((($78)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $16;
    $82 = HEAP32[$81>>2]|0;
    $83 = (_PPToken_Create($80,$82)|0);
    _PPTokenSet_PushUnique($21,$83);
    $84 = $16;
    _PPToken_Delete($84);
    $16 = 0;
    ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
    $85 = $8;
    $86 = $18;
    $87 = ((($86)) + 8|0);
    $88 = $10;
    $89 = $88&1;
    $90 = $11;
    $91 = $90&1;
    $92 = $12;
    _SubstituteArgs($85,$87,0,$21,$89,$91,$92,$22);
    _PPTokenArray_AppendMove($22,$15);
    _PPTokenArray_Swap($22,$15);
    _PPTokenArray_Destroy($22);
    _PPTokenSet_Destroy($21);
    $93 = $18;
    $12 = $93;
   }
  } while(0);
  _PPTokenArray_Destroy($20);
 }
 $124 = $13;
 _PPTokenArray_Swap($14,$124);
 _PPTokenArray_Destroy($14);
 _PPTokenArray_Destroy($15);
 STACKTOP = sp;return;
}
function _GatherDefinedOperator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_PPToken_IsSpace($15)|0);
  $17 = $3;
  if (!($16)) {
   break;
  }
  $18 = (_PPTokenArray_PopFront($17)|0);
  $6 = $18;
  $19 = $5;
  $20 = $6;
  _PPTokenArray_PushBack($19,$20);
 }
 $21 = HEAP32[$17>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_PPToken_IsIdentifier($22)|0);
 if ($23) {
  $24 = $4;
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_MacroMap_Find($24,$29)|0);
  $31 = ($30|0)!=(0|0);
  $32 = $3;
  $33 = (_PPTokenArray_PopFront($32)|0);
  if ($31) {
   $7 = $33;
   $34 = $7;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   _free($36);
   $37 = (___strdup(13975)|0);
   $38 = $7;
   $39 = ((($38)) + 4|0);
   HEAP32[$39>>2] = $37;
   $40 = $5;
   $41 = $7;
   _PPTokenArray_PushBack($40,$41);
   STACKTOP = sp;return;
  } else {
   $8 = $33;
   $42 = $8;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   _free($44);
   $45 = (___strdup(6349)|0);
   $46 = $8;
   $47 = ((($46)) + 4|0);
   HEAP32[$47>>2] = $45;
   $48 = $5;
   $49 = $8;
   _PPTokenArray_PushBack($48,$49);
   STACKTOP = sp;return;
  }
 }
 $50 = $3;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$51>>2]|0;
 $53 = (_PPToken_IsChar($52,40)|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = $3;
 $55 = (_PPTokenArray_PopFront($54)|0);
 _PPToken_Delete($55);
 while(1) {
  $56 = $3;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $59 = (_PPToken_IsSpace($58)|0);
  $60 = $3;
  if (!($59)) {
   break;
  }
  $61 = (_PPTokenArray_PopFront($60)|0);
  $9 = $61;
  $62 = $5;
  $63 = $9;
  _PPTokenArray_PushBack($62,$63);
 }
 $64 = HEAP32[$60>>2]|0;
 $65 = HEAP32[$64>>2]|0;
 (_PPToken_IsIdentifier($65)|0);
 $66 = $4;
 $67 = $3;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (_MacroMap_Find($66,$71)|0);
 $73 = ($72|0)!=(0|0);
 $74 = $3;
 $75 = (_PPTokenArray_PopFront($74)|0);
 if ($73) {
  $10 = $75;
  $76 = $10;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  _free($78);
  $79 = (___strdup(13975)|0);
  $80 = $10;
  $81 = ((($80)) + 4|0);
  HEAP32[$81>>2] = $79;
  $82 = $5;
  $83 = $10;
  _PPTokenArray_PushBack($82,$83);
 } else {
  $11 = $75;
  $84 = $11;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  _free($86);
  $87 = (___strdup(6349)|0);
  $88 = $11;
  $89 = ((($88)) + 4|0);
  HEAP32[$89>>2] = $87;
  $90 = $5;
  $91 = $11;
  _PPTokenArray_PushBack($90,$91);
 }
 while(1) {
  $92 = $3;
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$93>>2]|0;
  $95 = (_PPToken_IsSpace($94)|0);
  $96 = $3;
  if (!($95)) {
   break;
  }
  $97 = (_PPTokenArray_PopFront($96)|0);
  $12 = $97;
  $98 = $5;
  $99 = $12;
  _PPTokenArray_PushBack($98,$99);
 }
 $100 = HEAP32[$96>>2]|0;
 $101 = HEAP32[$100>>2]|0;
 (_PPToken_IsChar($101,41)|0);
 $102 = $3;
 $103 = (_PPTokenArray_PopFront($102)|0);
 _PPToken_Delete($103);
 STACKTOP = sp;return;
}
function _SubstituteArgs($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $16 = sp + 124|0;
 $17 = sp + 112|0;
 $20 = sp + 100|0;
 $21 = sp + 88|0;
 $23 = sp + 80|0;
 $24 = sp + 68|0;
 $25 = sp + 56|0;
 $26 = sp + 44|0;
 $28 = sp + 36|0;
 $30 = sp + 28|0;
 $31 = sp + 24|0;
 $32 = sp + 12|0;
 $33 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $34 = $4&1;
 $12 = $34;
 $35 = $5&1;
 $13 = $35;
 $14 = $6;
 $15 = $7;
 $36 = $15;
 _PPTokenArray_Clear($36);
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
 $37 = $9;
 _PPTokenArray_AppendCopy($16,$37);
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
 $18 = 0;
 L1: while(1) {
  $38 = ((($16)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)>(0);
  if (!($40)) {
   break;
  }
  _PPTokenArray_Print($16);
  _PPTokenArray_Print($17);
  $41 = (_PPTokenArray_PopFront($16)|0);
  $18 = $41;
  $42 = $18;
  $43 = (_PPToken_IsStringizingOp($42)|0);
  do {
   if ($43) {
    $44 = (_FindNoSpaceIndex($16,0)|0);
    $19 = $44;
    $45 = $19;
    $46 = ($45|0)!=(-1);
    $47 = $10;
    $48 = ($47|0)!=(0|0);
    $or$cond = $46 & $48;
    if ($or$cond) {
     $49 = $10;
     $50 = HEAP32[$16>>2]|0;
     $51 = $19;
     $52 = (($50) + ($51<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (_TokenArrayMap_Lookup($49,$55,$20)|0);
     if ($56) {
      ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      $57 = HEAP32[$20>>2]|0;
      _AppendStringize($21,$57);
      $58 = $19;
      $59 = (($58) + 1)|0;
      _PPTokenArray_Erase($16,0,$59);
      $60 = HEAP32[$21>>2]|0;
      $61 = (_PPToken_Create($60,6)|0);
      _PPTokenArray_PushBack($17,$61);
      _StrBuilder_Destroy($21);
      $62 = $18;
      _PPToken_Delete($62);
      $18 = 0;
      continue L1;
     }
    }
   } else {
    $63 = $18;
    $64 = (_PPToken_IsConcatOp($63)|0);
    $65 = (_FindNoSpaceIndex($16,0)|0);
    if ($64) {
     $22 = $65;
     $66 = $22;
     $67 = ($66|0)!=(-1);
     if (!($67)) {
      break;
     }
     $68 = $10;
     $69 = HEAP32[$16>>2]|0;
     $70 = $22;
     $71 = (($69) + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($72)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (_TokenArrayMap_Lookup($68,$74,$23)|0);
     if ($75) {
      $76 = $22;
      $77 = (($76) + 1)|0;
      _PPTokenArray_Erase($16,0,$77);
      $78 = HEAP32[$23>>2]|0;
      $79 = ((($78)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)>(0);
      if ($81) {
       ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
       $82 = HEAP32[$23>>2]|0;
       _Glue($17,$82,$24);
       _PPTokenArray_Swap($24,$17);
       _PPTokenArray_Destroy($24);
      }
     } else {
      ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $83 = HEAP32[$16>>2]|0;
      $84 = $22;
      $85 = (($83) + ($84<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (_PPToken_Clone($86)|0);
      _PPTokenArray_PushBack($25,$87);
      $88 = $22;
      $89 = (($88) + 1)|0;
      _PPTokenArray_Erase($16,0,$89);
      ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      _Glue($17,$25,$26);
      _PPTokenArray_Swap($26,$17);
      _PPTokenArray_Destroy($26);
      _PPTokenArray_Destroy($25);
     }
     $90 = $18;
     _PPToken_Delete($90);
     $18 = 0;
     continue L1;
    }
    $27 = $65;
    $91 = $27;
    $92 = ($91|0)!=(-1);
    if ($92) {
     $93 = HEAP32[$16>>2]|0;
     $94 = $27;
     $95 = (($93) + ($94<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (_PPToken_IsConcatOp($96)|0);
     if ($97) {
      $98 = $10;
      $99 = $18;
      $100 = ((($99)) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (_TokenArrayMap_Lookup($98,$101,$28)|0);
      do {
       if ($102) {
        $104 = HEAP32[$28>>2]|0;
        $105 = ((($104)) + 4|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = ($106|0)==(0);
        if (!($107)) {
         _PPTokenArray_Print($16);
         $124 = $27;
         _PPTokenArray_Erase($16,0,$124);
         _PPTokenArray_Print($16);
         $125 = HEAP32[$28>>2]|0;
         _PPTokenArray_AppendCopy($17,$125);
         break;
        }
        $108 = $27;
        $109 = (($108) + 1)|0;
        _PPTokenArray_Erase($16,0,$109);
        $110 = (_FindNoSpaceIndex($16,0)|0);
        $29 = $110;
        $111 = $29;
        $112 = ($111|0)!=(-1);
        if ($112) {
         $113 = $10;
         $114 = HEAP32[$16>>2]|0;
         $115 = $29;
         $116 = (($114) + ($115<<2)|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = ((($117)) + 4|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = (_TokenArrayMap_Lookup($113,$119,$30)|0);
         if (!($120)) {
          $121 = $27;
          $122 = (($121) + 1)|0;
          _PPTokenArray_Erase($16,0,$122);
          $123 = HEAP32[$28>>2]|0;
          _PPTokenArray_AppendCopy($17,$123);
         }
        }
       } else {
        $103 = $18;
        _PPTokenArray_PushBack($17,$103);
        $18 = 0;
       }
      } while(0);
      $126 = $18;
      _PPToken_Delete($126);
      $18 = 0;
      continue L1;
     }
    }
    HEAP32[$31>>2] = 0;
    $127 = $10;
    $128 = ($127|0)!=(0|0);
    if ($128) {
     $129 = $10;
     $130 = $18;
     $131 = ((($130)) + 4|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (_TokenArrayMap_Lookup($129,$132,$31)|0);
     if ($133) {
      ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;
      $134 = HEAP32[$31>>2]|0;
      $135 = $8;
      $136 = $12;
      $137 = $136&1;
      $138 = $13;
      $139 = $138&1;
      $140 = $14;
      _ExpandMacro($134,$135,0,$137,$139,$140,$32);
      _PPTokenArray_AppendMove($17,$32);
      _PPTokenArray_Destroy($32);
      $141 = $18;
      _PPToken_Delete($141);
      $18 = 0;
      continue L1;
     }
    }
   }
  } while(0);
  $142 = $18;
  _PPTokenArray_PushBack($17,$142);
  $18 = 0;
 }
 ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;
 $143 = $11;
 _HidenSetAdd($143,$17,$33);
 $144 = $15;
 _PPTokenArray_Swap($144,$33);
 _PPTokenArray_Destroy($17);
 _PPTokenArray_Destroy($33);
 _PPTokenArray_Destroy($16);
 STACKTOP = sp;return;
}
function _FillIn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 9|0;
 $4 = $0;
 $7 = $1&1;
 $5 = $7;
 $6 = $2;
 while(1) {
  $8 = $4;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_PPToken_IsSpace($14)|0);
  if (!($15)) {
   break;
  }
  $16 = $6;
  $17 = $4;
  $18 = (_PPTokenArray_PopFront($17)|0);
  _PPTokenArray_PushBack($16,$18);
 }
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(0);
 if ($22) {
  $$expand_i1_val = 1;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$3>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _GatherArgs($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 79|0;
 $13 = sp + 40|0;
 $16 = sp + 20|0;
 $20 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $21 = $3&1;
 $10 = $21;
 $22 = $4&1;
 $11 = $22;
 $12 = $5;
 ;HEAP32[$13>>2]=HEAP32[2028>>2]|0;HEAP32[$13+4>>2]=HEAP32[2028+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[2028+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[2028+12>>2]|0;HEAP32[$13+16>>2]=HEAP32[2028+16>>2]|0;
 $14 = 0;
 L1: while(1) {
  $23 = $14;
  $24 = $8;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  HEAP32[$16>>2] = 0;
  $28 = ((($16)) + 4|0);
  HEAP32[$28>>2] = 0;
  $29 = ((($16)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = (_mallocinit(12,$16)|0);
  $15 = $30;
  $31 = $9;
  $32 = $8;
  $33 = HEAP32[$32>>2]|0;
  $34 = $14;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $15;
  (_TokenArrayMap_SetAt($31,$38,$39)|0);
  $40 = $14;
  $41 = (($40) + 1)|0;
  $42 = $8;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)==($44|0);
  do {
   if ($45) {
    $17 = 41;
   } else {
    $46 = $11;
    $47 = $46&1;
    if ($47) {
     $48 = $14;
     $49 = (($48) + 2)|0;
     $50 = $8;
     $51 = ((($50)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($49|0)==($52|0);
     if ($53) {
      $17 = 46;
      break;
     }
    }
    $17 = 44;
   }
  } while(0);
  $18 = 0;
  while(1) {
   $54 = $7;
   $55 = $10;
   $56 = $55&1;
   _ArgToken($54,$56,1,$13);
   $57 = $7;
   _PPTokenArray_Print($57);
   $58 = $18;
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = $17;
    $61 = $60 << 24 >> 24;
    $62 = ($61|0)==(46);
    if ($62) {
     $63 = (_PPToken_IsChar($13,44)|0);
     if ($63) {
      break;
     }
     $64 = (_PPToken_IsChar($13,41)|0);
     if ($64) {
      break;
     }
    }
    $65 = $17;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)!=(46);
    if ($67) {
     $68 = $17;
     $69 = (_PPToken_IsChar($13,$68)|0);
     if ($69) {
      break;
     }
    }
   }
   $70 = (_PPToken_IsChar($13,40)|0);
   do {
    if ($70) {
     $71 = $18;
     $72 = (($71) + 1)|0;
     $18 = $72;
    } else {
     $73 = (_PPToken_IsChar($13,41)|0);
     if ($73) {
      $74 = $18;
      $75 = (($74) + -1)|0;
      $18 = $75;
      break;
     } else {
      $76 = (_PPToken_IsChar($13,0)|0);
      if ($76) {
       label = 21;
       break L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $77 = $15;
   $78 = (_PPToken_Clone($13)|0);
   _PPTokenArray_PushBack($77,$78);
  }
  $79 = $15;
  _PPTokenArray_Print($79);
  $80 = $17;
  $81 = $80 << 24 >> 24;
  $82 = ($81|0)==(46);
  if ($82) {
   $83 = (_PPToken_IsChar($13,41)|0);
   if ($83) {
    label = 25;
    break;
   }
  }
  $98 = $12;
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
  $101 = ((($13)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (___strdup($102)|0);
  $104 = $12;
  $105 = ((($104)) + 4|0);
  HEAP32[$105>>2] = $103;
  $106 = $14;
  $107 = (($106) + 1)|0;
  $14 = $107;
 }
 if ((label|0) == 21) {
  $$expand_i1_val = 0;
  HEAP8[$6>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $116 = $$pre_trunc&1;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 25) {
  $84 = $14;
  $85 = (($84) + 1)|0;
  $14 = $85;
  HEAP32[$20>>2] = 0;
  $86 = ((($20)) + 4|0);
  HEAP32[$86>>2] = 0;
  $87 = ((($20)) + 8|0);
  HEAP32[$87>>2] = 0;
  $88 = (_mallocinit(12,$20)|0);
  $19 = $88;
  $89 = $9;
  $90 = $8;
  $91 = HEAP32[$90>>2]|0;
  $92 = $14;
  $93 = (($91) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $19;
  (_TokenArrayMap_SetAt($89,$96,$97)|0);
 }
 $108 = $8;
 $109 = ((($108)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = $7;
  $113 = $10;
  $114 = $113&1;
  _ArgToken($112,$114,0,$13);
  $115 = (_PPToken_IsChar($13,41)|0);
  if ($115) {
   $$expand_i1_val2 = 0;
   HEAP8[$6>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$6>>0]|0;
   $116 = $$pre_trunc&1;
   STACKTOP = sp;return ($116|0);
  }
 }
 _PPToken_Destroy($13);
 $$expand_i1_val4 = 1;
 HEAP8[$6>>0] = $$expand_i1_val4;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $116 = $$pre_trunc&1;
 STACKTOP = sp;return ($116|0);
}
function _FindNoSpaceIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = -1;
 $6 = $3;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_PPToken_IsSpace($16)|0);
  $18 = $5;
  if (!($17)) {
   break;
  }
  $19 = (($18) + 1)|0;
  $5 = $19;
 }
 if ((label|0) == 6) {
  $20 = $4;
  STACKTOP = sp;return ($20|0);
 }
 $4 = $18;
 $20 = $4;
 STACKTOP = sp;return ($20|0);
}
function _AppendStringize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 (_StrBuilder_Append($7,4590)|0);
 $4 = 1;
 $5 = 0;
 while(1) {
  $8 = $5;
  $9 = $3;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = $5;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $6 = $17;
  $18 = $6;
  $19 = (_PPToken_IsSpace($18)|0);
  do {
   if ($19) {
    $20 = $4;
    $21 = $20&1;
    if (!($21)) {
     $4 = 1;
     $22 = $2;
     (_StrBuilder_Append($22,2318)|0);
    }
   } else {
    $23 = $6;
    $24 = (_PPToken_IsStringLit($23)|0);
    if ($24) {
     $4 = 0;
     $25 = $2;
     (_StrBuilder_Append($25,14102)|0);
     $26 = $2;
     $27 = $6;
     $28 = ((($27)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     _AppendEscaped($26,$29);
     $30 = $2;
     (_StrBuilder_Append($30,14102)|0);
     break;
    }
    $31 = $6;
    $32 = (_PPToken_IsCharLit($31)|0);
    $4 = 0;
    $33 = $2;
    if ($32) {
     (_StrBuilder_AppendChar($33,39)|0);
     $34 = $2;
     $35 = $6;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     _AppendEscaped($34,$37);
     $38 = $2;
     (_StrBuilder_AppendChar($38,39)|0);
     break;
    } else {
     $39 = $6;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     (_StrBuilder_Append($33,$41)|0);
     break;
    }
   }
  } while(0);
  $42 = $5;
  $43 = (($42) + 1)|0;
  $5 = $43;
 }
 $44 = $2;
 (_StrBuilder_Append($44,4590)|0);
 $45 = $2;
 _StrBuilder_Trim($45);
 STACKTOP = sp;return;
}
function _Glue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 28|0;
 $7 = sp + 16|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $10 = $3;
 _PPTokenArray_AppendCopy($6,$10);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $11 = $4;
 _PPTokenArray_AppendCopy($7,$11);
 $12 = $5;
 _PPTokenArray_Clear($12);
 $13 = ((($6)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $5;
  _PPTokenArray_Swap($16,$7);
  $63 = $5;
  _PPTokenArray_Print($63);
  _PPTokenArray_Destroy($6);
  _PPTokenArray_Destroy($7);
  STACKTOP = sp;return;
 }
 while(1) {
  $17 = ((($6)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)>(0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$6>>2]|0;
  $21 = ((($6)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - 1)|0;
  $24 = (($20) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_PPToken_IsSpace($25)|0);
  if (!($26)) {
   break;
  }
  _PPTokenArray_Pop($6);
 }
 while(1) {
  $27 = ((($7)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)>(0);
  if (!($29)) {
   break;
  }
  $30 = HEAP32[$7>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_PPToken_IsSpace($31)|0);
  if (!($32)) {
   break;
  }
  $33 = (_PPTokenArray_PopFront($7)|0);
  $8 = $33;
  $34 = $8;
  _PPToken_Delete($34);
  $8 = 0;
 }
 $35 = ((($6)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = ((($7)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = $5;
   _PPTokenArray_Swap($41,$6);
   $63 = $5;
   _PPTokenArray_Print($63);
   _PPTokenArray_Destroy($6);
   _PPTokenArray_Destroy($7);
   STACKTOP = sp;return;
  }
 }
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $42 = ((($6)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)>(0);
 if ($44) {
  $45 = HEAP32[$6>>2]|0;
  $46 = ((($6)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) - 1)|0;
  $49 = (($45) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  (_StrBuilder_Append($9,$52)|0);
  _PPTokenArray_Pop($6);
 }
 $53 = ((($7)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)>(0);
 if ($55) {
  $56 = HEAP32[$7>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  (_StrBuilder_Append($9,$59)|0);
  _PPTokenArray_Pop($7);
 }
 $60 = HEAP32[$9>>2]|0;
 $61 = (_PPToken_Create($60,6)|0);
 _PPTokenArray_PushBack($6,$61);
 _StrBuilder_Destroy($9);
 _PPTokenArray_AppendMove($6,$7);
 $62 = $5;
 _PPTokenArray_Swap($62,$6);
 $63 = $5;
 _PPTokenArray_Print($63);
 _PPTokenArray_Destroy($6);
 _PPTokenArray_Destroy($7);
 STACKTOP = sp;return;
}
function _HidenSetAdd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 _PPTokenArray_Clear($9);
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = $4;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = HEAP32[$15>>2]|0;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $7 = $19;
  $8 = 0;
  while(1) {
   $20 = $8;
   $21 = $3;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($20|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $7;
   $26 = ((($25)) + 8|0);
   $27 = $3;
   $28 = HEAP32[$27>>2]|0;
   $29 = $8;
   $30 = (($28) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_PPToken_Clone($31)|0);
   _PPTokenSet_PushUnique($26,$32);
   $33 = $8;
   $34 = (($33) + 1)|0;
   $8 = $34;
  }
  $35 = $5;
  $36 = $7;
  $37 = (_PPToken_Clone($36)|0);
  _PPTokenArray_PushBack($35,$37);
  $38 = $6;
  $39 = (($38) + 1)|0;
  $6 = $39;
 }
 $40 = $5;
 _PPTokenArray_Print($40);
 STACKTOP = sp;return;
}
function _AppendEscaped($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $3;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $3;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  switch ($9|0) {
  case 34: case 92:  {
   $10 = $2;
   (_StrBuilder_AppendChar($10,92)|0);
   break;
  }
  default: {
  }
  }
  $11 = $2;
  $12 = $3;
  $13 = HEAP8[$12>>0]|0;
  (_StrBuilder_AppendChar($11,$13)|0);
  $14 = $3;
  $15 = ((($14)) + 1|0);
  $3 = $15;
 }
 STACKTOP = sp;return;
}
function _ArgToken($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $9 = $1&1;
 $5 = $9;
 $10 = $2&1;
 $6 = $10;
 $7 = $3;
 $11 = $4;
 $12 = (_PPTokenArray_PopFront($11)|0);
 $8 = $12;
 $13 = $8;
 $14 = $7;
 _PPToken_Swap($13,$14);
 $15 = $8;
 _PPToken_Delete($15);
 $8 = 0;
 STACKTOP = sp;return;
}
function _TPrimaryExpressionLambda_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = $7;
 _TNodeClueList_CodePrint($10,$12,$13);
 $14 = $7;
 $15 = HEAP32[3957]|0;
 HEAP32[$vararg_buffer>>2] = $15;
 _StrBuilder_AppendFmt($14,14147,$vararg_buffer);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $16 = $6;
 $17 = ((($16)) + 40|0);
 $18 = ((($17)) + 16|0);
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 20|0);
 $9 = $21;
 $22 = $9;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $5;
  _Output_Append($8,$24,2320);
  _StrBuilder_AppendFmt($8,14158,$vararg_buffer1);
  $25 = $4;
  $26 = $5;
  $27 = $6;
  $28 = ((($27)) + 40|0);
  $29 = ((($28)) + 4|0);
  _TSpecifierQualifierList_CodePrint($25,$26,$29,$8);
  _StrBuilder_AppendFmt($8,2318,$vararg_buffer3);
  $30 = HEAP32[3957]|0;
  HEAP32[$vararg_buffer5>>2] = $30;
  _StrBuilder_AppendFmt($8,14166,$vararg_buffer5);
  $31 = $4;
  $32 = $5;
  $33 = $9;
  _ParameterTypeList_CodePrint($31,$32,$33,$8);
  $34 = $5;
  _Output_Append($8,$34,4604);
 }
 $35 = HEAP32[3957]|0;
 $36 = (($35) + 1)|0;
 HEAP32[3957] = $36;
 $37 = $4;
 $38 = $5;
 $39 = $6;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 _TCompoundStatement_CodePrint($37,$38,$41,$8);
 $42 = $5;
 $43 = ((($42)) + 476|0);
 $44 = $5;
 _Output_Append($43,$44,2320);
 $45 = $5;
 $46 = ((($45)) + 476|0);
 $47 = HEAP32[$8>>2]|0;
 (_StrBuilder_Append($46,$47)|0);
 _StrBuilder_Destroy($8);
 STACKTOP = sp;return;
}
function _ParameterTypeList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _TParameterList_CodePrint($8,$9,$10,$11);
 $12 = $6;
 $13 = ((($12)) + 24|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $5;
 $17 = $6;
 $18 = ((($17)) + 16|0);
 $19 = $7;
 _TNodeClueList_CodePrint($16,$18,$19);
 $20 = $7;
 $21 = $5;
 _Output_Append($20,$21,5051);
 STACKTOP = sp;return;
}
function _TCompoundStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 20|0;
 $9 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $12 = $5;
 $13 = ((($12)) + 524|0);
 _StrBuilder_Swap($8,$13);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $14 = $5;
 $15 = ((($14)) + 512|0);
 $16 = HEAP32[$15>>2]|0;
 (_StrBuilder_Set($9,$16)|0);
 $17 = $5;
 $18 = $6;
 $19 = ((($18)) + 16|0);
 $20 = $7;
 _TNodeClueList_CodePrint($17,$19,$20);
 $21 = $7;
 $22 = $5;
 _Output_Append($21,$22,4642);
 $10 = 0;
 while(1) {
  $23 = $10;
  $24 = $6;
  $25 = ((($24)) + 4|0);
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($23|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $6;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $10;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $11 = $34;
  $35 = $4;
  $36 = $5;
  $37 = $11;
  $38 = $7;
  _TBlockItem_CodePrint($35,$36,$37,$38);
  $39 = $10;
  $40 = (($39) + 1)|0;
  $10 = $40;
 }
 $41 = $7;
 $42 = $5;
 $43 = $5;
 $44 = ((($43)) + 524|0);
 $45 = HEAP32[$44>>2]|0;
 _Output_Append($41,$42,$45);
 $46 = $5;
 $47 = $6;
 $48 = ((($47)) + 24|0);
 $49 = $7;
 _TNodeClueList_CodePrint($46,$48,$49);
 $50 = $7;
 $51 = $5;
 _Output_Append($50,$51,4646);
 $52 = $5;
 $53 = ((($52)) + 524|0);
 _StrBuilder_Swap($8,$53);
 _StrBuilder_Destroy($8);
 $54 = $5;
 $55 = ((($54)) + 512|0);
 _StrBuilder_Swap($9,$55);
 _StrBuilder_Destroy($9);
 STACKTOP = sp;return;
}
function _TParameterList_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 while(1) {
  $11 = $8;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = $8;
  $16 = $7;
  _TParameter_CodePrint($13,$14,$15,$16);
  $17 = $8;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $8 = $19;
 }
 STACKTOP = sp;return;
}
function _TParameter_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _memset(($8|0),0,200)|0;
 $10 = $6;
 $11 = ((($10)) + 20|0);
 $12 = (_Declarator_IsAutoArray($11)|0);
 $13 = $12&1;
 $9 = $13;
 $14 = $9;
 $15 = $14&1;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = ((($18)) + 8|0);
 if ($15) {
  _IntanciateTypeIfNecessary($16,$17,$19,$8,200);
  $20 = $7;
  $21 = $5;
  _Output_Append($20,$21,$8);
  $22 = $7;
  $23 = $5;
  _Output_Append($22,$23,4606);
 } else {
  $24 = $7;
  _TDeclarationSpecifiers_CodePrint($16,$17,$19,$24);
 }
 $25 = $4;
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 20|0);
 $29 = $7;
 _TDeclarator_CodePrint($25,$26,$28,$29);
 $30 = $6;
 $31 = ((($30)) + 40|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&1;
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $5;
 $35 = $6;
 $36 = ((($35)) + 32|0);
 $37 = $7;
 _TNodeClueList_CodePrint($34,$36,$37);
 $38 = $7;
 $39 = $5;
 _Output_Append($38,$39,4610);
 STACKTOP = sp;return;
}
function _IntanciateTypeIfNecessary($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $10 = sp + 56|0;
 $11 = sp + 52|0;
 $13 = sp + 40|0;
 $14 = sp + 36|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = $6;
 $16 = (_IsActive($15)|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $17 = $7;
 _DeclarationSpecifiers_PrintNameMangling($17,$10);
 $18 = $8;
 $19 = $9;
 $20 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer>>2] = $20;
 (_snprintf($18,$19,14178,$vararg_buffer)|0);
 HEAP32[$11>>2] = 0;
 $21 = $6;
 $22 = ((($21)) + 488|0);
 $23 = $8;
 $24 = (_HashMap_Lookup($22,$23,$11)|0);
 $25 = $24&1;
 $12 = $25;
 $26 = $12;
 $27 = $26&1;
 if (!($27)) {
  ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
  $28 = $5;
  $29 = $6;
  $30 = $7;
  _TDeclarationSpecifiers_CodePrint($28,$29,$30,$13);
  HEAP32[$14>>2] = 0;
  $31 = $6;
  $32 = ((($31)) + 488|0);
  $33 = $8;
  $34 = HEAP32[$11>>2]|0;
  (_HashMap_SetAt($32,$33,$34,$14)|0);
  $35 = $6;
  $36 = ((($35)) + 476|0);
  $37 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $37;
  _StrBuilder_AppendFmt($36,14195,$vararg_buffer1);
  $38 = $6;
  $39 = ((($38)) + 476|0);
  $40 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $40;
  _StrBuilder_AppendFmt($39,14228,$vararg_buffer4);
  $41 = $6;
  $42 = ((($41)) + 476|0);
  $43 = HEAP32[$10>>2]|0;
  $44 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $43;
  $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $44;
  _StrBuilder_AppendFmt($42,14261,$vararg_buffer7);
  $45 = $6;
  $46 = ((($45)) + 476|0);
  _StrBuilder_AppendFmt($46,5636,$vararg_buffer11);
  _StrBuilder_Destroy($13);
 }
 _StrBuilder_Destroy($10);
 STACKTOP = sp;return;
}
function _TBlockItem_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 L1: do {
  if (!($9)) {
   $10 = $6;
   $11 = HEAP32[$10>>2]|0;
   do {
    switch ($11|0) {
    case 21:  {
     $64 = $5;
     $65 = $6;
     $66 = $7;
     _TAsmStatement_CodePrint($64,$65,$66);
     break L1;
     break;
    }
    case 2:  {
     $12 = $4;
     $13 = $5;
     $14 = $6;
     $15 = $7;
     _TStaticAssertDeclaration_CodePrint($12,$13,$14,$15);
     break L1;
     break;
    }
    case 17:  {
     $16 = $4;
     $17 = $5;
     $18 = $6;
     $19 = $7;
     _TSwitchStatement_CodePrint($16,$17,$18,$19);
     break L1;
     break;
    }
    case 20:  {
     $20 = $4;
     $21 = $5;
     $22 = $6;
     $23 = $7;
     _TJumpStatement_CodePrint($20,$21,$22,$23);
     break L1;
     break;
    }
    case 29:  {
     $24 = $4;
     $25 = $5;
     $26 = $6;
     $27 = $7;
     _DeferStatement_CodePrint($24,$25,$26,$27);
     break L1;
     break;
    }
    case 19:  {
     $28 = $4;
     $29 = $5;
     $30 = $6;
     $31 = $7;
     _TForStatement_CodePrint($28,$29,$30,$31);
     break L1;
     break;
    }
    case 25:  {
     $32 = $4;
     $33 = $5;
     $34 = $6;
     $35 = $7;
     _TIfStatement_CodePrint($32,$33,$34,$35);
     break L1;
     break;
    }
    case 22:  {
     $36 = $4;
     $37 = $5;
     $38 = $6;
     $39 = $7;
     _TWhileStatement_CodePrint($36,$37,$38,$39);
     break L1;
     break;
    }
    case 23:  {
     $40 = $4;
     $41 = $5;
     $42 = $6;
     $43 = $7;
     _TDoStatement_CodePrint($40,$41,$42,$43);
     break L1;
     break;
    }
    case 24:  {
     $44 = $4;
     $45 = $5;
     $46 = $6;
     $47 = $7;
     _TTryBlockStatement_CodePrint($44,$45,$46,$47);
     break L1;
     break;
    }
    case 1:  {
     $48 = $4;
     $49 = $5;
     $50 = $6;
     $51 = $7;
     _TDeclaration_CodePrint($48,$49,$50,$51);
     break L1;
     break;
    }
    case 18:  {
     $52 = $4;
     $53 = $5;
     $54 = $6;
     $55 = $7;
     _TLabeledStatement_CodePrint($52,$53,$54,$55);
     break L1;
     break;
    }
    case 15:  {
     $56 = $4;
     $57 = $5;
     $58 = $6;
     $59 = $7;
     _TCompoundStatement_CodePrint($56,$57,$58,$59);
     break L1;
     break;
    }
    case 16:  {
     $60 = $4;
     $61 = $5;
     $62 = $6;
     $63 = $7;
     _TExpressionStatement_CodePrint($60,$61,$62,$63);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TStaticAssertDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $5;
 $13 = ((($12)) + 404|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)>=(1);
 $16 = $7;
 $17 = $5;
 if (!($15)) {
  _Output_Append($16,$17,2318);
  STACKTOP = sp;return;
 }
 _Output_Append($16,$17,14315);
 $18 = $5;
 $19 = $6;
 $20 = ((($19)) + 20|0);
 $21 = $7;
 _TNodeClueList_CodePrint($18,$20,$21);
 $22 = $7;
 $23 = $5;
 _Output_Append($22,$23,4602);
 $24 = $4;
 $25 = $5;
 $26 = $6;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $7;
 _TExpression_CodePrint($24,$25,$28,$29);
 $30 = $6;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $7;
  $35 = $5;
  _Output_Append($34,$35,4610);
  $36 = $5;
  $37 = $6;
  $38 = ((($37)) + 28|0);
  $39 = $7;
  _TNodeClueList_CodePrint($36,$38,$39);
  $40 = $5;
  $41 = $6;
  $42 = ((($41)) + 36|0);
  $43 = $7;
  _TNodeClueList_CodePrint($40,$42,$43);
  $44 = $7;
  $45 = $5;
  $46 = $6;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  _Output_Append($44,$45,$48);
  $49 = $5;
  $50 = $6;
  $51 = ((($50)) + 44|0);
  $52 = $7;
  _TNodeClueList_CodePrint($49,$51,$52);
 } else {
  $53 = $5;
  $54 = ((($53)) + 404|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55>>>0)<(3);
  if ($56) {
   $57 = $7;
   $58 = $5;
   _Output_Append($57,$58,14330);
  }
 }
 $59 = $7;
 $60 = $5;
 _Output_Append($59,$60,4604);
 $61 = $5;
 $62 = $6;
 $63 = ((($62)) + 52|0);
 $64 = $7;
 _TNodeClueList_CodePrint($61,$63,$64);
 $65 = $7;
 $66 = $5;
 _Output_Append($65,$66,4618);
 STACKTOP = sp;return;
}
function _TSwitchStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,4916);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 20|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,4602);
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _TExpression_CodePrint($20,$21,$24,$25);
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 28|0);
 $29 = $7;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $7;
 $31 = $5;
 _Output_Append($30,$31,4604);
 $32 = $4;
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $7;
 _TStatement_CodePrint($32,$33,$36,$37);
 STACKTOP = sp;return;
}
function _TJumpStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 24|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 16|0);
 $12 = $7;
 _TNodeClueList_CodePrint($9,$11,$12);
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 L1: do {
  switch ($15|0) {
  case 100:  {
   $16 = $7;
   $17 = $5;
   _Output_Append($16,$17,4792);
   $18 = $5;
   $19 = $6;
   $20 = ((($19)) + 24|0);
   $21 = $7;
   _TNodeClueList_CodePrint($18,$20,$21);
   $22 = $7;
   $23 = $5;
   $24 = $6;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _Output_Append($22,$23,$26);
   break;
  }
  case 91:  {
   $27 = $7;
   $28 = $5;
   _Output_Append($27,$28,4677);
   break;
  }
  case 87:  {
   $29 = $7;
   $30 = $5;
   _Output_Append($29,$30,4655);
   break;
  }
  case 113:  {
   $31 = $5;
   $32 = ((($31)) + 452|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0|0);
   $35 = $7;
   $36 = $5;
   if (!($34)) {
    _Output_Append($35,$36,14366);
    break L1;
   }
   _Output_Append($35,$36,14334);
   $37 = HEAP32[3958]|0;
   HEAP32[$vararg_buffer>>2] = $37;
   (_snprintf($8,20,14344,$vararg_buffer)|0);
   $38 = $5;
   $39 = ((($38)) + 512|0);
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)>(0);
   if ($42) {
    $43 = $7;
    $44 = $5;
    _Output_Append($43,$44,4642);
   }
   $45 = $7;
   $46 = $5;
   $47 = $5;
   $48 = ((($47)) + 512|0);
   $49 = HEAP32[$48>>2]|0;
   _Output_Append($45,$46,$49);
   $50 = $7;
   $51 = $5;
   _Output_Append($50,$51,14347);
   $52 = $7;
   $53 = $5;
   _Output_Append($52,$53,$8);
   $54 = $5;
   $55 = ((($54)) + 512|0);
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)>(0);
   if ($58) {
    $59 = $7;
    $60 = $5;
    _Output_Append($59,$60,4618);
    $61 = $7;
    $62 = $5;
    _Output_Append($61,$62,4646);
   }
   break;
  }
  case 112:  {
   $63 = $6;
   $64 = ((($63)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0|0);
   $67 = $5;
   $68 = ((($67)) + 512|0);
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   if ($66) {
    $71 = ($70|0)!=(0);
    $72 = $7;
    $73 = $5;
    if ($71) {
     _Output_Append($72,$73,2318);
     $74 = $7;
     $75 = $5;
     $76 = $5;
     $77 = ((($76)) + 536|0);
     $78 = HEAP32[$77>>2]|0;
     _Output_Append($74,$75,$78);
     $79 = $7;
     $80 = $5;
     _Output_Append($79,$80,14414);
     $81 = $4;
     $82 = $5;
     $83 = $6;
     $84 = ((($83)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $7;
     _TExpression_CodePrint($81,$82,$85,$86);
     $87 = $7;
     $88 = $5;
     _Output_Append($87,$88,4618);
     $89 = $7;
     $90 = $5;
     $91 = $5;
     $92 = ((($91)) + 512|0);
     $93 = HEAP32[$92>>2]|0;
     _Output_Append($89,$90,$93);
     $94 = $7;
     $95 = $5;
     _Output_Append($94,$95,14426);
     break L1;
    } else {
     _Output_Append($72,$73,4869);
     $96 = $4;
     $97 = $5;
     $98 = $6;
     $99 = ((($98)) + 12|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $7;
     _TExpression_CodePrint($96,$97,$100,$101);
     break L1;
    }
   } else {
    $102 = ($70|0)>(0);
    if ($102) {
     $103 = $7;
     $104 = $5;
     $105 = $5;
     $106 = ((($105)) + 512|0);
     $107 = HEAP32[$106>>2]|0;
     _Output_Append($103,$104,$107);
    }
    $108 = $7;
    $109 = $5;
    _Output_Append($108,$109,4869);
    break L1;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $110 = $5;
 $111 = $6;
 $112 = ((($111)) + 32|0);
 $113 = $7;
 _TNodeClueList_CodePrint($110,$112,$113);
 $114 = $7;
 $115 = $5;
 _Output_Append($114,$115,4618);
 STACKTOP = sp;return;
}
function _DeferStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 12|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = $6;
 $12 = ((($11)) + 8|0);
 $13 = $7;
 _TNodeClueList_CodePrint($10,$12,$13);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _TStatement_CodePrint($14,$15,$18,$8);
 $19 = $5;
 $20 = ((($19)) + 524|0);
 $21 = HEAP32[$20>>2]|0;
 (_StrBuilder_Append($8,$21)|0);
 $22 = $5;
 $23 = ((($22)) + 524|0);
 _StrBuilder_Swap($23,$8);
 _StrBuilder_Destroy($8);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $24 = $4;
 $25 = $5;
 $26 = $6;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 _TStatement_CodePrint($24,$25,$28,$9);
 $29 = $5;
 $30 = ((($29)) + 512|0);
 $31 = HEAP32[$30>>2]|0;
 (_StrBuilder_Append($9,$31)|0);
 $32 = $5;
 $33 = ((($32)) + 512|0);
 _StrBuilder_Swap($33,$9);
 _StrBuilder_Destroy($9);
 STACKTOP = sp;return;
}
function _TForStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 24|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,4788);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 32|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,4602);
 $20 = $6;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 $24 = $4;
 $25 = $5;
 $26 = $6;
 if (!($23)) {
  $52 = ((($26)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $7;
  _TExpression_CodePrint($24,$25,$53,$54);
  $55 = $5;
  $56 = $6;
  $57 = ((($56)) + 40|0);
  $58 = $7;
  _TNodeClueList_CodePrint($55,$57,$58);
  $59 = $7;
  $60 = $5;
  _Output_Append($59,$60,4618);
  $61 = $4;
  $62 = $5;
  $63 = $6;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $7;
  _TExpression_CodePrint($61,$62,$65,$66);
  $67 = $5;
  $68 = $6;
  $69 = ((($68)) + 48|0);
  $70 = $7;
  _TNodeClueList_CodePrint($67,$69,$70);
  $71 = $7;
  $72 = $5;
  _Output_Append($71,$72,4618);
  $73 = $4;
  $74 = $5;
  $75 = $6;
  $76 = ((($75)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $7;
  _TExpression_CodePrint($73,$74,$77,$78);
  $79 = $5;
  $80 = $6;
  $81 = ((($80)) + 56|0);
  $82 = $7;
  _TNodeClueList_CodePrint($79,$81,$82);
  $83 = $7;
  $84 = $5;
  _Output_Append($83,$84,4604);
  $85 = $4;
  $86 = $5;
  $87 = $6;
  $88 = ((($87)) + 20|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $7;
  _TStatement_CodePrint($85,$86,$89,$90);
  STACKTOP = sp;return;
 }
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $7;
 _TAnyDeclaration_CodePrint($24,$25,$28,$29);
 $30 = $6;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $4;
  $35 = $5;
  $36 = $6;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  _TExpression_CodePrint($34,$35,$38,$39);
 }
 $40 = $5;
 $41 = $6;
 $42 = ((($41)) + 40|0);
 $43 = $7;
 _TNodeClueList_CodePrint($40,$42,$43);
 $44 = $7;
 $45 = $5;
 _Output_Append($44,$45,4618);
 $46 = $4;
 $47 = $5;
 $48 = $6;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $7;
 _TExpression_CodePrint($46,$47,$50,$51);
 $79 = $5;
 $80 = $6;
 $81 = ((($80)) + 56|0);
 $82 = $7;
 _TNodeClueList_CodePrint($79,$81,$82);
 $83 = $7;
 $84 = $5;
 _Output_Append($83,$84,4604);
 $85 = $4;
 $86 = $5;
 $87 = $6;
 $88 = ((($87)) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $7;
 _TStatement_CodePrint($85,$86,$89,$90);
 STACKTOP = sp;return;
}
function _TIfStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 28|0);
 $12 = $7;
 _TNodeClueList_CodePrint($9,$11,$12);
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  label = 3;
 } else {
  $17 = $6;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   label = 3;
  } else {
   $49 = $7;
   $50 = $5;
   _Output_Append($49,$50,4797);
   $51 = $5;
   $52 = $6;
   $53 = ((($52)) + 36|0);
   $54 = $7;
   _TNodeClueList_CodePrint($51,$53,$54);
   $55 = $7;
   $56 = $5;
   _Output_Append($55,$56,4602);
  }
 }
 if ((label|0) == 3) {
  $21 = $6;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $7;
   $26 = $5;
   _Output_Append($25,$26,4642);
   $27 = $4;
   $28 = $5;
   $29 = $6;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $7;
   _TAnyDeclaration_CodePrint($27,$28,$31,$32);
  } else {
   $33 = $4;
   $34 = $5;
   $35 = $6;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $7;
   _TExpression_CodePrint($33,$34,$37,$38);
   $39 = $7;
   $40 = $5;
   _Output_Append($39,$40,4618);
  }
  $41 = $5;
  $42 = $6;
  $43 = ((($42)) + 36|0);
  $44 = $7;
  _TNodeClueList_CodePrint($41,$43,$44);
  $45 = $7;
  $46 = $5;
  _Output_Append($45,$46,4797);
  $47 = $7;
  $48 = $5;
  _Output_Append($47,$48,4602);
 }
 $57 = $4;
 $58 = $5;
 $59 = $6;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $7;
 _TExpression_CodePrint($57,$58,$61,$62);
 $63 = $5;
 $64 = $6;
 $65 = ((($64)) + 60|0);
 $66 = $7;
 _TNodeClueList_CodePrint($63,$65,$66);
 $67 = $7;
 $68 = $5;
 _Output_Append($67,$68,4604);
 $69 = $6;
 $70 = ((($69)) + 20|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(15);
 if ($73) {
  $74 = $7;
  $75 = $5;
  _Output_Append($74,$75,16416);
 }
 $76 = $6;
 $77 = ((($76)) + 20|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 do {
  if ($79) {
   $80 = $6;
   $81 = ((($80)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   if ($83) {
    ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
    $84 = $4;
    $85 = $5;
    $86 = $6;
    $87 = ((($86)) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    _TExpression_CodePrint($84,$85,$88,$8);
    $89 = $5;
    $90 = ((($89)) + 512|0);
    $91 = HEAP32[$90>>2]|0;
    (_StrBuilder_Append($8,$91)|0);
    (_StrBuilder_Append($8,4618)|0);
    $92 = $5;
    $93 = ((($92)) + 512|0);
    _StrBuilder_Swap($93,$8);
    _StrBuilder_Destroy($8);
    $94 = $7;
    $95 = $5;
    _Output_Append($94,$95,4642);
    $96 = $4;
    $97 = $5;
    $98 = $6;
    $99 = ((($98)) + 20|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $7;
    _TStatement_CodePrint($96,$97,$100,$101);
    $102 = $4;
    $103 = $5;
    $104 = $6;
    $105 = ((($104)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $7;
    _TExpression_CodePrint($102,$103,$106,$107);
    $108 = $7;
    $109 = $5;
    _Output_Append($108,$109,4618);
    $110 = $7;
    $111 = $5;
    _Output_Append($110,$111,4646);
    break;
   } else {
    $112 = $4;
    $113 = $5;
    $114 = $6;
    $115 = ((($114)) + 20|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $7;
    _TStatement_CodePrint($112,$113,$116,$117);
    break;
   }
  }
 } while(0);
 $118 = $6;
 $119 = ((($118)) + 24|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0|0);
 if ($121) {
  $122 = $5;
  $123 = $6;
  $124 = ((($123)) + 52|0);
  $125 = $7;
  _TNodeClueList_CodePrint($122,$124,$125);
  $126 = $7;
  $127 = $5;
  _Output_Append($126,$127,4765);
  $128 = $4;
  $129 = $5;
  $130 = $6;
  $131 = ((($130)) + 24|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $7;
  _TStatement_CodePrint($128,$129,$132,$133);
 }
 $134 = $6;
 $135 = ((($134)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $138 = $7;
 $139 = $5;
 _Output_Append($138,$139,4646);
 STACKTOP = sp;return;
}
function _TWhileStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,4966);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 20|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,4602);
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 _TExpression_CodePrint($20,$21,$24,$25);
 $26 = $5;
 $27 = $6;
 $28 = ((($27)) + 28|0);
 $29 = $7;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $7;
 $31 = $5;
 _Output_Append($30,$31,4604);
 $32 = $4;
 $33 = $5;
 $34 = $6;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $7;
 _TStatement_CodePrint($32,$33,$36,$37);
 STACKTOP = sp;return;
}
function _TDoStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 _Output_Append($12,$13,4755);
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $7;
 _TStatement_CodePrint($14,$15,$18,$19);
 $20 = $5;
 $21 = $6;
 $22 = ((($21)) + 20|0);
 $23 = $7;
 _TNodeClueList_CodePrint($20,$22,$23);
 $24 = $6;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 $28 = $7;
 $29 = $5;
 if ($27) {
  _Output_Append($28,$29,4966);
  $30 = $5;
  $31 = $6;
  $32 = ((($31)) + 28|0);
  $33 = $7;
  _TNodeClueList_CodePrint($30,$32,$33);
  $34 = $7;
  $35 = $5;
  _Output_Append($34,$35,4602);
  $36 = $4;
  $37 = $5;
  $38 = $6;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $7;
  _TExpression_CodePrint($36,$37,$40,$41);
  $42 = $5;
  $43 = $6;
  $44 = ((($43)) + 36|0);
  $45 = $7;
  _TNodeClueList_CodePrint($42,$44,$45);
  $46 = $7;
  $47 = $5;
  _Output_Append($46,$47,4604);
  $48 = $5;
  $49 = $6;
  $50 = ((($49)) + 44|0);
  $51 = $7;
  _TNodeClueList_CodePrint($48,$50,$51);
  $52 = $7;
  $53 = $5;
  _Output_Append($52,$53,4618);
  STACKTOP = sp;return;
 } else {
  _Output_Append($28,$29,14441);
  STACKTOP = sp;return;
 }
}
function _TTryBlockStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 24|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = $6;
 $12 = ((($11)) + 12|0);
 $13 = $7;
 _TNodeClueList_CodePrint($10,$12,$13);
 $14 = $5;
 $15 = ((($14)) + 452|0);
 $16 = HEAP32[$15>>2]|0;
 $8 = $16;
 $17 = $6;
 $18 = $5;
 $19 = ((($18)) + 452|0);
 HEAP32[$19>>2] = $17;
 $20 = HEAP32[3958]|0;
 $21 = (($20) + 1)|0;
 HEAP32[3958] = $21;
 $22 = HEAP32[3958]|0;
 HEAP32[$vararg_buffer>>2] = $22;
 (_snprintf($9,20,14344,$vararg_buffer)|0);
 $23 = $5;
 $24 = $6;
 $25 = ((($24)) + 12|0);
 $26 = $7;
 _TNodeClueList_CodePrint($23,$25,$26);
 $27 = $7;
 $28 = $5;
 _Output_Append($27,$28,14452);
 $29 = $4;
 $30 = $5;
 $31 = $6;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 _TCompoundStatement_CodePrint($29,$30,$33,$34);
 $35 = $6;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $5;
  $40 = $6;
  $41 = ((($40)) + 20|0);
  $42 = $7;
  _TNodeClueList_CodePrint($39,$41,$42);
  $43 = $5;
  $44 = $6;
  $45 = ((($44)) + 28|0);
  $46 = $7;
  _TNodeClueList_CodePrint($43,$45,$46);
  $47 = $5;
  $48 = $6;
  $49 = ((($48)) + 36|0);
  $50 = $7;
  _TNodeClueList_CodePrint($47,$49,$50);
  $51 = $7;
  $52 = $5;
  _Output_Append($51,$52,14467);
  $53 = $7;
  $54 = $5;
  _Output_Append($53,$54,$9);
  $55 = $7;
  $56 = $5;
  _Output_Append($55,$56,4616);
  $57 = $4;
  $58 = $5;
  $59 = $6;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $7;
  _TCompoundStatement_CodePrint($57,$58,$61,$62);
  $69 = HEAP32[3958]|0;
  $70 = (($69) + -1)|0;
  HEAP32[3958] = $70;
  $71 = $8;
  $72 = $5;
  $73 = ((($72)) + 452|0);
  HEAP32[$73>>2] = $71;
  STACKTOP = sp;return;
 } else {
  $63 = $7;
  $64 = $5;
  _Output_Append($63,$64,14495);
  $65 = $7;
  $66 = $5;
  _Output_Append($65,$66,$9);
  $67 = $7;
  $68 = $5;
  _Output_Append($67,$68,14508);
  $69 = HEAP32[3958]|0;
  $70 = (($69) + -1)|0;
  HEAP32[3958] = $70;
  $71 = $8;
  $72 = $5;
  $73 = ((($72)) + 452|0);
  HEAP32[$73>>2] = $71;
  STACKTOP = sp;return;
 }
}
function _TDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $9 = sp + 204|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $6;
 $14 = ((($13)) + 16|0);
 $15 = (_HasAutoArray($14)|0);
 $16 = $15&1;
 $8 = $16;
 $17 = $8;
 $18 = $17&1;
 if ($18) {
  ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  $19 = $4;
  $20 = $5;
  $21 = $6;
  $22 = ((($21)) + 4|0);
  _TDeclarationSpecifiers_CodePrint($19,$20,$22,$9);
  $23 = $4;
  $24 = $5;
  $25 = $6;
  $26 = ((($25)) + 4|0);
  $27 = $6;
  $28 = ((($27)) + 16|0);
  $29 = (_TInitDeclaratorList_CodePrint($23,0,$24,$26,$28,$9)|0);
  $10 = $29;
  $30 = $5;
  _Output_Append($9,$30,4618);
  $31 = $10;
  $32 = ($31|0)>(0);
  if ($32) {
   $33 = $7;
   $34 = $5;
   $35 = HEAP32[$9>>2]|0;
   _Output_Append($33,$34,$35);
  }
  _StrBuilder_Destroy($9);
  _memset(($11|0),0,200)|0;
  $36 = $4;
  $37 = $5;
  $38 = $6;
  $39 = ((($38)) + 4|0);
  _IntanciateTypeIfNecessary($36,$37,$39,$11,200);
  $40 = $7;
  $41 = $5;
  _Output_Append($40,$41,$11);
  $42 = $4;
  $43 = $5;
  $44 = $6;
  $45 = ((($44)) + 4|0);
  $46 = $6;
  $47 = ((($46)) + 16|0);
  $48 = $7;
  (_TInitDeclaratorList_CodePrint($42,1,$43,$45,$47,$48)|0);
 } else {
  $49 = $4;
  $50 = $5;
  $51 = $6;
  $52 = ((($51)) + 4|0);
  $53 = $7;
  _TDeclarationSpecifiers_CodePrint($49,$50,$52,$53);
  $54 = $4;
  $55 = $5;
  $56 = $6;
  $57 = ((($56)) + 4|0);
  $58 = $6;
  $59 = ((($58)) + 16|0);
  $60 = $7;
  (_TInitDeclaratorList_CodePrint($54,0,$55,$57,$59,$60)|0);
 }
 $61 = $6;
 $62 = ((($61)) + 24|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 $65 = $5;
 if (!($64)) {
  $111 = $6;
  $112 = ((($111)) + 60|0);
  $113 = $7;
  _TNodeClueList_CodePrint($65,$112,$113);
  $114 = $7;
  $115 = $5;
  _Output_Append($114,$115,4618);
  STACKTOP = sp;return;
 }
 $66 = ((($65)) + 536|0);
 _StrBuilder_Clear($66);
 $67 = $5;
 $68 = ((($67)) + 412|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 $71 = $70&1;
 $12 = $71;
 $72 = $5;
 $73 = ((($72)) + 412|0);
 HEAP8[$73>>0] = 1;
 $74 = $4;
 $75 = $5;
 $76 = $6;
 $77 = ((($76)) + 4|0);
 $78 = $5;
 $79 = ((($78)) + 536|0);
 _TDeclarationSpecifiers_CodePrint($74,$75,$77,$79);
 $80 = $6;
 $81 = ((($80)) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0|0);
 if ($83) {
  $84 = $6;
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0|0);
  if ($88) {
   $89 = $5;
   $90 = $6;
   $91 = ((($90)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = HEAP32[$92>>2]|0;
   $94 = $5;
   $95 = ((($94)) + 536|0);
   _TPointerList_CodePrint($89,$93,$95);
  }
 }
 $96 = $12;
 $97 = $96&1;
 $98 = $5;
 $99 = ((($98)) + 412|0);
 $100 = $97&1;
 HEAP8[$99>>0] = $100;
 $101 = $6;
 $102 = ((($101)) + 24|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 if (!($104)) {
  STACKTOP = sp;return;
 }
 $105 = $4;
 $106 = $5;
 $107 = $6;
 $108 = ((($107)) + 24|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $7;
 _TCompoundStatement_CodePrint($105,$106,$109,$110);
 STACKTOP = sp;return;
}
function _TLabeledStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(88);
 if ($11) {
  $12 = $5;
  $13 = $6;
  $14 = ((($13)) + 20|0);
  $15 = $7;
  _TNodeClueList_CodePrint($12,$14,$15);
  $16 = $7;
  $17 = $5;
  _Output_Append($16,$17,4661);
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $4;
   $23 = $5;
   $24 = $6;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $7;
   _TExpression_CodePrint($22,$23,$26,$27);
  }
  $28 = $5;
  $29 = $6;
  $30 = ((($29)) + 28|0);
  $31 = $7;
  _TNodeClueList_CodePrint($28,$30,$31);
  $32 = $7;
  $33 = $5;
  _Output_Append($32,$33,4616);
  $34 = $4;
  $35 = $5;
  $36 = $6;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  _TStatement_CodePrint($34,$35,$38,$39);
  STACKTOP = sp;return;
 }
 $40 = $6;
 $41 = ((($40)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(92);
 if ($43) {
  $44 = $5;
  $45 = $6;
  $46 = ((($45)) + 20|0);
  $47 = $7;
  _TNodeClueList_CodePrint($44,$46,$47);
  $48 = $7;
  $49 = $5;
  _Output_Append($48,$49,4686);
  $50 = $5;
  $51 = $6;
  $52 = ((($51)) + 28|0);
  $53 = $7;
  _TNodeClueList_CodePrint($50,$52,$53);
  $54 = $7;
  $55 = $5;
  _Output_Append($54,$55,4616);
  $56 = $4;
  $57 = $5;
  $58 = $6;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $7;
  _TStatement_CodePrint($56,$57,$60,$61);
  STACKTOP = sp;return;
 }
 $62 = $6;
 $63 = ((($62)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(9);
 if (!($65)) {
  STACKTOP = sp;return;
 }
 $66 = $5;
 $67 = $6;
 $68 = ((($67)) + 20|0);
 $69 = $7;
 _TNodeClueList_CodePrint($66,$68,$69);
 $70 = $7;
 $71 = $5;
 $72 = $6;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 _Output_Append($70,$71,$74);
 $75 = $5;
 $76 = $6;
 $77 = ((($76)) + 28|0);
 $78 = $7;
 _TNodeClueList_CodePrint($75,$77,$78);
 $79 = $7;
 $80 = $5;
 _Output_Append($79,$80,4616);
 $81 = $4;
 $82 = $5;
 $83 = $6;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $7;
 _TStatement_CodePrint($81,$82,$85,$86);
 STACKTOP = sp;return;
}
function _TExpressionStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $7;
 _TExpression_CodePrint($8,$9,$12,$13);
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 8|0);
 $17 = $7;
 _TNodeClueList_CodePrint($14,$16,$17);
 $18 = $7;
 $19 = $5;
 _Output_Append($18,$19,4618);
 STACKTOP = sp;return;
}
function _TAsmStatement_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = $3;
 _Output_Append($6,$7,14511);
 STACKTOP = sp;return;
}
function _TStatement_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ($8|0)==(0|0);
 L1: do {
  if (!($9)) {
   $10 = $6;
   $11 = HEAP32[$10>>2]|0;
   do {
    switch ($11|0) {
    case 16:  {
     $12 = $4;
     $13 = $5;
     $14 = $6;
     $15 = $7;
     _TExpressionStatement_CodePrint($12,$13,$14,$15);
     break L1;
     break;
    }
    case 17:  {
     $16 = $4;
     $17 = $5;
     $18 = $6;
     $19 = $7;
     _TSwitchStatement_CodePrint($16,$17,$18,$19);
     break L1;
     break;
    }
    case 18:  {
     $20 = $4;
     $21 = $5;
     $22 = $6;
     $23 = $7;
     _TLabeledStatement_CodePrint($20,$21,$22,$23);
     break L1;
     break;
    }
    case 19:  {
     $24 = $4;
     $25 = $5;
     $26 = $6;
     $27 = $7;
     _TForStatement_CodePrint($24,$25,$26,$27);
     break L1;
     break;
    }
    case 29:  {
     $28 = $4;
     $29 = $5;
     $30 = $6;
     $31 = $7;
     _DeferStatement_CodePrint($28,$29,$30,$31);
     break L1;
     break;
    }
    case 20:  {
     $32 = $4;
     $33 = $5;
     $34 = $6;
     $35 = $7;
     _TJumpStatement_CodePrint($32,$33,$34,$35);
     break L1;
     break;
    }
    case 21:  {
     $36 = $5;
     $37 = $6;
     $38 = $7;
     _TAsmStatement_CodePrint($36,$37,$38);
     break L1;
     break;
    }
    case 15:  {
     $39 = $4;
     $40 = $5;
     $41 = $6;
     $42 = $7;
     _TCompoundStatement_CodePrint($39,$40,$41,$42);
     break L1;
     break;
    }
    case 25:  {
     $43 = $4;
     $44 = $5;
     $45 = $6;
     $46 = $7;
     _TIfStatement_CodePrint($43,$44,$45,$46);
     break L1;
     break;
    }
    case 23:  {
     $47 = $4;
     $48 = $5;
     $49 = $6;
     $50 = $7;
     _TDoStatement_CodePrint($47,$48,$49,$50);
     break L1;
     break;
    }
    case 24:  {
     $51 = $4;
     $52 = $5;
     $53 = $6;
     $54 = $7;
     _TTryBlockStatement_CodePrint($51,$52,$53,$54);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _TPointerList_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $3;
  $12 = $6;
  $13 = $5;
  _TPointer_CodePrint($11,$12,$13);
  $14 = $6;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $6 = $16;
 }
 STACKTOP = sp;return;
}
function _TPointer_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 24|0);
 $9 = $5;
 _TNodeClueList_CodePrint($6,$8,$9);
 $10 = $5;
 $11 = $3;
 _Output_Append($10,$11,4606);
 $12 = $3;
 $13 = $4;
 $14 = $5;
 _TTypeQualifierList_CodePrint($12,$13,$14);
 STACKTOP = sp;return;
}
function _TTypeQualifierList_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $4;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $6;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $7 = $16;
  $17 = $3;
  $18 = $7;
  $19 = $5;
  _TTypeQualifier_CodePrint($17,$18,$19);
  $20 = $6;
  $21 = (($20) + 1)|0;
  $6 = $21;
 }
 STACKTOP = sp;return;
}
function _TInitializerListItem_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $10;
 $13 = ((($12)) + 32|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&1;
 if ($15) {
  $16 = $7;
  $17 = $10;
  $18 = ((($17)) + 24|0);
  $19 = $11;
  _TNodeClueList_CodePrint($16,$18,$19);
  $20 = $11;
  $21 = $7;
  _Output_Append($20,$21,4610);
 }
 $22 = $10;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $6;
  $26 = $7;
  $27 = $10;
  $28 = $11;
  _TDesignation_CodePrint($25,$26,$27,$28);
 }
 $29 = $6;
 $30 = $7;
 $31 = $8;
 $32 = $9;
 $33 = $10;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $11;
 _TInitializer_CodePrint($29,$30,$31,$32,$35,$36);
 STACKTOP = sp;return;
}
function _TDesignation_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 while(1) {
  $11 = $8;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = $8;
  $16 = $7;
  _TDesignator_CodePrint($13,$14,$15,$16);
  $17 = $8;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $8 = $19;
 }
 $20 = $5;
 $21 = $6;
 $22 = ((($21)) + 8|0);
 $23 = $7;
 _TNodeClueList_CodePrint($20,$22,$23);
 $24 = $7;
 $25 = $5;
 _Output_Append($24,$25,4622);
 STACKTOP = sp;return;
}
function _TDesignator_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = $5;
 $12 = $6;
 $13 = ((($12)) + 12|0);
 $14 = $7;
 _TNodeClueList_CodePrint($11,$13,$14);
 if ($10) {
  $15 = $7;
  $16 = $5;
  _Output_Append($15,$16,14755);
  $17 = $7;
  $18 = $5;
  $19 = $6;
  $20 = HEAP32[$19>>2]|0;
  _Output_Append($17,$18,$20);
  STACKTOP = sp;return;
 } else {
  $21 = $4;
  $22 = $5;
  $23 = $6;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $7;
  _TExpression_CodePrint($21,$22,$25,$26);
  $27 = $5;
  $28 = $6;
  $29 = ((($28)) + 20|0);
  $30 = $7;
  _TNodeClueList_CodePrint($27,$29,$30);
  STACKTOP = sp;return;
 }
}
function _TDirectDeclarator_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $6;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 do {
  if ($13) {
   $14 = $5;
   $15 = $6;
   $16 = ((($15)) + 56|0);
   $17 = $7;
   _TNodeClueList_CodePrint($14,$16,$17);
   $18 = $6;
   $19 = ((($18)) + 96|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&1;
   if ($21) {
    ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
    $22 = $6;
    $23 = ((($22)) + 20|0);
    _ParameterList_PrintNameMangling($23,$8);
    $24 = $7;
    $25 = $5;
    $26 = $6;
    $27 = HEAP32[$26>>2]|0;
    _Output_Append($24,$25,$27);
    $28 = $7;
    $29 = $5;
    $30 = HEAP32[$8>>2]|0;
    _Output_Append($28,$29,$30);
    _StrBuilder_Destroy($8);
    break;
   } else {
    $31 = $7;
    $32 = $5;
    $33 = $6;
    $34 = HEAP32[$33>>2]|0;
    _Output_Append($31,$32,$34);
    break;
   }
  } else {
   $35 = $6;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $5;
    $40 = $6;
    $41 = ((($40)) + 56|0);
    $42 = $7;
    _TNodeClueList_CodePrint($39,$41,$42);
    $43 = $7;
    $44 = $5;
    _Output_Append($43,$44,4602);
    $45 = $4;
    $46 = $5;
    $47 = $6;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $7;
    _TDeclarator_CodePrint($45,$46,$49,$50);
    $51 = $5;
    $52 = $6;
    $53 = ((($52)) + 64|0);
    $54 = $7;
    _TNodeClueList_CodePrint($51,$53,$54);
    $55 = $7;
    $56 = $5;
    _Output_Append($55,$56,4604);
   }
  }
 } while(0);
 $57 = $6;
 $58 = ((($57)) + 52|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(4);
 if ($60) {
  $61 = $5;
  $62 = $6;
  $63 = ((($62)) + 72|0);
  $64 = $7;
  _TNodeClueList_CodePrint($61,$63,$64);
  $65 = $7;
  $66 = $5;
  _Output_Append($65,$66,4630);
  $67 = $6;
  $68 = ((($67)) + 48|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0|0);
  if ($70) {
   $71 = $4;
   $72 = $5;
   $73 = $6;
   $74 = ((($73)) + 48|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $7;
   _TExpression_CodePrint($71,$72,$75,$76);
  }
  $77 = $5;
  $78 = $6;
  $79 = ((($78)) + 80|0);
  $80 = $7;
  _TNodeClueList_CodePrint($77,$79,$80);
  $81 = $7;
  $82 = $5;
  _Output_Append($81,$82,4634);
 } else {
 }
 $83 = $6;
 $84 = ((($83)) + 52|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(3);
 if ($86) {
  $87 = $5;
  $88 = $6;
  $89 = ((($88)) + 72|0);
  $90 = $7;
  _TNodeClueList_CodePrint($87,$89,$90);
  $91 = $7;
  $92 = $5;
  _Output_Append($91,$92,4602);
  $93 = $4;
  $94 = $5;
  $95 = $6;
  $96 = ((($95)) + 20|0);
  $97 = $7;
  _ParameterTypeList_CodePrint($93,$94,$96,$97);
  $98 = $5;
  $99 = $6;
  $100 = ((($99)) + 80|0);
  $101 = $7;
  _TNodeClueList_CodePrint($98,$100,$101);
  $102 = $7;
  $103 = $5;
  _Output_Append($102,$103,4604);
  $104 = $6;
  $105 = ((($104)) + 96|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&1;
  if ($107) {
   $108 = $5;
   $109 = ((($108)) + 404|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==(4);
   if ($111) {
    $112 = $5;
    $113 = $6;
    $114 = ((($113)) + 88|0);
    $115 = $7;
    _TNodeClueList_CodePrint($112,$114,$115);
    $116 = $7;
    $117 = $5;
    _Output_Append($116,$117,8102);
   }
  }
 }
 $118 = $6;
 $119 = ((($118)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0|0);
 if (!($121)) {
  STACKTOP = sp;return;
 }
 $122 = $4;
 $123 = $5;
 $124 = $6;
 $125 = ((($124)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $7;
 _TDirectDeclarator_CodePrint($122,$123,$126,$127);
 STACKTOP = sp;return;
}
function _TInitializerListType_CodePrint($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $13 = sp + 28|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $10;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $61 = $7;
  $62 = $10;
  $63 = ((($62)) + 20|0);
  $64 = $11;
  _TNodeClueList_CodePrint($61,$63,$64);
  $65 = $11;
  $66 = $7;
  _Output_Append($65,$66,4642);
  $67 = $6;
  $68 = $7;
  $69 = $9;
  $70 = $8;
  $71 = $10;
  $72 = ((($71)) + 4|0);
  $73 = $11;
  _TInitializerList_CodePrint($67,$68,$69,$70,$72,$73);
  $74 = $7;
  $75 = $10;
  $76 = ((($75)) + 28|0);
  $77 = $11;
  _TNodeClueList_CodePrint($74,$76,$77);
  $78 = $11;
  $79 = $7;
  _Output_Append($78,$79,4646);
  STACKTOP = sp;return;
 }
 $12 = 0;
 $18 = $7;
 $19 = ((($18)) + 404|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(4);
 $22 = $7;
 if ($21) {
  $23 = $10;
  $24 = ((($23)) + 20|0);
  $25 = $11;
  _TNodeClueList_CodePrint($22,$24,$25);
  $26 = $11;
  $27 = $7;
  _Output_Append($26,$27,4642);
  $28 = $7;
  $29 = $10;
  $30 = ((($29)) + 28|0);
  $31 = $11;
  _TNodeClueList_CodePrint($28,$30,$31);
  $32 = $11;
  $33 = $7;
  _Output_Append($32,$33,4646);
  STACKTOP = sp;return;
 }
 $34 = ((($22)) + 404|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35>>>0)<(4);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $7;
 $38 = $10;
 $39 = ((($38)) + 12|0);
 $40 = $11;
 _TNodeClueList_CodePrint($37,$39,$40);
 $41 = $7;
 $42 = $10;
 $43 = ((($42)) + 20|0);
 $44 = $11;
 _TNodeClueList_CodePrint($41,$43,$44);
 $45 = $10;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $7;
  $50 = $10;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 24|0);
  $54 = $11;
  _TNodeClueList_CodePrint($49,$53,$54);
 }
 HEAP8[$13>>0] = 0;
 $55 = $6;
 $56 = $7;
 $57 = $9;
 $58 = $8;
 $59 = $12;
 $60 = $11;
 _InstanciateInit($55,$56,$57,$58,$59,0,$13,$60);
 STACKTOP = sp;return;
}
function _TUnionSet_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 8|0);
 $10 = $5;
 _TNodeClueList_CodePrint($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 404|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)<(4);
 if ($14) {
  $15 = $5;
  $16 = $3;
  _Output_Append($15,$16,5903);
 }
 $17 = $5;
 $18 = $3;
 _Output_Append($17,$18,4620);
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $6 = $20;
 while(1) {
  $21 = $6;
  $22 = ($21|0)!=(0|0);
  $23 = $3;
  if (!($22)) {
   break;
  }
  $24 = $6;
  $25 = $5;
  _TUnionSetItem_CodePrint($23,$24,$25);
  $26 = $6;
  $27 = HEAP32[$26>>2]|0;
  $6 = $27;
 }
 $28 = $4;
 $29 = ((($28)) + 16|0);
 $30 = $5;
 _TNodeClueList_CodePrint($23,$29,$30);
 $31 = $5;
 $32 = $3;
 _Output_Append($31,$32,4624);
 $33 = $3;
 $34 = ((($33)) + 404|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35>>>0)<(4);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $5;
 $38 = $3;
 _Output_Append($37,$38,5906);
 STACKTOP = sp;return;
}
function _TAnyStructDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP32[$8>>2]|0;
 $cond = ($9|0)==(11);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 _TStructDeclaration_CodePrint($10,$11,$12,$13);
 STACKTOP = sp;return;
}
function _TUnionSetItem_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(118);
 if ($9) {
  $10 = $3;
  $11 = $4;
  $12 = ((($11)) + 16|0);
  $13 = $5;
  _TNodeClueList_CodePrint($10,$12,$13);
  $14 = $5;
  $15 = $3;
  _Output_Append($14,$15,4909);
 } else {
  $16 = $4;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(121);
  if ($19) {
   $20 = $3;
   $21 = $4;
   $22 = ((($21)) + 16|0);
   $23 = $5;
   _TNodeClueList_CodePrint($20,$22,$23);
   $24 = $5;
   $25 = $3;
   _Output_Append($24,$25,4931);
  }
 }
 $26 = $3;
 $27 = $4;
 $28 = ((($27)) + 24|0);
 $29 = $5;
 _TNodeClueList_CodePrint($26,$28,$29);
 $30 = $5;
 $31 = $3;
 $32 = $4;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 _Output_Append($30,$31,$34);
 $35 = $4;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(53);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = $3;
 $40 = $4;
 $41 = ((($40)) + 32|0);
 $42 = $5;
 _TNodeClueList_CodePrint($39,$41,$42);
 $43 = $5;
 $44 = $3;
 _Output_Append($43,$44,4644);
 STACKTOP = sp;return;
}
function _TStructDeclaration_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = $7;
 _TSpecifierQualifierList_CodePrint($8,$9,$11,$12);
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = $6;
 $18 = ((($17)) + 16|0);
 $19 = $7;
 _TStructDeclaratorList_CodePrint($13,$14,$16,$18,$19);
 $20 = $5;
 $21 = $6;
 $22 = ((($21)) + 24|0);
 $23 = $7;
 _TNodeClueList_CodePrint($20,$22,$23);
 $24 = $7;
 $25 = $5;
 _Output_Append($24,$25,4618);
 STACKTOP = sp;return;
}
function _TStructDeclaratorList_CodePrint($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $8;
 $12 = HEAP32[$11>>2]|0;
 $10 = $12;
 while(1) {
  $13 = $10;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $8;
  $16 = HEAP32[$15>>2]|0;
  $17 = $10;
  $18 = ($16|0)==($17|0);
  if (!($18)) {
   $19 = $6;
   $20 = $10;
   $21 = ((($20)) + 12|0);
   $22 = $9;
   _TNodeClueList_CodePrint($19,$21,$22);
   $23 = $9;
   $24 = $6;
   _Output_Append($23,$24,4610);
  }
  $25 = $5;
  $26 = $6;
  $27 = $7;
  $28 = $10;
  $29 = $9;
  _TStructDeclarator_CodePrint($25,$26,$27,$28,$29);
  $30 = $10;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $10 = $32;
 }
 STACKTOP = sp;return;
}
function _TEnumerator_CodePrint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = $7;
 _TNodeClueList_CodePrint($8,$10,$11);
 $12 = $7;
 $13 = $5;
 $14 = $6;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _Output_Append($12,$13,$16);
 $17 = $6;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $5;
  $22 = $6;
  $23 = ((($22)) + 20|0);
  $24 = $7;
  _TNodeClueList_CodePrint($21,$23,$24);
  $25 = $7;
  $26 = $5;
  _Output_Append($25,$26,4622);
  $27 = $4;
  $28 = $5;
  $29 = $6;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $7;
  _TExpression_CodePrint($27,$28,$31,$32);
 }
 $33 = $6;
 $34 = ((($33)) + 36|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $5;
 $38 = $6;
 $39 = ((($38)) + 28|0);
 $40 = $7;
 _TNodeClueList_CodePrint($37,$39,$40);
 $41 = $7;
 $42 = $5;
 _Output_Append($41,$42,4610);
 STACKTOP = sp;return;
}
function _TEofDeclaration_CodePrint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = $5;
 _TNodeClueList_CodePrint($6,$8,$9);
 STACKTOP = sp;return;
}
function _TPointerList_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $4 = $6;
 while(1) {
  $7 = $4;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = $3;
  _TPointer_PrintNameMangling($9,$10);
  $11 = $4;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $4 = $13;
 }
 STACKTOP = sp;return;
}
function _TDirectDeclarator_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $2;
 if ($9) {
  $11 = ((($10)) + 96|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&1;
  if ($13) {
   ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   $14 = $2;
   $15 = ((($14)) + 20|0);
   _ParameterList_PrintNameMangling($15,$4);
   $16 = $3;
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   (_StrBuilder_Append($16,$18)|0);
   $19 = $3;
   $20 = HEAP32[$4>>2]|0;
   (_StrBuilder_Append($19,$20)|0);
   _StrBuilder_Destroy($4);
  }
 } else {
 }
 $21 = $2;
 $22 = ((($21)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(4);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _TPointer_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 (_StrBuilder_Append($4,14678)|0);
 $5 = $2;
 $6 = $3;
 _TTypeQualifierList_PrintNameMangling($5,$6);
 STACKTOP = sp;return;
}
function _TTypeQualifierList_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = $4;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $5 = $14;
  $15 = $5;
  $16 = $3;
  _TTypeQualifier_PrintNameMangling($15,$16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 STACKTOP = sp;return;
}
function _TTypeQualifier_PrintNameMangling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(86);
 if ($7) {
  $8 = $3;
  (_StrBuilder_Append($8,4650)|0);
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(46);
 $13 = $3;
 if ($12) {
  (_StrBuilder_Append($13,14683)|0);
  STACKTOP = sp;return;
 } else {
  (_StrBuilder_Append($13,4671)|0);
  STACKTOP = sp;return;
 }
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3960]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (15880 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[3960] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(15848)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (15880 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[3960] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(15860)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (15880 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[3960] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(15848)>>2] = $76;
     HEAP32[(15860)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(15844)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (16144 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (16144 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(15844)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(15860)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (15880 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[3960] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(15848)>>2] = $$0171$i;
       HEAP32[(15860)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(15844)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (16144 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (16144 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(15848)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (16144 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(15844)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (15880 + ($382<<2)|0);
           $384 = HEAP32[3960]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[3960] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (16144 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(15844)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(15848)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(15860)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(15860)>>2] = $465;
   HEAP32[(15848)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(15848)>>2] = 0;
   HEAP32[(15860)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(15852)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(15852)>>2] = $480;
  $481 = HEAP32[(15864)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(15864)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[4078]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(16320)>>2] = 4096;
  HEAP32[(16316)>>2] = 4096;
  HEAP32[(16324)>>2] = -1;
  HEAP32[(16328)>>2] = -1;
  HEAP32[(16332)>>2] = 0;
  HEAP32[(16284)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[4078] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(16320)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(16280)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(16272)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(16284)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(15864)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (16288);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(16316)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(16272)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(16280)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(16320)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(16284)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(16284)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(16272)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(16272)>>2] = $582;
  $583 = HEAP32[(16276)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(16276)>>2] = $582;
  }
  $585 = HEAP32[(15864)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(15856)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(15856)>>2] = $$748$i;
    }
    HEAP32[(16288)>>2] = $$748$i;
    HEAP32[(16292)>>2] = $$723947$i;
    HEAP32[(16300)>>2] = 0;
    $590 = HEAP32[4078]|0;
    HEAP32[(15876)>>2] = $590;
    HEAP32[(15872)>>2] = -1;
    HEAP32[(15892)>>2] = (15880);
    HEAP32[(15888)>>2] = (15880);
    HEAP32[(15900)>>2] = (15888);
    HEAP32[(15896)>>2] = (15888);
    HEAP32[(15908)>>2] = (15896);
    HEAP32[(15904)>>2] = (15896);
    HEAP32[(15916)>>2] = (15904);
    HEAP32[(15912)>>2] = (15904);
    HEAP32[(15924)>>2] = (15912);
    HEAP32[(15920)>>2] = (15912);
    HEAP32[(15932)>>2] = (15920);
    HEAP32[(15928)>>2] = (15920);
    HEAP32[(15940)>>2] = (15928);
    HEAP32[(15936)>>2] = (15928);
    HEAP32[(15948)>>2] = (15936);
    HEAP32[(15944)>>2] = (15936);
    HEAP32[(15956)>>2] = (15944);
    HEAP32[(15952)>>2] = (15944);
    HEAP32[(15964)>>2] = (15952);
    HEAP32[(15960)>>2] = (15952);
    HEAP32[(15972)>>2] = (15960);
    HEAP32[(15968)>>2] = (15960);
    HEAP32[(15980)>>2] = (15968);
    HEAP32[(15976)>>2] = (15968);
    HEAP32[(15988)>>2] = (15976);
    HEAP32[(15984)>>2] = (15976);
    HEAP32[(15996)>>2] = (15984);
    HEAP32[(15992)>>2] = (15984);
    HEAP32[(16004)>>2] = (15992);
    HEAP32[(16000)>>2] = (15992);
    HEAP32[(16012)>>2] = (16000);
    HEAP32[(16008)>>2] = (16000);
    HEAP32[(16020)>>2] = (16008);
    HEAP32[(16016)>>2] = (16008);
    HEAP32[(16028)>>2] = (16016);
    HEAP32[(16024)>>2] = (16016);
    HEAP32[(16036)>>2] = (16024);
    HEAP32[(16032)>>2] = (16024);
    HEAP32[(16044)>>2] = (16032);
    HEAP32[(16040)>>2] = (16032);
    HEAP32[(16052)>>2] = (16040);
    HEAP32[(16048)>>2] = (16040);
    HEAP32[(16060)>>2] = (16048);
    HEAP32[(16056)>>2] = (16048);
    HEAP32[(16068)>>2] = (16056);
    HEAP32[(16064)>>2] = (16056);
    HEAP32[(16076)>>2] = (16064);
    HEAP32[(16072)>>2] = (16064);
    HEAP32[(16084)>>2] = (16072);
    HEAP32[(16080)>>2] = (16072);
    HEAP32[(16092)>>2] = (16080);
    HEAP32[(16088)>>2] = (16080);
    HEAP32[(16100)>>2] = (16088);
    HEAP32[(16096)>>2] = (16088);
    HEAP32[(16108)>>2] = (16096);
    HEAP32[(16104)>>2] = (16096);
    HEAP32[(16116)>>2] = (16104);
    HEAP32[(16112)>>2] = (16104);
    HEAP32[(16124)>>2] = (16112);
    HEAP32[(16120)>>2] = (16112);
    HEAP32[(16132)>>2] = (16120);
    HEAP32[(16128)>>2] = (16120);
    HEAP32[(16140)>>2] = (16128);
    HEAP32[(16136)>>2] = (16128);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(15864)>>2] = $599;
    HEAP32[(15852)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(16328)>>2]|0;
    HEAP32[(15868)>>2] = $605;
   } else {
    $$024372$i = (16288);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(15852)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(15864)>>2] = $631;
       HEAP32[(15852)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(16328)>>2]|0;
       HEAP32[(15868)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(15856)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(15856)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (16288);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(15852)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(15852)>>2] = $678;
        HEAP32[(15864)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(15860)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(15848)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(15848)>>2] = $684;
         HEAP32[(15860)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[3960]|0;
            $703 = $702 & $701;
            HEAP32[3960] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (16144 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(15844)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(15844)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (15880 + ($763<<2)|0);
         $765 = HEAP32[3960]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[3960] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (16144 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(15844)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(15844)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (16288);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(15864)>>2] = $870;
    HEAP32[(15852)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(16328)>>2]|0;
    HEAP32[(15868)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(16288)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(16288)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(16288)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(16288)+12>>2]|0;
    HEAP32[(16288)>>2] = $$748$i;
    HEAP32[(16292)>>2] = $$723947$i;
    HEAP32[(16300)>>2] = 0;
    HEAP32[(16296)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (15880 + ($892<<2)|0);
      $894 = HEAP32[3960]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[3960] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (16144 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(15844)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(15844)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(15852)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(15852)>>2] = $971;
   $972 = HEAP32[(15864)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(15864)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(15856)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(15860)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(15848)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[3960]|0;
     $29 = $28 & $27;
     HEAP32[3960] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (16144 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(15844)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(15844)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(15864)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(15852)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(15852)>>2] = $98;
   HEAP32[(15864)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(15860)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(15860)>>2] = 0;
   HEAP32[(15848)>>2] = 0;
   return;
  }
  $103 = HEAP32[(15860)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(15848)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(15848)>>2] = $106;
   HEAP32[(15860)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[3960]|0;
     $122 = $121 & $120;
     HEAP32[3960] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (16144 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(15844)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(15844)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(15860)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(15848)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (15880 + ($183<<2)|0);
  $185 = HEAP32[3960]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[3960] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (16144 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(15844)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(15844)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(15872)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(15872)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (16296);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(15872)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(16320)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(15864)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(15852)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(15864)>>2] = $33;
  HEAP32[(15852)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(15860)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(15848)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(15848)>>2] = $storemerge1;
  HEAP32[(15860)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[3960]|0;
    $81 = $80 & $79;
    HEAP32[3960] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (16144 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(15844)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(15844)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(15860)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(15848)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[3960]|0;
     $25 = $24 & $23;
     HEAP32[3960] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (16144 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(15844)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(15844)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(15864)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(15852)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(15852)>>2] = $89;
   HEAP32[(15864)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(15860)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(15860)>>2] = 0;
   HEAP32[(15848)>>2] = 0;
   return;
  }
  $94 = HEAP32[(15860)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(15848)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(15848)>>2] = $97;
   HEAP32[(15860)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[3960]|0;
     $113 = $112 & $111;
     HEAP32[3960] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (16144 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(15844)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(15844)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(15860)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(15848)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (15880 + ($174<<2)|0);
  $176 = HEAP32[3960]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[3960] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (16144 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(15844)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(15844)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_731($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $8 = (___syscall140(140,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $17 = $4;
  $18 = $17;
  HEAP32[$18>>2] = -1;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = -1;
  $21 = -1;$22 = -1;
 } else {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $21 = $16;$22 = $13;
 }
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (16400|0);
}
function _dummy_731($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 8;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtox_761($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 120|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  $24 = (($22) + ($18))|0;
  $25 = (($24) - ($23))|0;
  $26 = (($0) + ($25)|0);
  HEAP32[$1>>2] = $26;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = ((($0)) + 120|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = ($1|0)!=(0);
 $21 = ($2|0)!=(0);
 $22 = $20 | $21;
 $23 = ($14|0)>($2|0);
 $24 = ($12>>>0)>($1>>>0);
 $25 = ($14|0)==($2|0);
 $26 = $25 & $24;
 $27 = $23 | $26;
 $or$cond = $22 & $27;
 if ($or$cond) {
  $28 = $11;
  $29 = (($28) + ($1)|0);
  $30 = ((($0)) + 104|0);
  HEAP32[$30>>2] = $29;
 } else {
  $31 = ((($0)) + 104|0);
  HEAP32[$31>>2] = $9;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 104|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((945) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((945) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (14694 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((945) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((945) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((945) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((945) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((945) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((945) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((945) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((945) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(0);
 $9 = ($7|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  label = 3;
 } else {
  $11 = ((($0)) + 120|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)<($7|0);
  $19 = ($14>>>0)<($4>>>0);
  $20 = ($17|0)==($7|0);
  $21 = $20 & $19;
  $22 = $18 | $21;
  if ($22) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $23 = (___uflow($0)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 4;
  } else {
   $26 = $1;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)==(0);
   $33 = ($31|0)==(0);
   $34 = $32 & $33;
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($34) {
    $35 = $$pre;
    $89 = $35;
    label = 9;
   } else {
    $36 = ((($0)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
    $39 = (($$pre) - ($38))|0;
    $40 = ($39|0)<(0);
    $41 = $40 << 31 >> 31;
    $42 = ((($0)) + 120|0);
    $43 = $42;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (_i64Subtract(($28|0),($31|0),($45|0),($48|0))|0);
    $50 = (getTempRet0() | 0);
    $51 = ($50|0)>($41|0);
    $52 = ($49>>>0)>($39>>>0);
    $53 = ($50|0)==($41|0);
    $54 = $53 & $52;
    $55 = $51 | $54;
    $56 = $$pre;
    if ($55) {
     $89 = $56;
     label = 9;
    } else {
     $57 = (($49) + -1)|0;
     $58 = (($37) + ($57)|0);
     $59 = ((($0)) + 104|0);
     HEAP32[$59>>2] = $58;
     $61 = $56;
    }
   }
   if ((label|0) == 9) {
    $60 = ((($0)) + 104|0);
    HEAP32[$60>>2] = $$pre;
    $61 = $89;
   }
   $62 = ($61|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($62) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $84 = $$pre29;
   } else {
    $63 = HEAP32[$$phi$trans$insert28>>2]|0;
    $64 = $61;
    $65 = (($64) + 1)|0;
    $66 = (($65) - ($63))|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($0)) + 120|0);
    $70 = $69;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (_i64Add(($72|0),($75|0),($66|0),($68|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = $69;
    $79 = $78;
    HEAP32[$79>>2] = $76;
    $80 = (($78) + 4)|0;
    $81 = $80;
    HEAP32[$81>>2] = $77;
    $82 = $63;
    $84 = $82;
   }
   $83 = ((($84)) + -1|0);
   $85 = HEAP8[$83>>0]|0;
   $86 = $85&255;
   $87 = ($23|0)==($86|0);
   if ($87) {
    $$0 = $23;
   } else {
    $88 = $23&255;
    HEAP8[$83>>0] = $88;
    $$0 = $23;
   }
  }
 }
 if ((label|0) == 4) {
  $25 = ((($0)) + 104|0);
  HEAP32[$25>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_761($0,$1,$2,-2147483648,0)|0);
 $4 = (getTempRet0() | 0);
 return ($3|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp;
 _memcpy(($5|0),(1840|0),144)|0;
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___vfprintf_internal($0,$1,$2,9,10)|0);
 return ($3|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_662($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_662($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 14720;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (14721) : (14726);
  $spec$select565 = $19 ? $$ : (14723);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 14739 : 14743;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 14747 : 14751;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_659($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_659($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexp($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (1680 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_659($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_659($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_659($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_659($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_659($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_659($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,14755,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_659($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,14755,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_659($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_659($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function _pop_arg_long_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$1>>2]|0;
 $2 = $arglist_current;
 $3 = ((0) + 8|0);
 $expanded1 = $3;
 $expanded = (($expanded1) - 1)|0;
 $4 = (($2) + ($expanded))|0;
 $5 = ((0) + 8|0);
 $expanded5 = $5;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $6 = $4 & $expanded3;
 $7 = $6;
 $8 = +HEAPF64[$7>>3];
 $arglist_next = ((($7)) + 8|0);
 HEAP32[$1>>2] = $arglist_next;
 HEAPF64[$0>>3] = $8;
 return;
}
function ___vfprintf_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select45 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 208|0;
 $6 = sp + 160|0;
 $7 = sp + 80|0;
 $8 = sp;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $vacopy_currentptr;
 $9 = (_printf_core(0,$1,$5,$7,$6,$3,$4)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(-1);
  if ($13) {
   $14 = (___lockfile($0)|0);
   $41 = $14;
  } else {
   $41 = 0;
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = $15 & 32;
  $17 = ((($0)) + 74|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(1);
  if ($19) {
   $20 = $15 & -33;
   HEAP32[$0>>2] = $20;
  }
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $25 = ((($0)) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$25>>2] = $8;
   $27 = ((($0)) + 28|0);
   HEAP32[$27>>2] = $8;
   $28 = ((($0)) + 20|0);
   HEAP32[$28>>2] = $8;
   HEAP32[$21>>2] = 80;
   $29 = ((($8)) + 80|0);
   $30 = ((($0)) + 16|0);
   HEAP32[$30>>2] = $29;
   $31 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $32 = ($26|0)==(0|0);
   if ($32) {
    $$1 = $31;
   } else {
    $33 = ((($0)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    (FUNCTION_TABLE_iiii[$34 & 15]($0,0,0)|0);
    $35 = HEAP32[$28>>2]|0;
    $36 = ($35|0)==(0|0);
    $spec$select = $36 ? -1 : $31;
    HEAP32[$25>>2] = $26;
    HEAP32[$21>>2] = 0;
    HEAP32[$30>>2] = 0;
    HEAP32[$27>>2] = 0;
    HEAP32[$28>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $24 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $$1 = $24;
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = $37 & 32;
  $39 = ($38|0)==(0);
  $spec$select45 = $39 ? $$1 : -1;
  $40 = $37 | $16;
  HEAP32[$0>>2] = $40;
  $42 = ($41|0)==(0);
  if (!($42)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0;
 var $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1252 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0;
 var $$2258$ = 0, $$2263 = 0, $$2273 = 0, $$3259 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre362 = 0, $$pre364 = 0, $$pre365 = 0, $$pre365$pre = 0, $$pre366 = 0, $$pre370 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge328 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0;
 var $or$cond278 = 0, $or$cond280 = 0, $or$cond285 = 0, $spec$select = 0, $spec$select283 = 0, $spec$select286 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $spec$select300 = 0, $spec$select301 = 0, $storemerge275$lcssa = 0, $storemerge275329 = 0, $storemerge276 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp;
 $10 = sp + 48|0;
 $11 = sp + 60|0;
 HEAP32[$7>>2] = $1;
 $12 = ($0|0)!=(0|0);
 $13 = ((($9)) + 40|0);
 $14 = $13;
 $15 = ((($9)) + 39|0);
 $16 = ((($10)) + 4|0);
 $$0245$ph = 0;$$0249$ph = 0;$$0271$ph = 0;
 L1: while(1) {
  $$0245 = $$0245$ph;$$0249 = $$0249$ph;
  while(1) {
   $17 = ($$0249|0)>(-1);
   do {
    if ($17) {
     $18 = (2147483647 - ($$0249))|0;
     $19 = ($$0245|0)>($18|0);
     if ($19) {
      $20 = (___errno_location()|0);
      HEAP32[$20>>2] = 75;
      $$1250 = -1;
      break;
     } else {
      $21 = (($$0245) + ($$0249))|0;
      $$1250 = $21;
      break;
     }
    } else {
     $$1250 = $$0249;
    }
   } while(0);
   $22 = HEAP32[$7>>2]|0;
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    label = 92;
    break L1;
   }
   $25 = $23;$27 = $22;
   L12: while(1) {
    switch ($25<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0251$lcssa = $27;
     break L12;
     break;
    }
    default: {
    }
    }
    $26 = ((($27)) + 1|0);
    HEAP32[$7>>2] = $26;
    $$pre = HEAP8[$26>>0]|0;
    $25 = $$pre;$27 = $26;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0251323 = $27;$29 = $27;
     while(1) {
      $28 = ((($29)) + 1|0);
      $30 = HEAP8[$28>>0]|0;
      $31 = ($30<<24>>24)==(37);
      if (!($31)) {
       $$0251$lcssa = $$0251323;
       break L15;
      }
      $32 = ((($$0251323)) + 1|0);
      $33 = ((($29)) + 2|0);
      HEAP32[$7>>2] = $33;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(37);
      if ($35) {
       $$0251323 = $32;$29 = $33;
      } else {
       $$0251$lcssa = $32;
       break;
      }
     }
    }
   } while(0);
   $36 = $$0251$lcssa;
   $37 = $22;
   $38 = (($36) - ($37))|0;
   if ($12) {
    _out($0,$22,$38);
   }
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $$0245 = $38;$$0249 = $$1250;
   }
  }
  $40 = HEAP32[$7>>2]|0;
  $41 = ((($40)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_isdigit($43)|0);
  $45 = ($44|0)==(0);
  $$pre362 = HEAP32[$7>>2]|0;
  if ($45) {
   $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
  } else {
   $46 = ((($$pre362)) + 2|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)==(36);
   if ($48) {
    $49 = ((($$pre362)) + 1|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = (($51) + -48)|0;
    $$0255 = $52;$$1272 = 1;$$sink = 3;
   } else {
    $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
   }
  }
  $53 = (($$pre362) + ($$sink)|0);
  HEAP32[$7>>2] = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = (($55) + -32)|0;
  $57 = ($56>>>0)>(31);
  $58 = 1 << $56;
  $59 = $58 & 75913;
  $60 = ($59|0)==(0);
  $brmerge328 = $57 | $60;
  if ($brmerge328) {
   $$0264$lcssa = 0;$$lcssa310 = $54;$storemerge275$lcssa = $53;
  } else {
   $$0264330 = 0;$62 = $56;$storemerge275329 = $53;
   while(1) {
    $61 = 1 << $62;
    $63 = $61 | $$0264330;
    $64 = ((($storemerge275329)) + 1|0);
    HEAP32[$7>>2] = $64;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (($66) + -32)|0;
    $68 = ($67>>>0)>(31);
    $69 = 1 << $67;
    $70 = $69 & 75913;
    $71 = ($70|0)==(0);
    $brmerge = $68 | $71;
    if ($brmerge) {
     $$0264$lcssa = $63;$$lcssa310 = $65;$storemerge275$lcssa = $64;
     break;
    } else {
     $$0264330 = $63;$62 = $67;$storemerge275329 = $64;
    }
   }
  }
  $72 = ($$lcssa310<<24>>24)==(42);
  if ($72) {
   $73 = ((($storemerge275$lcssa)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = (_isdigit($75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    label = 27;
   } else {
    $78 = HEAP32[$7>>2]|0;
    $79 = ((($78)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)==(36);
    if ($81) {
     $82 = ((($78)) + 1|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = (($84) + -48)|0;
     $86 = (($4) + ($85<<2)|0);
     HEAP32[$86>>2] = 10;
     $87 = HEAP8[$82>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (($88) + -48)|0;
     $90 = (($3) + ($89<<3)|0);
     $91 = $90;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($78)) + 3|0);
     $$0261 = $93;$$2273 = 1;$storemerge276 = $97;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $98 = ($$1272|0)==(0);
    if (!($98)) {
     $$0 = -1;
     break;
    }
    if ($12) {
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $367 = $105;
    } else {
     $367 = 0;
    }
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    $$0261 = $367;$$2273 = 0;$storemerge276 = $107;
   }
   HEAP32[$7>>2] = $storemerge276;
   $108 = ($$0261|0)<(0);
   $109 = $$0264$lcssa | 8192;
   $110 = (0 - ($$0261))|0;
   $spec$select293 = $108 ? $109 : $$0264$lcssa;
   $spec$select294 = $108 ? $110 : $$0261;
   $$1262 = $spec$select294;$$1265 = $spec$select293;$$3274 = $$2273;$114 = $storemerge276;
  } else {
   $111 = (_getint($7)|0);
   $112 = ($111|0)<(0);
   if ($112) {
    $$0 = -1;
    break;
   }
   $$pre364 = HEAP32[$7>>2]|0;
   $$1262 = $111;$$1265 = $$0264$lcssa;$$3274 = $$1272;$114 = $$pre364;
  }
  $113 = HEAP8[$114>>0]|0;
  $115 = ($113<<24>>24)==(46);
  do {
   if ($115) {
    $116 = ((($114)) + 1|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = ($117<<24>>24)==(42);
    if (!($118)) {
     HEAP32[$7>>2] = $116;
     $154 = (_getint($7)|0);
     $$pre365$pre = HEAP32[$7>>2]|0;
     $$0256 = $154;$$pre365 = $$pre365$pre;
     break;
    }
    $119 = ((($114)) + 2|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120 << 24 >> 24;
    $122 = (_isdigit($121)|0);
    $123 = ($122|0)==(0);
    if (!($123)) {
     $124 = HEAP32[$7>>2]|0;
     $125 = ((($124)) + 3|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = ($126<<24>>24)==(36);
     if ($127) {
      $128 = ((($124)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 << 24 >> 24;
      $131 = (($130) + -48)|0;
      $132 = (($4) + ($131<<2)|0);
      HEAP32[$132>>2] = 10;
      $133 = HEAP8[$128>>0]|0;
      $134 = $133 << 24 >> 24;
      $135 = (($134) + -48)|0;
      $136 = (($3) + ($135<<3)|0);
      $137 = $136;
      $138 = $137;
      $139 = HEAP32[$138>>2]|0;
      $140 = (($137) + 4)|0;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($124)) + 4|0);
      HEAP32[$7>>2] = $143;
      $$0256 = $139;$$pre365 = $143;
      break;
     }
    }
    $144 = ($$3274|0)==(0);
    if (!($144)) {
     $$0 = -1;
     break L1;
    }
    if ($12) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $145 = $arglist_current2;
     $146 = ((0) + 4|0);
     $expanded11 = $146;
     $expanded10 = (($expanded11) - 1)|0;
     $147 = (($145) + ($expanded10))|0;
     $148 = ((0) + 4|0);
     $expanded15 = $148;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $149 = $147 & $expanded13;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $arglist_next3 = ((($150)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $368 = $151;
    } else {
     $368 = 0;
    }
    $152 = HEAP32[$7>>2]|0;
    $153 = ((($152)) + 2|0);
    HEAP32[$7>>2] = $153;
    $$0256 = $368;$$pre365 = $153;
   } else {
    $$0256 = -1;$$pre365 = $114;
   }
  } while(0);
  $$0254 = 0;$156 = $$pre365;
  while(1) {
   $155 = HEAP8[$156>>0]|0;
   $157 = $155 << 24 >> 24;
   $158 = (($157) + -65)|0;
   $159 = ($158>>>0)>(57);
   if ($159) {
    $$0 = -1;
    break L1;
   }
   $160 = ((($156)) + 1|0);
   HEAP32[$7>>2] = $160;
   $161 = HEAP8[$156>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = (($162) + -65)|0;
   $164 = ((1216 + (($$0254*58)|0)|0) + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = (($166) + -1)|0;
   $168 = ($167>>>0)<(8);
   if ($168) {
    $$0254 = $166;$156 = $160;
   } else {
    break;
   }
  }
  $169 = ($165<<24>>24)==(0);
  if ($169) {
   $$0 = -1;
   break;
  }
  $170 = ($165<<24>>24)==(19);
  $171 = ($$0255|0)>(-1);
  do {
   if ($170) {
    if ($171) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($171) {
     $172 = (($4) + ($$0255<<2)|0);
     HEAP32[$172>>2] = $166;
     $173 = (($3) + ($$0255<<3)|0);
     $174 = $173;
     $175 = $174;
     $176 = HEAP32[$175>>2]|0;
     $177 = (($174) + 4)|0;
     $178 = $177;
     $179 = HEAP32[$178>>2]|0;
     $180 = $8;
     $181 = $180;
     HEAP32[$181>>2] = $176;
     $182 = (($180) + 4)|0;
     $183 = $182;
     HEAP32[$183>>2] = $179;
     label = 54;
     break;
    }
    if (!($12)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($8,$166,$2,$6);
    $$pre366 = HEAP32[$7>>2]|0;
    $185 = $$pre366;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($12) {
    $185 = $160;
    label = 55;
   } else {
    $$0245$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $184 = ((($185)) + -1|0);
    $186 = HEAP8[$184>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = ($$0254|0)!=(0);
    $189 = $187 & 15;
    $190 = ($189|0)==(3);
    $or$cond278 = $188 & $190;
    $191 = $187 & -33;
    $$0237 = $or$cond278 ? $191 : $187;
    $192 = $$1265 & 8192;
    $193 = ($192|0)==(0);
    $194 = $$1265 & -65537;
    $spec$select = $193 ? $$1265 : $194;
    L79: do {
     switch ($$0237|0) {
     case 110:  {
      $trunc = $$0254&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $201 = HEAP32[$8>>2]|0;
       HEAP32[$201>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $202 = HEAP32[$8>>2]|0;
       HEAP32[$202>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $203 = ($$1250|0)<(0);
       $204 = $203 << 31 >> 31;
       $205 = HEAP32[$8>>2]|0;
       $206 = $205;
       $207 = $206;
       HEAP32[$207>>2] = $$1250;
       $208 = (($206) + 4)|0;
       $209 = $208;
       HEAP32[$209>>2] = $204;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $210 = $$1250&65535;
       $211 = HEAP32[$8>>2]|0;
       HEAP16[$211>>1] = $210;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $212 = $$1250&255;
       $213 = HEAP32[$8>>2]|0;
       HEAP8[$213>>0] = $212;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $214 = HEAP32[$8>>2]|0;
       HEAP32[$214>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $215 = ($$1250|0)<(0);
       $216 = $215 << 31 >> 31;
       $217 = HEAP32[$8>>2]|0;
       $218 = $217;
       $219 = $218;
       HEAP32[$219>>2] = $$1250;
       $220 = (($218) + 4)|0;
       $221 = $220;
       HEAP32[$221>>2] = $216;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0245$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $222 = ($$0256>>>0)>(8);
      $223 = $222 ? $$0256 : 8;
      $224 = $spec$select | 8;
      $$1238 = 120;$$1257 = $223;$$3267 = $224;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1238 = $$0237;$$1257 = $$0256;$$3267 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $246 = $8;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (_fmt_o($248,$251,$13)|0);
      $253 = $spec$select & 8;
      $254 = ($253|0)==(0);
      $255 = $252;
      $256 = (($14) - ($255))|0;
      $257 = ($$0256|0)>($256|0);
      $258 = (($256) + 1)|0;
      $259 = $254 | $257;
      $spec$select297 = $259 ? $$0256 : $258;
      $$0231 = $252;$$1235 = 0;$$1240 = 14703;$$2258 = $spec$select297;$$4268 = $spec$select;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $260 = $8;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = (($260) + 4)|0;
      $264 = $263;
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)<(0);
      if ($266) {
       $267 = (_i64Subtract(0,0,($262|0),($265|0))|0);
       $268 = (getTempRet0() | 0);
       $269 = $8;
       $270 = $269;
       HEAP32[$270>>2] = $267;
       $271 = (($269) + 4)|0;
       $272 = $271;
       HEAP32[$272>>2] = $268;
       $$0234 = 1;$$0239 = 14703;$279 = $267;$280 = $268;
       label = 72;
       break L79;
      } else {
       $273 = $spec$select & 2048;
       $274 = ($273|0)==(0);
       $275 = $spec$select & 1;
       $276 = ($275|0)==(0);
       $$ = $276 ? 14703 : (14705);
       $spec$select298 = $274 ? $$ : (14704);
       $277 = $spec$select & 2049;
       $278 = ($277|0)!=(0);
       $spec$select299 = $278&1;
       $$0234 = $spec$select299;$$0239 = $spec$select298;$279 = $262;$280 = $265;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $195 = $8;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + 4)|0;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $$0234 = 0;$$0239 = 14703;$279 = $197;$280 = $200;
      label = 72;
      break;
     }
     case 99:  {
      $300 = $8;
      $301 = $300;
      $302 = HEAP32[$301>>2]|0;
      $303 = (($300) + 4)|0;
      $304 = $303;
      $305 = HEAP32[$304>>2]|0;
      $306 = $302&255;
      HEAP8[$15>>0] = $306;
      $$1 = $15;$$2236 = 0;$$2241 = 14703;$$5 = 1;$$6270 = $194;$$pre$phiZ2D = $14;
      break;
     }
     case 115:  {
      $307 = HEAP32[$8>>2]|0;
      $308 = ($307|0)==(0|0);
      $309 = $308 ? 14713 : $307;
      $310 = (_memchr($309,0,$$0256)|0);
      $311 = ($310|0)==(0|0);
      $312 = $310;
      $313 = $309;
      $314 = (($312) - ($313))|0;
      $315 = (($309) + ($$0256)|0);
      $$3259 = $311 ? $$0256 : $314;
      $$1252 = $311 ? $315 : $310;
      $$pre370 = $$1252;
      $$1 = $309;$$2236 = 0;$$2241 = 14703;$$5 = $$3259;$$6270 = $194;$$pre$phiZ2D = $$pre370;
      break;
     }
     case 67:  {
      $316 = $8;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      HEAP32[$10>>2] = $318;
      HEAP32[$16>>2] = 0;
      HEAP32[$8>>2] = $10;
      $$4260372 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $322 = ($$0256|0)==(0);
      if ($322) {
       _pad_659($0,32,$$1262,0,$spec$select);
       $$0242315373 = 0;
       label = 89;
      } else {
       $$4260372 = $$0256;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $345 = +HEAPF64[$8>>3];
      $346 = (FUNCTION_TABLE_iidiiii[$5 & 15]($0,$345,$$1262,$$0256,$spec$select,$$0237)|0);
      $$0245$ph$be = $346;
      break L77;
      break;
     }
     default: {
      $$1 = $22;$$2236 = 0;$$2241 = 14703;$$5 = $$0256;$$6270 = $spec$select;$$pre$phiZ2D = $14;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $225 = $8;
      $226 = $225;
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + 4)|0;
      $229 = $228;
      $230 = HEAP32[$229>>2]|0;
      $231 = $$1238 & 32;
      $232 = (_fmt_x($227,$230,$13,$231)|0);
      $233 = $8;
      $234 = $233;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($233) + 4)|0;
      $237 = $236;
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      $242 = $$3267 & 8;
      $243 = ($242|0)==(0);
      $or$cond280 = $243 | $241;
      $244 = $$1238 >>> 4;
      $245 = (14703 + ($244)|0);
      $spec$select295 = $or$cond280 ? 14703 : $245;
      $spec$select296 = $or$cond280 ? 0 : 2;
      $$0231 = $232;$$1235 = $spec$select296;$$1240 = $spec$select295;$$2258 = $$1257;$$4268 = $$3267;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $281 = (_fmt_u($279,$280,$13)|0);
      $$0231 = $281;$$1235 = $$0234;$$1240 = $$0239;$$2258 = $$0256;$$4268 = $spec$select;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $323 = HEAP32[$8>>2]|0;
      $$0232336 = $323;$$0242335 = 0;
      while(1) {
       $324 = HEAP32[$$0232336>>2]|0;
       $325 = ($324|0)==(0);
       if ($325) {
        $$0242315 = $$0242335;
        break;
       }
       $326 = (_wctomb($11,$324)|0);
       $327 = ($326|0)<(0);
       $328 = (($$4260372) - ($$0242335))|0;
       $329 = ($326>>>0)>($328>>>0);
       $or$cond285 = $327 | $329;
       if ($or$cond285) {
        label = 83;
        break;
       }
       $330 = ((($$0232336)) + 4|0);
       $331 = (($326) + ($$0242335))|0;
       $332 = ($$4260372>>>0)>($331>>>0);
       if ($332) {
        $$0232336 = $330;$$0242335 = $331;
       } else {
        $$0242315 = $331;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($327) {
        $$0 = -1;
        break L1;
       } else {
        $$0242315 = $$0242335;
       }
      }
      _pad_659($0,32,$$1262,$$0242315,$spec$select);
      $333 = ($$0242315|0)==(0);
      if ($333) {
       $$0242315373 = 0;
       label = 89;
      } else {
       $334 = HEAP32[$8>>2]|0;
       $$1233342 = $334;$$1243341 = 0;
       while(1) {
        $335 = HEAP32[$$1233342>>2]|0;
        $336 = ($335|0)==(0);
        if ($336) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $337 = (_wctomb($11,$335)|0);
        $338 = (($337) + ($$1243341))|0;
        $339 = ($338|0)>($$0242315|0);
        if ($339) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $340 = ((($$1233342)) + 4|0);
        _out($0,$11,$337);
        $341 = ($338>>>0)<($$0242315>>>0);
        if ($341) {
         $$1233342 = $340;$$1243341 = $338;
        } else {
         $$0242315373 = $$0242315;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $282 = ($$2258|0)>(-1);
     $283 = $$4268 & -65537;
     $spec$select283 = $282 ? $283 : $$4268;
     $284 = $8;
     $285 = $284;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($284) + 4)|0;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = ($286|0)!=(0);
     $291 = ($289|0)!=(0);
     $292 = $290 | $291;
     $293 = ($$2258|0)!=(0);
     $or$cond = $293 | $292;
     $294 = $$0231;
     $295 = (($14) - ($294))|0;
     $296 = $292 ^ 1;
     $297 = $296&1;
     $298 = (($295) + ($297))|0;
     $299 = ($$2258|0)>($298|0);
     $$2258$ = $299 ? $$2258 : $298;
     $spec$select300 = $or$cond ? $$2258$ : 0;
     $spec$select301 = $or$cond ? $$0231 : $13;
     $$1 = $spec$select301;$$2236 = $$1235;$$2241 = $$1240;$$5 = $spec$select300;$$6270 = $spec$select283;$$pre$phiZ2D = $14;
    }
    else if ((label|0) == 89) {
     label = 0;
     $342 = $spec$select ^ 8192;
     _pad_659($0,32,$$1262,$$0242315373,$342);
     $343 = ($$1262|0)>($$0242315373|0);
     $344 = $343 ? $$1262 : $$0242315373;
     $$0245$ph$be = $344;
     break;
    }
    $347 = $$1;
    $348 = (($$pre$phiZ2D) - ($347))|0;
    $349 = ($$5|0)<($348|0);
    $spec$select286 = $349 ? $348 : $$5;
    $350 = (($spec$select286) + ($$2236))|0;
    $351 = ($$1262|0)<($350|0);
    $$2263 = $351 ? $350 : $$1262;
    _pad_659($0,32,$$2263,$350,$$6270);
    _out($0,$$2241,$$2236);
    $352 = $$6270 ^ 65536;
    _pad_659($0,48,$$2263,$350,$352);
    _pad_659($0,48,$spec$select286,$348,0);
    _out($0,$$1,$348);
    $353 = $$6270 ^ 8192;
    _pad_659($0,32,$$2263,$350,$353);
    $$0245$ph$be = $$2263;
   }
  } while(0);
  $$0245$ph = $$0245$ph$be;$$0249$ph = $$1250;$$0271$ph = $$3274;
 }
 L123: do {
  if ((label|0) == 92) {
   $354 = ($0|0)==(0|0);
   if ($354) {
    $355 = ($$0271$ph|0)==(0);
    if ($355) {
     $$0 = 0;
    } else {
     $$2244322 = 1;
     while(1) {
      $356 = (($4) + ($$2244322<<2)|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($357|0)==(0);
      if ($358) {
       break;
      }
      $359 = (($3) + ($$2244322<<3)|0);
      _pop_arg($359,$357,$2,$6);
      $360 = (($$2244322) + 1)|0;
      $361 = ($360>>>0)<(10);
      if ($361) {
       $$2244322 = $360;
      } else {
       $$0 = 1;
       break L123;
      }
     }
     $$3319 = $$2244322;
     while(1) {
      $364 = (($4) + ($$3319<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(0);
      $362 = (($$3319) + 1)|0;
      if (!($366)) {
       $$0 = -1;
       break L123;
      }
      $363 = ($362>>>0)<(10);
      if ($363) {
       $$3319 = $362;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1250;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1>>>0)>(20);
 L1: do {
  if (!($4)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $5 = $arglist_current;
     $6 = ((0) + 4|0);
     $expanded25 = $6;
     $expanded = (($expanded25) - 1)|0;
     $7 = (($5) + ($expanded))|0;
     $8 = ((0) + 4|0);
     $expanded29 = $8;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $9 = $7 & $expanded27;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $arglist_next = ((($10)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $11;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $12 = $arglist_current2;
     $13 = ((0) + 4|0);
     $expanded32 = $13;
     $expanded31 = (($expanded32) - 1)|0;
     $14 = (($12) + ($expanded31))|0;
     $15 = ((0) + 4|0);
     $expanded36 = $15;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $16 = $14 & $expanded34;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $arglist_next3 = ((($17)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $19 = ($18|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = $0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $25 = $arglist_current5;
     $26 = ((0) + 4|0);
     $expanded39 = $26;
     $expanded38 = (($expanded39) - 1)|0;
     $27 = (($25) + ($expanded38))|0;
     $28 = ((0) + 4|0);
     $expanded43 = $28;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $29 = $27 & $expanded41;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $arglist_next6 = ((($30)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $32 = $0;
     $33 = $32;
     HEAP32[$33>>2] = $31;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $36 = $arglist_current8;
     $37 = ((0) + 8|0);
     $expanded46 = $37;
     $expanded45 = (($expanded46) - 1)|0;
     $38 = (($36) + ($expanded45))|0;
     $39 = ((0) + 8|0);
     $expanded50 = $39;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $40 = $38 & $expanded48;
     $41 = $40;
     $42 = $41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next9 = ((($41)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $48 = $0;
     $49 = $48;
     HEAP32[$49>>2] = $44;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $47;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $52 = $arglist_current11;
     $53 = ((0) + 4|0);
     $expanded53 = $53;
     $expanded52 = (($expanded53) - 1)|0;
     $54 = (($52) + ($expanded52))|0;
     $55 = ((0) + 4|0);
     $expanded57 = $55;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $56 = $54 & $expanded55;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $arglist_next12 = ((($57)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $59 = $58&65535;
     $60 = $59 << 16 >> 16;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = $0;
     $64 = $63;
     HEAP32[$64>>2] = $60;
     $65 = (($63) + 4)|0;
     $66 = $65;
     HEAP32[$66>>2] = $62;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $67 = $arglist_current14;
     $68 = ((0) + 4|0);
     $expanded60 = $68;
     $expanded59 = (($expanded60) - 1)|0;
     $69 = (($67) + ($expanded59))|0;
     $70 = ((0) + 4|0);
     $expanded64 = $70;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $71 = $69 & $expanded62;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $arglist_next15 = ((($72)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $73 & 65535;
     $74 = $0;
     $75 = $74;
     HEAP32[$75>>2] = $$mask31;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $78 = $arglist_current17;
     $79 = ((0) + 4|0);
     $expanded67 = $79;
     $expanded66 = (($expanded67) - 1)|0;
     $80 = (($78) + ($expanded66))|0;
     $81 = ((0) + 4|0);
     $expanded71 = $81;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $82 = $80 & $expanded69;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $arglist_next18 = ((($83)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $85 = $84&255;
     $86 = $85 << 24 >> 24;
     $87 = ($86|0)<(0);
     $88 = $87 << 31 >> 31;
     $89 = $0;
     $90 = $89;
     HEAP32[$90>>2] = $86;
     $91 = (($89) + 4)|0;
     $92 = $91;
     HEAP32[$92>>2] = $88;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $93 = $arglist_current20;
     $94 = ((0) + 4|0);
     $expanded74 = $94;
     $expanded73 = (($expanded74) - 1)|0;
     $95 = (($93) + ($expanded73))|0;
     $96 = ((0) + 4|0);
     $expanded78 = $96;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $97 = $95 & $expanded76;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $arglist_next21 = ((($98)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $99 & 255;
     $100 = $0;
     $101 = $100;
     HEAP32[$101>>2] = $$mask;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $104 = $arglist_current23;
     $105 = ((0) + 8|0);
     $expanded81 = $105;
     $expanded80 = (($expanded81) - 1)|0;
     $106 = (($104) + ($expanded80))|0;
     $107 = ((0) + 8|0);
     $expanded85 = $107;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $108 = $106 & $expanded83;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next24 = ((($109)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $110;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$3 & 15]($0,$2);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (1680 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_659($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_440()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_440() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2056|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 15]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___DOUBLE_BITS_662($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _fstat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $2 = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall197(197,($vararg_buffer|0))|0);
 $5 = ($4|0)==(-9);
 if ($5) {
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $6 = (___syscall221(221,($vararg_buffer2|0))|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 3;
  } else {
   ___procfdname($2,$0);
   $9 = $2;
   HEAP32[$vararg_buffer6>>2] = $9;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $3;
   $10 = (___syscall195(195,($vararg_buffer6|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$0 = $11;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = (___syscall_ret($4)|0);
  $$0 = $8;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___procfdname($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; src=14757; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 14|0);
  HEAP8[$3>>0] = 48;
  $4 = ((($0)) + 15|0);
  HEAP8[$4>>0] = 0;
 } else {
  $$027 = $1;$$126 = 14;
  while(1) {
   $5 = (($$027>>>0) / 10)&-1;
   $6 = (($$126) + 1)|0;
   $7 = ($$027>>>0)<(10);
   if ($7) {
    break;
   } else {
    $$027 = $5;$$126 = $6;
   }
  }
  $8 = (($0) + ($6)|0);
  HEAP8[$8>>0] = 0;
  $$02324 = $1;$$225 = $6;
  while(1) {
   $9 = (($$02324>>>0) / 10)&-1;
   $10 = ($9*10)|0;
   $11 = (($$02324) - ($10))|0;
   $12 = $11 | 48;
   $13 = $12&255;
   $14 = (($$225) + -1)|0;
   $15 = (($0) + ($14)|0);
   HEAP8[$15>>0] = $13;
   $16 = ($$02324>>>0)<(10);
   if ($16) {
    break;
   } else {
    $$02324 = $9;$$225 = $14;
   }
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 128|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 128|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_599()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 132|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_599() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(14772,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(14772,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1176)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,144)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 152|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 11;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 8;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 3;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(16340)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((16404|0));
 return (16412|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((16404|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 96|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[513]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[513]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiiii[$21 & 3]($0,$17,$19,1)|0);
   $22 = (getTempRet0() | 0);
  }
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _realpath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4336|0);
 $vararg_buffer5 = sp + 4320|0;
 $vararg_buffer2 = sp + 4312|0;
 $vararg_buffer = sp + 4304|0;
 $2 = sp + 4216|0;
 $3 = sp + 4128|0;
 $4 = sp + 4096|0;
 $5 = sp;
 $6 = ($0|0)==(0|0);
 do {
  if ($6) {
   $7 = (___errno_location()|0);
   HEAP32[$7>>2] = 22;
   $$0 = 0;
  } else {
   $8 = $0;
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 2656256;
   $9 = (___syscall5(5,($vararg_buffer|0))|0);
   $10 = (___syscall_ret($9)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    $$0 = 0;
   } else {
    ___procfdname($4,$10);
    $12 = (_readlink($4,$5,4095)|0);
    $13 = ($12|0)<(0);
    if (!($13)) {
     $14 = (($5) + ($12)|0);
     HEAP8[$14>>0] = 0;
     (_fstat($10,$2)|0);
     $15 = (_stat($5,$3)|0);
     $16 = ($15|0)<(0);
     if (!($16)) {
      $17 = HEAP32[$2>>2]|0;
      $18 = HEAP32[$3>>2]|0;
      $19 = ($17|0)==($18|0);
      if ($19) {
       $20 = ((($2)) + 80|0);
       $21 = $20;
       $22 = $21;
       $23 = HEAP32[$22>>2]|0;
       $24 = (($21) + 4)|0;
       $25 = $24;
       $26 = HEAP32[$25>>2]|0;
       $27 = ((($3)) + 80|0);
       $28 = $27;
       $29 = $28;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($28) + 4)|0;
       $32 = $31;
       $33 = HEAP32[$32>>2]|0;
       $34 = ($23|0)==($30|0);
       $35 = ($26|0)==($33|0);
       $36 = $34 & $35;
       if ($36) {
        HEAP32[$vararg_buffer2>>2] = $10;
        (___syscall6(6,($vararg_buffer2|0))|0);
        $39 = ($1|0)==(0|0);
        if ($39) {
         $41 = (___strdup($5)|0);
         $$0 = $41;
         break;
        } else {
         $40 = (_strcpy($1,$5)|0);
         $$0 = $1;
         break;
        }
       }
      }
      $37 = ($15|0)==(0);
      if ($37) {
       $38 = (___errno_location()|0);
       HEAP32[$38>>2] = 40;
      }
     }
    }
    HEAP32[$vararg_buffer5>>2] = $10;
    (___syscall6(6,($vararg_buffer5|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readlink($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $5 = (___syscall85(85,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return ($$345|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 15]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[512]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;
  while(1) {
   $10 = ($$01015*10)|0;
   $11 = ((($$214)) + 1|0);
   $12 = HEAP8[$$214>>0]|0;
   $13 = $12 << 24 >> 24;
   $$neg13 = (($10) + 48)|0;
   $14 = (($$neg13) - ($13))|0;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$010$lcssa = $14;
    break;
   } else {
    $$01015 = $14;$$214 = $11;
   }
  }
 }
 $19 = ($$1|0)==(0);
 $20 = (0 - ($$010$lcssa))|0;
 $21 = $19 ? $20 : $$010$lcssa;
 return ($21|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&15](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&3](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iidiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,_fmt_fp,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,b2,___stdout_write,b2,_sn_write,b2,b2,b2,___stdio_write,b2,b2,___stdio_read,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,___stdio_seek];
var FUNCTION_TABLE_vi = [b4,b4,b4,b4,b4,_FileInfo_DeleteVoid,_Macro_DeleteVoid,_PPTokenArray_DeleteVoid];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_pop_arg_long_double,b5,b5,b5,b5,b5];

  return { _CompileText: _CompileText, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real__CompileText = asm["_CompileText"]; asm["_CompileText"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__CompileText.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _CompileText = Module["_CompileText"] = asm["_CompileText"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



