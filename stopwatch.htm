
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h2>Stopwatch class (QueryPerformanceCounter)</h2>

<p>The Stopwacth class is a useful class to perform time checking using a high resolution timer. (This implementation is for MS Windows only) </p>

<p>See also:<a href="Stopwatch2.htm">Stopwatch clock_t</a></p>


<pre>

<span class="comment">//
</span><span class="comment">// Copyright (C) 2007, Thiago Adams
</span><span class="comment">//
</span><span class="comment">// Permission to copy, use, modify, sell and distribute this software
</span><span class="comment">// is granted provided this copyright notice appears in all copies.
</span><span class="comment">// This software is provided &quot;as is&quot; without express or implied
</span><span class="comment">// warranty, and with no claim as to its suitability for any purpose.
</span><span class="comment">//
</span>
<span class="keyword">#include</span> &lt;windows.h&gt;
<span class="keyword">#include</span> &lt;cassert&gt;
<span class="keyword">#include</span> &lt;ostream&gt;

<span class="keyword">class</span> Stopwatch
{
    LARGE_INTEGER m_StartCount;
    LARGE_INTEGER m_StopCount;

    <span class="keyword">static</span> <span class="keyword">void</span> Check(BOOL b)
    {
        <span class="keyword">if</span> (!b) <span class="keyword">throw</span> std::runtime_error(<span class="string">&quot;Stopwatch runtime error&quot;</span>);
    }

<span class="keyword">public</span>:

    Stopwatch()
    {
        Reset();
    }

    Stopwatch(<span class="keyword">bool</span> start)
    {
        Reset();
        <span class="keyword">if</span> (start)
           Start();
    }

    <span class="keyword">static</span> LONGLONG GetFrequency()
    {
        <span class="keyword">static</span> LARGE_INTEGER ticksPerSecond = {<span class="number">0</span>, <span class="number">0</span>};
        <span class="keyword">if</span> (ticksPerSecond.QuadPart == <span class="number">0</span>)
            Check(QueryPerformanceFrequency(&amp;ticksPerSecond));
        <span class="keyword">return</span> ticksPerSecond.QuadPart;
    }

    <span class="keyword">void</span> Reset()
    {
        m_StopCount.QuadPart = <span class="number">0</span>;
        m_StartCount.QuadPart = <span class="number">0</span>;

        assert(!IsRunning());
        assert(GetElapsedTicks() == <span class="number">0</span>);
    }

    <span class="keyword">void</span> Start()
    {
        <span class="keyword">if</span> (IsRunning())
            <span class="keyword">return</span>;

        <span class="keyword">const</span> <span class="keyword">bool</span> resume = (m_StartCount.QuadPart != <span class="number">0</span>);
        <span class="keyword">if</span> (resume)
            m_StopCount.QuadPart = <span class="number">0</span>;
        <span class="keyword">else</span>
            Check(QueryPerformanceCounter(&amp;m_StartCount));

        assert(IsRunning());
    }

    <span class="keyword">void</span> Stop()
    {
        <span class="keyword">if</span> (!IsRunning())
            <span class="keyword">return</span>;
        Check(QueryPerformanceCounter(&amp;m_StopCount));

        assert(!IsRunning());
    }

    LONGLONG GetElapsedTicks() <span class="keyword">const</span>
    {
        <span class="keyword">if</span> (!IsRunning())
            <span class="keyword">return</span> (m_StopCount.QuadPart - m_StartCount.QuadPart);

        LARGE_INTEGER performanceCount;
        Check(QueryPerformanceCounter(&amp;performanceCount));
        <span class="keyword">return</span> (performanceCount.QuadPart - m_StartCount.QuadPart);
    }

    LONGLONG GetElapsedMilliseconds() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> GetElapsedTicks() / (GetFrequency() / <span class="number">1000</span>);
    }

    <span class="keyword">bool</span> IsRunning() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_StartCount.QuadPart != <span class="number">0</span> &amp;&amp; m_StopCount.QuadPart == <span class="number">0</span>;
    }
};
</pre>


<p>Bonus function</p>
<pre>
<span class="keyword">template</span>&lt;<span class="keyword">class</span> _Elem, <span class="keyword">class</span> _Tr&gt;
std::basic_ostream&lt;_Elem, _Tr&gt; &amp;
<span class="keyword">operator</span> &lt;&lt; (std::basic_ostream&lt;_Elem, _Tr&gt; &amp; stream,
             <span class="keyword">const</span> Stopwatch &amp; stopwatch)
{
    stream &lt;&lt; stopwatch.GetElapsedMilliseconds();
    <span class="keyword">if</span> (stopwatch.IsRunning())
        stream &lt;&lt; <span class="string">&quot; ms (running)&quot;</span>;
    <span class="keyword">else</span>
        stream &lt;&lt; <span class="string">&quot; ms (stoped)&quot;</span>;
    <span class="keyword">return</span> stream;
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  