<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>{{{cpp</p>

<h1>define nullptr 0</h1>

<p>template&lt;class E&gt;class Node{  Node</p>

<p>  Node  Node</p>

<p>  Node  Node</p>

<p>  E m</p>


<p>public:</p>

<p>   Node(const E&amp; v) :  m  m  m  m  m  m  {  }</p>

<p>  Node(const E&amp; v,       Node       Node       Node  m  m  m  m  m  m  {  }</p>

<p>  ~Node()  {    RemoveAll();  }</p>

<p>  Node  {    return m  }</p>

<p>  Node  {    //assert    pNode-&gt;m    pNode-&gt;m    pNode-&gt;m</p>

<p>    if( m    {      m    }    else    {      m    }    m</p>

<p>    return pNode;  }</p>

<p>  Node  {        Node    return AddChild(pNode);      }</p>

<p>  void RemoveAt( Node  {        Node    if (pParent       return;</p>

<p>    if( pOldNode == pParent-&gt;m    {      pParent-&gt;m    }    else    {      pOldNode-&gt;m    }    if( pOldNode == pParent-&gt;m    {      pParent-&gt;m    }    else    {       pOldNode-&gt;m    }</p>

<p>    delete pOldNode;  }</p>

<p>  void RemoveAll()   {    while(m    {      Node      m      delete pKill;    }</p>

<p>    m    m  }</p>

<p>  Node  {    return m  }</p>

<p>  Node  {    return m  }</p>

<p>  const E&amp; Data() const  {    return m  } </p>

<p>  void SetData(const E&amp; value)  {    m  }    };</p>



<p>template&lt;class T&gt;void PrintImp(Node&lt;T&gt;&amp; node, int &amp;i){  for (int k = 0; k &lt; i; k++)      cout &lt;&lt; &quot;  &quot;;  cout &lt;&lt; node.Data() &lt;&lt; endl;</p>

<p>  Node&lt;T&gt;  for ( ; pNode   {    i++;    PrintImp(    i--;  }}</p>

<p>template&lt;class T&gt;void Print(Node&lt;T&gt;&amp; node){   console::clrscr();  int i = 0;  PrintImp(node, i);  console::getch();}</p>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  