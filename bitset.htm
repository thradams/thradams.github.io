
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h1> Dynamic bitset</h1>

<p><a href="makecontainer.htm">Make container</a></p>



<pre>


<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;limits.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;



<span class="keyword">struct</span> bitset
{
  <span class="keyword">unsigned</span> <span class="keyword">long</span>* bits;
  <span class="keyword">int</span> size;  
};

<span class="keyword">#define</span> BITSET_NUM_BITS_PER_WORD (CHAR_BIT * <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>))

<span class="keyword">int</span> bitset_resize(<span class="keyword">struct</span> bitset* p, <span class="keyword">int</span> newSize)
{
  <span class="keyword">if</span> (newSize &gt; p-&gt;size)
  {
    <span class="keyword">int</span> oldsize = p-&gt;size;
    <span class="keyword">unsigned</span> <span class="keyword">long</span>* pnew = realloc(p-&gt;bits, newSize * <span class="keyword">sizeof</span>(p-&gt;bits[<span class="number">0</span>]));
    <span class="keyword">if</span> (pnew)
    {
      memset(pnew + oldsize, <span class="number">0</span>, <span class="keyword">sizeof</span>(p-&gt;bits[<span class="number">0</span>]) * (newSize - oldsize));
      p-&gt;bits = pnew;
      p-&gt;size = newSize;
    }
    <span class="keyword">else</span>
    {
      <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/*out of mem*/</span>
    }
  }

  <span class="keyword">return</span> p-&gt;size;
}


<span class="keyword">inline</span> <span class="keyword">bool</span> bitset_clear(<span class="keyword">struct</span> bitset* bitset)
{
  memset(bitset-&gt;bits, <span class="number">0</span>, bitset-&gt;size * <span class="keyword">sizeof</span>(bitset-&gt;bits[<span class="number">0</span>]));
}

<span class="keyword">inline</span> <span class="keyword">bool</span> bitset_getbit(<span class="keyword">struct</span> bitset* bitset, <span class="keyword">int</span> index)
{
  assert(index / BITSET_NUM_BITS_PER_WORD &lt; bitset-&gt;size);
  <span class="keyword">return</span> (bitset-&gt;bits[index / BITSET_NUM_BITS_PER_WORD] &amp; (<span class="number">1</span>ul &lt;&lt; index % BITSET_NUM_BITS_PER_WORD)) != <span class="number">0</span>;
}

<span class="keyword">inline</span> <span class="keyword">void</span> bitset_setbit(<span class="keyword">struct</span> bitset* bitset, <span class="keyword">int</span> index, <span class="keyword">bool</span> b)
{
  <span class="keyword">int</span> wordindex = index / BITSET_NUM_BITS_PER_WORD;

  <span class="keyword">if</span> ((wordindex + <span class="number">1</span>) &gt; bitset-&gt;size)
  {
    <span class="keyword">if</span> (bitset_resize(bitset, wordindex + <span class="number">1</span>) == <span class="number">0</span>)
    {
      <span class="keyword">return</span>;
    }
  }
 
  <span class="keyword">unsigned</span> <span class="keyword">long</span> bit = <span class="number">1</span>ul &lt;&lt; index % BITSET_NUM_BITS_PER_WORD;
  <span class="keyword">if</span> (b)
  {
    bitset-&gt;bits[wordindex] |= bit;
  }
  <span class="keyword">else</span>
  {
    bitset-&gt;bits[wordindex] &amp;= ~bit;
  }
}


<span class="keyword">void</span> bitset_destroy(<span class="keyword">struct</span> bitset* p)
{
  free(p-&gt;bits);
}

<span class="keyword">void</span> bitset_print(<span class="keyword">struct</span> bitset* bitset)
{
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitset-&gt;size * BITSET_NUM_BITS_PER_WORD; i++)
  {
    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i % <span class="number">8</span> == <span class="number">0</span>)
      printf(<span class="string">&quot; &quot;</span>);
    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i % <span class="number">32</span> == <span class="number">0</span>)
      printf(<span class="string">&quot;\n&quot;</span>);

    printf(<span class="string">&quot;%d&quot;</span>, bitset_getbit(bitset, i));
  }
  printf(<span class="string">&quot;\n&quot;</span>);
}


<span class="keyword">int</span> main()
{
  <span class="keyword">struct</span> bitset a = {<span class="number">0</span>};

  bitset_setbit(&amp;a, <span class="number">7</span>, <span class="keyword">true</span>);
  bitset_print(&amp;a);
  printf(<span class="string">&quot;-----\n&quot;</span>);
  bitset_setbit(&amp;a, <span class="number">32</span>, <span class="keyword">true</span>);
  bitset_print(&amp;a);

  bitset_destroy(&amp;a);
}
	
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  