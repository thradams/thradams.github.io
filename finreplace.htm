<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h2>Find-Replace for standard strings</h2>

<p>I always need this functionIt is self-explanation.</p>

<pre>
<span class="keyword">inline</span> <span class="keyword">void</span> find_replace(std::<span class="keyword2">string</span>&amp; in_this_string,
                         <span class="keyword">const</span> std::<span class="keyword2">string</span>&amp; find,
                         <span class="keyword">const</span> std::<span class="keyword2">string</span>&amp; replace)
{
    std::<span class="keyword2">string</span>::size_type pos = <span class="number">0</span>;
    <span class="keyword">while</span>( std::<span class="keyword2">string</span>::npos != (pos = in_this_string.find(find, pos)) )
    {
        in_this_string.replace(pos, find.length(), replace);
        pos += replace.length();
    }
}

<span class="keyword">inline</span> <span class="keyword">void</span> find_replace(std::<span class="keyword2">wstring</span>&amp; in_this_string,
                         <span class="keyword">const</span> std::<span class="keyword2">wstring</span>&amp; find,
                         <span class="keyword">const</span> std::<span class="keyword2">wstring</span>&amp; replace)
{
    std::<span class="keyword2">wstring</span>::size_type pos = <span class="number">0</span>;
    <span class="keyword">while</span>( std::<span class="keyword2">wstring</span>::npos != (pos = in_this_string.find(find, pos)) )
    {
        in_this_string.replace(pos, find.length(), replace);
        pos += replace.length();
    }
}
</pre>


<p>See also cmpnocase
<!-- Page content end --> 
</article> 
 
</body> 
</html>  