<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<pre>
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;stddef.h&gt;

<span class="keyword">typedef</span> <span class="keyword">long</span> Align; <span class="comment">/* for alignment to long boundary */</span>

<span class="keyword">union</span> header {		<span class="comment">/* block header: */</span>
    <span class="keyword">struct</span> {
        <span class="keyword">union</span> header* pnext;	<span class="comment">/* next block if on free list */</span>
        <span class="keyword">unsigned</span> size;		<span class="comment">/* size of this block */</span>
    } s;
    Align x;		<span class="comment">/* force alignment of blocks */</span>
};

<span class="keyword">typedef</span> <span class="keyword">union</span> header Header;


<span class="keyword">static</span> Header base;		<span class="comment">/* empty list to get started */</span>
<span class="keyword">static</span> Header* freep = NULL;	<span class="comment">/* start of free list */</span>
Header* morecore(<span class="keyword">unsigned</span>);

<span class="comment">/* malloc: general-purpose storage allocator */</span>
<span class="keyword">void</span>* malloc2(<span class="keyword">unsigned</span> nbytes)
{
    <span class="keyword">unsigned</span> nunits = (nbytes + <span class="keyword">sizeof</span>(Header) - <span class="number">1</span>) / <span class="keyword">sizeof</span>(Header) + <span class="number">1</span>;

    Header* prevp = freep;

    <span class="keyword">if</span> (prevp == NULL)
    {	<span class="comment">/* no free list yet */</span>
        freep = &amp;base;
        base.s.pnext = freep;
        prevp = freep;
        base.s.size = <span class="number">0</span>;
    }

    <span class="keyword">for</span> (Header* p = prevp-&gt;s.pnext; ; prevp = p, p = p-&gt;s.pnext)
    {
        <span class="keyword">if</span> (p-&gt;s.size &gt;= nunits)
        {	<span class="comment">/* big enough */</span>
            <span class="keyword">if</span> (p-&gt;s.size == nunits)	<span class="comment">/* exactly */</span>
            {
                prevp-&gt;s.pnext = p-&gt;s.pnext;
            }
            <span class="keyword">else</span>
            {			<span class="comment">/* allocate tail end */</span>
                p-&gt;s.size -= nunits;
                p += p-&gt;s.size;
                p-&gt;s.size = nunits;
            }
            freep = prevp;
            <span class="keyword">return</span> (<span class="keyword">void</span>*)(p + <span class="number">1</span>);
        }

        <span class="keyword">if</span> (p == freep)		<span class="comment">/* wrapped around free list */</span>
        {
            <span class="keyword">if</span> ((p = morecore(nunits)) == NULL)
                <span class="keyword">return</span> NULL;	<span class="comment">/* none left */</span>
        }
    }
}

<span class="keyword">#define</span> NALLOC <span class="number">1024</span>	<span class="comment">/* minimum units to request */</span>
<span class="keyword">void</span> free2(<span class="keyword">void</span>* ap);

<span class="comment">/* morecore: ask system for more memory */</span>
<span class="keyword">static</span> Header* morecore(<span class="keyword">unsigned</span> nu)
{



    <span class="keyword">if</span> (nu &lt; NALLOC)
        nu = NALLOC;
    <span class="keyword">char</span>* cp = malloc(nu * <span class="keyword">sizeof</span>(Header));
    <span class="keyword">if</span> (cp == <span class="number">0</span>)	<span class="comment">/* no space at all */</span>
        <span class="keyword">return</span> NULL;
    Header* up = (Header*)cp;
    up-&gt;s.size = nu;
    free2((<span class="keyword">void</span>*)(up + <span class="number">1</span>));
    <span class="keyword">return</span> freep;
}

<span class="comment">/* free: put block ap in free list */</span>
<span class="keyword">void</span> free2(<span class="keyword">void</span>* ap)
{
    Header* p;

    Header* bp = (Header*)ap - <span class="number">1</span>;
    <span class="keyword">for</span> (p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.pnext); p = p-&gt;s.pnext)
    {
        <span class="keyword">if</span> (p &gt;= p-&gt;s.pnext &amp;&amp; (bp &gt; p || bp &lt; p-&gt;s.pnext))
            <span class="keyword">break</span>;
    }

    <span class="keyword">if</span> (bp + bp-&gt;s.size == p-&gt;s.pnext) {
        bp-&gt;s.size += p-&gt;s.pnext-&gt;s.size;
        bp-&gt;s.pnext = p-&gt;s.pnext-&gt;s.pnext;
    }
    <span class="keyword">else</span> {
        bp-&gt;s.pnext = p-&gt;s.pnext;
    }

    <span class="keyword">if</span> (p + p-&gt;s.size == bp) {
        p-&gt;s.size += bp-&gt;s.size;
        p-&gt;s.pnext = bp-&gt;s.pnext;
    }
    <span class="keyword">else</span> {
        p-&gt;s.pnext = bp;
    }
    freep = p;
}

<span class="keyword">struct</span> Person {
    <span class="keyword">char</span>* name;
};

<span class="keyword">char</span>* strdup2(<span class="keyword">const</span> <span class="keyword">char</span>* s)
{
    <span class="keyword">int</span> sz = strlen(s);
    <span class="keyword">char</span>* r = malloc2(sz + <span class="number">1</span>);
    <span class="keyword">if</span> (r)
        memcpy(r, s, sz + <span class="number">1</span>);
    <span class="keyword">return</span> r;
}




<span class="keyword">struct</span> Block {
    <span class="keyword">struct</span> Block* pNext;
    <span class="keyword">char</span> data[];
};

<span class="keyword">struct</span> Allocator {
    <span class="keyword">struct</span> Block* pHead, *pTail;
    <span class="keyword">unsigned</span> bytesUsed; <span class="comment">/*bytes used at the tail block*/</span>
    <span class="keyword">unsigned</span> BLOCK_SIZE;
};

<span class="keyword">#define</span> ALLOCATOR_INIT {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, <span class="number">1024</span>} 


<span class="keyword">void</span>* allocator_aligned_alloc(<span class="keyword">struct</span> Allocator* allocator, <span class="keyword">unsigned</span> alignment, <span class="keyword">unsigned</span> size)
{
    <span class="keyword">void</span>* pointer = NULL;

    <span class="keyword">int</span> alignedPos = allocator-&gt;bytesUsed;
    <span class="keyword">if</span> (allocator-&gt;bytesUsed % alignment != <span class="number">0</span>)
    {
        <span class="comment">/*fixing aligment*/</span>
        alignedPos = ((allocator-&gt;bytesUsed / alignment) + <span class="number">1</span>) * alignment;
    }

    <span class="keyword">if</span> (allocator-&gt;pHead == NULL) {
        
        <span class="comment">/*creating the first block*/</span>

        <span class="keyword">struct</span> Block* pNew = 
            malloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Block) + (size &lt; allocator-&gt;BLOCK_SIZE ? allocator-&gt;BLOCK_SIZE : size));

        <span class="keyword">if</span> (pNew)
        {
            pNew-&gt;pNext = <span class="number">0</span>;
            allocator-&gt;bytesUsed = size;
            pointer = pNew-&gt;data + alignedPos;
            allocator-&gt;pHead = pNew;
            allocator-&gt;pTail = pNew;
        }
    }
    <span class="keyword">else</span>
    {
        <span class="keyword">if</span> (allocator-&gt;bytesUsed &lt; allocator-&gt;BLOCK_SIZE &amp;&amp;
            allocator-&gt;BLOCK_SIZE - alignedPos &gt; size)
        {
            <span class="comment">/*we have space at the current tail block*/</span>
            pointer = allocator-&gt;pTail-&gt;data + alignedPos;
            allocator-&gt;bytesUsed = alignedPos + size;
        }
        <span class="keyword">else</span>
        {
            <span class="comment">/*we dont have space at the current tail block*/</span>
            <span class="keyword">if</span> (size &gt; allocator-&gt;BLOCK_SIZE)
            {
                <span class="keyword">struct</span> Block* pNew = malloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Block) + size);
                <span class="keyword">if</span> (pNew)
                {
                    <span class="comment">/*new block is created without changing the tail block*/</span>
                    pNew-&gt;pNext = allocator-&gt;pHead;
                    allocator-&gt;pHead = pNew;
                    pointer = pNew + <span class="number">1</span>;
                }
            }
            <span class="keyword">else</span>
            {
                <span class="comment">/*
                 new tail block is created and some memory is wasted at the previous
                 tail block
                */</span>
                <span class="keyword">struct</span> Block* pNew = malloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Block) + allocator-&gt;BLOCK_SIZE);
                <span class="keyword">if</span> (pNew)
                {
                    pNew-&gt;pNext = <span class="number">0</span>;
                    allocator-&gt;pTail-&gt;pNext = pNew;
                    pointer = pNew + <span class="number">1</span>;
                    allocator-&gt;bytesUsed = size;
                }
            }
        }
    }

    <span class="keyword">return</span> pointer;
}

<span class="keyword">void</span>* allocator_malloc(<span class="keyword">struct</span> Allocator* allocator, <span class="keyword">int</span> sz)
{
    <span class="keyword">return</span> allocator_aligned_alloc(allocator, <span class="number">8</span> <span class="comment">/*default aligment*/</span>, sz);
}

<span class="keyword">char</span>* StrDup(<span class="keyword">struct</span> Allocator* allocator, <span class="keyword">const</span> <span class="keyword">char</span>* s)
{
    <span class="keyword">int</span> sz = strlen(s);
    <span class="keyword">char</span>* r = allocator_malloc(allocator, sz + <span class="number">1</span>);
    <span class="keyword">if</span> (r)
        memcpy(r, s, sz + <span class="number">1</span>);
    <span class="keyword">return</span> r;
}

<span class="keyword">void</span> allocator_free(<span class="keyword">struct</span> Allocator* allocator) {
    
    <span class="keyword">for</span> (<span class="keyword">struct</span> Block* p = allocator-&gt;pHead; p; ) {
        <span class="keyword">struct</span> Block* temp = p;
        p = p-&gt;pNext;
        free(temp);
    }
}

<span class="keyword">void</span> Test1()
{
    <span class="keyword">struct</span> Allocator allocator = { .BLOCK_SIZE = <span class="number">8</span> };
    <span class="keyword">char</span>* s = allocator_malloc(&amp;allocator, <span class="number">4</span>);
    assert(allocator.pHead != NULL);
    assert(allocator.pTail != NULL);
    assert(allocator.pHead == allocator.pTail);
    assert(allocator.bytesUsed == <span class="number">4</span>);

    allocator_free(&amp;allocator);
}

<span class="keyword">int</span> main()
{
    <span class="keyword">struct</span> Allocator allocator = ALLOCATOR_INIT;
    <span class="keyword">char</span>* text = <span class="number">0</span>;
    text = StrDup(&amp;allocator, <span class="string">&quot;1&quot;</span>);
    text = StrDup(&amp;allocator, <span class="string">&quot;1234567890ABCD&quot;</span>);
    text = StrDup(&amp;allocator, <span class="string">&quot;test2&quot;</span>);

    allocator_free(&amp;allocator);
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  