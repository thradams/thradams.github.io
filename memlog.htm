<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>Two implementations for memory log.</p>

<p>First is a circular buffer of char.</p>

<p>Second is a circular buffer of blocks of chars.</p>

<p>Second is fast to print from new to old but some memoryis wasted.</p>


<pre>
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;


<span class="keyword">#define</span> MAX_SIZE <span class="number">10</span>

<span class="keyword">struct</span> circular_buffer
{
    <span class="keyword">char</span> text[MAX_SIZE];
    <span class="keyword">int</span> head;
    <span class="keyword">int</span> isFull;
};

<span class="keyword">void</span> push(<span class="keyword">struct</span> circular_buffer* cb, <span class="keyword">const</span> <span class="keyword">char</span>* text)
{
    <span class="keyword">const</span> <span class="keyword">char</span>* p = text;
    <span class="keyword">for</span> (;;)
    {
        cb-&gt;text[cb-&gt;head] = *p;
        cb-&gt;head++;
        <span class="keyword">if</span> (cb-&gt;head &gt;= MAX_SIZE)
        {
            cb-&gt;isFull = <span class="number">1</span>;
            cb-&gt;head = <span class="number">0</span>;
        }
        <span class="keyword">if</span> (*p == <span class="number">0</span>)
            <span class="keyword">break</span>;
        p++;
    }
}

<span class="keyword">char</span> get(<span class="keyword">struct</span> circular_buffer* c, <span class="keyword">int</span> index)
{
    <span class="keyword">if</span> (c-&gt;isFull)
    {
        <span class="keyword">if</span> (c-&gt;head + index &lt; MAX_SIZE)
        {
            index = c-&gt;head + index;
        }
        <span class="keyword">else</span>
        {
            index = index - (MAX_SIZE - c-&gt;head);
        }
    }
    assert(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; MAX_SIZE);
    <span class="keyword">return</span> c-&gt;text[index];
}

<span class="keyword">void</span> print_old_to_new(<span class="keyword">struct</span> circular_buffer* cb)
{
    <span class="keyword">if</span> (cb-&gt;isFull)
    {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = cb-&gt;head; i &lt; MAX_SIZE; i++)
        {
            <span class="keyword">if</span> (cb-&gt;text[i] == <span class="number">0</span>)
            {
                printf(<span class="string">&quot; &quot;</span>);
            }
            <span class="keyword">else</span>
                printf(<span class="string">&quot;%c&quot;</span>, cb-&gt;text[i]);
        }
    }

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cb-&gt;head; i++)
    {
        <span class="keyword">if</span> (cb-&gt;text[i] == <span class="number">0</span>)
        {
            printf(<span class="string">&quot; &quot;</span>);
        }
        <span class="keyword">else</span>
            printf(<span class="string">&quot;%c&quot;</span>, cb-&gt;text[i]);
    }
    printf(<span class="string">&quot;\n&quot;</span>);
}


<span class="keyword">void</span> print_new_to_old(<span class="keyword">struct</span> circular_buffer* cb)
{
    <span class="keyword">int</span> len = cb-&gt;isFull ? MAX_SIZE : cb-&gt;head;
    
    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)
    {
        <span class="keyword">char</span> ch;
        <span class="keyword">if</span> (i &gt;<span class="number">0</span> )
          ch = get(cb, i<span class="number">-1</span>);

        <span class="keyword">if</span> (i == <span class="number">0</span> || ch == <span class="string">'\0'</span>)
        {
            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; ;k++)
            {
                ch = get(cb, k);
                <span class="keyword">if</span> (ch == <span class="number">0</span>)
                {
                    printf(<span class="string">&quot; &quot;</span>);
                    <span class="keyword">break</span>;
                }
                <span class="keyword">else</span>
                    printf(<span class="string">&quot;%c&quot;</span>, ch);
            }
        }
    }

 
    printf(<span class="string">&quot;\n&quot;</span>);
}

<span class="keyword">int</span> main()
{
    <span class="keyword">struct</span> circular_buffer cb = { <span class="number">0</span> };
    push(&amp;cb, <span class="string">&quot;123456&quot;</span>);
    push(&amp;cb, <span class="string">&quot;abcde&quot;</span>);
    print_old_to_new(&amp;cb);
    print_new_to_old(&amp;cb);
}



</pre>



<pre>

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;

<span class="keyword">#define</span> LINE_LEN <span class="number">4</span>
<span class="keyword">#define</span> MAX_LINES <span class="number">3</span>

<span class="keyword">struct</span> circular_buffer
{
    <span class="keyword">char</span> lines[MAX_LINES][LINE_LEN]; <span class="comment">//ten lines of 4 chars
</span>    <span class="keyword">int</span> head;
    <span class="keyword">int</span> isFull;
};

<span class="keyword">void</span> push(<span class="keyword">struct</span> circular_buffer* cb, <span class="keyword">const</span> <span class="keyword">char</span>* text)
{
    <span class="keyword">int</span> count = <span class="number">0</span>;
    <span class="keyword">const</span> <span class="keyword">char</span>* p = text;
    <span class="keyword">for</span> (;;)
    {
        <span class="keyword">if</span> (count == LINE_LEN)
        {
            <span class="comment">/*new*/</span>
            cb-&gt;head++;            
            <span class="keyword">if</span> (cb-&gt;head == MAX_LINES)
            {
                cb-&gt;isFull = <span class="number">1</span>;
                cb-&gt;head = <span class="number">0</span>;
            }
            count = <span class="number">0</span>;
        }
        cb-&gt;lines[cb-&gt;head][count] = *p;

        <span class="keyword">if</span> (*p == <span class="number">0</span>)
        {
            cb-&gt;lines[cb-&gt;head][LINE_LEN - <span class="number">1</span>] = <span class="string">'\0'</span>;
            <span class="keyword">break</span>;
        }
        p++;
        count++;
    }


    cb-&gt;head++;
    <span class="keyword">if</span> (cb-&gt;head &gt;= MAX_LINES)
        cb-&gt;head = <span class="number">0</span>;
}

<span class="keyword">void</span> print_raw(<span class="keyword">struct</span> circular_buffer* cb)
{
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_LINES; i++)
    {
        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; LINE_LEN; k++)
        {
            <span class="keyword">if</span> (cb-&gt;lines[i][k] == <span class="number">0</span>)
            {
                <span class="keyword">for</span> (; k &lt; LINE_LEN; k++)
                {
                    <span class="keyword">if</span> (cb-&gt;lines[i][k] == <span class="number">0</span>)
                        printf(<span class="string">&quot;.&quot;</span>);
                    <span class="keyword">else</span>
                        printf(<span class="string">&quot;%c&quot;</span>, cb-&gt;lines[i][k]);
                }
                <span class="keyword">break</span>;
            }
            printf(<span class="string">&quot;%c&quot;</span>, cb-&gt;lines[i][k]);
        }
        printf(<span class="string">&quot; &quot;</span>);
    }
    printf(<span class="string">&quot;(%d)&quot;</span>, cb-&gt;head);
    printf(<span class="string">&quot;\n&quot;</span>);
}

<span class="keyword">void</span> print_old_to_new(<span class="keyword">struct</span> circular_buffer* cb)
{
    <span class="keyword">if</span> (cb-&gt;isFull)
    {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = cb-&gt;head; i &lt; MAX_LINES; i++)
        {
            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; LINE_LEN; k++)
            {
                <span class="keyword">if</span> (cb-&gt;lines[i][k] == <span class="number">0</span>)
                {
                    <span class="keyword">break</span>;
                }
                printf(<span class="string">&quot;%c&quot;</span>, cb-&gt;lines[i][k]);
            }
        }
    }

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cb-&gt;head; i++)
    {
        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; LINE_LEN; k++)
        {
            <span class="keyword">if</span> (cb-&gt;lines[i][k] == <span class="number">0</span>)
            {
                <span class="keyword">break</span>;
            }
            printf(<span class="string">&quot;%c&quot;</span>, cb-&gt;lines[i][k]);
        }
    }
    printf(<span class="string">&quot;\n&quot;</span>);
}

<span class="keyword">char</span>* get(<span class="keyword">struct</span> circular_buffer* c, <span class="keyword">int</span> index)
{
    <span class="keyword">if</span> (c-&gt;isFull)
    {
        <span class="keyword">if</span> (c-&gt;head + index &lt; MAX_LINES)
        {
            index = c-&gt;head + index;
        }
        <span class="keyword">else</span>
        {
            index = index - (MAX_LINES - c-&gt;head);
        }
    }
    assert(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; MAX_LINES);
    <span class="keyword">return</span> c-&gt;lines[index];    
}

<span class="keyword">void</span> print_new_to_old(<span class="keyword">struct</span> circular_buffer* cb)
{
    <span class="keyword">int</span> len = cb-&gt;isFull ? MAX_LINES : cb-&gt;head;
    <span class="comment">//andar para tras
</span>    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)
    {
        <span class="keyword">char</span>* p;
        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)
           p = get(cb, i - <span class="number">1</span>);
        <span class="keyword">else</span>
           p = get(cb, <span class="number">0</span>);

        <span class="keyword">if</span> (i == <span class="number">0</span> || p[LINE_LEN - <span class="number">1</span>] == <span class="number">0</span>)
        {
            <span class="keyword">int</span> j = i;
            <span class="keyword">for</span> (;;)
            {
                <span class="keyword">char</span>* p2 = get(cb, j);
                <span class="keyword">int</span> k = <span class="number">0</span>;
                <span class="keyword">for</span> (; k &lt; LINE_LEN; k++)
                {
                    <span class="keyword">if</span> (p2[k] == <span class="string">'\0'</span>)
                        <span class="keyword">break</span>;
                    printf(<span class="string">&quot;%c&quot;</span>, p2[k]);
                }
                <span class="keyword">if</span> (p2[k] == <span class="string">'\0'</span>)
                {
                    printf(<span class="string">&quot; &quot;</span>);
                    <span class="keyword">break</span>;
                }
                j++;
            }
        }
    }
    printf(<span class="string">&quot;\n&quot;</span>);
}

<span class="keyword">char</span>* getline(<span class="keyword">void</span>) {
    <span class="keyword">char</span>* line = malloc(<span class="number">100</span>), * linep = line;
    size_t lenmax = <span class="number">100</span>, len = lenmax;
    <span class="keyword">int</span> c;

    <span class="keyword">if</span> (line == NULL)
        <span class="keyword">return</span> NULL;

    <span class="keyword">for</span> (;;) {
        c = fgetc(stdin);
        <span class="keyword">if</span> (c == EOF)
            <span class="keyword">break</span>;

        <span class="keyword">if</span> (--len == <span class="number">0</span>) {
            len = lenmax;
            <span class="keyword">char</span>* linen = realloc(linep, lenmax *= <span class="number">2</span>);

            <span class="keyword">if</span> (linen == NULL) {
                free(linep);
                <span class="keyword">return</span> NULL;
            }
            line = linen + (line - linep);
            linep = linen;
        }

        <span class="keyword">if</span> ((*line++ = c) == <span class="string">'\n'</span>)
            <span class="keyword">break</span>;
    }
    *(line <span class="number">-1</span>)= <span class="string">'\0'</span>;
    *line = <span class="string">'\0'</span>;
    <span class="keyword">return</span> linep;
}

<span class="keyword">int</span> main()
{
    <span class="keyword">struct</span> circular_buffer cb = { <span class="number">0</span> };
    push(&amp;cb, <span class="string">&quot;123456&quot;</span>);
    print_raw(&amp;cb);
    push(&amp;cb, <span class="string">&quot;abcde&quot;</span>);
    print_raw(&amp;cb);
    print_old_to_new(&amp;cb);
    print_new_to_old(&amp;cb);
    push(&amp;cb, <span class="string">&quot;novo&quot;</span>);
    print_raw(&amp;cb);
    print_new_to_old(&amp;cb);
    push(&amp;cb, <span class="string">&quot;casa&quot;</span>);
    print_raw(&amp;cb);
    print_new_to_old(&amp;cb);

    <span class="keyword">for</span> (;;)
    {
        <span class="keyword">char</span>* line = getline();
        
        push(&amp;cb, line);
        
        free(line);
        print_raw(&amp;cb);
        print_new_to_old(&amp;cb);
    }
}


</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  