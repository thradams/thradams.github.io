
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<p>Little test: Exceptions runtime overhead</p>


<pre>
<span class="keyword">const</span> <span class="keyword">int</span> LoopSteps = <span class="number">1000000</span>;
<span class="keyword">inline</span> <span class="keyword">bool</span> CheckError(<span class="keyword">int</span> i)
{
  <span class="keyword">return</span> i % <span class="number">2</span> == <span class="number">0</span>;<span class="comment">// 123456789;
</span>}

<span class="keyword">void</span> PartTwo(<span class="keyword">int</span>&amp; count)
{  
  <span class="keyword">if</span> (CheckError(count))
    <span class="keyword">throw</span> <span class="number">1</span>;
  count++;
}

<span class="keyword">void</span> PartOne(<span class="keyword">int</span>&amp; count)
{
  PartTwo(count);
}

<span class="keyword">void</span> Start(<span class="keyword">int</span>&amp; count)
{
  PartOne(count);
}

<span class="keyword">int</span> PartTwo_(<span class="keyword">int</span>&amp; count)
{
  <span class="keyword">if</span> (CheckError(count))
    <span class="keyword">return</span> <span class="number">1</span>;
  count++;
  <span class="keyword">return</span> <span class="number">0</span>;
}

<span class="keyword">int</span> PartOne_(<span class="keyword">int</span>&amp; count)
{
  <span class="keyword">return</span> PartTwo_(count);
}

<span class="keyword">int</span> Start_(<span class="keyword">int</span>&amp; count)
{
  <span class="keyword">return</span> PartOne_(count);
}


<span class="keyword">void</span> ExceptionTest()
{
  Stopwatch st(<span class="keyword">true</span>);
  <span class="keyword">int</span> count = <span class="number">0</span>;
  <span class="keyword">int</span> countError = <span class="number">0</span>;
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; LoopSteps; i++)
  {
    <span class="keyword">try</span>
    {
      Start(count);
    }
    <span class="keyword">catch</span>(<span class="keyword">int</span>) 
    { 
      countError++;
      count++;
    } 
  }
  
  std::cout &lt;&lt; <span class="string">&quot;ExceptionTest&quot;</span> &lt;&lt; std::endl;
  std::cout &lt;&lt; st &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="string">&quot;Error count &quot;</span> &lt;&lt; countError &lt;&lt; std::endl;
  std::cout &lt;&lt; std::endl;
}

<span class="keyword">void</span> ReturnCodeTest()
{
  Stopwatch st(<span class="keyword">true</span>);
  <span class="keyword">int</span> count = <span class="number">0</span>;
  <span class="keyword">int</span> countError = <span class="number">0</span>;
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; LoopSteps; i++)
  {
    <span class="keyword">if</span> (Start_(count) &gt; <span class="number">0</span>)
    {  
      countError++;
      count++;
    }
  }
  
  std::cout &lt;&lt; <span class="string">&quot;ReturnCodeTest&quot;</span> &lt;&lt; std::endl;
  std::cout &lt;&lt; st &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="string">&quot;Error count &quot;</span> &lt;&lt; countError &lt;&lt; std::endl;
  std::cout &lt;&lt; std::endl;
}


<span class="keyword">int</span> main()
{
  ExceptionTest();
  ReturnCodeTest();
}
</pre>


<pre>
Results: (VC++ 2008)
ExceptionTest
22 ms (running)
Error count 0

ReturnCodeTest
23 ms (running)
Error count 0

Changing CheckError to &quot;return i % 2 == 0&quot;:

ExceptionTest
5220 ms (running)
Error count 500000

ReturnCodeTest
11 ms (running)
Error count 500000

</pre>

<!-- Page content end --> 
</article> 
 
</body> 
</html>  