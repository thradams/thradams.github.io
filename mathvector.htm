<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h2>Immutable math vector class</h2>

<p>How many times have you written a vector class? I have many times. </p>

<p>However this is the first time I wrote an immutable vector class where all data members are const.</p>

<pre>

<span class="keyword">#pragma</span> once

<span class="keyword">#include</span> &lt;math.h&gt;
<span class="keyword">#include</span> &lt;iostream&gt;

<span class="keyword">namespace</span> Math
{
  <span class="keyword">const</span> <span class="keyword">double</span> M_PI = <span class="number">3.1</span><span class="number">4159265358979323846</span>;

  <span class="keyword">inline</span> <span class="keyword">double</span> RadToDeg(<span class="keyword">double</span> rad)
  {
    <span class="keyword">return</span> rad * <span class="number">180.0</span> / M_PI;
  }

  <span class="keyword">inline</span> <span class="keyword">double</span> DegToRad(<span class="keyword">double</span> deg)
  {
    <span class="keyword">return</span> deg * M_PI / <span class="number">180.0</span>;
  }

  <span class="keyword">class</span> Vector
  {
  <span class="keyword">public</span>:
    <span class="keyword">const</span> <span class="keyword">double</span> x;
    <span class="keyword">const</span> <span class="keyword">double</span> y;

    Vector() : x(<span class="number">0</span>), y(<span class="number">0</span>) {}

    Vector(<span class="keyword">double</span> i, <span class="keyword">double</span> j) : x(i), y(j) {}

    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Vector&amp; v2) <span class="keyword">const</span>
    {
      <span class="keyword">return</span> v2.x == x &amp;&amp; v2.y == y;
    }

    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Vector&amp; v2) <span class="keyword">const</span>
    {
      <span class="keyword">return</span> ! <span class="keyword">operator</span>==(v2);
    }

    <span class="keyword">inline</span> <span class="keyword">bool</span> IsNull() <span class="keyword">const</span>
    {
      <span class="keyword">return</span> x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>;
    }

    <span class="keyword">inline</span> <span class="keyword">double</span> ScalarProduct(<span class="keyword">const</span> Vector&amp; v2) <span class="keyword">const</span>
    {
       <span class="keyword">const</span> Vector v1u(Unit());
       <span class="keyword">const</span> Vector v2u(v2.Unit());
       <span class="keyword">return</span> (v1u.x * v2u.x) + (v1u.y * v2u.y);      
    }

    <span class="keyword">inline</span> <span class="keyword">double</span> Length() <span class="keyword">const</span>
    {
      <span class="keyword">return</span> sqrt(x * x + y * y);
    }

    <span class="keyword">inline</span> Vector Unit() <span class="keyword">const</span>
    {
      <span class="keyword">const</span> <span class="keyword">double</span> r = Length();
      <span class="keyword">if</span> (r == <span class="number">0</span>)
        <span class="keyword">return</span> Vector();
      <span class="keyword">return</span> Vector(x / r, y / r);
    }

    <span class="keyword">inline</span> <span class="keyword">double</span> ClockwiseAngle(<span class="keyword">const</span> Vector&amp; v2) <span class="keyword">const</span>
    {
      <span class="keyword">return</span> -atan2(x * v2.y - y * v2.x, x * v2.x + y * v2.y);
    }

    <span class="keyword">inline</span> Vector ClockwiseRotated90() <span class="keyword">const</span>
    {
      <span class="keyword">const</span> <span class="keyword">double</span> cos_a = <span class="number">0</span>;
      <span class="keyword">const</span> <span class="keyword">double</span> sin_a = <span class="number">1</span>;
      <span class="keyword">return</span> Vector(x * cos_a + y * sin_a, y * cos_a - x * sin_a);           
    }

    <span class="keyword">inline</span> Vector ClockwiseRotatedRad(<span class="keyword">double</span> rad) <span class="keyword">const</span>
    {
      <span class="keyword">const</span> <span class="keyword">double</span> cos_a = cos(rad);
      <span class="keyword">const</span> <span class="keyword">double</span> sin_a = sin(rad);
      <span class="keyword">return</span> Vector(x * cos_a + y * sin_a, y * cos_a - x * sin_a);           
    }        

    <span class="keyword">inline</span> <span class="keyword">bool</span> ArePerpendicular(<span class="keyword">const</span> Vector&amp; v2) <span class="keyword">const</span>
    {
      <span class="keyword">return</span> ScalarProduct(v2) == <span class="number">0.0</span>;
    }

    <span class="keyword">inline</span> Vector Perpendicular()<span class="keyword">const</span>
    {
      <span class="keyword">return</span> Vector(-y, x);   
    }
  }; <span class="comment">//Vector
</span>

  <span class="keyword">inline</span> Vector <span class="keyword">operator</span> * (<span class="keyword">const</span> Vector&amp; v1, <span class="keyword">double</span> v) 
  {
    <span class="keyword">return</span> Vector(v1.x * v, v1.y * v);
  }

  <span class="keyword">inline</span> Vector <span class="keyword">operator</span> * (<span class="keyword">double</span> v, <span class="keyword">const</span> Vector&amp; v1) 
  {
    <span class="keyword">return</span> Vector(v1.x * v, v1.y * v);
  }

  <span class="keyword">inline</span> Vector <span class="keyword">operator</span> / (<span class="keyword">const</span> Vector&amp; v1, <span class="keyword">double</span> v) 
  {
    <span class="keyword">return</span> Vector(v1.x / v, v1.y / v);
  }

  <span class="keyword">inline</span> Vector <span class="keyword">operator</span> + (<span class="keyword">const</span> Vector&amp; v1, <span class="keyword">const</span> Vector&amp; v2)
  {
    <span class="keyword">return</span> Vector(v1.x + v2.x, v1.y + v2.y);
  }

  <span class="keyword">inline</span> Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; v1, <span class="keyword">const</span> Vector&amp; v2)
  {
    <span class="keyword">return</span> Vector(v1.x - v2.x, v1.y - v2.y);
  }

  <span class="keyword">inline</span> Vector <span class="keyword">operator</span> - (<span class="keyword">const</span> Vector&amp; v1)
  {
    <span class="keyword">return</span>  Vector(-v1.x, -v1.y);
  }

  <span class="keyword">inline</span> Vector MakeVector(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)
  {
    <span class="keyword">return</span> Vector(x2 - x1, y2 - y1);
  }

  std::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream&amp; os, <span class="keyword">const</span> Vector&amp; v)
  {
    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; v.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; v.y &lt;&lt; <span class="string">&quot;)&quot;</span>;
    <span class="keyword">return</span> os;
  }
} <span class="comment">// namespace math
</span></pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  