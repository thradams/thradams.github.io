<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->


<h2> Make Tests</h2>

<p>This program scans the  source files that are inside a Visual Studio project searching for tests starting with UNIT</p>

<p>Then an output file is generated with forward declarations and calling eachtest.</p>

<p>Usage: Inside Visual Studio External Tools</p>

<pre>
Command: your exe path
Arguments: $(ProjectFileName) unit_test.c
Initial Directory: $(ProjectDir)
[x] Use output window
</pre>


<p>Sample</p>

<pre>

<span class="keyword">#ifdef</span> TEST
<span class="keyword">#include</span> <span class="string">&quot;unit_test.h&quot;</span>

<span class="keyword">void</span> UNIT_TEST_JsonTest1(<span class="keyword">void</span>)
{
    <span class="keyword">char</span> buffer[<span class="number">3</span>];
    <span class="keyword">int</span> n = json_snprintf(buffer, <span class="keyword">sizeof</span> buffer, <span class="string">&quot;ABC&quot;</span>);
    ASSERT(n == <span class="number">3</span>);
    ASSERT(strcmp(buffer, <span class="string">&quot;AB&quot;</span>) == <span class="number">0</span>);

    <span class="keyword">char</span> buffer10[<span class="number">10</span>];
    n = json_snprintf(buffer10, <span class="keyword">sizeof</span> buffer10, <span class="string">&quot;'%s'&quot;</span>, <span class="string">&quot;string&quot;</span>);
    ASSERT(n == <span class="number">8</span>);
    ASSERT(strcmp(buffer10, <span class="string">&quot;\&quot;string\&quot;&quot;</span>) == <span class="number">0</span>);

}
<span class="keyword">#endif</span>

</pre>


<pre>
<span class="comment">//unit_test.h
</span><span class="keyword">#pragma</span> once

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> <span class="string">&quot;terminal.h&quot;</span>

<span class="keyword">#define</span> RESET ESC <span class="string">&quot;[0m&quot;</span>

<span class="keyword">#define</span> ASSERT(B) printf(<span class="string">&quot;%d : '%s' &quot;</span>, __LINE__ , #B); <span class="keyword">if</span> (!(B)) { printf(<span class="string">&quot; : &quot;</span> RED <span class="string">&quot; ERROR!\n&quot;</span> RESET); exit(<span class="number">1</span>); } <span class="keyword">else</span> printf(<span class="string">&quot; : &quot;</span> GREEN <span class="string">&quot; OK\n&quot;</span> RESET);

</pre>



<p>Source:</p>

<pre>
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;sys/stat.h&gt;

<span class="keyword">struct</span> Test
{
    <span class="keyword">char</span> name[<span class="number">100</span>];
    <span class="keyword">struct</span> Test* pNext;
};

<span class="keyword">struct</span> TestList
{
    <span class="keyword">struct</span> Test* pHead;
    <span class="keyword">struct</span> Test* pTail;
};

<span class="keyword">void</span> CollectTests(FILE* f, <span class="keyword">struct</span> TestList* <span class="keyword2">list</span>)
{
    <span class="keyword">char</span> ch = fgetc(f);
    <span class="keyword">while</span> (!feof(f))
    {
        <span class="keyword">int</span> count = <span class="number">0</span>;

        <span class="keyword">char</span> buffer[<span class="number">100</span>] = { <span class="number">0</span> };

        <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span> ||
            ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>)
        {
            <span class="keyword">while</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span> ||
                   ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span> ||
                   ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span> ||
                   ch == <span class="string">'_'</span>)
            {
                buffer[count] = ch;
                ch = fgetc(f);
                count++;
            }
            <span class="keyword">if</span> (buffer[<span class="number">0</span>] == <span class="string">'U'</span> &amp;&amp;
                buffer[<span class="number">1</span>] == <span class="string">'N'</span> &amp;&amp;
                buffer[<span class="number">2</span>] == <span class="string">'I'</span> &amp;&amp;
                buffer[<span class="number">3</span>] == <span class="string">'T'</span> &amp;&amp;
                buffer[<span class="number">4</span>] == <span class="string">'_'</span> &amp;&amp;
                buffer[<span class="number">5</span>] == <span class="string">'T'</span> &amp;&amp;
                buffer[<span class="number">6</span>] == <span class="string">'E'</span> &amp;&amp;
                buffer[<span class="number">7</span>] == <span class="string">'S'</span> &amp;&amp;
                buffer[<span class="number">8</span>] == <span class="string">'T'</span>
                )
            {
                <span class="keyword">struct</span> Test* p = calloc(<span class="number">1</span>, <span class="keyword">sizeof</span> * p);
                <span class="keyword">if</span> (p)
                {
                    strncpy(p-&gt;name, buffer, <span class="keyword">sizeof</span>(buffer));
                    printf(<span class="string">&quot;  %s\n&quot;</span>, p-&gt;name);

                    <span class="keyword">if</span> (<span class="keyword2">list</span>-&gt;pTail == NULL)
                    {
                        <span class="keyword2">list</span>-&gt;pHead = p;
                        <span class="keyword2">list</span>-&gt;pTail = p;
                    }
                    <span class="keyword">else</span> {
                        <span class="keyword2">list</span>-&gt;pTail-&gt;pNext = p;
                        <span class="keyword2">list</span>-&gt;pTail = p;
                    }
                }
            }
        }

        ch = fgetc(f);
    }
}

<span class="keyword">void</span> CollectTestsFile(<span class="keyword">const</span> <span class="keyword">char</span>* file, <span class="keyword">struct</span> TestList* <span class="keyword2">list</span>)
{
    FILE* f = fopen(file, <span class="string">&quot;r&quot;</span>);
    <span class="keyword">if</span> (f)
    {
        printf(<span class="string">&quot;%s\n&quot;</span>, file);
        CollectTests(f, <span class="keyword2">list</span>);
        fclose(f);
    }
}


<span class="keyword">struct</span> stream {
    
    <span class="comment">/*cursor*/</span>
    <span class="keyword">const</span> <span class="keyword">char</span>* p;

    <span class="comment">/*
     name of the current node
    */</span>
    <span class="keyword">const</span> <span class="keyword">char</span>* node;

    <span class="keyword">struct</span> TestList* <span class="keyword2">list</span>;

    <span class="keyword">const</span> <span class="keyword">char</span>* out;
};

<span class="keyword">#define</span> current(stream) (stream)-&gt;p[<span class="number">0</span>]
<span class="keyword">#define</span> next(stream) (stream)-&gt;p[<span class="number">1</span>]
<span class="keyword">#define</span> match(stream) stream-&gt;p++
<span class="keyword">#define</span> is_space(stream) (current(stream) == <span class="string">' '</span> || current(stream) == <span class="string">'\r'</span> || current(stream) == <span class="string">'\n'</span>)
<span class="keyword">#define</span> skip_spaces(p)  <span class="keyword">while</span> (is_space(p)) { match(p); }


<span class="keyword">const</span> <span class="keyword">char</span>* parse_id(<span class="keyword">struct</span> stream* p)
{
    <span class="keyword">const</span> <span class="keyword">char</span>* start = p-&gt;p;
    <span class="keyword">while</span> (current(p) &gt;= <span class="string">'a'</span> &amp;&amp; current(p) &lt;= <span class="string">'z'</span> ||
           current(p) &gt;= <span class="string">'A'</span> &amp;&amp; current(p) &lt;= <span class="string">'Z'</span> ||
           current(p) &gt;= <span class="string">'0'</span> &amp;&amp; current(p) &lt;= <span class="string">'9'</span> ||
           current(p) &gt;= <span class="string">'_'</span>)
    {
        match(p);
    }
    <span class="keyword">return</span> start;
}

<span class="keyword">void</span> parse_attribute(<span class="keyword">struct</span> stream* p)
{
    <span class="comment">/*
     attribute ::= &lt;id&gt; '=' '&quot;' &lt;string&gt; '&quot;'
    */</span>
    <span class="keyword">if</span> (current(p) &gt;= <span class="string">'a'</span> &amp;&amp; current(p) &lt;= <span class="string">'z'</span> ||
        current(p) &gt;= <span class="string">'A'</span> &amp;&amp; current(p) &lt;= <span class="string">'Z'</span> ||
        current(p) &gt;= <span class="string">'_'</span>) <span class="comment">/*first of &lt;id&gt;*/</span>
    {
        <span class="keyword">const</span> <span class="keyword">char</span>* start = parse_id(p);
        <span class="comment">//printf(&quot;attribute '%.*s'&quot;, (int)(p-&gt;p - start), start);
</span>
        skip_spaces(p);
        match(p); <span class="comment">// '='
</span>        skip_spaces(p);
        match(p); <span class="comment">// '&quot;'
</span>
        start = p-&gt;p;
        <span class="keyword">while</span> (current(p) != '\&quot;') match(p);
        <span class="comment">//printf(&quot; = value '%.*s'\n&quot;, (int)(p-&gt;p - start), start);
</span>
        <span class="keyword">if</span> (strcmp(p-&gt;node, <span class="string">&quot;ClCompile&quot;</span>) == <span class="number">0</span>)
        {
            <span class="keyword">char</span> fileName[<span class="number">200</span>] = {<span class="number">0</span>};
            strncpy(fileName, start, (<span class="keyword">int</span>)(p-&gt;p - start));

            <span class="comment">//we dont collect tests from the ouput itself
</span>            <span class="keyword">if</span> (strcmp(fileName, p-&gt;out) == <span class="number">0</span>)
            {
                CollectTestsFile(fileName, p-&gt;<span class="keyword2">list</span>);
            }
            <span class="comment">//printf(&quot;%.*s\n&quot;, (int)(p-&gt;p - start), start);
</span>        }
        match(p); <span class="comment">// '&quot;'
</span>    }
}

<span class="keyword">void</span> parse_attribute_list(<span class="keyword">struct</span> stream* p)
{
    <span class="comment">/*
     attribute_list ::= &lt;attribute&gt; &lt;attribute_list&gt; | (empty)
    */</span>
    skip_spaces(p);
    <span class="keyword">while</span> (current(p) &gt;= <span class="string">'a'</span> &amp;&amp; current(p) &lt;= <span class="string">'z'</span> ||
           current(p) &gt;= <span class="string">'A'</span> &amp;&amp; current(p) &lt;= <span class="string">'Z'</span> ||
           current(p) &gt;= <span class="string">'_'</span>)
    {
        parse_attribute(p);
        skip_spaces(p);
    }
}

<span class="keyword">void</span> parse_node(<span class="keyword">struct</span> stream* p);

<span class="keyword">void</span> parse_node_list(<span class="keyword">struct</span> stream* p)
{
    <span class="comment">/*
      node_list ::= &lt;node&gt; &lt;node_list&gt; | (empty)
    */</span>

    <span class="keyword">while</span> (current(p) == <span class="string">'&lt;'</span> &amp;&amp; next(p) != <span class="string">'/'</span>)
    {
        parse_node(p);
        skip_spaces(p);
    }
}

<span class="keyword">const</span> <span class="keyword">char</span>* parse_string(<span class="keyword">struct</span> stream* p)
{
    <span class="keyword">const</span> <span class="keyword">char</span>* start = p-&gt;p;
    <span class="keyword">if</span> (start != <span class="number">0</span>)
    {
        <span class="keyword">while</span> (current(p) != <span class="string">'&lt;'</span> &amp;&amp; current(p) != <span class="string">'&gt;'</span>) match(p);
        <span class="comment">//printf(&quot;string = '%.*s'\n&quot;, (int)(p-&gt;p - start), start);
</span>    }
    <span class="keyword">return</span> start;
}

<span class="keyword">void</span> parse_element(<span class="keyword">struct</span> stream* p)
{
    <span class="comment">/*
    element ::= &lt;node_list&gt; | &lt;string&gt;
    */</span>
    skip_spaces(p);
    <span class="keyword">if</span> (current(p) == <span class="string">'&lt;'</span> &amp;&amp; next(p) != <span class="string">'/'</span>) <span class="comment">/*first of node*/</span>
        parse_node_list(p);
    <span class="keyword">else</span>
        parse_string(p);
}

<span class="keyword">void</span> parse_node_end(<span class="keyword">struct</span> stream* p, <span class="keyword">const</span> <span class="keyword">char</span>* nodeid, <span class="keyword">int</span> nodeid_size)
{
    <span class="comment">/*
    * node_end ::= '/&gt;' | '&gt;' &lt;element&gt; '&lt;/' &lt;id&gt; '&gt;'
    */</span>
    skip_spaces(p);
    <span class="keyword">if</span> (current(p) == <span class="string">'/'</span> &amp;&amp; next(p) == <span class="string">'&gt;'</span>)
    {
        match(p); <span class="comment">// '/'
</span>        match(p); <span class="comment">// ''&gt;'
</span>    }
    <span class="keyword">else</span> <span class="keyword">if</span> (current(p) == <span class="string">'&gt;'</span>)
    {
        match(p); <span class="comment">// '&gt;'
</span>        parse_element(p);
        match(p); <span class="comment">// '&lt;'
</span>        match(p); <span class="comment">// '/'
</span>        <span class="keyword">const</span> <span class="keyword">char</span>* start = parse_id(p);
        match(p); <span class="comment">// '&gt;'
</span>        <span class="comment">//printf(&quot;end_node &lt;/'%.*s'&gt;\n&quot;, nodeid_size, nodeid);
</span>    }
}


<span class="keyword">void</span> parse_node(<span class="keyword">struct</span> stream* p)
{
    <span class="comment">/*
      node ::= '&lt;' &lt;id&gt; &lt;attribute_list&gt; &lt;node_end&gt; | (empty)
    */</span>

    skip_spaces(p);
    <span class="keyword">if</span> (current(p) == <span class="string">'&lt;'</span>)
    {
        match(p);
        skip_spaces(p);


        <span class="keyword">const</span> <span class="keyword">char</span>* start = parse_id(p);
        <span class="keyword">const</span> <span class="keyword">char</span>* nodeid = start;
        <span class="keyword">int</span> nodeid_size = (<span class="keyword">int</span>)(p-&gt;p - start);

        <span class="keyword">char</span> node[<span class="number">100</span>] = {<span class="number">0</span>};        
        strncpy(node, nodeid, nodeid_size);
        <span class="keyword">const</span> <span class="keyword">char</span>* oldnode = p-&gt;node;
        p-&gt;node = node;

        <span class="comment">//printf(&quot;    node &lt;'%.*s'&gt;\n&quot;, nodeid_size, nodeid);
</span>
        skip_spaces(p);
        parse_attribute_list(p);
        parse_node_end(p, nodeid, nodeid_size);
        
        p-&gt;node = oldnode;
    }
}

<span class="keyword">bool</span> fread2(<span class="keyword">void</span>* buffer, size_t size, size_t count, FILE* stream, size_t* sz)
{
    *sz = <span class="number">0</span>;<span class="comment">//out
</span>
    <span class="keyword">bool</span> result = <span class="keyword">false</span>;
    size_t n = fread(buffer, size, count, stream);
    <span class="keyword">if</span> (n == count) {
        *sz = n;
        result = <span class="keyword">true</span>;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; count) {
        <span class="keyword">if</span> (feof(stream))
        {
            *sz = n;
            result = <span class="keyword">true</span>;
        }
    }
    <span class="keyword">return</span> result;
}

<span class="keyword">char</span>* readfile(<span class="keyword">const</span> <span class="keyword">char</span>* path)
{
    <span class="keyword">char</span>* result = NULL;

    <span class="keyword">struct</span> stat info;
    <span class="keyword">if</span> (stat(path, &amp;info) == <span class="number">0</span>)
    {
        <span class="keyword">char</span>* data = (<span class="keyword">char</span>*)malloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * info.st_size + <span class="number">1</span>);
        <span class="keyword">if</span> (data != NULL)
        {
            FILE* file = fopen(path, <span class="string">&quot;r&quot;</span>);
            <span class="keyword">if</span> (file != NULL)
            {
                <span class="keyword">if</span> (info.st_size &gt;= <span class="number">3</span>)
                {
                    size_t n = <span class="number">0</span>;
                    <span class="keyword">if</span> (fread2(data, <span class="number">1</span>, <span class="number">3</span>, file, &amp;n))
                    {
                        <span class="keyword">if</span> (n == <span class="number">3</span>)
                        {
                            <span class="keyword">if</span> (data[<span class="number">0</span>] == (<span class="keyword">char</span>)<span class="number">0</span>xEF &amp;&amp;
                                data[<span class="number">1</span>] == (<span class="keyword">char</span>)<span class="number">0</span>xBB &amp;&amp;
                                data[<span class="number">2</span>] == (<span class="keyword">char</span>)<span class="number">0</span>xBF)
                            {
                                <span class="keyword">if</span> (fread2(data, <span class="number">1</span>, info.st_size - <span class="number">3</span>, file, &amp;n))
                                {
                                    <span class="comment">//ok
</span>                                    data[n] = <span class="number">0</span>;
                                    result = data; data = <span class="number">0</span>;
                                }
                            }
                            <span class="keyword">else</span> <span class="keyword">if</span> (fread2(data + <span class="number">3</span>, <span class="number">1</span>, info.st_size - <span class="number">3</span>, file, &amp;n))
                            {
                                data[<span class="number">3</span> + n] = <span class="number">0</span>;
                                result = data; data = <span class="number">0</span>;
                            }
                        }
                        <span class="keyword">else</span>
                        {
                            data[n] = <span class="number">0</span>;
                            result = data; data = <span class="number">0</span>;
                        }
                    }
                }
                <span class="keyword">else</span>
                {
                    size_t n = <span class="number">0</span>;
                    <span class="keyword">if</span> (fread2(data, <span class="number">1</span>, info.st_size, file, &amp;n))
                    {
                        data[n] = <span class="number">0</span>;
                        result = data; data = <span class="number">0</span>;
                    }
                }
                fclose(file);
            }
            free(data);
        }
    }
    <span class="keyword">return</span> result;
}


<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv) {

    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)
    {
        printf(<span class="string">&quot;usage: visual_project output.c\n&quot;</span>);
        <span class="keyword">return</span> EXIT_FAILURE;
    }


    printf(<span class="string">&quot;%s\n&quot;</span>, argv[<span class="number">1</span>]);
    <span class="keyword">const</span> <span class="keyword">char</span>* p = readfile(argv[<span class="number">1</span>]);<span class="comment">// &quot;&lt;node at1=\&quot;teste\&quot;&gt;aa&lt;/node&gt;&quot;;
</span>
    
    <span class="keyword">while</span> (*p != <span class="string">'\n'</span>)
    {
        p++;
    }

    <span class="keyword">struct</span> TestList <span class="keyword2">list</span> = { <span class="number">0</span> };

    <span class="keyword">struct</span> stream s = { .p = p , .<span class="keyword2">list</span> = &amp;<span class="keyword2">list</span>, .out=argv[<span class="number">2</span>]};
    parse_node(&amp;s);


    FILE* fout = fopen(argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>);
    <span class="keyword">if</span> (fout)
    {
        fprintf(fout, <span class="string">&quot;#ifdef TEST\n\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;//forward declarations\n\n&quot;</span>);

        <span class="keyword">struct</span> Test* pCurrent = <span class="keyword2">list</span>.pHead;
        <span class="keyword">while</span> (pCurrent)
        {
            fprintf(fout, <span class="string">&quot;void %s(void);\n&quot;</span>, pCurrent-&gt;name);
            pCurrent = pCurrent-&gt;pNext;
        }

        fprintf(fout, <span class="string">&quot;\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;void DoUnitTests(void)\n{\n&quot;</span>);
        pCurrent = <span class="keyword2">list</span>.pHead;
        <span class="keyword">while</span> (pCurrent)
        {
            fprintf(fout, <span class="string">&quot;  %s();\n&quot;</span>, pCurrent-&gt;name);
            pCurrent = pCurrent-&gt;pNext;
        }
        fprintf(fout, <span class="string">&quot;}\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;#endif\n&quot;</span>);
        fclose(fout);
    }

}

</pre>


<p>Output sample:</p>

<pre>
<span class="keyword">#ifdef</span> TEST

<span class="comment">//forward declarations
</span>
<span class="keyword">void</span> UNIT_TEST_NewUUID(<span class="keyword">void</span>);
<span class="keyword">void</span> UNIT_TEST_UrlTest(<span class="keyword">void</span>);

<span class="keyword">void</span> DoUnitTests(<span class="keyword">void</span>)
{
  UNIT_TEST_NewUUID();
  UNIT_TEST_UrlTest();
}
<span class="keyword">#endif</span>

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  