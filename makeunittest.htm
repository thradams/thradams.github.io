<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->


<h2> Make Tests</h2>

<p>This program scans the source files passed on the command line and collects test functions that are inside ifdef TEST. It generates an ouputfile tha calls all test functions.</p>


<pre>
maketest output.c file1.c file2.c ....
</pre>
<p>Sample:</p>

<p>file1.c</p>
<pre>
<span class="keyword">#ifdef</span> TEST
<span class="keyword">void</span> MyTestCase(<span class="keyword">void</span>)
{
}
<span class="keyword">#endif</span>
</pre>


<p>file2.c</p>
<pre>
<span class="keyword">#ifdef</span> TEST
<span class="keyword">void</span> MyTestCase2(<span class="keyword">void</span>)
{
}
<span class="keyword">#endif</span>
</pre>


<pre>
maketest output.c file1.c
</pre>

<p>generates output.c</p>

<pre>
<span class="keyword">#ifdef</span> TEST

<span class="comment">//forward declarations
</span>
<span class="comment">//file1.c
</span><span class="keyword">void</span> MyTestCase(<span class="keyword">void</span>);

<span class="comment">//file2.c
</span><span class="keyword">void</span> MyTestCase2(<span class="keyword">void</span>);

<span class="keyword">void</span> DoUnitTests(<span class="keyword">void</span>)
{
    <span class="comment">//file1.c
</span>    MyTestCase();    
    
    <span class="comment">//file2.c
</span>    MyTestCase2();    
}
<span class="keyword">#else</span>
; <span class="comment">//removes warning C4206: nonstandard extension used: translation unit is empty
</span><span class="keyword">#endif</span>

</pre>


<h2> How Do I use it?</h2>

<p>I define my ASSERT at unittest.h</p>

<pre>
<span class="keyword">#pragma</span> once

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> <span class="string">&quot;terminal.h&quot;</span> <span class="comment">/*colors*/</span>

<span class="keyword">#define</span> RESET ESC <span class="string">&quot;[0m&quot;</span>

<span class="keyword">#define</span> ASSERT(B) printf(<span class="string">&quot;%*d : &quot;</span>,  <span class="number">4</span>, __LINE__ ); \
                  <span class="keyword">if</span> (!(B)) {\
                      printf(RED <span class="string">&quot;ERROR!&quot;</span> RESET); \
                      printf(<span class="string">&quot; '%s' \n&quot;</span>, #B); \
                      exit(<span class="number">1</span>); \
                  } \
                  <span class="keyword">else</span> {\
                      printf(GREEN <span class="string">&quot;    OK&quot;</span> RESET);\
                      printf(<span class="string">&quot; '%s' \n&quot;</span>, #B); \
                  }

</pre>


<pre>
<span class="comment">/*
   Normal code goes here...
*/</span>

<span class="keyword">#ifdef</span> TEST
<span class="keyword">#include</span> <span class="string">&quot;unittest.h&quot;</span>
<span class="keyword">void</span> MyTestCase2(<span class="keyword">void</span>)
{
    ASSERT(<span class="number">1</span> == <span class="number">1</span>);
}
<span class="keyword">#endif</span>
</pre>


<p>My program:</p>

<pre>
<span class="keyword">#ifdef</span> TEST
<span class="keyword">void</span> DoUnitTests(<span class="keyword">void</span>);<span class="comment">//lint !e2701
</span><span class="keyword">#endif</span>

<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)
{
<span class="keyword">#ifdef</span> TEST
        DoUnitTests();
<span class="keyword">#endif</span>

</pre>

<hr>

<p>maketest source code:</p>

<pre>

<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;sys/stat.h&gt;

<span class="keyword">struct</span> Test
{
    <span class="keyword">char</span> name[<span class="number">100</span>];
    <span class="keyword">struct</span> Test* pNext;
    <span class="keyword">int</span> bFileName;
};

<span class="keyword">struct</span> TestList
{
    <span class="keyword">struct</span> Test* pHead;
    <span class="keyword">struct</span> Test* pTail;
};

<span class="keyword">static</span> <span class="keyword">void</span> Destroy(<span class="keyword">struct</span> TestList* <span class="keyword2">list</span>)
{
    <span class="keyword">struct</span> Test* pCurrent = <span class="keyword2">list</span>-&gt;pHead;
    <span class="keyword">while</span> (pCurrent)
    {
        <span class="keyword">struct</span> Test* pNext = pCurrent-&gt;pNext;
        free(pCurrent);
        pCurrent = pNext;
    }
}

<span class="keyword">static</span> <span class="keyword">void</span> Append(<span class="keyword">struct</span> TestList* <span class="keyword2">list</span>, <span class="keyword">struct</span> Test* p)
{
    <span class="keyword">if</span> (<span class="keyword2">list</span>-&gt;pTail == NULL)
    {
        <span class="keyword2">list</span>-&gt;pHead = p;
        <span class="keyword2">list</span>-&gt;pTail = p;
    }
    <span class="keyword">else</span> {
        <span class="keyword2">list</span>-&gt;pTail-&gt;pNext = p;
        <span class="keyword2">list</span>-&gt;pTail = p;
    }
}
<span class="keyword">enum</span> Token
{
    IDENTIFER,
    OTHER,
    PRE,
    COMMENT,
    STRING,
    SPACES,
    NUMBER,
};

<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* GetTokenName(<span class="keyword">enum</span> Token e)
{
    <span class="keyword">switch</span> (e)
    {
        <span class="keyword">case</span> IDENTIFER: <span class="keyword">return</span> <span class="string">&quot;IDENTIFER&quot;</span>;
        <span class="keyword">case</span> OTHER:     <span class="keyword">return</span> <span class="string">&quot;    OTHER&quot;</span>;
        <span class="keyword">case</span> PRE:       <span class="keyword">return</span> <span class="string">&quot;      PRE&quot;</span>;
        <span class="keyword">case</span> COMMENT:   <span class="keyword">return</span> <span class="string">&quot;  COMMENT&quot;</span>;
        <span class="keyword">case</span> STRING:    <span class="keyword">return</span> <span class="string">&quot;   STRING&quot;</span>;
        <span class="keyword">case</span> SPACES:    <span class="keyword">return</span> <span class="string">&quot;   SPACES&quot;</span>;
        <span class="keyword">case</span> NUMBER:    <span class="keyword">return</span> <span class="string">&quot;   NUMBER&quot;</span>;
    }
    <span class="keyword">return</span> <span class="string">&quot;??&quot;</span>;
}
<span class="keyword">static</span> <span class="keyword">enum</span> Token Match(FILE* f, <span class="keyword">char</span>* dest, <span class="keyword">int</span> destsize)
{
    dest[<span class="number">0</span>] = <span class="number">0</span>;

    <span class="keyword">if</span> (ferror(f) || feof(f))
        <span class="keyword">return</span> OTHER;



REPEAT:;
    
    <span class="keyword">enum</span> Token tk = OTHER;
    <span class="keyword">int</span> count = <span class="number">0</span>;
    <span class="keyword">char</span> ch = fgetc(f);

    <span class="keyword">if</span> ((ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) ||
        (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) ||
        ch == <span class="string">'_'</span>)
    {
        tk = IDENTIFER;

        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }

        <span class="keyword">while</span> (
            ((ch = fgetc(f)) != EOF) &amp;&amp;
            (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) ||
            (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) ||
            (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) ||
            ch == <span class="string">'_'</span>)
        {
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }
        }
        ungetc(ch, f);
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)
    {
        tk = NUMBER;
        dest[count] = ch;
        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }

        <span class="keyword">while</span> (((ch = fgetc(f)) != EOF) &amp;&amp;
               (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>))
        {
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }
        }
        ungetc(ch, f);
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'\''</span> || ch == <span class="string">'&quot;'</span>)
    {
        <span class="keyword">char</span> type = ch;

        tk = STRING;
        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }

        <span class="keyword">while</span> (((ch = fgetc(f)) != EOF))
        {
            <span class="keyword">if</span> (ch == <span class="string">'\\'</span>)
            {
                <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                {
                    dest[count] = ch;
                    count++;
                }
                ch = fgetc(f);
                <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                {
                    dest[count] = ch;
                    count++;
                }
            }
            <span class="keyword">else</span> <span class="keyword">if</span> (ch == type)
            {
                <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                {
                    dest[count] = ch;
                    count++;
                }
                <span class="keyword">break</span>;
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                {
                    dest[count] = ch;
                    count++;
                }
            }
        }
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span>)
    {
        tk = SPACES;
        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }

        <span class="keyword">while</span> ((ch = getc(f)) != EOF)
        {
            <span class="keyword">if</span> (!(ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span>))
            {
                ungetc(ch, f);
                <span class="keyword">break</span>;
            }
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }
        }
        <span class="keyword">goto</span> REPEAT;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'/'</span>)
    {
        tk = OTHER;
        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }
        ch = fgetc(f);

        <span class="keyword">if</span> (ch == <span class="string">'/'</span>)
        {
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }

            tk = COMMENT;

            <span class="keyword">while</span> (
                ((ch = fgetc(f)) != EOF) &amp;&amp;
                ch != <span class="string">'\r'</span> &amp;&amp;
                ch != <span class="string">'\n'</span> &amp;&amp;
                ch != <span class="string">'\0'</span>)
            {
                <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                {
                    dest[count] = ch;
                    count++;
                }
            }
        }
        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'*'</span>)
        {
            tk = COMMENT;
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }

            ch = fgetc(f);

            <span class="keyword">while</span> (!feof(f))
            {
                <span class="keyword">if</span> (ch == <span class="string">'*'</span>)
                {
                    <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                    {
                        dest[count] = ch;
                        count++;
                    }

                    ch = fgetc(f);
                    <span class="keyword">if</span> (ch == <span class="string">'/'</span>)
                    {
                        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                        {
                            dest[count] = ch;
                            count++;
                        }
                        <span class="keyword">break</span>;
                    }
                }
                <span class="keyword">else</span>
                {
                    <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
                    {
                        dest[count] = ch;
                        count++;
                    }
                }
                ch = fgetc(f);
            }
            <span class="keyword">goto</span> REPEAT;
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }
            ungetc(ch, f);
        }
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'#'</span>)
    {
        tk = PRE;
        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }
        <span class="keyword">while</span> (((ch = fgetc(f)) != EOF) &amp;&amp; ch != <span class="string">'\r'</span> &amp;&amp; ch != <span class="string">'\n'</span>)
        {
            <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
            {
                dest[count] = ch;
                count++;
            }
        }
        
        <span class="keyword">if</span> (ch == <span class="string">'\r'</span>)
        {
            ch = fgetc(f); <span class="comment">// \n
</span>        }
        
    }
    <span class="keyword">else</span>
    {
        <span class="keyword">if</span> (count &lt; destsize - <span class="number">1</span>)
        {
            dest[count] = ch;
            count++;
        }
    }

    dest[count] = <span class="string">'\0'</span>;
    <span class="keyword">return</span> tk;
}


<span class="keyword">static</span> <span class="keyword">void</span> CollectTests(FILE* f, <span class="keyword">struct</span> TestList* <span class="keyword2">list</span>)
{
    <span class="keyword">int</span> ifdefcount = <span class="number">0</span>;
    <span class="keyword">int</span> ActiveSession = <span class="number">0</span>;

    <span class="keyword">while</span> (!feof(f))
    {
        <span class="keyword">char</span> lexeme[<span class="number">100</span>];
        <span class="keyword">enum</span> Token tk = Match(f, lexeme, <span class="keyword">sizeof</span> lexeme);

        <span class="keyword">if</span> (tk == PRE)
        {
            <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;#ifdef TEST&quot;</span>) == <span class="number">0</span>)
            {
                ifdefcount = <span class="number">1</span>;
                ActiveSession = <span class="number">1</span>;
            }
            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(lexeme, <span class="string">&quot;#ifdef&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;#ifdef&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span> ||
                     strncmp(lexeme, <span class="string">&quot;#if&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;#if&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span> ||
                     strncmp(lexeme, <span class="string">&quot;#ifndef&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;#ifndef&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
            {
                ifdefcount++;
            }
            <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;#endif&quot;</span>) == <span class="number">0</span>)
            {
                ifdefcount--;
                <span class="keyword">if</span> (ifdefcount == <span class="number">0</span>)
                {
                    <span class="comment">/*we are leaving the #ifdef TEST*/</span>
                    ActiveSession = <span class="number">0</span>;
                }
            }
        }
        <span class="keyword">else</span> <span class="keyword">if</span> (tk == IDENTIFER &amp;&amp; ActiveSession == <span class="number">1</span>)
        {
            <span class="comment">//template
</span>            <span class="comment">// void name ( optional void ) {
</span>            <span class="keyword">do</span>
            {
                <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;void&quot;</span>) != <span class="number">0</span>) <span class="keyword">break</span>;
                tk = Match(f, lexeme, <span class="keyword">sizeof</span> lexeme);
                <span class="keyword">if</span> (tk != IDENTIFER) <span class="keyword">break</span>;
                <span class="keyword">char</span> name[<span class="number">200</span>] = { <span class="number">0</span> };
                strncpy(name, lexeme, <span class="keyword">sizeof</span> name);
                tk = Match(f, lexeme, <span class="keyword">sizeof</span> lexeme);
                <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;(&quot;</span>) != <span class="number">0</span>) <span class="keyword">break</span>;
                tk = Match(f, lexeme, <span class="keyword">sizeof</span> lexeme);

                <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;void&quot;</span>) == <span class="number">0</span>)
                {
                    <span class="comment">/*optional*/</span>
                    tk = Match(f, lexeme, <span class="keyword">sizeof</span> lexeme);
                }
                <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;)&quot;</span>) != <span class="number">0</span>) <span class="keyword">break</span>;

                tk = Match(f, lexeme, <span class="keyword">sizeof</span> lexeme);
                <span class="keyword">if</span> (strcmp(lexeme, <span class="string">&quot;{&quot;</span>) != <span class="number">0</span>) <span class="keyword">break</span>;

                <span class="comment">//Pattern match! void name ( void ) {
</span>                <span class="keyword">struct</span> Test* p = calloc(<span class="number">1</span>, <span class="keyword">sizeof</span> * p);
                <span class="keyword">if</span> (p)
                {
                    p-&gt;bFileName = <span class="number">0</span>;
                    strcpy(p-&gt;name, name);
                    printf(<span class="string">&quot;  %s\n&quot;</span>, p-&gt;name);
                    Append(<span class="keyword2">list</span>, p);
                }
            }
            <span class="keyword">while</span> (<span class="number">0</span>);
        }
    }
}

<span class="keyword">void</span> CollectTestsFile(<span class="keyword">const</span> <span class="keyword">char</span>* file, <span class="keyword">struct</span> TestList* <span class="keyword2">list</span>)
{
    FILE* f = fopen(file, <span class="string">&quot;r&quot;</span>);
    <span class="keyword">if</span> (f)
    {
        <span class="comment">/*while (!feof(f))
        {
            char lexeme[100];
            enum Token tk = Match(f, lexeme, sizeof lexeme);
            printf(&quot;%s '%s'\n&quot;, GetTokenName(tk), lexeme);
        }*/</span>


        <span class="keyword">struct</span> Test* p = calloc(<span class="number">1</span>, <span class="keyword">sizeof</span> * p);
        <span class="keyword">if</span> (p)
        {
            p-&gt;bFileName = <span class="number">1</span>;
            strcpy(p-&gt;name, file);
            Append(<span class="keyword2">list</span>, p);
        }

        printf(<span class="string">&quot;%s\n&quot;</span>, file);
        CollectTests(f, <span class="keyword2">list</span>);
        fclose(f);
    }
}

<span class="keyword">void</span> Generate(<span class="keyword">const</span> <span class="keyword">char</span>* output, <span class="keyword">struct</span> TestList* <span class="keyword2">list</span>)
{
    FILE* fout = fopen(output, <span class="string">&quot;w&quot;</span>);
    <span class="keyword">if</span> (fout)
    {

        fprintf(fout, <span class="string">&quot;#ifdef TEST\n\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;//forward declarations\n\n&quot;</span>);

        <span class="keyword">struct</span> Test* pCurrent = <span class="keyword2">list</span>-&gt;pHead;
        <span class="keyword">while</span> (pCurrent)
        {
            <span class="keyword">if</span> (pCurrent-&gt;bFileName)
            {
                <span class="keyword">if</span> (pCurrent-&gt;pNext != NULL &amp;&amp; pCurrent-&gt;pNext-&gt;bFileName == <span class="number">0</span>)
                    fprintf(fout, <span class="string">&quot;//%s\n&quot;</span>, pCurrent-&gt;name);
            }
            <span class="keyword">else</span>
                fprintf(fout, <span class="string">&quot;void %s(void);\n&quot;</span>, pCurrent-&gt;name);
            pCurrent = pCurrent-&gt;pNext;
        }

        fprintf(fout, <span class="string">&quot;\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;void DoUnitTests(void)\n{\n&quot;</span>);
        pCurrent = <span class="keyword2">list</span>-&gt;pHead;
        <span class="keyword">while</span> (pCurrent)
        {
            <span class="keyword">if</span> (pCurrent-&gt;bFileName)
            {
                <span class="keyword">if</span> (pCurrent-&gt;pNext != NULL &amp;&amp; pCurrent-&gt;pNext-&gt;bFileName == <span class="number">0</span>)
                {
                    fprintf(fout, <span class="string">&quot;\n&quot;</span>);
                    fprintf(fout, <span class="string">&quot;    //%s\n&quot;</span>, pCurrent-&gt;name);
                }
            }
            <span class="keyword">else</span>
                fprintf(fout, <span class="string">&quot;    %s();\n&quot;</span>, pCurrent-&gt;name);
            pCurrent = pCurrent-&gt;pNext;
        }
        fprintf(fout, <span class="string">&quot;}\n&quot;</span>);

        fprintf(fout, <span class="string">&quot;#else\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;; //removes warning C4206: nonstandard extension used: translation unit is empty\n&quot;</span>);
        fprintf(fout, <span class="string">&quot;#endif\n&quot;</span>);
        fclose(fout);

        printf(<span class="string">&quot;file '%s' was updated\n&quot;</span>, output);
    }
    <span class="keyword">else</span>
    {
        printf(<span class="string">&quot;cannot open the ouput '%s' file\n&quot;</span>, output);
    }
}


<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv) {

    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)
    {
        printf(<span class="string">&quot;usage: output.c file1.c file2.c ...\n&quot;</span>);
        <span class="keyword">return</span> EXIT_FAILURE;
    }

    <span class="keyword">char</span>* output = argv[<span class="number">1</span>];


    <span class="keyword">struct</span> TestList <span class="keyword2">list</span> = { <span class="number">0</span> };

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)argc; i++)
    {
        <span class="keyword">if</span> (strcmp(argv[i], output) != <span class="number">0</span>) <span class="comment">/*ignore the ouputfile*/</span>
        {
            CollectTestsFile(argv[i], &amp;<span class="keyword2">list</span>);
        }
    }

    Generate(output, &amp;<span class="keyword2">list</span>);
    Destroy(&amp;<span class="keyword2">list</span>);
}


</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  