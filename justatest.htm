
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 




<p>Property-like syntax.</p>


<p>(The sample is not complete yet.)</p>


<p>{{{cppstruct X{    int m</p>

<p>    void set    {        m    }</p>

<p>    int get    {        return m    }</p>

<p>    struct TProp    {        X&amp; r()        {            return         }</p>

<p>        const X&amp; r() const        {            return         }</p>

<p>        template&lt;class T&gt; operator T()        {            return r().get        }</p>

<p>        template&lt;class T&gt; void operator=(const T&amp; value)        {            r().set        }</p>

<p>        //Comparison operators/relational operators</p>

<p>        template&lt;class T&gt; bool operator==(const T&amp; value) const        {            return r().get        }</p>

<p>        template&lt;class T&gt; bool operator        {            return r().get        }</p>

<p>        template&lt;class T&gt; bool operator &gt;(const T&amp; value) const        {            return r().get        }</p>

<p>        template&lt;class T&gt; bool operator &lt;(const T&amp; value) const        {            return r().get        }</p>

<p>        template&lt;class T&gt; bool operator &gt;=(const T&amp; value) const        {            return r().get        }</p>

<p>        template&lt;class T&gt; bool operator &lt;=(const T&amp; value) const        {            return r().get        }</p>

<p>        //Logical operators</p>

<p>        template&lt;class T&gt;        bool operator         {            return         }</p>

<p>        template&lt;class T&gt;        bool operator &amp;&amp;(const T&amp; value) const        {            return r().get        }</p>

<p>        template&lt;class T&gt;        bool operator ||(const T&amp; value) const        {            return r().get        }</p>

<p>        /        friend auto operator +(const TProp&amp; a, const T&amp; value) -&gt; decltype( a.ptr()-&gt;get        {          return a.ptr()-&gt;get        }</p>

<p>    } prop;};</p>


<p>void f(int) {}void f1(const int) {}void f2(int&amp;) {}void f3(double) {}</p>

<p>int main(){    int i = 0;    X x;    x.prop = 1;    f(x.prop);    f1(x.prop);    f3(x.prop);    //f2(x.prop);    assert(x.prop == 1);    assert(x.prop     assert(x.prop &lt; 2);    assert(x.prop &gt; 0);    assert(x.prop &gt;= 1);    assert(x.prop &lt;= 1);}</p>

<p>}}}</p>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  