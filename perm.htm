<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h1> Permutations</h1>
<p>February 2020</p>

<p>Given a string (for instance &quot;abcd&quot;) and a group size (for instance 2) we generate all combinations.</p>

<pre>
ab
ac
ad
ba
bc
bd
ca
cb
cd
da
db
dc
</pre>

<p>Because the order matters we have for instance ab and also ba.</p>

<p>The number of items generate is:</p>
<pre>

 N!
-----
(G-1)!

or 

N * (N-1) * (N-2) ...


4*3 = 12

   4!
 ----- = 12
 (2-1)
 
</pre>



<pre>
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;

_Bool NotUsed(<span class="keyword">int</span> used[], <span class="keyword">int</span> s, <span class="keyword">int</span> index)
{
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++)
  {
    <span class="keyword">if</span> (used[i] == index)
      <span class="keyword">return</span> <span class="number">0</span>;
  }
  <span class="keyword">return</span> <span class="number">1</span>;
}

<span class="keyword">void</span> f2(<span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">int</span> indexesUsed[], <span class="keyword">int</span> usedCount, <span class="keyword">int</span> count, <span class="keyword">int</span> groupSize)
{
  <span class="keyword">if</span> (usedCount == groupSize)
  {
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; usedCount; i++)
    {
      printf(<span class="string">&quot;%c&quot;</span>, s[indexesUsed[i]]);
    }
    printf(<span class="string">&quot;\n&quot;</span>);
    <span class="keyword">return</span>;
  }
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)
  {
    <span class="keyword">if</span> (NotUsed(indexesUsed, usedCount, i))
    {
      indexesUsed[usedCount] = i; <span class="comment">//insert on the set of used indexes
</span>      f2(s, indexesUsed, usedCount + <span class="number">1</span>, count, groupSize);
    }
  }
}

<span class="keyword">int</span> NumCombinations(<span class="keyword">int</span> size, <span class="keyword">int</span> groupSize)
{
  <span class="keyword">int</span> result = <span class="number">1</span>;
  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; groupSize; i++)
  {
    result = result * (size - i);
  }
  <span class="keyword">return</span> result;
}


<span class="keyword">int</span> main()
{
  <span class="keyword">int</span> used[<span class="number">8</span>] = {<span class="number">-1</span>};
  f2(<span class="string">&quot;abcd&quot;</span>, used, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;abcd&quot;</span>) - <span class="number">1</span>, <span class="number">2</span>);
}

</pre>


<p>Bit set</p>

<pre>
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;


<span class="keyword">void</span> f2(<span class="keyword">const</span> <span class="keyword">char</span>* s,
        <span class="keyword">int</span> indexesUsed[],
        <span class="keyword">int</span> usedSet, 
        <span class="keyword">int</span> usedCount, 
        <span class="keyword">int</span> count, 
        <span class="keyword">int</span> groupSize)
{
    <span class="keyword">if</span> (usedCount == groupSize)
    {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; usedCount; i++)
        {
            printf(<span class="string">&quot;%c&quot;</span>, s[indexesUsed[i]]);
        }
        printf(<span class="string">&quot;\n&quot;</span>);
        <span class="keyword">return</span>;
    }
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)
    {
        <span class="keyword">if</span> (!((usedSet &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>))
        {
            usedSet = usedSet | (<span class="number">1</span> &lt;&lt; i) ;
            indexesUsed[usedCount] = i;
            f2(s, indexesUsed, usedSet, usedCount + <span class="number">1</span>, count, groupSize);
            usedSet &amp;= ~(<span class="number">1</span> &lt;&lt; i);
        }
    }
}

<span class="keyword">int</span> NumCombinations(<span class="keyword">int</span> size, <span class="keyword">int</span> groupSize)
{
    <span class="keyword">int</span> result = <span class="number">1</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; groupSize; i++)
    {
        result = result * (size - i);
    }
    <span class="keyword">return</span> result;
}


<span class="keyword">int</span> main()</pre>
<p>`{    int used    int usedSet = 0;    f2(&quot;abcd&quot;, used, usedSet,0 , sizeof(&quot;abcd&quot;) - 1, 4); }</p>

<pre>

If the ordern does not matter:
From this site:
https://www.geeksforgeeks.org/print-all-possible-combinations-of-r-elements-in-a-given-array-of-size-n/

</pre>
<p>// Program to print all combination of size r in an array of size n </p>
<h1>include <stdio.h> </h1>
<p>void combinationUtil(int arr                     int index, int r); </p>

<p>// The main function that prints all combinations of size r // in arrvoid printCombination(int arr{     // A temporary array to store all combination one by one     int data</p>

<p>    // Print all combination using temprary array 'data    combinationUtil(arr, data, 0, n-1, 0, r); } </p>

<p>/   data   start &amp; end ---&gt; Staring and Ending indexes in arr   index  ---&gt; Current index in data   r ---&gt; Size of a combination to be printed void combinationUtil(int arr                     int index, int r) {     // Current combination is ready to be printed, print it     if (index == r)     {         for (int j=0; j&lt;r; j++)             printf(&quot;%d &quot;, data        printf(&quot;\n&quot;);         return;     } </p>

<p>    // replace index with all possible elements. The condition     // &quot;end-i+1 &gt;= r-index&quot; makes sure that including one element     // at index will make a combination with remaining elements     // at remaining positions     for (int i=start; i&lt;=end &amp;&amp; end-i+1 &gt;= r-index; i++)     {         data        combinationUtil(arr, data, i+1, end, index+1, r);     } } </p>

<p>// Driver program to test above functions int main() {     int arr    int r = 3;     int n = sizeof(arr)/sizeof(arr    printCombination(arr, n, r); } </p>
<pre>
</pre>

<!-- Page content end --> 
</article> 
 
</body> 
</html>  