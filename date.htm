
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>Code ported to C from the excelent article:</p>

<p><a href="http://howardhinnant.github.io/date_algorithms.html">http://howardhinnant.github.io/date_algorithms.html</a></p>

<p>Added dateand conversions with time</p>


<pre>

<span class="keyword">#include</span> <span class="string">&quot;pch.h&quot;</span>
<span class="keyword">#include</span> &lt;time.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;limits.h&gt;
<span class="keyword">#include</span> &lt;Windows.h&gt;

<span class="comment">//Ported from C++ version:
</span><span class="comment">//http://howardhinnant.github.io/date_algorithms.html
</span>

<span class="keyword">bool</span> is_leap(<span class="keyword">int</span> y)
{
  <span class="keyword">return</span>  y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; (y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>);
}

<span class="comment">//number of days since civil 1970-01-01.  Negative values indicate
</span><span class="comment">//days prior to 1970-01-01.
</span><span class="keyword">typedef</span> <span class="keyword">int</span> date_t;

<span class="comment">// Returns number of days since civil 1970-01-01.  Negative values indicate
</span><span class="comment">//    days prior to 1970-01-01.
</span><span class="comment">// Preconditions:  y-m-d represents a date in the civil (Gregorian) calendar
</span><span class="comment">//                 m is in [1, 12]
</span><span class="comment">//                 d is in [1, last_day_of_month(y, m)]
</span><span class="comment">//                 y is &quot;approximately&quot; in
</span><span class="comment">//                   [numeric_limits&lt;Int&gt;::min()/366, numeric_limits&lt;Int&gt;::max()/366]
</span><span class="comment">//                 Exact range of validity is:
</span><span class="comment">//                 [civil_from_days(numeric_limits&lt;Int&gt;::min()),
</span><span class="comment">//                  civil_from_days(numeric_limits&lt;Int&gt;::max()-719468)]
</span>

<span class="keyword">int</span> days_from_civil(<span class="keyword">int</span> y, <span class="keyword">unsigned</span> m, <span class="keyword">unsigned</span> d)
{
  y -= m &lt;= <span class="number">2</span>;
  <span class="keyword">const</span> <span class="keyword">int</span> era = (y &gt;= <span class="number">0</span> ? y : y - <span class="number">399</span>) / <span class="number">400</span>;
  <span class="keyword">const</span> <span class="keyword">unsigned</span> yoe = (<span class="keyword">unsigned</span>)(y - era * <span class="number">400</span>);      <span class="comment">// [0, 399]
</span>  <span class="keyword">const</span> <span class="keyword">unsigned</span> doy = (<span class="number">153</span> * (m + (m &gt; <span class="number">2</span> ? <span class="number">-3</span> : <span class="number">9</span>)) + <span class="number">2</span>) / <span class="number">5</span> + d - <span class="number">1</span>;  <span class="comment">// [0, 365]
</span>  <span class="keyword">const</span> <span class="keyword">unsigned</span> doe = yoe * <span class="number">365</span> + yoe / <span class="number">4</span> - yoe / <span class="number">100</span> + doy;         <span class="comment">// [0, 146096]
</span>  <span class="keyword">return</span> era * <span class="number">146097</span> + (<span class="keyword">int</span>)(doe) - <span class="number">719468</span>;
}

<span class="comment">// Returns year/month/day triple in civil calendar
</span><span class="comment">// Preconditions:  z is number of days since 1970-01-01 and is in the range:
</span><span class="comment">//                   [numeric_limits&lt;Int&gt;::min(), numeric_limits&lt;Int&gt;::max()-719468].
</span>

<span class="keyword">void</span> civil_from_days(<span class="keyword">int</span> z, <span class="keyword">int</span> *year, <span class="keyword">int</span> *month, <span class="keyword">int</span> *day) 
{
  z += <span class="number">719468</span>;
  <span class="keyword">const</span> <span class="keyword">int</span> era = (z &gt;= <span class="number">0</span> ? z : z - <span class="number">146096</span>) / <span class="number">146097</span>;
  <span class="keyword">const</span> <span class="keyword">unsigned</span> doe = (<span class="keyword">unsigned</span>)(z - era * <span class="number">146097</span>);          <span class="comment">// [0, 146096]
</span>  <span class="keyword">const</span> <span class="keyword">unsigned</span> yoe = (doe - doe / <span class="number">1460</span> + doe / <span class="number">36524</span> - doe / <span class="number">146096</span>) / <span class="number">365</span>;  <span class="comment">// [0, 399]
</span>  <span class="keyword">const</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>)(yoe) + era * <span class="number">400</span>;
  <span class="keyword">const</span> <span class="keyword">unsigned</span> doy = doe - (<span class="number">365</span> * yoe + yoe / <span class="number">4</span> - yoe / <span class="number">100</span>);                <span class="comment">// [0, 365]
</span>  <span class="keyword">const</span> <span class="keyword">unsigned</span> mp = (<span class="number">5</span> * doy + <span class="number">2</span>) / <span class="number">153</span>;                                   <span class="comment">// [0, 11]
</span>  <span class="keyword">const</span> <span class="keyword">unsigned</span> d = doy - (<span class="number">153</span> * mp + <span class="number">2</span>) / <span class="number">5</span> + <span class="number">1</span>;                             <span class="comment">// [1, 31]
</span>  <span class="keyword">const</span> <span class="keyword">unsigned</span> m = mp + (mp &lt; <span class="number">10</span> ? <span class="number">3</span> : <span class="number">-9</span>);                            <span class="comment">// [1, 12]
</span>  
  *year = y + (m &lt;= <span class="number">2</span>);
  *month = m;
  *day = d;
}

<span class="comment">// Preconditions: m is in [1, 12]
</span><span class="comment">// Returns: The number of days in the month m of leap year
</span><span class="comment">// The result is always in the range [29, 31].
</span>
<span class="keyword">unsigned</span> last_day_of_month_leap_year(<span class="keyword">unsigned</span> m) 
{
  <span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = {<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>};
  <span class="keyword">return</span> a[m - <span class="number">1</span>];
}

<span class="keyword">unsigned</span> last_day_of_month_common_year(<span class="keyword">unsigned</span> m)
{
  <span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = {<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>};
  <span class="keyword">return</span> a[m - <span class="number">1</span>];
}

<span class="keyword">unsigned</span> last_day_of_month(<span class="keyword">int</span> y, <span class="keyword">unsigned</span> m)
{
  <span class="keyword">return</span> m != <span class="number">2</span> || !is_leap(y) ? last_day_of_month_common_year(m) : <span class="number">29</span>u;
}


<span class="keyword">unsigned</span> weekday_from_days(<span class="keyword">int</span> z) 
{
  <span class="keyword">return</span> (<span class="keyword">unsigned</span>)(z &gt;= <span class="number">-4</span> ? (z + <span class="number">4</span>) % <span class="number">7</span> : (z + <span class="number">5</span>) % <span class="number">7</span> + <span class="number">6</span>);
}

time_t date_to_time(date_t d)
{
  <span class="keyword">return</span> d * (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);
}

date_t time_to_date(time_t t)
{
  <span class="keyword">return</span> (date_t) (t / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));
}

<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> FileTimeToTicks(FILETIME ft)
{
  <span class="keyword">return</span> ((ULONGLONG)(ft.dwHighDateTime) &lt;&lt; <span class="number">32</span>) | ft.dwLowDateTime;
}


time_t FileTimeToTime(FILETIME ft)
{
  <span class="keyword">return</span> FileTimeToTicks(ft) / <span class="number">10000000</span>ULL - <span class="number">11644473600</span>ULL;
}

date_t GetFileTimeAsDate(FILETIME ft)
{  
  <span class="keyword">return</span> (date_t) ((FileTimeToTicks(ft) / <span class="number">10000000</span>ULL - <span class="number">11644473600</span>ULL) / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));
}
</pre>


<p>Test</p>

<pre>
<span class="keyword">int</span> main()
{
  FILETIME    ft;
  SYSTEMTIME st = {<span class="number">0</span>};
  st.wYear = <span class="number">1970</span>;
  st.wDay = <span class="number">1</span>;
  st.wMonth = <span class="number">1</span>;
  SystemTimeToFileTime(&amp;st, &amp;ft);
  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll = FileTimeToTicks(ft);
  ll = <span class="number">0</span>;
  time_t t = time(NULL);
  <span class="keyword">int</span> year0, month0, day0;
  civil_from_days(time_to_date(t), &amp;year0, &amp;month0, &amp;day0);


  <span class="comment">//1970 - 01 - 01
</span>  <span class="keyword">int</span> d = <span class="number">1</span>;
  <span class="keyword">int</span> m = <span class="number">1</span>;
  <span class="keyword">int</span> y = <span class="number">1970</span>;
  <span class="keyword">int</span> w = <span class="number">4</span>;<span class="comment">//[0, 6] -&gt; [Sun, Sat]
</span>  <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; (INT_MAX - <span class="number">719468</span>); z++)
  {
    <span class="keyword">if</span> (days_from_civil(y, m, d) != z)
    {
      printf(<span class="string">&quot;days_from_civil(%d, %d, %d) != %d\n&quot;</span>, y, m, d, z);
    }

    <span class="keyword">int</span> year, month, day;
    civil_from_days(z, &amp;year, &amp;month, &amp;day);
    <span class="keyword">if</span> (year != y || month != m || day != d)
    {
      printf(<span class="string">&quot;%d  %d != %d || %d != %d || %d == %d\n&quot;</span>, z, year, y, month, m, day, d);
    }


    <span class="keyword">if</span> (weekday_from_days(z) != w)
    {
      printf(<span class="string">&quot;weekday_from_days(z) != w\n&quot;</span>);
    }

    <span class="keyword">if</span> (last_day_of_month(y, m) == d)
    {
      d = <span class="number">1</span>;
      <span class="keyword">if</span> (m == <span class="number">12</span>)
      {
        m = <span class="number">1</span>;
        y++;
      }
      <span class="keyword">else</span>
      {
        m++;
      }      
    }
    <span class="keyword">else</span>
    {
      d++;
    }

    <span class="keyword">if</span> (w == <span class="number">6</span>)
      w = <span class="number">0</span>;
    <span class="keyword">else</span>
      w++;
  }
  printf(<span class="string">&quot;ok&quot;</span>);
}



</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  