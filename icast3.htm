<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>Memory access using row x col.</p>


<pre>

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">struct</span> Array
{
  size_t m_Rows;
  size_t m_Cols;
  T* m_p;
  size_t m_Capacity;

  <span class="keyword">void</span> BuyMemory(size_t rows, size_t cols)
  {
      T* p = <span class="keyword">new</span> T[rows * cols];
      <span class="keyword">delete</span> [] m_p;
      m_p = p;
      m_Capacity = rows * cols;
  }

<span class="keyword">public</span>:

  Array() : m_p(<span class="number">0</span>), m_Rows(<span class="number">0</span>), m_Cols(<span class="number">0</span>), m_Capacity(<span class="number">0</span>)
  {    
  }
  
  Array(size_t rows, size_t cols) : m_p(<span class="number">0</span>), m_Rows(<span class="number">0</span>), m_Cols(<span class="number">0</span>), m_Capacity(<span class="number">0</span>)
  {    
    Resize(rows, cols);
  }
  
  size_t Cols() <span class="keyword">const</span> 
  {
    <span class="keyword">return</span> m_Cols;
  }
  
  size_t Rows() <span class="keyword">const</span> 
  {
    <span class="keyword">return</span> m_Rows;
  }

  <span class="keyword">void</span> Resize(size_t rows, size_t cols)
  { 
    <span class="comment">// memory changed?
</span>    <span class="keyword">if</span> (rows * cols != m_Capacity)
    {
      BuyMemory(rows, cols);
    }
    
    m_Rows = rows;
    m_Cols = cols;
  }

  <span class="keyword">void</span> ResizeConservative(size_t rows, size_t cols)
  {    
    <span class="comment">//needs more memory?
</span>    <span class="keyword">if</span> (rows * cols &gt; m_Capacity)
    {
      BuyMemory(rows, cols);
    }
    
    m_Rows = rows;
    m_Cols = cols;
  }

  T&amp; At(size_t row, size_t col)
  {
    assert(row &lt; Rows());
    assert(col &lt; Cols());
    <span class="keyword">return</span> m_p[(Rows() - <span class="number">1</span>) * row + col];
  }
  
  <span class="keyword">const</span> T&amp; At(size_t row, size_t col) <span class="keyword">const</span>
  {
    assert(row &lt; Rows());
    assert(col &lt; Cols());
    <span class="keyword">return</span> m_p[(Rows() - <span class="number">1</span>) * row + col];
  }
};

</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  