
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>How to check operations in integers?</p>



<p>Some </p>


<h3>Signed int functions</h3>
<pre>
<span class="keyword">bool</span> SignedSignedSum(<span class="keyword">int</span> x, <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>)
    {
        <span class="keyword">if</span> (y &lt;= <span class="number">0</span>)
        {
            <span class="keyword">return</span> x &gt;= INT_MIN - y;
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">return</span> y &gt;= INT_MIN - x;
        }
    }

    <span class="keyword">return</span> y &lt;= INT_MAX - x;
}

<span class="keyword">bool</span> SignedSignedSub(<span class="keyword">int</span> x, <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (x &lt;= <span class="number">-1</span>)
    {
        <span class="keyword">return</span> y &lt;= (x + INT_MAX) + <span class="number">1</span>;
    }

    <span class="keyword">return</span> x - INT_MAX &lt;= y;
}

<span class="keyword">bool</span> SignedSignedDiv(<span class="keyword">int</span> x, <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (y == <span class="number">0</span>)
    {
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="keyword">if</span> (x == INT_MIN &amp;&amp; y == <span class="number">-1</span>)
    {
        <span class="keyword">static_assert</span>(INT_MAX == -(INT_MIN + <span class="number">1</span>), <span class="string">&quot;consideration failed&quot;</span>);
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="keyword">return</span> <span class="keyword">true</span>;
}

<span class="keyword">bool</span> SignedSignedMulti(<span class="keyword">int</span> x, <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (x == <span class="number">1</span> || x == <span class="number">0</span>)
    {
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">-1</span>)
    {
        <span class="keyword">static_assert</span>(INT_MAX == -(INT_MIN + <span class="number">1</span>), <span class="string">&quot;consideration failed&quot;</span>);
        <span class="keyword">return</span> y &gt;= -INT_MAX;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">2</span>)
    {
        <span class="keyword">return</span> y &gt;= INT_MIN / x &amp;&amp; y &lt;= INT_MAX / x;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">-2</span>)
    {
        <span class="keyword">return</span> y &gt;= INT_MAX / x &amp;&amp; y &lt;= INT_MIN / x;
    }

    <span class="keyword">return</span> <span class="keyword">false</span>;
}

<span class="keyword">bool</span> UnsignedUnsignedSum(<span class="keyword">unsigned</span> <span class="keyword">int</span> x, <span class="keyword">unsigned</span> <span class="keyword">int</span> y)
{
    <span class="keyword">return</span> y &lt;= UINT_MAX  - x;
}

<span class="keyword">bool</span> UnsignedUnsignedSub(<span class="keyword">unsigned</span> <span class="keyword">int</span> x, <span class="keyword">unsigned</span> <span class="keyword">int</span> y)
{
    <span class="keyword">return</span> y &lt;= x;
}

<span class="keyword">bool</span> UnsignedUnsignedMulti(<span class="keyword">unsigned</span> <span class="keyword">int</span> x, <span class="keyword">unsigned</span> <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>)
    {
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }

    <span class="keyword">return</span> y &lt;= UINT_MAX / x;
}

<span class="keyword">bool</span> UnsignedUnsignedDiv(<span class="keyword">unsigned</span> <span class="keyword">int</span> x, <span class="keyword">unsigned</span> <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (y == <span class="number">0</span>)
    {
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="keyword">return</span>  y &gt;= x / UINT_MAX;
}

<span class="comment">//or just
</span><span class="keyword">bool</span> UnsignedUnsignedDiv(<span class="keyword">unsigned</span> <span class="keyword">int</span> x, <span class="keyword">unsigned</span> <span class="keyword">int</span> y)
{
    <span class="keyword">return</span> y != <span class="number">0</span>;    
}

</pre>


<p>See <a href="Stopwatch.htm">Stopwatch.htm</a></p>

<pre>

<span class="keyword">#include</span> <span class="string">&quot;stdafx.h&quot;</span>
<span class="keyword">#include</span> &lt;safeint.h&gt;
<span class="keyword">#include</span> &lt;iostream&gt;
<span class="keyword">#include</span> <span class="string">&quot;Stopwatch.h&quot;</span>


<span class="keyword">bool</span> Check0(<span class="keyword">char</span> i, <span class="keyword">char</span> j)
{
    msl::utilities::SafeInt&lt;<span class="keyword">char</span>&gt; si(i);
    msl::utilities::SafeInt&lt;<span class="keyword">char</span>&gt; sj(j);

    <span class="keyword">try</span>
    {
        si* si + sj* sj;
    }
    <span class="keyword">catch</span> (...)
    {
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="keyword">return</span> <span class="keyword">true</span>;
}

<span class="keyword">bool</span> Check(<span class="keyword">char</span> i, <span class="keyword">char</span> j)
{
    <span class="keyword">char</span> r;
    <span class="keyword">return</span>
        msl::utilities::SafeMultiply&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt;(i, i, r) &amp;&amp;
        msl::utilities::SafeMultiply&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt;(j, j, r) &amp;&amp;
        msl::utilities::SafeAdd&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt;(i * i, j * j, r);
}

<span class="keyword">bool</span> MyCheck(<span class="keyword">char</span> i, <span class="keyword">char</span> j)
{
    <span class="keyword">return</span> (i &gt;= <span class="number">-11</span> &amp;&amp; i &lt;= <span class="number">11</span> &amp;&amp;
            j &gt;= <span class="number">-11</span> &amp;&amp; j &lt;= <span class="number">11</span> &amp;&amp;
            j* j &lt;= CHAR_MAX - i * i);
}

<span class="keyword">bool</span> Check3(<span class="keyword">char</span> i, <span class="keyword">char</span> j)
{    
    <span class="keyword">return</span>
      SignedSignedMulti(i, i) &amp;&amp;
      SignedSignedMulti(j, j) &amp;&amp;
      SignedSignedSum(i * i, j * j);
}

<span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])
{
    Stopwatch s(<span class="keyword">true</span>);
    <span class="keyword">int</span> count = <span class="number">0</span>;

    <span class="keyword">for</span> (<span class="keyword">char</span> i = CHAR_MIN;; i++)
    {
        <span class="keyword">for</span> (<span class="keyword">char</span> j = CHAR_MIN; ; j++)
        {
            <span class="keyword">if</span> (!MyCheck(i, j))
            {
                count++;
            }

            <span class="keyword">if</span> (j == CHAR_MAX)
            {
                <span class="keyword">break</span>;
            }
        }

        <span class="keyword">if</span> (i == CHAR_MAX)
        {
            <span class="keyword">break</span>;
        }
    }

    s.Stop();
    std::cout &lt;&lt; <span class="string">&quot;ticks &quot;</span> &lt;&lt; s.GetElapsedTicks() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; s.GetElapsedMilliseconds() &lt;&lt; <span class="string">&quot; ms &quot;</span> &lt;&lt; count;
    <span class="keyword">return</span> <span class="number">0</span>;
}


</pre>



<p>Common results:</p>

<pre>

MyCheck : 
ticks 543, 0 ms 65135

Check:
ticks 798, 0 ms 65135

Check0:
ticks 1403857, 551 ms 65135

Check3 (char version)
ticks 7697, 3 ms 65135
</pre>

<h2>See also</h2>

<p>SafeInt, <a href="http://msdn.microsoft.com/en-us/library/dd575188.aspx">http://msdn.microsoft.com/en-us/library/dd575188.aspx</a></p>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  