
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p><a href="algorithms.htm">Algorithms</a></p>

<h3> add_positive_integers</h3>

<p>Sums u and v, returning the result in r.</p>


<pre>

e.g.
         {1, 0}          (u)
               base

+           {1}          (v)
               base
     -------------
       {0, 1, 1}           (r)
                base


</pre>


<p><strong>Assume same base</strong></p>

<hr>

<h3> Implementation</h3>

<pre>


<span class="keyword">template</span> &lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base, 
         <span class="keyword">class</span> UIt,
         <span class="keyword">class</span> VIt,
         <span class="keyword">class</span> RIt&gt;
<span class="keyword">void</span> add_positive_integers(UIt ufirst,
                           UIt ulast,
                           VIt vfirst,
                           VIt vlast,
                           RIt rfirst,
                           RIt rlast)
{
    
    assert(rlast - rfirst &gt;= (vlast - vfirst) + <span class="number">1</span>);
    assert(rlast - rfirst &gt;= (ulast - ufirst) + <span class="number">1</span>);
    assert(ulast - ufirst == sig_digits(ufirst, ulast));
    assert(vlast - vfirst == sig_digits(vfirst, vlast));
    
    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> k = <span class="number">0</span>;

    <span class="keyword">for</span> (; rfirst &lt; rlast; ++rfirst)
    {
        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> uj = ufirst != ulast ? *ufirst++ : <span class="number">0</span>;
        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> vj = vfirst != vlast ? *vfirst++ : <span class="number">0</span>;
        assert(uj &lt; base);
        assert(vj &lt; base);
        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> current = uj + vj + k;
        *rfirst = current % base;
        k = current / base;
    }

    assert(k == <span class="number">0</span> || k == <span class="number">1</span>);

    <span class="keyword">if</span> (k &gt; <span class="number">0</span>)
    {
        *rfirst = k;
    }
}

</pre>


<h3>Sample:</h3>

<pre>

<span class="keyword">void</span> add_positive_integers_test()
{
  <span class="keyword">using</span> <span class="keyword">namespace</span> std;
  
  <span class="keyword">int</span> a[] = { <span class="number">0</span>, <span class="number">0</span>, }; 
  set_digits&lt;<span class="number">10</span>&gt;(<span class="number">99</span>, begin(a), end(a));
  assert(a[<span class="number">1</span>] == <span class="number">9</span> &amp;&amp; a[<span class="number">0</span>] == <span class="number">9</span>);

  <span class="keyword">int</span> b[] = { <span class="number">0</span>, <span class="number">0</span>, }; 
  set_digits&lt;<span class="number">10</span>&gt;(<span class="number">1</span>, begin(b), end(b));
  assert(b[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; b[<span class="number">0</span>] == <span class="number">1</span>);
  
  <span class="keyword">int</span> res[] = {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>};
  add_positive_integers&lt;<span class="number">10</span>&gt;(begin(a), sig_digit_end(begin(a), end(a)),
                            begin(b), sig_digit_end(begin(b), end(b)),
                            begin(res), end(res));

}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  