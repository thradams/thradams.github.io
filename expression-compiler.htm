<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h1> Expression compiler</h1>

<p>Given a expression this compiler generates C code that solves the expression and also reports errors.</p>


<pre>

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;ctype.h&gt;


<span class="keyword">struct</span> stream
{
  <span class="keyword">const</span> <span class="keyword">char</span>* p;
};
<span class="keyword">#define</span> ch(S) (*(S)-&gt;p)
<span class="keyword">#define</span> match(S) ((S)-&gt;p++)

<span class="keyword">void</span> parse_expression(<span class="keyword">struct</span> stream* stream, <span class="keyword">char</span>* r);

<span class="keyword">void</span> parse_value(<span class="keyword">struct</span> stream* stream, <span class="keyword">char</span>* left)
{

  <span class="keyword">if</span> (ch(stream) &gt;= <span class="string">'0'</span> &amp;&amp; ch(stream) &lt;= <span class="string">'9'</span>)
  {
    <span class="keyword">while</span> (ch(stream) &gt;= <span class="string">'0'</span> &amp;&amp; ch(stream) &lt;= <span class="string">'9'</span>)
    {
      *left = ch(stream);
      left++;
      match(stream);
    }
    *left = <span class="number">0</span>;
  }
  <span class="keyword">else</span> <span class="keyword">if</span> (ch(stream) &gt;= <span class="string">'a'</span> &amp;&amp; ch(stream) &lt;= <span class="string">'z'</span>)
  {
    <span class="keyword">while</span> (ch(stream) &gt;= <span class="string">'a'</span> &amp;&amp; ch(stream) &lt;= <span class="string">'z'</span>)
    {
      *left = ch(stream);
      left++;
      match(stream);
    }
    *left = <span class="number">0</span>;
  }
  <span class="keyword">else</span> <span class="keyword">if</span> (ch(stream) == <span class="string">'('</span>)
  {
    match(stream);
    parse_expression(stream, left);
    match(stream);
  }
  <span class="keyword">else</span>
  {
    <span class="comment">//error
</span>  }
}

<span class="keyword">void</span> parse_expression(<span class="keyword">struct</span> stream* stream, <span class="keyword">char</span>* right)
{
  <span class="keyword">char</span> left[<span class="number">100</span>];


  <span class="keyword">if</span> ((ch(stream) &gt;= <span class="string">'0'</span> &amp;&amp; ch(stream) &lt;= <span class="string">'9'</span>) ||
      (ch(stream) &gt;= <span class="string">'a'</span> &amp;&amp; ch(stream) &lt;= <span class="string">'z'</span>) ||
      ch(stream) == <span class="string">'('</span>)
  {
    parse_value(stream, left);
  }
  <span class="keyword">else</span>
  {
    parse_expression(stream, left);
  }

  <span class="keyword">char</span> op = ch(stream);
  <span class="keyword">if</span> (op == <span class="string">'*'</span> || op == <span class="string">'/'</span>)
  {

    match(stream);
    parse_expression(stream, right);
    <span class="keyword">if</span> (op == <span class="string">'*'</span>)
    {
      printf(<span class="string">&quot;  if((%s == -1) &amp;&amp; (%s == INT_MIN)) /*overflow */ return 1;\n&quot;</span>, left, right);
      printf(<span class="string">&quot;  if((%s == -1) &amp;&amp; (%s == INT_MIN)) /*overflow */ return 1;\n&quot;</span>, right, left);
      printf(<span class="string">&quot;  if(%s &gt; INT_MAX / %s) /* overflow */ return 1;\n&quot;</span>, left, right);
      printf(<span class="string">&quot;  if(%s &lt; INT_MIN / %s) /* overflow */ return 1;\n&quot;</span>, left, right);
    }
    <span class="keyword">else</span>
    {
      printf(<span class="string">&quot;  if((%s == INT_MIN) &amp;&amp; (%s == -1)) /* a / b would overflow */ return 1;\n&quot;</span>, left, right);
    }
    printf(<span class="string">&quot;  r = %s %c %s;\n\n&quot;</span>, left, op, right);

    strcpy(right, <span class="string">&quot;r&quot;</span>);
  }
  <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'+'</span> || op == <span class="string">'-'</span>)
  {


    match(stream);
    parse_expression(stream, right);
    <span class="keyword">if</span> (op == <span class="string">'+'</span>)
    {
      printf(<span class="string">&quot;  if ((%s &gt; 0) &amp;&amp; (%s &gt; INT_MAX - %s)) return 1; /*overflow*/\n&quot;</span>, right, left, right);
      printf(<span class="string">&quot;  if ((%s &lt; 0) &amp;&amp; (%s &lt; INT_MIN - %s)) return 1; /*underflow*/\n&quot;</span>, right, left, right);
    }
    <span class="keyword">else</span>
    {
      printf(<span class="string">&quot;  if ((%s &lt; 0) &amp;&amp; (%s &gt; INT_MAX + %s)) return 1;\n&quot;</span>, right, left, right);
      printf(<span class="string">&quot;  if ((%s &gt; 0) &amp;&amp; (%s &lt; INT_MAX + %s)) return 1;\n&quot;</span>, right, left, right);
    }

    printf(<span class="string">&quot;  r = %s %c %s;\n\n&quot;</span>, left, op, right);
    strcpy(right, <span class="string">&quot;r&quot;</span>);
  }
  <span class="keyword">else</span>
  {
    strcpy(right, left);
  }

}

<span class="keyword">void</span> solve(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
  <span class="keyword">struct</span> stream s = {.p = p};

  printf(<span class="string">&quot;\n&quot;</span>);
  printf(<span class="string">&quot;/*%s*/\n&quot;</span>, p);
  printf(<span class="string">&quot;int solve(int* result)\n&quot;</span>);
  printf(<span class="string">&quot;{\n&quot;</span>);
  printf(<span class="string">&quot;  int r;\n&quot;</span>);

  <span class="keyword">char</span> r[<span class="number">100</span>];
  parse_expression(&amp;s, r);

  printf(<span class="string">&quot;  *result = r;\n&quot;</span>);
  printf(<span class="string">&quot;  return 0;\n&quot;</span>);
  printf(<span class="string">&quot;}\n&quot;</span>);
  printf(<span class="string">&quot;\n&quot;</span>);
}

<span class="keyword">int</span> main()
{
  <span class="keyword">for</span> (;;)
  {
    <span class="keyword">char</span> input[<span class="number">128</span>] = {<span class="number">0</span>};
    printf(<span class="string">&quot;&gt; &quot;</span>);
    gets(input);
    solve(input);
  }
}

</pre>


<pre>
<span class="comment">/*a+b*c*/</span>
<span class="keyword">int</span> solve(<span class="keyword">int</span>* result)
{
  <span class="keyword">int</span> r;
  <span class="keyword">if</span>((b == <span class="number">-1</span>) &amp;&amp; (c == INT_MIN)) <span class="comment">/*overflow */</span> <span class="keyword">return</span> <span class="number">1</span>;
  <span class="keyword">if</span>((c == <span class="number">-1</span>) &amp;&amp; (b == INT_MIN)) <span class="comment">/*overflow */</span> <span class="keyword">return</span> <span class="number">1</span>;
  <span class="keyword">if</span>(b &gt; INT_MAX / c) <span class="comment">/* overflow */</span> <span class="keyword">return</span> <span class="number">1</span>;
  <span class="keyword">if</span>(b &lt; INT_MIN / c) <span class="comment">/* overflow */</span> <span class="keyword">return</span> <span class="number">1</span>;
  r = b * c;

  <span class="keyword">if</span> ((r &gt; <span class="number">0</span>) &amp;&amp; (a &gt; INT_MAX - r)) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">/*overflow*/</span>
  <span class="keyword">if</span> ((r &lt; <span class="number">0</span>) &amp;&amp; (a &lt; INT_MIN - r)) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">/*underflow*/</span>
  r = a + r;

  *result = r;
  <span class="keyword">return</span> <span class="number">0</span>;
} 
</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  