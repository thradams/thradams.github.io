
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h1> Amalgamation</h1>

<p>This tool merges c source files and headers to create the amalgamation.</p>

<pre>

<span class="keyword">void</span> almagamate(<span class="keyword">const</span> <span class="keyword">char</span>* file_name_out, <span class="keyword">bool</span> bHeaderMode, <span class="keyword">const</span> <span class="keyword">char</span>* files[], <span class="keyword">int</span> count);

<span class="comment">//Sample:
</span>
 chdir(<span class="string">&quot;../lib/&quot;</span>);

    <span class="keyword">const</span> <span class="keyword">char</span>* files[] = {
         <span class="string">&quot;file1.c&quot;</span>,
         <span class="string">&quot;file2.c&quot;</span>,
    };

    almagamate(<span class="string">&quot;lib.c&quot;</span>, <span class="comment">/*bHeaderMode*/</span><span class="keyword">false</span>, files, (<span class="keyword">sizeof</span>(files) / <span class="keyword">sizeof</span>(files[<span class="number">0</span>])));

    <span class="keyword">const</span> <span class="keyword">char</span>* headers[] = {
        <span class="string">&quot;Header1.h&quot;</span>,
        <span class="string">&quot;Header2.h&quot;</span>,
    };


    almagamate(<span class="string">&quot;http.h&quot;</span>,  <span class="comment">/*bHeaderMode*/</span><span class="keyword">true</span>, headers, (<span class="keyword">sizeof</span>(headers) / <span class="keyword">sizeof</span>(headers[<span class="number">0</span>])));
</pre>


<p>When <strong>bHeaderMode</strong> is true only some regions  are included.</p>

<p>For instance:</p>

<pre>
//My header file

#pragma once

..etc..

# //BEGIN_EXPORT
//only this part is included
# //END_EXPORT

</pre>

<p>For C source file the files are merged normaly (each header/source is included once)</p>

<p>   </p>


<ul>
<li> Make unique function/variables names even for internal linkage (static)</li>
</ul>

<h2> Similar tools</h2>

<p><a href="https://github.com/svaarala/duktape/blob/master/tools/combine_src.py">https://github.com/svaarala/duktape/blob/master/tools/combine_src.py</a></p>

<p><a href="https://github.com/vinniefalco/Amalgamate">https://github.com/vinniefalco/Amalgamate</a></p>



<pre>
<span class="comment">/*
  ==============================================================================
  Copyright (c) 2020 by Thiago Adams

  This file is provided under the terms of the MIT License:
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the &quot;Software&quot;), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  ==============================================================================
*/</span>


<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;ctype.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;

<span class="keyword">#if</span> defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)
<span class="keyword">#define</span> strdup _strdup
<span class="keyword">#define</span> realpath(a,b) _fullpath(b, a, MAX_PATH)
<span class="keyword">#else</span>
<span class="keyword">#include</span> &lt;unistd.h&gt;
<span class="keyword">#endif</span> 

<span class="keyword">int</span> strcicmp(<span class="keyword">char</span> <span class="keyword">const</span>* a, <span class="keyword">char</span> <span class="keyword">const</span>* b)
{
    <span class="keyword">for</span> (;; a++, b++) {
        <span class="keyword">int</span> d = tolower((<span class="keyword">unsigned</span> <span class="keyword">char</span>)*a) - tolower((<span class="keyword">unsigned</span> <span class="keyword">char</span>)*b);
        <span class="keyword">if</span> (d != <span class="number">0</span> || !*a)
            <span class="keyword">return</span> d;
    }
}


<span class="keyword">struct</span> strlist_node
{
    <span class="keyword">char</span>* fileName;
    <span class="keyword">struct</span> strlist_node* pNext;
};

<span class="keyword">struct</span> strlist
{
    <span class="keyword">struct</span> strlist_node* head;
};


<span class="keyword">void</span> strlist_append(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">struct</span> strlist_node** s_included)
{

    <span class="keyword">struct</span> strlist_node* pNew = malloc(<span class="keyword">sizeof</span> * pNew);
    pNew-&gt;fileName = strdup(filename);
    pNew-&gt;pNext = <span class="number">0</span>;

    <span class="keyword">if</span> (*s_included == NULL)
    {
        *s_included = pNew;
    }
    <span class="keyword">else</span>
    {
        pNew-&gt;pNext = *s_included;
        *s_included = pNew;
    }
}


<span class="keyword">void</span> mark_as_included(<span class="keyword">const</span> <span class="keyword">char</span>* filename0, <span class="keyword">struct</span> strlist_node** s_included)
{
    <span class="keyword">char</span> filename[<span class="number">200</span>];
    realpath(filename0, filename);
    printf(<span class="string">&quot;filename %s \n&quot;</span>, filename);
    strlist_append(filename, s_included);
}

<span class="keyword">bool</span> strlist_has(<span class="keyword">const</span> <span class="keyword">char</span>* filename0, <span class="keyword">struct</span> strlist_node** s_included)
{
    <span class="keyword">char</span> filename[<span class="number">200</span>];
    realpath(filename0, filename);

    <span class="keyword">bool</span> result = <span class="keyword">false</span>;
    <span class="keyword">struct</span> strlist_node* pCurrent = *s_included;
    <span class="keyword">while</span> (pCurrent)
    {
        <span class="keyword">if</span> (strcicmp(pCurrent-&gt;fileName, filename) == <span class="number">0</span>)
        {
            result = <span class="keyword">true</span>;
            <span class="keyword">break</span>;
        }
        pCurrent = pCurrent-&gt;pNext;
    }
    <span class="keyword">return</span> result;
}

<span class="keyword">void</span> strlist_free(<span class="keyword">struct</span> strlist_node** s_included)
{
    <span class="keyword">struct</span> strlist_node* pCurrent = *s_included;
    <span class="keyword">while</span> (pCurrent)
    {
        <span class="keyword">struct</span> strlist_node* pNext = pCurrent-&gt;pNext;
        free(pCurrent-&gt;fileName);
        free(pCurrent);
        pCurrent = pNext;
    }

}

<span class="keyword">int</span> str_ends_with(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">const</span> <span class="keyword">char</span>* suffix)
{
    <span class="keyword">if</span> (!str || !suffix)
        <span class="keyword">return</span> <span class="number">0</span>;
    size_t lenstr = strlen(str);
    size_t lensuffix = strlen(suffix);
    <span class="keyword">if</span> (lensuffix &gt; lenstr)
        <span class="keyword">return</span> <span class="number">0</span>;
    <span class="keyword">return</span> strcicmp(str + lenstr - lensuffix, suffix) == <span class="number">0</span>;
}

<span class="keyword">bool</span> Write(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">bool</span> bHeaderMode, FILE* out, <span class="keyword">struct</span> strlist_node** s_included)
{

    <span class="keyword">bool</span> cppfile = str_ends_with(name, <span class="string">&quot;.c&quot;</span>);

    fputs(<span class="string">&quot;\n&quot;</span>, out);
    <span class="keyword">bool</span> found = <span class="keyword">false</span>;

    assert(!strlist_has(name, s_included));
    mark_as_included(name, s_included);

    <span class="keyword">struct</span> strlist_node* defineList = <span class="number">0</span>;


    <span class="keyword">char</span> previous = <span class="string">'\0'</span>;

    FILE* input = fopen(name, <span class="string">&quot;r&quot;</span>);

    <span class="keyword">if</span> (input == <span class="number">0</span>)
    {
        <span class="comment">//char name2[200];
</span>        <span class="comment">//snprintf(name2, 200, &quot;./openssl/Lib141s/Include/%s&quot;, name);
</span>        <span class="comment">//input = fopen(name2, &quot;r&quot;);
</span>    }

    <span class="keyword">if</span> (input)
    {
        found = <span class="keyword">true</span>;
        <span class="keyword">char</span> c = <span class="string">'\0'</span>;

        <span class="keyword">bool</span> bInclude = bHeaderMode ? <span class="keyword">false</span> : <span class="keyword">true</span>;

        <span class="keyword">while</span> (!feof(input))
        {
            previous = c;
            c = fgetc(input);
            <span class="keyword">if</span> ((previous == <span class="string">'\0'</span> || previous == <span class="string">'\n'</span>) &amp;&amp; c == <span class="string">'#'</span>)
            {
                c = fgetc(input);
                <span class="keyword">char</span> linebuffer[<span class="number">500</span>];
                <span class="keyword">int</span> i = <span class="number">0</span>;
                linebuffer[i] = <span class="string">'#'</span>;
                i++;
                <span class="keyword">while</span> (c != <span class="string">'\n'</span> &amp;&amp; c != EOF)
                {
                    linebuffer[i] = c;
                    c = fgetc(input);
                    i++;
                }
                linebuffer[i] = <span class="string">'\0'</span>;
                <span class="keyword">const</span> <span class="keyword">char</span>* pChar = linebuffer;

                pChar++; <span class="comment">//skip #
</span>
                <span class="keyword">while</span> (*pChar == <span class="string">' '</span>) <span class="comment">//skip spaces
</span>                    pChar++;

                <span class="keyword">if</span> (strncmp(pChar, <span class="string">&quot;//BEGIN_EXPORT&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;//BEGIN_EXPORT&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
                {
                    <span class="comment">//fputs(linebuffer, out);
</span>                    fputs(<span class="string">&quot;\n&quot;</span>, out);
                    <span class="keyword">if</span> (bHeaderMode)
                    {
                        bInclude = <span class="keyword">true</span>;
                    }
                }
                <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(pChar, <span class="string">&quot;//END_EXPORT&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;//END_EXPORT&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
                {
                    <span class="comment">//fputs(linebuffer, out);
</span>                    fputs(<span class="string">&quot;\n&quot;</span>, out);
                    <span class="keyword">if</span> (bHeaderMode)
                    {
                        bInclude = <span class="keyword">false</span>;
                    }
                }
                <span class="keyword">else</span> <span class="keyword">if</span> (bInclude &amp;&amp; strncmp(pChar, <span class="string">&quot;define&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;define&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
                {



                    fputs(linebuffer, out);
                    fputs(<span class="string">&quot;\n&quot;</span>, out);

                    <span class="keyword">if</span> (cppfile)
                    {
                        <span class="comment">//guardar todos defines feitos em ccpp e fazer undef
</span>                        pChar += <span class="keyword">sizeof</span>(<span class="string">&quot;define&quot;</span>) - <span class="number">1</span>; <span class="comment">//skip pragma
</span>
                        <span class="keyword">while</span> (*pChar == <span class="string">' '</span>) <span class="comment">//skip spaces
</span>                            pChar++;

                        <span class="keyword">char</span> defineName[<span class="number">200</span>] = { <span class="number">0</span> };
                        <span class="keyword">int</span> k = <span class="number">0</span>;
                        <span class="keyword">while</span> (*pChar != <span class="string">'\0'</span> &amp;&amp; *pChar != <span class="string">' '</span> &amp;&amp; *pChar != <span class="string">'('</span> &amp;&amp; *pChar != <span class="string">'\n'</span>)
                        {
                            defineName[k] = *pChar;
                            k++;
                            pChar++;
                        }
                        strlist_append(defineName, &amp;defineList);
                    }
                }
                <span class="keyword">else</span> <span class="keyword">if</span> (bInclude &amp;&amp; strncmp(pChar, <span class="string">&quot;pragma&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;pragma&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
                {
                    pChar += <span class="keyword">sizeof</span>(<span class="string">&quot;pragma&quot;</span>) - <span class="number">1</span>; <span class="comment">//skip pragma
</span>
                    <span class="keyword">while</span> (*pChar == <span class="string">' '</span>) <span class="comment">//skip spaces
</span>                        pChar++;

                    <span class="keyword">if</span> (strncmp(pChar, <span class="string">&quot;once&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;once&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
                    {
                        fputs(<span class="string">&quot;//&quot;</span>, out);
                        fputs(linebuffer, out);
                        fputs(<span class="string">&quot;\n&quot;</span>, out);
                    }
                    <span class="keyword">else</span>
                    {
                        fputs(linebuffer, out);
                        fputs(<span class="string">&quot;\n&quot;</span>, out);
                    }
                }
                <span class="keyword">else</span> <span class="keyword">if</span> (bInclude &amp;&amp; strncmp(pChar, <span class="string">&quot;include&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;include&quot;</span>) - <span class="number">1</span>) == <span class="number">0</span>)
                {
                    pChar += <span class="keyword">sizeof</span>(<span class="string">&quot;include&quot;</span>) - <span class="number">1</span>; <span class="comment">//match include
</span>
                    <span class="keyword">while</span> (*pChar == <span class="string">' '</span>) <span class="comment">//skip spaces          
</span>                        pChar++;

                    <span class="keyword">if</span> (*pChar == <span class="string">'&quot;'</span> || *pChar == <span class="string">'&lt;'</span>)
                    {
                        pChar++;<span class="comment">//match &quot; or &lt;
</span>
                        <span class="keyword">char</span> fileName[<span class="number">200</span>] = { <span class="number">0</span> };
                        <span class="keyword">int</span> k = <span class="number">0</span>;
                        <span class="keyword">while</span> (*pChar)
                        {
                            <span class="keyword">if</span> (*pChar == '\&quot;' || *pChar == '&gt;')
                            {
                                <span class="keyword">break</span>;
                            }
                            fileName[k] = *pChar;
                            pChar++;
                            k++;
                        }

                        <span class="keyword">if</span> (!strlist_has(fileName, s_included))
                        {
                            fputs(<span class="string">&quot;\n&quot;</span>, out);
                            <span class="keyword">if</span> (!Write(fileName, bHeaderMode, out, s_included))
                            {
                                fputs(linebuffer, out);
                                fputs(<span class="string">&quot;\n&quot;</span>, out);
                            }
                        }
                    }
                    <span class="keyword">else</span>
                    {
                        fputs(linebuffer, out);
                        fputs(<span class="string">&quot;\n&quot;</span>, out);
                    }
                }
                <span class="keyword">else</span>
                {
                    <span class="keyword">if</span> (bInclude)
                    {
                        fputs(linebuffer, out);
                        fputs(<span class="string">&quot;\n&quot;</span>, out);
                    }
                }
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">if</span> (c != EOF &amp;&amp; bInclude)
                {
                    fputc(c, out);
                }
            }
        }

        fprintf(out, <span class="string">&quot;\n&quot;</span>);
        <span class="keyword">struct</span> strlist_node* pCurrent = defineList;
        <span class="keyword">while</span> (pCurrent)
        {
            <span class="keyword">struct</span> strlist_node* pNext = pCurrent-&gt;pNext;
            fprintf(out, <span class="string">&quot;#undef %s \n&quot;</span>, pCurrent-&gt;fileName);


            free(pCurrent-&gt;fileName);
            free(pCurrent);
            pCurrent = pNext;
        }

        fclose(input);
    }


    <span class="keyword">return</span> found;
}


<span class="keyword">void</span> amalgamate(<span class="keyword">const</span> <span class="keyword">char</span>* file_name_out, <span class="keyword">bool</span> bHeaderMode, <span class="keyword">const</span> <span class="keyword">char</span>* files[], <span class="keyword">int</span> count)
{
    <span class="keyword">struct</span> strlist_node* s_included = <span class="number">0</span>;


    FILE* out = fopen(file_name_out, <span class="string">&quot;w&quot;</span>);
    <span class="keyword">if</span> (out)
    {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)
        {

            <span class="keyword">if</span> (!strlist_has(files[i], &amp;s_included))
            {
                Write(files[i], bHeaderMode, out, &amp;s_included);
            }

        }
        fclose(out);
    }

    strlist_free(&amp;s_included);

}


<span class="keyword">int</span> main()
{
    chdir(<span class="string">&quot;../lib/&quot;</span>);

    <span class="keyword">const</span> <span class="keyword">char</span>* files[] = {
         <span class="string">&quot;file1.c&quot;</span>,
         <span class="string">&quot;file2.c&quot;</span>,
    };

    amalgamate(<span class="string">&quot;lib.c&quot;</span>, <span class="comment">/*bHeaderMode*/</span><span class="keyword">false</span>, files, (<span class="keyword">sizeof</span>(files) / <span class="keyword">sizeof</span>(files[<span class="number">0</span>])));

    <span class="keyword">const</span> <span class="keyword">char</span>* headers[] = {
        <span class="string">&quot;Header1.h&quot;</span>,
        <span class="string">&quot;Header2.h&quot;</span>,
    };


    amalgamate(<span class="string">&quot;http.h&quot;</span>,  <span class="comment">/*bHeaderMode*/</span><span class="keyword">true</span>, headers, (<span class="keyword">sizeof</span>(headers) / <span class="keyword">sizeof</span>(headers[<span class="number">0</span>])));
}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  