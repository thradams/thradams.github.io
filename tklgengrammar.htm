<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p></p>

<p>{{{cpp</p>


<p>module tklgen2{  language tklgen  {        token PlusCharacter                = '+';    token LiteralChar                  = &quot;'&quot;((' '..'&amp;' | '('..'    token RangeSeparator               = &quot;..&quot;;    token EqualsCharacter              = '=';    token SemicolonCharacter           = ';';    token CommaCharacter               = ',';</p>

<p>    token KeywordEmpty                 = &quot;empty&quot;;    token KeywordAny                   = &quot;any&quot;;    token KeywordModule                = &quot;module&quot;;    token KeywordLanguage              = &quot;language&quot;;    token KeywordInterleave            = &quot;interleave&quot;;    token KeywordSyntax                = &quot;syntax&quot;;    token KeywordToken                 = &quot;token&quot;;</p>

<p>    token Identifier                   = ('a'..'z' | 'A'..'Z' | '                                         ('0'..'9' + ('a'..'z' | 'A'..'Z' | '</p>

<p>    token QuestionMarkCharacter        = '?';    token AsteriskCharacter            = '    token LeftCurlyBracketCharacter    = '{';    token RightCurlyBracketCharacter   = '}';    token VerticalLineCharacter        = '|';    token AmpersandCharacter           = '&amp;';    token LeftParenthesisCharacter     = '(';    token RightParenthesisCharacter    = ')';    token StringLiteral                = '&quot;'((' '..'</p>

<p></p>

<p>    interleave Blanks                  = ((&quot; &quot; | &quot;\n&quot; | &quot;\t&quot; | &quot;\r&quot;) +) |                                             (&quot;//&quot;(' '..'~')                                              (&quot;/                                             (&quot;</p>

<p>    syntax Main = ModuleBody;    syntax ModuleBody = &quot;module&quot; Identifier                        '{'                           LanguageBody                         '}';</p>

<p>    syntax LanguageBody = &quot;language&quot; Identifier                          '{'                             Declarations                           '}';</p>

<p>    syntax Declarations = Declaration Declarations | empty;</p>

<p>    syntax Declaration = TokenDeclaration |                         SyntaxDeclaration |                         InterleaveDeclaration;</p>

<p>    syntax TokenDeclaration =        &quot;token&quot; Identifier '=' TokenExpression ';';</p>

<p>    syntax InterleaveDeclaration =       &quot;interleave&quot; Identifier '=' TokenExpression ';';</p>

<p>    syntax SyntaxDeclaration =       &quot;syntax&quot; Identifier '=' SyntaxExpression ';';</p>

<p>    //tokens expressions-------------------------------------    //Tip:    //E --&gt; T { T };    //T --&gt; F { &quot;|&quot; F };    //F --&gt; P     //P --&gt; V | &quot;(&quot; E &quot;)&quot;;    //V --&gt; v </p>

<p>    syntax TokenExpression = T ZeroOrMoreT;    syntax ZeroOrMoreT = T ZeroOrMoreT | empty;</p>

<p>    syntax T = F ZeroOrMoreOrF;    syntax OrF = '|' F;    syntax ZeroOrMoreOrF = OrF ZeroOrMoreOrF | empty;</p>

<p>    syntax F = P OptOperator;</p>

<p>    syntax OptOperator = QuestionMarkCharacter |                         AsteriskCharacter     |                         PlusCharacter         |                         empty;</p>

<p>    syntax P = V | '(' TokenExpression ')';    syntax V = LiteralChar RangeOpt |               Identifier           |               KeywordAny           |               StringLiteral;</p>

<p>    syntax RangeOpt  = RangeSeparator LiteralChar | empty;</p>

<p>    //end token expressions---------------------------------------------------</p>


<p>    // Syntax expression----------------------------------------------------    //Tip:    //E --&gt; T { | T};    //T --&gt; F { F };    //T --&gt; Empty;    //F --&gt; NAME | CHAR | STRING | OPENB Action CLOSEB;</p>

<p>    syntax SyntaxExpression = SyntaxExpressionSingle SyntaxExpressionMoreSingle;</p>

<p>    syntax SyntaxExpressionMoreSingle =       '|' SyntaxExpressionSingle SyntaxExpressionMoreSingle |      empty;</p>

<p>    syntax SyntaxExpressionSingle = SyntaxExpressionItem SyntaxExpressionSingleFollow;    syntax SyntaxExpressionSingle = KeywordEmpty;</p>

<p>    syntax SyntaxExpressionSingleFollow = SyntaxExpressionItem SyntaxExpressionSingleFollow |                            empty;</p>

<p>    syntax SyntaxExpressionItem = Identifier |                                  LiteralChar |                                  StringLiteral |                                  SyntaxExpressionAction;</p>

<p>    syntax SyntaxExpressionAction = '{' Identifier '}';</p>

<p>    //end syntax expression ---------------------------------------------------  }}</p>


<p>}}}
<!-- Page content end --> 
</article> 
 
</body> 
</html>  