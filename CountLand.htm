
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>This algorithm counts how many boxes are islands.</p>


<h2> Description</h2>

<p>will create an imaginary line for each box (minX, maxY)-(minX, infinity) and count the number of intersections from this line with the others boxes.If the number of intersections is even then box is land otherwise it is sea.</p>

<pre>

          +      +            +
          |      |            |
          |      |            |
    minX, |axY   |            |
          |      |            |
          v------X-------+    |
          |      |       |    |
          |      |       |    |
          |      |       |    |
          |      |       |    |
          +------X-------+    |
                 v            |
          minX, maxX          |    +
                 +------------X------------+
                 |       minX,|maxY        |
                 |            v            |
                 |            +-------+    |
                 |            |       |    |
                 |            |       |    |
                 |            +-------+    |
                 |                         |
                 |                         |
                 +-------------------------+
</pre>

<p>I will apply an optimization and sort the list of boxes by maxY. Boxes with bigger maxY will have smaller indexes.</p>


<pre>

          +      +            +
          |      |            |
          |      |            |
    minX, |axY   |            |
          |      |            |
          v------X-------+    |
          |      |       |    |
          | 0    |       |    |
          |      |       |    |
          |      |       |    |
          +------X-------+    |
                 v            |                +----------+
          minX, maxX          |    +           | 1        |
                 +------------X------------+   |          |
                 | 2     minX,|maxY        |   |          |
                 |            v            |   +----------+
                 |            +-------+    |
                 |            | 3     |    |
                 |            |       |    |         +-------------+
                 |            +-------+    |         | 4           |
                 |                         |         |             |
                 |                         |         |             |
                 +-------------------------+         |             |
                                                     +-------------+

                    +-------------+
                    |     5       |
                    +-------------+
</pre>

<p>Using this optimization, each box will check intersection only with the boxes that have smaller indexes.</p>

<pre>



#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cassert&gt;


struct Box {
	double minX;
	double minY;
	double maxX;
	double maxY;
};

int CountSorted(std::vector&lt;Box&gt;&amp; boxes)
{
	//pre-condition - boxes sorted by maxY

	int landCount = 0;

	for (int i = 0; i &lt; (int)boxes.size(); i++)
	{
		int intersectionCount = 0;
		
		const double x = boxes[i].minX;
		const double y = boxes[i].maxY;

		for (int k = i - 1; k &gt;= 0; k--)
		{
			assert(boxes[k].maxY &gt;= y);

			if (x &gt;= boxes[k].minX &amp;&amp; x &lt;= boxes[k].maxX)
			{
				//check the intersection with maxY
				if (boxes[k].maxY &gt; y)
				{
					intersectionCount++;
				}

				//check the intersection with minY				
				if (boxes[k].minY &gt; y)
				{
					intersectionCount++;
				}
			}
		}
		if (intersectionCount % 2 == 0)
		{
			//if even then box is land 
			landCount++;
		}
	}
	return landCount;
}

int CountUnsorted(std::vector&lt;Box&gt;&amp; boxes)
{
	//boxes will be sorted by maxY
	std::sort(boxes.begin(), boxes.end(), [](const Box&amp; a, const Box&amp; b)
	{
		return a.maxY &gt; b.maxY;
	});
	return CountSorted(boxes);
}


void Test()
{
	std::vector&lt;Box&gt; boxes0;
	assert(CountUnsorted(boxes0) == 0);

	std::vector&lt;Box&gt; boxes1 = {
		{ 1.0, 1.0, 3.0, 3.0 }
	};
	assert(CountUnsorted(boxes1) == 1);

	std::vector&lt;Box&gt; boxes2 = {
		{ 1.0, 1.0, 3.0, 3.0 },
	    { 1.0, 4.0, 1.0, 5.0 }
	};
	assert(CountUnsorted(boxes2) == 2);

	std::vector&lt;Box&gt; boxes3 = {
		{ 5.0, 5.0, 6.0, 6.0 },
	    { 4.0, 4.0, 7.0, 7.0 }
	};
	assert(CountUnsorted(boxes3) == 1);

	std::vector&lt;Box&gt; boxes4 =
	{
		{ 1.0, 1.0, 10.0, 6.0 },
	    { 1.5, 1.5, 6.0, 5.0 },
	    { 2.0, 2.0, 3.0, 3.0 },
	    { 2.0, 3.5, 3.0, 4.5 },
	    { 3.5, 2.0, 5.5, 4.5 },
	    { 4.0, 3.5, 5.0, 4.0 },
	    { 4.0, 2.5, 5.0, 3.0 },
	    { 7.0, 3.0, 9.5, 5.5 },
	    { 7.5, 4.0, 8.0, 5.0 },
	    { 8.5, 3.5, 9.0, 4.5 },
	    { 3.0, 7.0, 8.0, 10.0 },
	    { 5.0, 7.5, 7.5, 9.5 },
	    { 5.5, 8.0, 6.0, 9.0 },
	    { 6.5, 8.0, 7.0, 9.0 }
	};
	assert(CountUnsorted(boxes4) == 9);
}


</pre>

<p>I make the ascii draw using:<a href="http://stable.ascii-flow.appspot.com/#Draw">http://stable.ascii-flow.appspot.com/#Draw</a></p>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  