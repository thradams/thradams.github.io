
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h2>Rational Number class</h2>

<p>Rational class (scratch).</p>

<p>When using rational classes is not uncommon to have overflows. In this case is interesting to use a Safe int type to catch errors.</p>

<p>You can find a safe int class in:<a href="http://safeint.codeplex.com/">http://safeint.codeplex.com/</a></p>

<pre>
<span class="comment">// Copyright (C) 2009, Thiago Adams (thiago.adams@gmail.com)
</span><span class="comment">// Permission to copy, use, modify, sell and distribute this software
</span><span class="comment">// is granted provided this copyright notice appears in all copies.
</span><span class="comment">// This software is provided &quot;as is&quot; without express or implied
</span><span class="comment">// warranty, and with no claim as to its suitability for any purpose.
</span>
<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
T GreatestCommonDivisor(T a, T b)
{
  <span class="keyword">if</span> (a &lt; <span class="number">0</span>)
    a = -a;
  
  <span class="keyword">if</span> (b &lt; <span class="number">0</span>) 
    b = -b;

  <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) 
    <span class="keyword">return</span> <span class="number">0</span>;

  T temp;
  <span class="keyword">while</span> (b)
  {
    temp = b;
    b = a % b;
    a = temp;
  }
  <span class="keyword">return</span> a;
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">class</span> Rational
{
    T m_d;
    T m_n;

<span class="keyword">public</span>:
    Rational() : m_n(<span class="number">0</span>) , m_d(<span class="number">1</span>) { }
    Rational(T n) : m_n(n) , m_d(<span class="number">1</span>) { }
    Rational(T n,T d) : m_n(n), m_d(d) { }
    
    Rational&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Rational&amp; other)
    {
        m_n = other.N();
        m_d = other.D();;
        <span class="keyword">return</span> *<span class="keyword">this</span>;
    }
    
    <span class="keyword">const</span> T&amp; D() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_d;
    }

    <span class="keyword">const</span> T&amp; N() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_n;
    }

    <span class="keyword">const</span> T&amp; Denominator() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> D();
    }

    <span class="keyword">const</span> T&amp; Numerator() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> N();
    }

    T IntegerPart() <span class="keyword">const</span>
    {
      <span class="keyword">return</span> Numerator() / Denominator();
    }
    
    T Remain() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> Numerator() % Denominator();
    }

    <span class="keyword">bool</span> IsInteger() <span class="keyword">const</span>
    {
        <span class="keyword">return</span>  Remain() == <span class="number">0</span>;
    }

    <span class="keyword">void</span> Simplify()
    {
        T n = GreatestCommonDivisor(Numerator(), Denominator());

        <span class="keyword">if</span> (n != <span class="number">0</span>)
        {
            m_n = Numerator() / n;
            m_d = Denominator() / n;
        }
    }
};
<span class="keyword">typedef</span> Rational&lt;<span class="keyword">int</span>&gt; RationalInt;
<span class="keyword">typedef</span> Rational&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; Rational64;

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> - (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left, <span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left.N() * other.D() - left.D() * other.N(), left.D() * other.D());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> - (<span class="keyword">const</span> T&amp; left, <span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left * other.D() - <span class="number">1</span> * other.N(),  other.D());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> + (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left.N() * other.D() + left.D() * other.N(), left.D() * other.D());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> * (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left.N() * other.N(), left.D() * other.D());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> * (<span class="keyword">const</span> T&amp; v, <span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(v * other.N(), other.D());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> * (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> T&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left.N() * other, left.D());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> / (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left.N() * other.D(), left.D() * other.N());
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
Rational&lt;T&gt; <span class="keyword">operator</span> / (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left, <span class="keyword">const</span> T&amp; v)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(left.N(), left.D() * v);
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(other - left).N() == <span class="number">0</span>;
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> T&amp; other)
{
  <span class="keyword">return</span> Rational&lt;T&gt;(other - left).N() == <span class="number">0</span>;
}

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> Rational&lt;T&gt;&amp; left,<span class="keyword">const</span> Rational&lt;T&gt;&amp; other)
{
  <span class="keyword">return</span> !<span class="keyword">operator</span> ==(other);
}

<span class="comment">//Add more operators here...
</span>
<span class="keyword">template</span>&lt;<span class="keyword">class</span> _Elem, <span class="keyword">class</span> _Tr, <span class="keyword">class</span> T&gt;
std::basic_ostream&lt;_Elem, _Tr&gt; &amp;
<span class="keyword">operator</span> &lt;&lt; (std::basic_ostream&lt;_Elem, _Tr&gt; &amp; stream,
             <span class="keyword">const</span> Rational&lt;T&gt; &amp; r)
{
    stream &lt;&lt; r.Numerator() &lt;&lt; (_Elem)<span class="string">'\\'</span> &lt;&lt; r.Denominator();    
    <span class="keyword">return</span> stream;
}

<span class="keyword">typedef</span> Rational&lt;<span class="keyword">int</span>&gt; RationalInt;
<span class="keyword">typedef</span> Rational&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; Rational64;

Tests


<span class="keyword">using</span> <span class="keyword">namespace</span> UnitTest;

TEST_FUNCTION(Test1)()
{
    AreEqual(RationalInt(), <span class="number">0</span>);
}

TEST_FUNCTION(Test2)()
{
    AreEqual(RationalInt(<span class="number">1</span>), <span class="number">1</span>);
}

TEST_FUNCTION(Test3)()
{
    AreEqual(RationalInt(<span class="number">2</span>, <span class="number">1</span>), RationalInt(<span class="number">10</span>, <span class="number">5</span>));
}
TEST_FUNCTION(Test4)()
{
    RationalInt r1(<span class="number">1</span>, <span class="number">3</span>);
    r1 = r1 + r1 + r1;
    RationalInt r2(<span class="number">1</span>);
    AreEqual(r1, r2);
}
TEST_FUNCTION(Test5)()
{
    RationalInt r1(<span class="number">1</span>, <span class="number">3</span>);
    r1 = r1 + r1 + r1;
    RationalInt r2 = r1 / <span class="number">3</span>;
    AreEqual(r2, RationalInt(<span class="number">1</span>, <span class="number">3</span>));
}

TEST_FUNCTION(Test6)()
{
    IsTrue(RationalInt(<span class="number">1</span>).IsInteger());
    IsTrue(RationalInt().IsInteger());
    IsTrue(RationalInt(<span class="number">3</span>, <span class="number">1</span>).IsInteger());    
}

TEST_FUNCTION(Test7)()
{
    RationalInt r1(<span class="number">200</span>);
    r1 = r1 / <span class="number">3</span>;
    r1 = r1 * <span class="number">3</span>;
    AreEqual(r1, <span class="number">200</span>);
}

<span class="keyword">int</span> main()
{
    ConsoleReport rep;
    RunAll(rep);
    <span class="keyword">return</span> rep.GetFailedCount();
}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  