// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html




/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 11328,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5254208,
    DYNAMIC_BASE = 5254208,
    DYNAMICTOP_PTR = 11296;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 11320;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 11312
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___lock() {}

  
    

  
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // Can't handle 64-bit integers
      if (!(offset_high == -1 && offset_low < 0) &&
          !(offset_high == 0 && offset_low >= 0)) {
        return -ERRNO_CODES.EOVERFLOW;
      }
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   
FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_vii": nullFunc_vii,
  "___assert_fail": ___assert_fail,
  "___buildEnvironment": ___buildEnvironment,
  "___lock": ___lock,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall195": ___syscall195,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___unlock": ___unlock,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_vii=env.nullFunc_vii,
  ___assert_fail=env.___assert_fail,
  ___buildEnvironment=env.___buildEnvironment,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall195=env.___syscall195,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___unlock=env.___unlock,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  STACKTOP = 11328,
  STACK_MAX = 5254208,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _token_list_pop_back($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)==($14|0);
 $16 = $2;
 $17 = ((($16)) + 4|0);
 if ($15) {
  HEAP32[$17>>2] = 0;
  $18 = $2;
  HEAP32[$18>>2] = 0;
 } else {
  $19 = HEAP32[$17>>2]|0;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $2;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 32|0);
  HEAP32[$27>>2] = 0;
  $28 = $2;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($30|0)==($32|0);
  if ($33) {
   $34 = $2;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 36|0);
   HEAP32[$37>>2] = 0;
  }
 }
 $38 = $3;
 $39 = ((($38)) + 32|0);
 HEAP32[$39>>2] = 0;
 $40 = $3;
 $41 = ((($40)) + 36|0);
 HEAP32[$41>>2] = 0;
 $42 = $3;
 $1 = $42;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function _token_list_pop_front($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 $15 = $2;
 if ($14) {
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = $2;
  HEAP32[$17>>2] = 0;
 } else {
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  HEAP32[$21>>2] = $20;
 }
 $22 = $3;
 $23 = ((($22)) + 32|0);
 HEAP32[$23>>2] = 0;
 $24 = $3;
 $25 = ((($24)) + 36|0);
 HEAP32[$25>>2] = 0;
 $26 = $3;
 $1 = $26;
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function _token_list_set_file($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 while(1) {
  $11 = $8;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = $8;
  $15 = ((($14)) + 28|0);
  HEAP32[$15>>2] = $13;
  $16 = $6;
  $17 = $8;
  $18 = ((($17)) + 12|0);
  HEAP32[$18>>2] = $16;
  $19 = $7;
  $20 = $8;
  $21 = ((($20)) + 16|0);
  HEAP32[$21>>2] = $19;
  $22 = $8;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $8 = $24;
 }
 STACKTOP = sp;return;
}
function _token_list_join_tokens($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 32|0;
 $2 = $0;
 $7 = $1&1;
 $3 = $7;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $8 = $3;
 $9 = $8&1;
 if ($9) {
  (_ss_fprintf($4,1316,$vararg_buffer)|0);
 }
 $5 = 0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = (_token_is_blank($14)|0);
  if ($15) {
   $5 = 1;
   $16 = $6;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   $6 = $18;
   continue;
  }
  $19 = $5;
  $20 = $19&1;
  if ($20) {
   (_ss_fprintf($4,5588,$vararg_buffer1)|0);
  }
  $21 = $6;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $23;
  (_ss_fprintf($4,5531,$vararg_buffer3)|0);
  $24 = $6;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $5 = 0;
 }
 $27 = $3;
 $28 = $27&1;
 if (!($28)) {
  $29 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 (_ss_fprintf($4,1316,$vararg_buffer5)|0);
 $29 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function _token_is_blank($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(8998);
 if ($4) {
  $14 = 1;
 } else {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(142);
  if ($7) {
   $14 = 1;
  } else {
   $8 = $1;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(130);
   if ($10) {
    $14 = 1;
   } else {
    $11 = $1;
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(131);
    $14 = $13;
   }
  }
 }
 STACKTOP = sp;return ($14|0);
}
function _token_list_insert_after($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $3;
  $10 = HEAP32[$9>>2]|0;
  $11 = $5;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 32|0);
  HEAP32[$14>>2] = $10;
  $15 = $5;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 36|0);
  HEAP32[$20>>2] = $17;
  $21 = $5;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  HEAP32[$23>>2] = $22;
  $24 = $5;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = 0;
  STACKTOP = sp;return;
 }
 $27 = $4;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $6 = $29;
 $30 = $3;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $4;
 $34 = ($32|0)==($33|0);
 if ($34) {
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $3;
  $39 = ((($38)) + 4|0);
  HEAP32[$39>>2] = $37;
 } else {
 }
 $40 = $6;
 $41 = $5;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 32|0);
 HEAP32[$44>>2] = $40;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = $4;
 $48 = ((($47)) + 32|0);
 HEAP32[$48>>2] = $46;
 STACKTOP = sp;return;
}
function _token_list_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  ___assert_fail((5539|0),(1318|0),161,(1326|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  ___assert_fail((1341|0),(1318|0),162,(1326|0));
  // unreachable;
 }
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 36|0);
  HEAP32[$16>>2] = 0;
  $17 = $3;
  $18 = ((($17)) + 32|0);
  HEAP32[$18>>2] = 0;
  $19 = $3;
  $20 = $2;
  HEAP32[$20>>2] = $19;
  $21 = $3;
  $22 = $2;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
 } else {
  $24 = $2;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $3;
  $28 = ((($27)) + 36|0);
  HEAP32[$28>>2] = $26;
  $29 = $3;
  $30 = $2;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 32|0);
  HEAP32[$33>>2] = $29;
  $34 = $3;
  $35 = $2;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = $34;
 }
 $37 = $2;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 } else {
  ___assert_fail((1360|0),(1318|0),178,(1326|0));
  // unreachable;
 }
 return (0)|0;
}
function _token_list_clone_and_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (_clone_token($5)|0);
 $4 = $6;
 $7 = $2;
 $8 = $4;
 (_token_list_add($7,$8)|0);
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _clone_token($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_calloc(1,40)|0);
 $2 = $3;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 24|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (___strdup($13)|0);
 $15 = $2;
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 HEAP32[$19>>2] = $18;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function _token_list_append_list_at_beginning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  HEAP32[$12>>2] = $11;
  $13 = $3;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 } else {
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  HEAP32[$23>>2] = $19;
  $24 = $3;
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  HEAP32[$26>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _token_list_append_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 if ($9) {
  HEAP32[$12>>2] = $11;
  $13 = $3;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 } else {
  $18 = ((($12)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 32|0);
  HEAP32[$20>>2] = $11;
  $21 = $2;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $3;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = $23;
  $27 = $3;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $29;
  STACKTOP = sp;return;
 }
}
function _token_list_remove($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $10 = $5;
 $11 = ((($10)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $6;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $9 = $15;
 $16 = $9;
 $17 = $8;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = $16;
 $19 = $8;
 $20 = $9;
 $21 = ((($20)) + 36|0);
 HEAP32[$21>>2] = $19;
 $22 = $5;
 HEAP32[$7>>2] = $22;
 $23 = $5;
 $24 = ((($23)) + 36|0);
 HEAP32[$24>>2] = 0;
 $25 = $6;
 $26 = ((($7)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = $6;
 $28 = ((($27)) + 32|0);
 HEAP32[$28>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
 STACKTOP = sp;return;
}
function _token_list_is_empty($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   ___assert_fail((1385|0),(1318|0),278,(1462|0));
   // unreachable;
  }
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   ___assert_fail((1385|0),(1318|0),278,(1462|0));
   // unreachable;
  }
 }
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 STACKTOP = sp;return ($18|0);
}
function _print_list($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if ($10) {
   (_printf(1482,$vararg_buffer)|0);
  }
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  _print_literal2($13);
  (_printf(1485,$vararg_buffer1)|0);
  $14 = $2;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $2 = $16;
 }
 (_printf(5664,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _print_literal2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = $1;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $cond = ($9|0)==(10);
  if ($cond) {
   (_printf(1490,$vararg_buffer)|0);
  } else {
   $10 = $1;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   HEAP32[$vararg_buffer1>>2] = $12;
   (_printf(1493,$vararg_buffer1)|0);
  }
  $13 = $1;
  $14 = ((($13)) + 1|0);
  $1 = $14;
 }
 STACKTOP = sp;return;
}
function _pointer_type_list_pop_front($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)==($12|0);
 $14 = $1;
 if ($13) {
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = 0;
  $16 = $1;
  HEAP32[$16>>2] = 0;
 } else {
  $17 = HEAP32[$14>>2]|0;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  HEAP32[$20>>2] = $19;
 }
 $21 = $2;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 STACKTOP = sp;return;
}
function _pointer_type_list_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 while(1) {
  $9 = $4;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = (_calloc(1,8)|0);
  $5 = $11;
  $12 = $4;
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  HEAP32[$14>>2] = $13;
  $15 = $5;
  $6 = $15;
  $16 = HEAP32[$3>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = $6;
  if ($17) {
   HEAP32[$3>>2] = $18;
   $19 = $6;
   $20 = ((($3)) + 4|0);
   HEAP32[$20>>2] = $19;
  } else {
   $21 = ((($3)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $18;
   $24 = $6;
   $25 = ((($3)) + 4|0);
   HEAP32[$25>>2] = $24;
  }
  $26 = $4;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $4 = $28;
 }
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _array_function_type_list_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 while(1) {
  $9 = $4;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = (_calloc(1,24)|0);
  $5 = $11;
  $12 = $4;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $5;
  $16 = ((($15)) + 16|0);
  HEAP32[$16>>2] = $14;
  $17 = $4;
  $18 = ((($17)) + 13|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&1;
  $21 = $5;
  $22 = ((($21)) + 13|0);
  $23 = $20&1;
  HEAP8[$22>>0] = $23;
  $24 = $4;
  $25 = ((($24)) + 14|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&1;
  $28 = $5;
  $29 = ((($28)) + 14|0);
  $30 = $27&1;
  HEAP8[$29>>0] = $30;
  $31 = $5;
  $6 = $31;
  $32 = HEAP32[$3>>2]|0;
  $33 = ($32|0)==(0|0);
  $34 = $6;
  if ($33) {
   HEAP32[$3>>2] = $34;
   $35 = $6;
   $36 = ((($3)) + 4|0);
   HEAP32[$36>>2] = $35;
  } else {
   $37 = ((($3)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 20|0);
   HEAP32[$39>>2] = $34;
   $40 = $6;
   $41 = ((($3)) + 4|0);
   HEAP32[$41>>2] = $40;
  }
  $42 = $4;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $4 = $44;
 }
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _direct_declarator_type_copy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 } else {
  $7 = (_calloc(1,12)|0);
  $3 = $7;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (_declarator_type_copy($9)|0);
  $11 = $3;
  HEAP32[$11>>2] = $10;
  $12 = $3;
  $13 = ((($12)) + 4|0);
  $14 = $2;
  $15 = ((($14)) + 4|0);
  _array_function_type_list_copy($4,$15);
  ;HEAP32[$13>>2]=HEAP32[$4>>2]|0;HEAP32[$13+4>>2]=HEAP32[$4+4>>2]|0;
  $16 = $3;
  $1 = $16;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _declarator_type_copy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 } else {
  $7 = (_calloc(1,12)|0);
  $3 = $7;
  $8 = $3;
  $9 = $2;
  _pointer_type_list_copy($4,$9);
  ;HEAP32[$8>>2]=HEAP32[$4>>2]|0;HEAP32[$8+4>>2]=HEAP32[$4+4>>2]|0;
  $10 = $2;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_direct_declarator_type_copy($12)|0);
  $14 = $3;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = $3;
  $1 = $16;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _type_is_pointer($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 $8 = $2;
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_find_inner_declarator($10)|0);
 $3 = $11;
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $3;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = $16;
 } else {
  $17 = 0;
 }
 $$expand_i1_val2 = $17&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function _find_inner_declarator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _type_is_pointer_or_array($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$1>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = ((($8)) + 208|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_find_inner_declarator($10)|0);
   $3 = $11;
   $12 = $3;
   $13 = ($12|0)!=(0|0);
   if ($13) {
    $14 = $3;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)!=(0|0);
    if ($16) {
     $$expand_i1_val2 = 1;
     HEAP8[$1>>0] = $$expand_i1_val2;
     break;
    }
   }
   $17 = $3;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 4|0);
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $3;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 4|0);
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 13|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&1;
    if ($32) {
     $$expand_i1_val4 = 1;
     HEAP8[$1>>0] = $$expand_i1_val4;
     break;
    }
   }
   $$expand_i1_val6 = 0;
   HEAP8[$1>>0] = $$expand_i1_val6;
  }
 } while(0);
 $$pre_trunc = HEAP8[$1>>0]|0;
 $33 = $$pre_trunc&1;
 STACKTOP = sp;return ($33|0);
}
function _type_is_integer($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = (_type_is_pointer($3)|0);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 8;
  $8 = ($7|0)!=(0);
  $$expand_i1_val2 = $8&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $9 = $$pre_trunc&1;
 STACKTOP = sp;return ($9|0);
}
function _type_get_rank($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_type_is_pointer_or_array($6)|0);
 if ($7) {
  $2 = 40;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 $5 = 0;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 512;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $5 = 10;
  } else {
   $12 = $3;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 2;
   $15 = ($14|0)!=(0);
   if (!($15)) {
    $16 = $3;
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 262144;
    $19 = ($18|0)!=(0);
    if (!($19)) {
     $20 = $3;
     $21 = HEAP32[$20>>2]|0;
     $22 = $21 & 4;
     $23 = ($22|0)!=(0);
     if (!($23)) {
      $24 = $3;
      $25 = HEAP32[$24>>2]|0;
      $26 = $25 & 524288;
      $27 = ($26|0)!=(0);
      if (!($27)) {
       $28 = $3;
       $29 = HEAP32[$28>>2]|0;
       $30 = $29 & 8;
       $31 = ($30|0)!=(0);
       if (!($31)) {
        $32 = $3;
        $33 = HEAP32[$32>>2]|0;
        $34 = $33 & 65536;
        $35 = ($34|0)!=(0);
        if (!($35)) {
         $36 = $3;
         $37 = HEAP32[$36>>2]|0;
         $38 = $37 & 16;
         $39 = ($38|0)!=(0);
         if (!($39)) {
          $40 = $3;
          $41 = HEAP32[$40>>2]|0;
          $42 = $41 & 1048576;
          $43 = ($42|0)!=(0);
          if (!($43)) {
           $44 = $3;
           $45 = HEAP32[$44>>2]|0;
           $46 = $45 & 32;
           $47 = ($46|0)!=(0);
           if ($47) {
            $5 = 60;
            break;
           }
           $48 = $3;
           $49 = HEAP32[$48>>2]|0;
           $50 = $49 & 64;
           $51 = ($50|0)!=(0);
           if ($51) {
            $5 = 70;
            break;
           }
           $52 = $3;
           $53 = HEAP32[$52>>2]|0;
           $54 = $53 & 4194304;
           $55 = ($54|0)!=(0);
           if (!($55)) {
            $56 = $3;
            $57 = HEAP32[$56>>2]|0;
            $58 = $57 & 2097152;
            $59 = ($58|0)!=(0);
            if (!($59)) {
             $60 = $3;
             $61 = HEAP32[$60>>2]|0;
             $62 = $61 & 32768;
             $63 = ($62|0)!=(0);
             $64 = $4;
             if ($63) {
              (_seterror($64,1496,$vararg_buffer)|0);
              break;
             } else {
              (_seterror($64,1542,$vararg_buffer1)|0);
              break;
             }
            }
           }
           $5 = 80;
           break;
          }
         }
         $5 = 50;
         break;
        }
       }
       $5 = 40;
       break;
      }
     }
     $5 = 30;
     break;
    }
   }
   $5 = 20;
  }
 } while(0);
 $65 = $5;
 $2 = $65;
 $66 = $2;
 STACKTOP = sp;return ($66|0);
}
function _type_common($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $9 = $4;
 $10 = $6;
 $11 = (_type_get_rank($9,$10)|0);
 $7 = $11;
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  $14 = $4;
  $15 = $6;
  $16 = (_type_get_rank($14,$15)|0);
  $8 = $16;
  $17 = $6;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   $19 = $7;
   $20 = $8;
   $21 = ($19|0)>=($20|0);
   if ($21) {
    $22 = $4;
    _type_copy($0,$22);
    STACKTOP = sp;return;
   } else {
    $23 = $5;
    _type_copy($0,$23);
    STACKTOP = sp;return;
   }
  }
 }
 $24 = $4;
 _type_copy($0,$24);
 STACKTOP = sp;return;
}
function _type_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp;
 $2 = $1;
 _memset(($3|0),0,216)|0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$3>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = $2;
 $12 = ((($11)) + 8|0);
 (_strcpy($10,$12)|0);
 $13 = $2;
 $14 = ((($13)) + 208|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  _memcpy(($0|0),($3|0),216)|0;
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = ((($17)) + 208|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_declarator_type_copy($19)|0);
 $21 = ((($3)) + 208|0);
 HEAP32[$21>>2] = $20;
 _memcpy(($0|0),($3|0),216)|0;
 STACKTOP = sp;return;
}
function _type_get_sizeof($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $6 = 1;
  } else {
   $12 = $4;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 512;
   $15 = ($14|0)!=(0);
   if ($15) {
    $6 = 1;
    break;
   }
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 4;
   $19 = ($18|0)!=(0);
   if ($19) {
    $6 = 4;
    break;
   }
   $20 = $4;
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 8;
   $23 = ($22|0)!=(0);
   if ($23) {
    $6 = 4;
    break;
   }
   $24 = $4;
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 & 16;
   $27 = ($26|0)!=(0);
   if ($27) {
    $6 = 4;
    break;
   }
   $28 = $4;
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 4194304;
   $31 = ($30|0)!=(0);
   if ($31) {
    $6 = 8;
    break;
   }
   $32 = $4;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 2097152;
   $35 = ($34|0)!=(0);
   if ($35) {
    $6 = 8;
    break;
   }
   $36 = $4;
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 & 1048576;
   $39 = ($38|0)!=(0);
   if ($39) {
    $6 = 4;
    break;
   }
   $40 = $4;
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & 524288;
   $43 = ($42|0)!=(0);
   if ($43) {
    $6 = 2;
    break;
   }
   $44 = $4;
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 262144;
   $47 = ($46|0)!=(0);
   if ($47) {
    $6 = 1;
    break;
   }
   $48 = $4;
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 64;
   $51 = ($50|0)!=(0);
   if ($51) {
    $6 = 8;
    break;
   }
   $52 = $4;
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 & 32768;
   $55 = ($54|0)!=(0);
   if ($55) {
    $6 = 1;
    break;
   }
   $56 = $4;
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 65536;
   $59 = ($58|0)!=(0);
   if ($59) {
    $6 = 4;
    break;
   }
   $60 = $4;
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if (!($62)) {
    ___assert_fail((9119|0),(1596|0),309,(1610|0));
    // unreachable;
   }
   $63 = $5;
   $64 = $3;
   $65 = ((($64)) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   _seterror_with_token($63,$66,1568,$vararg_buffer);
   $97 = $6;
   STACKTOP = sp;return ($97|0);
  }
 } while(0);
 $67 = $4;
 $68 = ((($67)) + 208|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if (!($70)) {
  $97 = $6;
  STACKTOP = sp;return ($97|0);
 }
 $71 = $4;
 $72 = ((($71)) + 208|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if (!($76)) {
  $97 = $6;
  STACKTOP = sp;return ($97|0);
 }
 $77 = $4;
 $78 = ((($77)) + 208|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $7 = $83;
 while(1) {
  $84 = $7;
  $85 = ($84|0)!=(0|0);
  if (!($85)) {
   break;
  }
  $86 = $7;
  $87 = ((($86)) + 13|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&1;
  if ($89) {
   $90 = $6;
   $91 = $7;
   $92 = HEAP32[$91>>2]|0;
   $93 = Math_imul($90, $92)|0;
   $6 = $93;
  }
  $94 = $7;
  $95 = ((($94)) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $7 = $96;
 }
 $97 = $6;
 STACKTOP = sp;return ($97|0);
}
function _type_set_qualifiers_using_declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $3;
 if ($7) {
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = $12;
  STACKTOP = sp;return;
 }
 $15 = ((($8)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $22;
 STACKTOP = sp;return;
}
function _type_set_specifiers_using_declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = $3;
 if ($7) {
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  HEAP32[$12>>2] = $11;
  $13 = $3;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = $3;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  if ($18) {
   $22 = ((($21)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    STACKTOP = sp;return;
   }
   $27 = $2;
   $28 = ((($27)) + 8|0);
   $29 = $3;
   $30 = ((($29)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   (_strcpy($28,$37)|0);
   STACKTOP = sp;return;
  }
  $38 = ((($21)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $2;
   $42 = ((($41)) + 8|0);
   $43 = $3;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 20|0);
   (_strcpy($42,$48)|0);
   STACKTOP = sp;return;
  }
  $49 = $3;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   STACKTOP = sp;return;
  }
  $55 = $2;
  $56 = ((($55)) + 8|0);
  $57 = $3;
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  (_strcpy($56,$61)|0);
  STACKTOP = sp;return;
 }
 $62 = ((($8)) + 20|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $3;
 $66 = ((($65)) + 20|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$67>>2]|0;
 $69 = $2;
 HEAP32[$69>>2] = $68;
 $70 = $3;
 $71 = ((($70)) + 20|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 $76 = $3;
 $77 = ((($76)) + 20|0);
 $78 = HEAP32[$77>>2]|0;
 if ($75) {
  $79 = ((($78)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if (!($83)) {
   STACKTOP = sp;return;
  }
  $84 = $2;
  $85 = ((($84)) + 8|0);
  $86 = $3;
  $87 = ((($86)) + 20|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  (_strcpy($85,$94)|0);
  STACKTOP = sp;return;
 }
 $95 = ((($78)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 $98 = $3;
 $99 = ((($98)) + 20|0);
 $100 = HEAP32[$99>>2]|0;
 if ($97) {
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 20|0);
  $104 = ($103|0)!=(0|0);
  if (!($104)) {
   STACKTOP = sp;return;
  }
  $105 = $2;
  $106 = ((($105)) + 8|0);
  $107 = $3;
  $108 = ((($107)) + 20|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($111)) + 20|0);
  (_strcpy($106,$112)|0);
  STACKTOP = sp;return;
 } else {
  $113 = ((($100)) + 20|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)!=(0|0);
  if (!($115)) {
   STACKTOP = sp;return;
  }
  $116 = $2;
  $117 = ((($116)) + 8|0);
  $118 = $3;
  $119 = ((($118)) + 20|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($120)) + 20|0);
  $122 = HEAP32[$121>>2]|0;
  (_strcpy($117,$122)|0);
  STACKTOP = sp;return;
 }
}
function _clone_pointer_to_pointer_type_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 if ($8) {
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
  STACKTOP = sp;return;
 }
 $9 = $2;
 $4 = $9;
 while(1) {
  $10 = $4;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = (_calloc(1,8)|0);
  $5 = $12;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $2;
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = $5;
   HEAP32[$19>>2] = $18;
  }
  $20 = $5;
  $6 = $20;
  $21 = HEAP32[$3>>2]|0;
  $22 = ($21|0)==(0|0);
  $23 = $6;
  if ($22) {
   HEAP32[$3>>2] = $23;
   $24 = $6;
   $25 = ((($3)) + 4|0);
   HEAP32[$25>>2] = $24;
  } else {
   $26 = ((($3)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = $23;
   $29 = $6;
   $30 = ((($3)) + 4|0);
   HEAP32[$30>>2] = $29;
  }
  $31 = $4;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $4 = $33;
 }
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _clone_direct_declarator_to_direct_declarator_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $10 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $2 = 0;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $15 = (_calloc(1,12)|0);
 $5 = $15;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $3;
  $21 = $4;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_clone_declarator_to_declarator_type($20,$23)|0);
  $25 = $5;
  HEAP32[$25>>2] = $24;
 }
 $26 = $4;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $6 = $28;
 L8: while(1) {
  $29 = $6;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   break;
  }
  $31 = (_calloc(1,24)|0);
  $7 = $31;
  $32 = $6;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  L11: do {
   if ($35) {
    $36 = $7;
    $37 = ((($36)) + 14|0);
    HEAP8[$37>>0] = 1;
    $8 = 0;
    $38 = $6;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 40|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)!=(0|0);
    if ($43) {
    }
    while(1) {
     $44 = $8;
     $45 = ($44|0)!=(0|0);
     if (!($45)) {
      break L11;
     }
     $46 = (_calloc(1,216)|0);
     $9 = $46;
     $47 = $9;
     $48 = $3;
     $49 = $8;
     $50 = ((($49)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     _make_type_using_declarator($10,$48,$51);
     _memcpy(($47|0),($10|0),216)|0;
     $52 = $9;
     $11 = $52;
     $53 = $7;
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     $57 = $11;
     $58 = $7;
     $59 = ((($58)) + 4|0);
     if ($56) {
      HEAP32[$59>>2] = $57;
      $60 = $11;
      $61 = $7;
      $62 = ((($61)) + 4|0);
      $63 = ((($62)) + 4|0);
      HEAP32[$63>>2] = $60;
     } else {
      $64 = ((($59)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ((($65)) + 212|0);
      HEAP32[$66>>2] = $57;
      $67 = $11;
      $68 = $7;
      $69 = ((($68)) + 4|0);
      $70 = ((($69)) + 4|0);
      HEAP32[$70>>2] = $67;
     }
     $71 = $8;
     $72 = ((($71)) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     $8 = $73;
    }
   } else {
    $74 = $6;
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)!=(0|0);
    if (!($76)) {
     label = 18;
     break L8;
    }
    $77 = $6;
    $78 = HEAP32[$77>>2]|0;
    $79 = ((($78)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $7;
    $82 = ((($81)) + 16|0);
    HEAP32[$82>>2] = $80;
    $83 = $7;
    $84 = ((($83)) + 13|0);
    HEAP8[$84>>0] = 1;
   }
  } while(0);
  $85 = $7;
  $12 = $85;
  $86 = $5;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)==(0|0);
  $90 = $12;
  $91 = $5;
  $92 = ((($91)) + 4|0);
  if ($89) {
   HEAP32[$92>>2] = $90;
   $93 = $12;
   $94 = $5;
   $95 = ((($94)) + 4|0);
   $96 = ((($95)) + 4|0);
   HEAP32[$96>>2] = $93;
  } else {
   $97 = ((($92)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98)) + 20|0);
   HEAP32[$99>>2] = $90;
   $100 = $12;
   $101 = $5;
   $102 = ((($101)) + 4|0);
   $103 = ((($102)) + 4|0);
   HEAP32[$103>>2] = $100;
  }
  $104 = $6;
  $105 = ((($104)) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $6 = $106;
 }
 if ((label|0) == 18) {
  ___assert_fail((9119|0),(1596|0),470,(1626|0));
  // unreachable;
 }
 $107 = $5;
 $2 = $107;
 $108 = $2;
 STACKTOP = sp;return ($108|0);
}
function _clone_declarator_to_declarator_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 } else {
  $9 = (_calloc(1,12)|0);
  $5 = $9;
  $10 = $3;
  $11 = $4;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_clone_direct_declarator_to_direct_declarator_type($10,$13)|0);
  $15 = $5;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = $14;
  $17 = $5;
  $18 = $4;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  _clone_pointer_to_pointer_type_list($6,$20);
  ;HEAP32[$17>>2]=HEAP32[$6>>2]|0;HEAP32[$17+4>>2]=HEAP32[$6+4>>2]|0;
  $21 = $5;
  $2 = $21;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _make_type_using_declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $5 = sp + 216|0;
 $6 = sp;
 $3 = $1;
 $4 = $2;
 _memset(($5|0),0,216)|0;
 _memset(($5|0),0,216)|0;
 $7 = $4;
 _type_set_qualifiers_using_declarator($5,$7);
 $8 = $4;
 _type_set_specifiers_using_declarator($5,$8);
 $9 = $3;
 $10 = $4;
 $11 = (_clone_declarator_to_declarator_type($9,$10)|0);
 $12 = ((($5)) + 208|0);
 HEAP32[$12>>2] = $11;
 $13 = $3;
 _type_expand($6,$13,$5);
 _memcpy(($0|0),($6|0),216)|0;
 STACKTOP = sp;return;
}
function _type_expand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $6 = sp + 16|0;
 $3 = $1;
 $4 = $2;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 131072;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $3;
  $15 = $4;
  $16 = ((($15)) + 8|0);
  $17 = (_find_declarator($14,$16)|0);
  $5 = $17;
  $18 = $5;
  $19 = ($18|0)!=(0|0);
  if ($19) {
   $20 = $3;
   $21 = $5;
   _make_type_using_declarator_do_not_expand($6,$20,$21);
   $22 = ((($6)) + 208|0);
   $23 = HEAP32[$22>>2]|0;
   $7 = $23;
   while(1) {
    $24 = $7;
    $25 = ($24|0)!=(0|0);
    if (!($25)) {
     break;
    }
    $26 = $7;
    $27 = ((($26)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)!=(0|0);
    if (!($30)) {
     break;
    }
    $31 = $7;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$33>>2]|0;
    $7 = $34;
   }
   $35 = $7;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0|0);
   if ($38) {
    $39 = $4;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $7;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    HEAP32[$44>>2] = $41;
   }
   $45 = $4;
   $46 = ((($45)) + 208|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = HEAP32[$47>>2]|0;
   $8 = $48;
   while(1) {
    $49 = $8;
    $50 = ($49|0)!=(0|0);
    if (!($50)) {
     break;
    }
    $51 = $8;
    $9 = $51;
    $52 = $7;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(0|0);
    $55 = $9;
    $56 = $7;
    if ($54) {
     HEAP32[$56>>2] = $55;
     $57 = $9;
     $58 = $7;
     $59 = ((($58)) + 4|0);
     HEAP32[$59>>2] = $57;
    } else {
     $60 = ((($56)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($61)) + 4|0);
     HEAP32[$62>>2] = $55;
     $63 = $9;
     $64 = $7;
     $65 = ((($64)) + 4|0);
     HEAP32[$65>>2] = $63;
    }
    $66 = $8;
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $8 = $68;
   }
   $69 = $4;
   $70 = ((($69)) + 208|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$71>>2] = 0;
   $72 = $4;
   $73 = ((($72)) + 208|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 4|0);
   HEAP32[$75>>2] = 0;
   $76 = $4;
   $77 = ((($76)) + 208|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($78)) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $7;
   $82 = ((($81)) + 8|0);
   HEAP32[$82>>2] = $80;
   $83 = $4;
   $84 = ((($83)) + 208|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($85)) + 8|0);
   HEAP32[$86>>2] = 0;
   $87 = $3;
   _type_expand($0,$87,$6);
   STACKTOP = sp;return;
  }
 }
 $88 = $4;
 _memcpy(($0|0),($88|0),216)|0;
 STACKTOP = sp;return;
}
function _make_type_using_declarator_do_not_expand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp;
 $3 = $1;
 $4 = $2;
 _memset(($5|0),0,216)|0;
 _memset(($5|0),0,216)|0;
 $6 = $4;
 _type_set_qualifiers_using_declarator($5,$6);
 $7 = $4;
 _type_set_specifiers_using_declarator($5,$7);
 $8 = $3;
 $9 = $4;
 $10 = (_clone_declarator_to_declarator_type($8,$9)|0);
 $11 = ((($5)) + 208|0);
 HEAP32[$11>>2] = $10;
 _memcpy(($0|0),($5|0),216)|0;
 STACKTOP = sp;return;
}
function _type_set_int($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 8;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 208|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _type_is_same($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=($10|0);
 do {
  if ($11) {
   $$expand_i1_val = 0;
   HEAP8[$2>>0] = $$expand_i1_val;
  } else {
   $12 = $3;
   $13 = HEAP32[$12>>2]|0;
   $14 = $4;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13|0)!=($15|0);
   if ($16) {
    $$expand_i1_val2 = 0;
    HEAP8[$2>>0] = $$expand_i1_val2;
    break;
   }
   $17 = $3;
   $18 = ((($17)) + 8|0);
   $19 = $4;
   $20 = ((($19)) + 8|0);
   $21 = (_strcmp($18,$20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    $$expand_i1_val4 = 0;
    HEAP8[$2>>0] = $$expand_i1_val4;
    break;
   } else {
    $$expand_i1_val6 = 1;
    HEAP8[$2>>0] = $$expand_i1_val6;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$2>>0]|0;
 $23 = $$pre_trunc&1;
 STACKTOP = sp;return ($23|0);
}
function _is_first_of_primary_expression($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(8996);
 if ($11) {
  $42 = 1;
 } else {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(128);
  if ($16) {
   $42 = 1;
  } else {
   $17 = $2;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(129);
   if ($21) {
    $42 = 1;
   } else {
    $22 = $2;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$24>>2]|0;
    $26 = (_is_number($25)|0);
    if ($26) {
     $42 = 1;
    } else {
     $27 = $2;
     $28 = ((($27)) + 28|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(40);
     if ($31) {
      $42 = 1;
     } else {
      $32 = $2;
      $33 = ((($32)) + 28|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(9046);
      if ($36) {
       $42 = 1;
      } else {
       $37 = $2;
       $38 = ((($37)) + 28|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(9052);
       $42 = $41;
      }
     }
    }
   }
  }
 }
 $$expand_i1_val2 = $42&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $43 = $$pre_trunc&1;
 STACKTOP = sp;return ($43|0);
}
function _assignment_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer = sp;
 $9 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $3 = 0;
  $109 = $3;
  STACKTOP = sp;return ($109|0);
 }
 $7 = 0;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = (_conditional_expression($14,$15,$16)|0);
 $7 = $17;
 $18 = $5;
 $19 = ((($18)) + 200|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 L5: do {
  if (!($21)) {
   while(1) {
    $22 = $4;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(0|0);
    if (!($25)) {
     break L5;
    }
    $26 = $4;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(61);
    if (!($30)) {
     $31 = $4;
     $32 = ((($31)) + 28|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(10813);
     if (!($35)) {
      $36 = $4;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(12093);
      if (!($40)) {
       $41 = $4;
       $42 = ((($41)) + 28|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(11069);
       if (!($45)) {
        $46 = $4;
        $47 = ((($46)) + 28|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)==(11581);
        if (!($50)) {
         $51 = $4;
         $52 = ((($51)) + 28|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = HEAP32[$53>>2]|0;
         $55 = ($54|0)==(3947581);
         if (!($55)) {
          $56 = $4;
          $57 = ((($56)) + 28|0);
          $58 = HEAP32[$57>>2]|0;
          $59 = HEAP32[$58>>2]|0;
          $60 = ($59|0)==(4079165);
          if (!($60)) {
           $61 = $4;
           $62 = ((($61)) + 28|0);
           $63 = HEAP32[$62>>2]|0;
           $64 = HEAP32[$63>>2]|0;
           $65 = ($64|0)==(9789);
           if (!($65)) {
            $66 = $4;
            $67 = ((($66)) + 28|0);
            $68 = HEAP32[$67>>2]|0;
            $69 = HEAP32[$68>>2]|0;
            $70 = ($69|0)==(24125);
            if (!($70)) {
             $71 = $4;
             $72 = ((($71)) + 28|0);
             $73 = HEAP32[$72>>2]|0;
             $74 = HEAP32[$73>>2]|0;
             $75 = ($74|0)==(31805);
             if (!($75)) {
              break L5;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $76 = $4;
    (_parser_match($76)|0);
    $77 = $6;
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&1;
    if ($79) {
     break;
    }
    $86 = (_calloc(1,268)|0);
    $8 = $86;
    $87 = $8;
    HEAP32[$87>>2] = 33;
    $88 = $7;
    $89 = $8;
    $90 = ((($89)) + 260|0);
    HEAP32[$90>>2] = $88;
    $91 = $4;
    $92 = $5;
    $93 = $6;
    $94 = (_assignment_expression($91,$92,$93)|0);
    $95 = $8;
    $96 = ((($95)) + 264|0);
    HEAP32[$96>>2] = $94;
    $97 = $5;
    $98 = ((($97)) + 200|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)!=(0);
    if ($100) {
     break L5;
    }
    $101 = $8;
    $102 = ((($101)) + 8|0);
    $103 = $8;
    $104 = ((($103)) + 264|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($105)) + 8|0);
    _type_copy($9,$106);
    _memcpy(($102|0),($9|0),216)|0;
    $107 = $8;
    $7 = $107;
   }
   $80 = $5;
   $81 = $4;
   $82 = ((($81)) + 28|0);
   $83 = HEAP32[$82>>2]|0;
   _seterror_with_token($80,$83,1676,$vararg_buffer);
   $84 = $5;
   $85 = ((($84)) + 200|0);
   HEAP32[$85>>2] = 1;
  }
 } while(0);
 $108 = $7;
 $3 = $108;
 $109 = $3;
 STACKTOP = sp;return ($109|0);
}
function _conditional_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 8|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $3 = 0;
  $66 = $3;
  STACKTOP = sp;return ($66|0);
 }
 $7 = 0;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = (_logical_OR_expression($14,$15,$16)|0);
 $7 = $17;
 $18 = $5;
 $19 = ((($18)) + 200|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 do {
  if (!($21)) {
   $22 = $4;
   $23 = ((($22)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0|0);
   if ($25) {
    $26 = $4;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(63);
    if ($30) {
     $31 = $4;
     (_parser_match($31)|0);
     $32 = $7;
     $33 = ((($32)) + 224|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)!=(0);
     if ($35) {
      $36 = $4;
      $37 = $5;
      $38 = $6;
      $39 = (_expression($36,$37,$38)|0);
      $40 = $7;
      $41 = ((($40)) + 260|0);
      HEAP32[$41>>2] = $39;
      $42 = $5;
      $43 = ((($42)) + 200|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)!=(0);
      if ($45) {
       break;
      }
      $46 = $4;
      (_parser_match($46)|0);
      ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;
      $47 = $4;
      $48 = $5;
      (_conditional_expression($47,$48,$8)|0);
      break;
     } else {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
      $49 = $4;
      $50 = $5;
      $51 = (_expression($49,$50,$9)|0);
      $52 = $7;
      $53 = ((($52)) + 260|0);
      HEAP32[$53>>2] = $51;
      $54 = $5;
      $55 = ((($54)) + 200|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)!=(0);
      if ($57) {
       break;
      }
      $58 = $4;
      (_parser_match($58)|0);
      $59 = $4;
      $60 = $5;
      $61 = $6;
      $62 = (_conditional_expression($59,$60,$61)|0);
      $63 = $7;
      $64 = ((($63)) + 264|0);
      HEAP32[$64>>2] = $62;
      break;
     }
    }
   }
  }
 } while(0);
 $65 = $7;
 $3 = $65;
 $66 = $3;
 STACKTOP = sp;return ($66|0);
}
function _logical_OR_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $vararg_buffer = sp;
 $8 = sp + 224|0;
 $9 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $81 = $6;
  STACKTOP = sp;return ($81|0);
 }
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = (_logical_AND_expression($14,$15,$16)|0);
 $6 = $17;
 $18 = $4;
 $19 = ((($18)) + 200|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $81 = $6;
  STACKTOP = sp;return ($81|0);
 }
 while(1) {
  $22 = $3;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   label = 12;
   break;
  }
  $26 = $3;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(31868);
  if (!($30)) {
   label = 12;
   break;
  }
  $31 = $3;
  (_parser_match($31)|0);
  $32 = (_calloc(1,268)|0);
  $7 = $32;
  $33 = $7;
  HEAP32[$33>>2] = 32;
  $34 = $6;
  $35 = $7;
  $36 = ((($35)) + 260|0);
  HEAP32[$36>>2] = $34;
  $37 = $3;
  $38 = $4;
  $39 = $5;
  $40 = (_logical_AND_expression($37,$38,$39)|0);
  $41 = $7;
  $42 = ((($41)) + 264|0);
  HEAP32[$42>>2] = $40;
  $43 = $4;
  $44 = ((($43)) + 200|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0);
  if ($46) {
   label = 12;
   break;
  }
  $47 = $7;
  $48 = ((($47)) + 260|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 224|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0);
  if ($52) {
   $60 = 1;
  } else {
   $53 = $7;
   $54 = ((($53)) + 264|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 224|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)!=(0);
   $60 = $58;
  }
  $59 = $60&1;
  $61 = $7;
  $62 = ((($61)) + 224|0);
  HEAP32[$62>>2] = $59;
  _memset(($8|0),0,204)|0;
  $63 = $7;
  $64 = ((($63)) + 8|0);
  $65 = $7;
  $66 = ((($65)) + 260|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 8|0);
  $69 = $7;
  $70 = ((($69)) + 264|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 8|0);
  _type_common($9,$68,$72,$8);
  _memcpy(($64|0),($9|0),216)|0;
  $73 = ((($8)) + 200|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)!=(0);
  if ($75) {
   label = 10;
   break;
  }
  $80 = $7;
  $6 = $80;
 }
 if ((label|0) == 10) {
  $76 = $4;
  $77 = $3;
  $78 = ((($77)) + 28|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  _seterror_with_token($76,$79,5531,$vararg_buffer);
  $81 = $6;
  STACKTOP = sp;return ($81|0);
 }
 else if ((label|0) == 12) {
  $81 = $6;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ((($9)) + 200|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 $7 = 0;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = (_assignment_expression($13,$14,$15)|0);
 $7 = $16;
 $17 = $5;
 $18 = ((($17)) + 200|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 L5: do {
  if (!($20)) {
   $21 = $7;
   $8 = $21;
   while(1) {
    $22 = $4;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(44);
    if (!($26)) {
     break L5;
    }
    $27 = $4;
    (_parser_match($27)|0);
    $28 = $4;
    $29 = $5;
    $30 = $6;
    $31 = (_expression($28,$29,$30)|0);
    $32 = $8;
    $33 = ((($32)) + 264|0);
    HEAP32[$33>>2] = $31;
    $34 = $5;
    $35 = ((($34)) + 200|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(0);
    if ($37) {
     break L5;
    }
    $38 = $8;
    $39 = ((($38)) + 264|0);
    $40 = HEAP32[$39>>2]|0;
    $8 = $40;
   }
  }
 } while(0);
 $41 = $7;
 $3 = $41;
 $42 = $3;
 STACKTOP = sp;return ($42|0);
}
function _logical_AND_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $9 = sp + 224|0;
 $10 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $3 = 0;
  $83 = $3;
  STACKTOP = sp;return ($83|0);
 }
 $7 = 0;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = (_inclusive_OR_expression($15,$16,$17)|0);
 $7 = $18;
 $19 = $5;
 $20 = ((($19)) + 200|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 L5: do {
  if (!($22)) {
   while(1) {
    $23 = $4;
    $24 = ((($23)) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     break L5;
    }
    $27 = $4;
    $28 = ((($27)) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(9766);
    if (!($31)) {
     break L5;
    }
    $32 = $4;
    (_parser_match($32)|0);
    $33 = (_calloc(1,268)|0);
    $8 = $33;
    $34 = $8;
    HEAP32[$34>>2] = 31;
    $35 = $7;
    $36 = $8;
    $37 = ((($36)) + 260|0);
    HEAP32[$37>>2] = $35;
    $38 = $4;
    $39 = $5;
    $40 = $6;
    $41 = (_inclusive_OR_expression($38,$39,$40)|0);
    $42 = $8;
    $43 = ((($42)) + 264|0);
    HEAP32[$43>>2] = $41;
    $44 = $5;
    $45 = ((($44)) + 200|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(0);
    if ($47) {
     break L5;
    }
    $48 = $8;
    $49 = ((($48)) + 260|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 224|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)!=(0);
    if ($53) {
     $54 = $8;
     $55 = ((($54)) + 264|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 224|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)!=(0);
     $61 = $59;
    } else {
     $61 = 0;
    }
    $60 = $61&1;
    $62 = $8;
    $63 = ((($62)) + 224|0);
    HEAP32[$63>>2] = $60;
    _memset(($9|0),0,204)|0;
    $64 = $8;
    $65 = ((($64)) + 8|0);
    $66 = $8;
    $67 = ((($66)) + 260|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + 8|0);
    $70 = $8;
    $71 = ((($70)) + 264|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 8|0);
    _type_common($10,$69,$73,$9);
    _memcpy(($65|0),($10|0),216)|0;
    $74 = ((($9)) + 200|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)!=(0);
    if ($76) {
     break;
    }
    $81 = $8;
    $7 = $81;
   }
   $77 = $5;
   $78 = $4;
   $79 = ((($78)) + 28|0);
   $80 = HEAP32[$79>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   _seterror_with_token($77,$80,5531,$vararg_buffer);
  }
 } while(0);
 $82 = $7;
 $3 = $82;
 $83 = $3;
 STACKTOP = sp;return ($83|0);
}
function _inclusive_OR_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $9 = sp + 224|0;
 $10 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $3 = 0;
  $80 = $3;
  STACKTOP = sp;return ($80|0);
 }
 $7 = 0;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = (_exclusive_OR_expression($15,$16,$17)|0);
 $7 = $18;
 $19 = $5;
 $20 = ((($19)) + 200|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 L5: do {
  if (!($22)) {
   while(1) {
    $23 = $4;
    $24 = ((($23)) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     break L5;
    }
    $27 = $4;
    $28 = ((($27)) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(124);
    if (!($31)) {
     break L5;
    }
    $32 = $4;
    (_parser_match($32)|0);
    $33 = (_calloc(1,268)|0);
    $8 = $33;
    $34 = $8;
    HEAP32[$34>>2] = 30;
    $35 = $7;
    $36 = $8;
    $37 = ((($36)) + 260|0);
    HEAP32[$37>>2] = $35;
    $38 = $4;
    $39 = $5;
    $40 = $6;
    $41 = (_exclusive_OR_expression($38,$39,$40)|0);
    $42 = $8;
    $43 = ((($42)) + 264|0);
    HEAP32[$43>>2] = $41;
    $44 = $5;
    $45 = ((($44)) + 200|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(0);
    if ($47) {
     break L5;
    }
    $48 = $8;
    $49 = ((($48)) + 260|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 224|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $8;
    $54 = ((($53)) + 264|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 224|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $52 | $57;
    $59 = $8;
    $60 = ((($59)) + 224|0);
    HEAP32[$60>>2] = $58;
    _memset(($9|0),0,204)|0;
    $61 = $8;
    $62 = ((($61)) + 8|0);
    $63 = $8;
    $64 = ((($63)) + 260|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 8|0);
    $67 = $8;
    $68 = ((($67)) + 264|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 8|0);
    _type_common($10,$66,$70,$9);
    _memcpy(($62|0),($10|0),216)|0;
    $71 = ((($9)) + 200|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0);
    if ($73) {
     break;
    }
    $78 = $8;
    $7 = $78;
   }
   $74 = $5;
   $75 = $4;
   $76 = ((($75)) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   _seterror_with_token($74,$77,5531,$vararg_buffer);
  }
 } while(0);
 $79 = $7;
 $3 = $79;
 $80 = $3;
 STACKTOP = sp;return ($80|0);
}
function _exclusive_OR_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $9 = sp + 224|0;
 $10 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $3 = 0;
  $80 = $3;
  STACKTOP = sp;return ($80|0);
 }
 $7 = 0;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = (_AND_expression($15,$16,$17)|0);
 $7 = $18;
 $19 = $5;
 $20 = ((($19)) + 200|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 L5: do {
  if (!($22)) {
   while(1) {
    $23 = $4;
    $24 = ((($23)) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     break L5;
    }
    $27 = $4;
    $28 = ((($27)) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(94);
    if (!($31)) {
     break L5;
    }
    $32 = $4;
    (_parser_match($32)|0);
    $33 = (_calloc(1,268)|0);
    $8 = $33;
    $34 = $8;
    HEAP32[$34>>2] = 29;
    $35 = $7;
    $36 = $8;
    $37 = ((($36)) + 260|0);
    HEAP32[$37>>2] = $35;
    $38 = $4;
    $39 = $5;
    $40 = $6;
    $41 = (_AND_expression($38,$39,$40)|0);
    $42 = $8;
    $43 = ((($42)) + 264|0);
    HEAP32[$43>>2] = $41;
    $44 = $5;
    $45 = ((($44)) + 200|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(0);
    if ($47) {
     break L5;
    }
    $48 = $8;
    $49 = ((($48)) + 260|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 224|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $8;
    $54 = ((($53)) + 264|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 224|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $52 ^ $57;
    $59 = $8;
    $60 = ((($59)) + 224|0);
    HEAP32[$60>>2] = $58;
    _memset(($9|0),0,204)|0;
    $61 = $8;
    $62 = ((($61)) + 8|0);
    $63 = $8;
    $64 = ((($63)) + 260|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 8|0);
    $67 = $8;
    $68 = ((($67)) + 264|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 8|0);
    _type_common($10,$66,$70,$9);
    _memcpy(($62|0),($10|0),216)|0;
    $71 = ((($9)) + 200|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0);
    if ($73) {
     break;
    }
    $78 = $8;
    $7 = $78;
   }
   $74 = $5;
   $75 = $4;
   $76 = ((($75)) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   _seterror_with_token($74,$77,5531,$vararg_buffer);
  }
 } while(0);
 $79 = $7;
 $3 = $79;
 $80 = $3;
 STACKTOP = sp;return ($80|0);
}
function _AND_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $9 = sp + 224|0;
 $10 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $3 = 0;
  $80 = $3;
  STACKTOP = sp;return ($80|0);
 }
 $7 = 0;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = (_equality_expression($15,$16,$17)|0);
 $7 = $18;
 $19 = $5;
 $20 = ((($19)) + 200|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 L5: do {
  if (!($22)) {
   while(1) {
    $23 = $4;
    $24 = ((($23)) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     break L5;
    }
    $27 = $4;
    $28 = ((($27)) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(38);
    if (!($31)) {
     break L5;
    }
    $32 = $4;
    (_parser_match($32)|0);
    $33 = (_calloc(1,268)|0);
    $8 = $33;
    $34 = $8;
    HEAP32[$34>>2] = 28;
    $35 = $7;
    $36 = $8;
    $37 = ((($36)) + 260|0);
    HEAP32[$37>>2] = $35;
    $38 = $4;
    $39 = $5;
    $40 = $6;
    $41 = (_equality_expression($38,$39,$40)|0);
    $42 = $8;
    $43 = ((($42)) + 264|0);
    HEAP32[$43>>2] = $41;
    $44 = $5;
    $45 = ((($44)) + 200|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(0);
    if ($47) {
     break L5;
    }
    $48 = $8;
    $49 = ((($48)) + 260|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 224|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $8;
    $54 = ((($53)) + 264|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 224|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $52 & $57;
    $59 = $8;
    $60 = ((($59)) + 224|0);
    HEAP32[$60>>2] = $58;
    _memset(($9|0),0,204)|0;
    $61 = $8;
    $62 = ((($61)) + 8|0);
    $63 = $8;
    $64 = ((($63)) + 260|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 8|0);
    $67 = $8;
    $68 = ((($67)) + 264|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 8|0);
    _type_common($10,$66,$70,$9);
    _memcpy(($62|0),($10|0),216)|0;
    $71 = ((($9)) + 200|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0);
    if ($73) {
     break;
    }
    $78 = $8;
    $7 = $78;
   }
   $74 = $5;
   $75 = $4;
   $76 = ((($75)) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   _seterror_with_token($74,$77,5531,$vararg_buffer);
  }
 } while(0);
 $79 = $7;
 $3 = $79;
 $80 = $3;
 STACKTOP = sp;return ($80|0);
}
function _equality_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $3 = 0;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = (_relational_expression($14,$15,$16)|0);
 $7 = $17;
 $18 = $5;
 $19 = ((($18)) + 200|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $3 = 0;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 L9: while(1) {
  $22 = $4;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $4;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(15677);
  if (!($30)) {
   $31 = $4;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(8509);
   if (!($35)) {
    break;
   }
  }
  $36 = (_calloc(1,268)|0);
  $8 = $36;
  $37 = $4;
  $38 = ((($37)) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $9 = $40;
  $41 = $4;
  (_parser_match($41)|0);
  $42 = $7;
  $43 = $8;
  $44 = ((($43)) + 260|0);
  HEAP32[$44>>2] = $42;
  $45 = $4;
  $46 = $5;
  $47 = $6;
  $48 = (_relational_expression($45,$46,$47)|0);
  $49 = $8;
  $50 = ((($49)) + 264|0);
  HEAP32[$50>>2] = $48;
  $51 = $5;
  $52 = ((($51)) + 200|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0);
  if ($54) {
   break;
  }
  $55 = $9;
  $56 = ($55|0)==(15677);
  do {
   if ($56) {
    $57 = $8;
    HEAP32[$57>>2] = 26;
    $58 = $8;
    $59 = ((($58)) + 260|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(1);
    if (!($62)) {
     $63 = $8;
     $64 = ((($63)) + 264|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==(1);
     if (!($67)) {
      $80 = $8;
      $81 = ((($80)) + 260|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($82)) + 224|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $8;
      $86 = ((($85)) + 264|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ((($87)) + 224|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ($84|0)==($89|0);
      $91 = $90&1;
      $92 = $8;
      $93 = ((($92)) + 224|0);
      HEAP32[$93>>2] = $91;
      break;
     }
    }
    $68 = $8;
    $69 = ((($68)) + 260|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 8|0);
    $72 = $8;
    $73 = ((($72)) + 264|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ((($74)) + 8|0);
    $76 = (_type_is_same($71,$75)|0);
    $77 = $76&1;
    $78 = $8;
    $79 = ((($78)) + 224|0);
    HEAP32[$79>>2] = $77;
   } else {
    $94 = $9;
    $95 = ($94|0)==(8509);
    if (!($95)) {
     label = 20;
     break L9;
    }
    $96 = $8;
    HEAP32[$96>>2] = 26;
    $97 = $8;
    $98 = ((($97)) + 260|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)==(1);
    if (!($101)) {
     $102 = $8;
     $103 = ((($102)) + 264|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)==(1);
     if (!($106)) {
      $120 = $8;
      $121 = ((($120)) + 260|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 224|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $8;
      $126 = ((($125)) + 264|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($127)) + 224|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($124|0)!=($129|0);
      $131 = $130&1;
      $132 = $8;
      $133 = ((($132)) + 224|0);
      HEAP32[$133>>2] = $131;
      break;
     }
    }
    $107 = $8;
    $108 = ((($107)) + 260|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ((($109)) + 8|0);
    $111 = $8;
    $112 = ((($111)) + 264|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($113)) + 8|0);
    $115 = (_type_is_same($110,$114)|0);
    $116 = $115 ^ 1;
    $117 = $116&1;
    $118 = $8;
    $119 = ((($118)) + 224|0);
    HEAP32[$119>>2] = $117;
   }
  } while(0);
  $134 = $8;
  $135 = ((($134)) + 8|0);
  _type_set_int($135);
  $136 = $8;
  $7 = $136;
 }
 if ((label|0) == 20) {
  ___assert_fail((9119|0),(1596|0),1980,(1717|0));
  // unreachable;
 }
 $137 = $7;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _relational_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $3 = 0;
  $137 = $3;
  STACKTOP = sp;return ($137|0);
 }
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = (_shift_expression($14,$15,$16)|0);
 $7 = $17;
 $18 = $5;
 $19 = ((($18)) + 200|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $3 = 0;
  $137 = $3;
  STACKTOP = sp;return ($137|0);
 }
 while(1) {
  $22 = $4;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $4;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(62);
  if (!($30)) {
   $31 = $4;
   $32 = ((($31)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(60);
   if (!($35)) {
    $36 = $4;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(15933);
    if (!($40)) {
     $41 = $4;
     $42 = ((($41)) + 28|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(15421);
     if (!($45)) {
      break;
     }
    }
   }
  }
  $46 = (_calloc(1,268)|0);
  $8 = $46;
  $47 = $4;
  $48 = ((($47)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $9 = $50;
  $51 = $4;
  (_parser_match($51)|0);
  $52 = $7;
  $53 = $8;
  $54 = ((($53)) + 260|0);
  HEAP32[$54>>2] = $52;
  $55 = $4;
  $56 = $5;
  $57 = $6;
  $58 = (_shift_expression($55,$56,$57)|0);
  $59 = $8;
  $60 = ((($59)) + 264|0);
  HEAP32[$60>>2] = $58;
  $61 = $5;
  $62 = ((($61)) + 200|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0);
  if ($64) {
   break;
  }
  $65 = $9;
  $66 = ($65|0)==(62);
  do {
   if ($66) {
    $67 = $8;
    HEAP32[$67>>2] = 22;
    $68 = $8;
    $69 = ((($68)) + 260|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 224|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $8;
    $74 = ((($73)) + 264|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($75)) + 224|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($72|0)>($77|0);
    $79 = $78&1;
    $80 = $8;
    $81 = ((($80)) + 224|0);
    HEAP32[$81>>2] = $79;
   } else {
    $82 = $9;
    $83 = ($82|0)==(60);
    if ($83) {
     $84 = $8;
     HEAP32[$84>>2] = 23;
     $85 = $8;
     $86 = ((($85)) + 260|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($87)) + 224|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $8;
     $91 = ((($90)) + 264|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($92)) + 224|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($89|0)<($94|0);
     $96 = $95&1;
     $97 = $8;
     $98 = ((($97)) + 224|0);
     HEAP32[$98>>2] = $96;
     break;
    }
    $99 = $9;
    $100 = ($99|0)==(15933);
    if ($100) {
     $101 = $8;
     HEAP32[$101>>2] = 24;
     $102 = $8;
     $103 = ((($102)) + 260|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($104)) + 224|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $8;
     $108 = ((($107)) + 264|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($109)) + 224|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($106|0)>=($111|0);
     $113 = $112&1;
     $114 = $8;
     $115 = ((($114)) + 224|0);
     HEAP32[$115>>2] = $113;
     break;
    }
    $116 = $9;
    $117 = ($116|0)==(15421);
    if ($117) {
     $118 = $8;
     HEAP32[$118>>2] = 25;
     $119 = $8;
     $120 = ((($119)) + 260|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ((($121)) + 224|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $8;
     $125 = ((($124)) + 264|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ((($126)) + 224|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($123|0)<=($128|0);
     $130 = $129&1;
     $131 = $8;
     $132 = ((($131)) + 224|0);
     HEAP32[$132>>2] = $130;
    }
   }
  } while(0);
  $133 = $8;
  $134 = ((($133)) + 8|0);
  _type_set_int($134);
  $135 = $8;
  $7 = $135;
 }
 $136 = $7;
 $3 = $136;
 $137 = $3;
 STACKTOP = sp;return ($137|0);
}
function _shift_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $10 = sp + 224|0;
 $11 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $5;
 $13 = ((($12)) + 200|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $3 = 0;
  $108 = $3;
  STACKTOP = sp;return ($108|0);
 }
 $7 = 0;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = (_additive_expression($16,$17,$18)|0);
 $7 = $19;
 $20 = $5;
 $21 = ((($20)) + 200|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 L5: do {
  if (!($23)) {
   while(1) {
    $24 = $4;
    $25 = ((($24)) + 28|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)!=(0|0);
    if (!($27)) {
     break L5;
    }
    $28 = $4;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(15934);
    if (!($32)) {
     $33 = $4;
     $34 = ((($33)) + 28|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(15420);
     if (!($37)) {
      break L5;
     }
    }
    $38 = (_calloc(1,268)|0);
    $8 = $38;
    $39 = $4;
    $40 = ((($39)) + 28|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $9 = $42;
    $43 = $4;
    (_parser_match($43)|0);
    $44 = $7;
    $45 = $8;
    $46 = ((($45)) + 260|0);
    HEAP32[$46>>2] = $44;
    $47 = $4;
    $48 = $5;
    $49 = $6;
    $50 = (_multiplicative_expression($47,$48,$49)|0);
    $51 = $8;
    $52 = ((($51)) + 264|0);
    HEAP32[$52>>2] = $50;
    $53 = $5;
    $54 = ((($53)) + 200|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)!=(0);
    if ($56) {
     break L5;
    }
    $57 = $9;
    $58 = ($57|0)==(15934);
    if ($58) {
     $59 = $8;
     HEAP32[$59>>2] = 20;
     $60 = $8;
     $61 = ((($60)) + 260|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($62)) + 224|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $8;
     $66 = ((($65)) + 264|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 224|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $64 >> $69;
     $71 = $8;
     $72 = ((($71)) + 224|0);
     HEAP32[$72>>2] = $70;
    } else {
     $73 = $9;
     $74 = ($73|0)==(15420);
     if ($74) {
      $75 = $8;
      HEAP32[$75>>2] = 21;
      $76 = $8;
      $77 = ((($76)) + 260|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($78)) + 224|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $8;
      $82 = ((($81)) + 264|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($83)) + 224|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $80 << $85;
      $87 = $8;
      $88 = ((($87)) + 224|0);
      HEAP32[$88>>2] = $86;
     }
    }
    _memset(($10|0),0,204)|0;
    $89 = $8;
    $90 = ((($89)) + 8|0);
    $91 = $8;
    $92 = ((($91)) + 260|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($93)) + 8|0);
    $95 = $8;
    $96 = ((($95)) + 264|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($97)) + 8|0);
    _type_common($11,$94,$98,$10);
    _memcpy(($90|0),($11|0),216)|0;
    $99 = ((($10)) + 200|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)!=(0);
    if ($101) {
     break;
    }
    $106 = $8;
    $7 = $106;
   }
   $102 = $5;
   $103 = $4;
   $104 = ((($103)) + 28|0);
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$vararg_buffer>>2] = $10;
   _seterror_with_token($102,$105,5531,$vararg_buffer);
  }
 } while(0);
 $107 = $7;
 $3 = $107;
 $108 = $3;
 STACKTOP = sp;return ($108|0);
}
function _additive_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 456|0;
 $10 = sp + 248|0;
 $11 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = 0;
 $12 = $4;
 $13 = ((($12)) + 200|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 L1: do {
  if (!($15)) {
   $16 = $3;
   $17 = $4;
   $18 = $5;
   $19 = (_multiplicative_expression($16,$17,$18)|0);
   $6 = $19;
   $20 = $4;
   $21 = ((($20)) + 200|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if (!($23)) {
    L4: while(1) {
     $24 = $3;
     $25 = ((($24)) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)!=(0|0);
     if (!($27)) {
      label = 29;
      break;
     }
     $28 = $3;
     $29 = ((($28)) + 28|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(43);
     if (!($32)) {
      $33 = $3;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(45);
      if (!($37)) {
       label = 29;
       break;
      }
     }
     $38 = $7;
     $39 = ($38|0)==(0|0);
     if (!($39)) {
      label = 8;
      break;
     }
     $40 = (_calloc(1,268)|0);
     $7 = $40;
     $41 = $3;
     $42 = ((($41)) + 28|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = HEAP32[$43>>2]|0;
     $8 = $44;
     $45 = $3;
     (_parser_match($45)|0);
     $46 = $6;
     $47 = $7;
     $48 = ((($47)) + 260|0);
     HEAP32[$48>>2] = $46;
     $49 = HEAP32[2620]|0;
     $50 = (($49) + 1)|0;
     HEAP32[2620] = $50;
     $51 = $3;
     $52 = $4;
     $53 = $5;
     $54 = (_multiplicative_expression($51,$52,$53)|0);
     $55 = $7;
     $56 = ((($55)) + 264|0);
     HEAP32[$56>>2] = $54;
     $57 = $4;
     $58 = ((($57)) + 200|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)!=(0);
     if ($60) {
      break L1;
     }
     $61 = $8;
     $62 = ($61|0)==(43);
     if ($62) {
      $63 = $7;
      HEAP32[$63>>2] = 18;
      $64 = $7;
      $65 = ((($64)) + 260|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($66)) + 224|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $7;
      $70 = ((($69)) + 264|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($71)) + 224|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($68) + ($73))|0;
      $75 = $7;
      $76 = ((($75)) + 224|0);
      HEAP32[$76>>2] = $74;
     } else {
      $77 = $8;
      $78 = ($77|0)==(45);
      if ($78) {
       $79 = $7;
       HEAP32[$79>>2] = 19;
       $80 = $7;
       $81 = ((($80)) + 260|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($82)) + 224|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $7;
       $86 = ((($85)) + 264|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($87)) + 224|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (($84) - ($89))|0;
       $91 = $7;
       $92 = ((($91)) + 224|0);
       HEAP32[$92>>2] = $90;
      }
     }
     $93 = $7;
     $94 = ((($93)) + 260|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ((($95)) + 8|0);
     $97 = (_type_is_pointer($96)|0);
     do {
      if ($97) {
       $98 = $7;
       $99 = ((($98)) + 264|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = ((($100)) + 8|0);
       $102 = (_type_is_integer($101)|0);
       $103 = $7;
       if ($102) {
        $104 = ((($103)) + 8|0);
        $105 = $7;
        $106 = ((($105)) + 260|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ((($107)) + 8|0);
        _type_copy($9,$108);
        _memcpy(($104|0),($9|0),216)|0;
        break;
       }
       $109 = ((($103)) + 264|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ((($110)) + 8|0);
       $112 = (_type_is_pointer_or_array($111)|0);
       if (!($112)) {
        $134 = $4;
        $135 = $3;
        $136 = ((($135)) + 28|0);
        $137 = HEAP32[$136>>2]|0;
        _seterror_with_token($134,$137,2051,$vararg_buffer4);
        break;
       }
       $113 = $8;
       $114 = ($113|0)==(45);
       if (!($114)) {
        $130 = $4;
        $131 = $3;
        $132 = ((($131)) + 28|0);
        $133 = HEAP32[$132>>2]|0;
        _seterror_with_token($130,$133,2025,$vararg_buffer2);
        break;
       }
       $115 = $7;
       $116 = ((($115)) + 260|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ((($117)) + 8|0);
       $119 = $7;
       $120 = ((($119)) + 264|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = ((($121)) + 8|0);
       $123 = (_type_is_same($118,$122)|0);
       if ($123) {
        $124 = $7;
        $125 = ((($124)) + 8|0);
        _type_set_int($125);
        break;
       } else {
        $126 = $4;
        $127 = $3;
        $128 = ((($127)) + 28|0);
        $129 = HEAP32[$128>>2]|0;
        _seterror_with_token($126,$129,2006,$vararg_buffer);
        break;
       }
      } else {
       _memset(($10|0),0,204)|0;
       $138 = $7;
       $139 = ((($138)) + 8|0);
       $140 = $7;
       $141 = ((($140)) + 260|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ((($142)) + 8|0);
       $144 = $7;
       $145 = ((($144)) + 264|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($146)) + 8|0);
       _type_common($11,$143,$147,$10);
       _memcpy(($139|0),($11|0),216)|0;
       $148 = ((($10)) + 200|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($149|0)!=(0);
       if ($150) {
        label = 25;
        break L4;
       }
      }
     } while(0);
     $155 = $4;
     $156 = ((($155)) + 200|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)!=(0);
     if ($158) {
      break L1;
     }
     $159 = $7;
     $6 = $159;
     $7 = 0;
    }
    if ((label|0) == 8) {
     ___assert_fail((1973|0),(1596|0),1703,(1986|0));
     // unreachable;
    }
    else if ((label|0) == 25) {
     $151 = $4;
     $152 = $3;
     $153 = ((($152)) + 28|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $10;
     _seterror_with_token($151,$154,5531,$vararg_buffer6);
     break;
    }
    else if ((label|0) == 29) {
     $160 = $6;
     STACKTOP = sp;return ($160|0);
    }
   }
  }
 } while(0);
 $160 = $6;
 STACKTOP = sp;return ($160|0);
}
function _multiplicative_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $9 = sp + 224|0;
 $10 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $139 = $6;
  STACKTOP = sp;return ($139|0);
 }
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = (_cast_expression($15,$16,$17)|0);
 $6 = $18;
 $19 = $4;
 $20 = ((($19)) + 200|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $139 = $6;
  STACKTOP = sp;return ($139|0);
 }
 while(1) {
  $23 = $3;
  $24 = ((($23)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   label = 20;
   break;
  }
  $27 = $3;
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(42);
  if (!($31)) {
   $32 = $3;
   $33 = ((($32)) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(47);
   if (!($36)) {
    $37 = $3;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(37);
    if (!($41)) {
     label = 20;
     break;
    }
   }
  }
  $42 = (_calloc(1,268)|0);
  $7 = $42;
  $43 = $3;
  $44 = ((($43)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $8 = $46;
  $47 = $3;
  (_parser_match($47)|0);
  $48 = $6;
  $49 = $7;
  $50 = ((($49)) + 260|0);
  HEAP32[$50>>2] = $48;
  $51 = $3;
  $52 = $4;
  $53 = $5;
  $54 = (_cast_expression($51,$52,$53)|0);
  $55 = $7;
  $56 = ((($55)) + 264|0);
  HEAP32[$56>>2] = $54;
  $57 = $4;
  $58 = ((($57)) + 200|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)!=(0);
  if ($60) {
   label = 20;
   break;
  }
  $61 = $8;
  $62 = ($61|0)==(42);
  do {
   if ($62) {
    $63 = $7;
    HEAP32[$63>>2] = 15;
    $64 = $7;
    $65 = ((($64)) + 260|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 224|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $7;
    $70 = ((($69)) + 264|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($71)) + 224|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = Math_imul($68, $73)|0;
    $75 = $7;
    $76 = ((($75)) + 224|0);
    HEAP32[$76>>2] = $74;
   } else {
    $77 = $8;
    $78 = ($77|0)==(47);
    if ($78) {
     $79 = $7;
     HEAP32[$79>>2] = 16;
     $80 = $7;
     $81 = ((($80)) + 264|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($82)) + 224|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)!=(0);
     if (!($85)) {
      break;
     }
     $86 = $7;
     $87 = ((($86)) + 260|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ((($88)) + 224|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $7;
     $92 = ((($91)) + 264|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($93)) + 224|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($90|0) / ($95|0))&-1;
     $97 = $7;
     $98 = ((($97)) + 224|0);
     HEAP32[$98>>2] = $96;
     break;
    }
    $99 = $8;
    $100 = ($99|0)==(37);
    if ($100) {
     $101 = $7;
     HEAP32[$101>>2] = 17;
     $102 = $7;
     $103 = ((($102)) + 264|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($104)) + 224|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)!=(0);
     if ($107) {
      $108 = $7;
      $109 = ((($108)) + 260|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ((($110)) + 224|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = $7;
      $114 = ((($113)) + 264|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($115)) + 224|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($112|0) % ($117|0))&-1;
      $119 = $7;
      $120 = ((($119)) + 224|0);
      HEAP32[$120>>2] = $118;
     }
    }
   }
  } while(0);
  _memset(($9|0),0,204)|0;
  $121 = $7;
  $122 = ((($121)) + 8|0);
  $123 = $7;
  $124 = ((($123)) + 260|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($125)) + 8|0);
  $127 = $7;
  $128 = ((($127)) + 264|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($129)) + 8|0);
  _type_common($10,$126,$130,$9);
  _memcpy(($122|0),($10|0),216)|0;
  $131 = ((($9)) + 200|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)!=(0);
  if ($133) {
   label = 18;
   break;
  }
  $138 = $7;
  $6 = $138;
 }
 if ((label|0) == 18) {
  $134 = $4;
  $135 = $3;
  $136 = ((($135)) + 28|0);
  $137 = HEAP32[$136>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _seterror_with_token($134,$137,5531,$vararg_buffer);
  $139 = $6;
  STACKTOP = sp;return ($139|0);
 }
 else if ((label|0) == 20) {
  $139 = $6;
  STACKTOP = sp;return ($139|0);
 }
 return (0)|0;
}
function _cast_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $vararg_buffer = sp;
 $7 = sp + 232|0;
 $9 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $76 = $6;
  STACKTOP = sp;return ($76|0);
 }
 $14 = $3;
 $15 = (_first_of_type_name_ahead($14)|0);
 if (!($15)) {
  $66 = $3;
  $67 = (_is_first_of_unary_expression($66)|0);
  if ($67) {
   $68 = $3;
   $69 = $4;
   $70 = $5;
   $71 = (_unary_expression($68,$69,$70)|0);
   $6 = $71;
   $76 = $6;
   STACKTOP = sp;return ($76|0);
  } else {
   $72 = $4;
   $73 = $3;
   $74 = ((($73)) + 28|0);
   $75 = HEAP32[$74>>2]|0;
   _seterror_with_token($72,$75,9166,$vararg_buffer);
   $76 = $6;
   STACKTOP = sp;return ($76|0);
  }
 }
 $16 = (_calloc(1,268)|0);
 $6 = $16;
 $17 = $6;
 HEAP32[$17>>2] = 14;
 $18 = $3;
 $19 = $4;
 _parser_match_tk($18,40,$19);
 $20 = $3;
 $21 = $4;
 $22 = (_type_name($20,$21)|0);
 $23 = $6;
 $24 = ((($23)) + 228|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = ((($25)) + 200|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  $76 = $6;
  STACKTOP = sp;return ($76|0);
 }
 $29 = $6;
 $30 = ((($29)) + 8|0);
 $31 = $3;
 $32 = $6;
 $33 = ((($32)) + 228|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 _make_type_using_declarator($7,$31,$36);
 _memcpy(($30|0),($7|0),216)|0;
 $37 = $3;
 $38 = $4;
 _parser_match_tk($37,41,$38);
 $39 = $3;
 $40 = ((($39)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(123);
 $44 = $3;
 if ($43) {
  $45 = $6;
  $46 = ((($45)) + 228|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  $49 = $5;
  $50 = (_postfix_expression_type_name($44,$47,$48,$49)|0);
  $8 = $50;
  $51 = $6;
  _free($51);
  $52 = $8;
  $6 = $52;
  $76 = $6;
  STACKTOP = sp;return ($76|0);
 } else {
  $53 = $4;
  $54 = $5;
  $55 = (_cast_expression($44,$53,$54)|0);
  $56 = $6;
  $57 = ((($56)) + 260|0);
  HEAP32[$57>>2] = $55;
  $58 = $6;
  $59 = ((($58)) + 8|0);
  $60 = $3;
  $61 = $6;
  $62 = ((($61)) + 228|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  _make_type_using_declarator($9,$60,$65);
  _memcpy(($59|0),($9|0),216)|0;
  $76 = $6;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _postfix_expression_type_name($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 288|0;
 $15 = sp + 264|0;
 $18 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $25 = (_calloc(1,268)|0);
 $8 = $25;
 $26 = $4;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $8;
 $30 = ((($29)) + 232|0);
 HEAP32[$30>>2] = $28;
 $31 = $5;
 $32 = $8;
 $33 = ((($32)) + 228|0);
 HEAP32[$33>>2] = $31;
 $34 = $8;
 $35 = ((($34)) + 8|0);
 $36 = $4;
 $37 = $8;
 $38 = ((($37)) + 228|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 _make_type_using_declarator($9,$36,$41);
 _memcpy(($35|0),($9|0),216)|0;
 $10 = 0;
 $42 = $8;
 $43 = ((($42)) + 8|0);
 $44 = ((($43)) + 208|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $8;
  $52 = ((($51)) + 8|0);
  $53 = ((($52)) + 208|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 14|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&1;
  if ($61) {
   $62 = $8;
   $63 = ((($62)) + 8|0);
   $64 = ((($63)) + 208|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(0|0);
   if ($69) {
    $10 = 1;
   }
  }
 }
 $70 = $10;
 $71 = $70&1;
 $72 = $8;
 if ($71) {
  HEAP32[$72>>2] = 7;
  $73 = $4;
  $74 = $6;
  $75 = (_compound_statement($73,$74)|0);
  $76 = $8;
  $77 = ((($76)) + 248|0);
  HEAP32[$77>>2] = $75;
  $78 = $8;
  $79 = ((($78)) + 248|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $8;
  $84 = ((($83)) + 236|0);
  HEAP32[$84>>2] = $82;
 } else {
  HEAP32[$72>>2] = 8;
  $85 = $4;
  $86 = $6;
  _parser_match_tk($85,123,$86);
  $87 = $4;
  $88 = $6;
  $89 = (_initializer_list($87,$88)|0);
  $90 = $8;
  $91 = ((($90)) + 244|0);
  HEAP32[$91>>2] = $89;
  $92 = $4;
  $93 = ((($92)) + 28|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $8;
  $96 = ((($95)) + 236|0);
  HEAP32[$96>>2] = $94;
  $97 = $4;
  $98 = $6;
  _parser_match_tk($97,125,$98);
 }
 L10: while(1) {
  $99 = $6;
  $100 = ((($99)) + 200|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0);
  if (!($102)) {
   label = 50;
   break;
  }
  $103 = $4;
  $104 = ((($103)) + 28|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(0|0);
  if (!($106)) {
   label = 50;
   break;
  }
  $107 = $4;
  $108 = ((($107)) + 28|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)==(91);
  do {
   if ($111) {
    $112 = $8;
    $113 = ($112|0)!=(0|0);
    if (!($113)) {
     label = 13;
     break L10;
    }
    $114 = (_calloc(1,16)|0);
    $11 = $114;
    $115 = $11;
    $12 = $115;
    $116 = $8;
    $117 = ((($116)) + 252|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==(0|0);
    $120 = $12;
    $121 = $8;
    $122 = ((($121)) + 252|0);
    if ($119) {
     HEAP32[$122>>2] = $120;
     $123 = $12;
     $124 = $8;
     $125 = ((($124)) + 252|0);
     $126 = ((($125)) + 4|0);
     HEAP32[$126>>2] = $123;
    } else {
     $127 = ((($122)) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($128)) + 12|0);
     HEAP32[$129>>2] = $120;
     $130 = $12;
     $131 = $8;
     $132 = ((($131)) + 252|0);
     $133 = ((($132)) + 4|0);
     HEAP32[$133>>2] = $130;
    }
    $134 = $4;
    (_parser_match($134)|0);
    $135 = $4;
    $136 = $6;
    $137 = $7;
    $138 = (_expression($135,$136,$137)|0);
    $139 = $11;
    $140 = ((($139)) + 8|0);
    HEAP32[$140>>2] = $138;
    $141 = $4;
    $142 = $6;
    _parser_match_tk($141,93,$142);
   } else {
    $143 = $4;
    $144 = ((($143)) + 28|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(40);
    if ($147) {
     $148 = (_calloc(1,16)|0);
     $13 = $148;
     $149 = $13;
     $14 = $149;
     $150 = $8;
     $151 = ((($150)) + 252|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     $154 = $14;
     $155 = $8;
     $156 = ((($155)) + 252|0);
     if ($153) {
      HEAP32[$156>>2] = $154;
      $157 = $14;
      $158 = $8;
      $159 = ((($158)) + 252|0);
      $160 = ((($159)) + 4|0);
      HEAP32[$160>>2] = $157;
     } else {
      $161 = ((($156)) + 4|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ((($162)) + 12|0);
      HEAP32[$163>>2] = $154;
      $164 = $14;
      $165 = $8;
      $166 = ((($165)) + 252|0);
      $167 = ((($166)) + 4|0);
      HEAP32[$167>>2] = $164;
     }
     $168 = $4;
     (_parser_match($168)|0);
     $169 = $4;
     $170 = ((($169)) + 28|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)!=(41);
     if ($173) {
      $174 = $13;
      $175 = $4;
      $176 = $6;
      $177 = $7;
      _argument_expression_list($15,$175,$176,$177);
      ;HEAP32[$174>>2]=HEAP32[$15>>2]|0;HEAP32[$174+4>>2]=HEAP32[$15+4>>2]|0;
     }
     $178 = $4;
     $179 = $6;
     _parser_match_tk($178,41,$179);
     break;
    }
    $180 = $4;
    $181 = ((($180)) + 28|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(46);
    if (!($184)) {
     $185 = $4;
     $186 = ((($185)) + 28|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)==(11582);
     if (!($189)) {
      $258 = $4;
      $259 = ((($258)) + 28|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = HEAP32[$260>>2]|0;
      $262 = ($261|0)==(11051);
      if ($262) {
       $263 = (_calloc(1,16)|0);
       $21 = $263;
       $264 = $21;
       $22 = $264;
       $265 = $8;
       $266 = ((($265)) + 252|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0|0);
       $269 = $22;
       $270 = $8;
       $271 = ((($270)) + 252|0);
       if ($268) {
        HEAP32[$271>>2] = $269;
        $272 = $22;
        $273 = $8;
        $274 = ((($273)) + 252|0);
        $275 = ((($274)) + 4|0);
        HEAP32[$275>>2] = $272;
       } else {
        $276 = ((($271)) + 4|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = ((($277)) + 12|0);
        HEAP32[$278>>2] = $269;
        $279 = $22;
        $280 = $8;
        $281 = ((($280)) + 252|0);
        $282 = ((($281)) + 4|0);
        HEAP32[$282>>2] = $279;
       }
       $283 = $4;
       (_parser_match($283)|0);
       break;
      }
      $284 = $4;
      $285 = ((($284)) + 28|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = HEAP32[$286>>2]|0;
      $288 = ($287|0)==(11565);
      if (!($288)) {
       label = 50;
       break L10;
      }
      $289 = (_calloc(1,16)|0);
      $23 = $289;
      $290 = $23;
      $24 = $290;
      $291 = $8;
      $292 = ((($291)) + 252|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = ($293|0)==(0|0);
      $295 = $24;
      $296 = $8;
      $297 = ((($296)) + 252|0);
      if ($294) {
       HEAP32[$297>>2] = $295;
       $298 = $24;
       $299 = $8;
       $300 = ((($299)) + 252|0);
       $301 = ((($300)) + 4|0);
       HEAP32[$301>>2] = $298;
      } else {
       $302 = ((($297)) + 4|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = ((($303)) + 12|0);
       HEAP32[$304>>2] = $295;
       $305 = $24;
       $306 = $8;
       $307 = ((($306)) + 252|0);
       $308 = ((($307)) + 4|0);
       HEAP32[$308>>2] = $305;
      }
      $309 = $4;
      (_parser_match($309)|0);
      break;
     }
    }
    $190 = $8;
    $191 = ($190|0)!=(0|0);
    if (!($191)) {
     label = 28;
     break L10;
    }
    $192 = $4;
    (_parser_match($192)|0);
    $193 = $8;
    $194 = ((($193)) + 8|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $195 & 32768;
    $197 = ($196|0)!=(0);
    if (!($197)) {
     $254 = $6;
     $255 = $4;
     $256 = ((($255)) + 28|0);
     $257 = HEAP32[$256>>2]|0;
     _seterror_with_token($254,$257,1856,$vararg_buffer2);
     break;
    }
    $198 = $4;
    $199 = $8;
    $200 = ((($199)) + 8|0);
    $201 = ((($200)) + 8|0);
    $202 = (_find_struct_or_union_specifier($198,$201)|0);
    $16 = $202;
    $203 = $16;
    $204 = ($203|0)!=(0|0);
    do {
     if ($204) {
      $205 = $16;
      $206 = $4;
      $207 = ((($206)) + 28|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = ((($208)) + 4|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = (_find_member_declarator($205,$210)|0);
      $17 = $211;
      $212 = $17;
      $213 = ($212|0)!=(0|0);
      if ($213) {
       $214 = $8;
       $215 = ((($214)) + 8|0);
       $216 = $4;
       $217 = $17;
       $218 = ((($217)) + 4|0);
       $219 = HEAP32[$218>>2]|0;
       _make_type_using_declarator($18,$216,$219);
       _memcpy(($215|0),($18|0),216)|0;
       break;
      } else {
       $220 = $6;
       $221 = $4;
       $222 = ((($221)) + 28|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $4;
       $225 = ((($224)) + 28|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ((($226)) + 4|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = $8;
       $230 = ((($229)) + 8|0);
       $231 = ((($230)) + 8|0);
       HEAP32[$vararg_buffer>>2] = $228;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $231;
       _seterror_with_token($220,$223,1819,$vararg_buffer);
       break;
      }
     }
    } while(0);
    $232 = (_calloc(1,16)|0);
    $19 = $232;
    $233 = $19;
    $20 = $233;
    $234 = $8;
    $235 = ((($234)) + 252|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ($236|0)==(0|0);
    $238 = $20;
    $239 = $8;
    $240 = ((($239)) + 252|0);
    if ($237) {
     HEAP32[$240>>2] = $238;
     $241 = $20;
     $242 = $8;
     $243 = ((($242)) + 252|0);
     $244 = ((($243)) + 4|0);
     HEAP32[$244>>2] = $241;
    } else {
     $245 = ((($240)) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ((($246)) + 12|0);
     HEAP32[$247>>2] = $238;
     $248 = $20;
     $249 = $8;
     $250 = ((($249)) + 252|0);
     $251 = ((($250)) + 4|0);
     HEAP32[$251>>2] = $248;
    }
    $252 = $4;
    $253 = $6;
    _parser_match_tk($252,8996,$253);
   }
  } while(0);
 }
 if ((label|0) == 13) {
  ___assert_fail((1793|0),(1596|0),1103,(1944|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  ___assert_fail((1793|0),(1596|0),1146,(1944|0));
  // unreachable;
 }
 else if ((label|0) == 50) {
  $310 = $8;
  STACKTOP = sp;return ($310|0);
 }
 return (0)|0;
}
function _is_first_of_unary_expression($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $60 = $$pre_trunc&1;
  STACKTOP = sp;return ($60|0);
 }
 $7 = $2;
 $8 = (_first_of_postfix_expression($7)|0);
 if ($8) {
  $59 = 1;
 } else {
  $9 = $2;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(11051);
  if ($13) {
   $59 = 1;
  } else {
   $14 = $2;
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(11565);
   if ($18) {
    $59 = 1;
   } else {
    $19 = $2;
    $20 = ((($19)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(38);
    if ($23) {
     $59 = 1;
    } else {
     $24 = $2;
     $25 = ((($24)) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(42);
     if ($28) {
      $59 = 1;
     } else {
      $29 = $2;
      $30 = ((($29)) + 28|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)==(43);
      if ($33) {
       $59 = 1;
      } else {
       $34 = $2;
       $35 = ((($34)) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(45);
       if ($38) {
        $59 = 1;
       } else {
        $39 = $2;
        $40 = ((($39)) + 28|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==(126);
        if ($43) {
         $59 = 1;
        } else {
         $44 = $2;
         $45 = ((($44)) + 28|0);
         $46 = HEAP32[$45>>2]|0;
         $47 = HEAP32[$46>>2]|0;
         $48 = ($47|0)==(33);
         if ($48) {
          $59 = 1;
         } else {
          $49 = $2;
          $50 = ((($49)) + 28|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = HEAP32[$51>>2]|0;
          $53 = ($52|0)==(9027);
          if ($53) {
           $59 = 1;
          } else {
           $54 = $2;
           $55 = ((($54)) + 28|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = HEAP32[$56>>2]|0;
           $58 = ($57|0)==(9038);
           $59 = $58;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $$expand_i1_val2 = $59&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $60 = $$pre_trunc&1;
 STACKTOP = sp;return ($60|0);
}
function _unary_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2032|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 1784|0;
 $12 = sp + 1560|0;
 $13 = sp + 1344|0;
 $14 = sp + 1128|0;
 $15 = sp + 912|0;
 $16 = sp + 696|0;
 $18 = sp + 472|0;
 $23 = sp + 240|0;
 $26 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $27 = $5;
 $28 = ((($27)) + 200|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0);
 if ($30) {
  $3 = 0;
  $345 = $3;
  STACKTOP = sp;return ($345|0);
 }
 $7 = 0;
 $31 = $4;
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(11051);
 L5: do {
  if ($35) {
   label = 5;
  } else {
   $36 = $4;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(11565);
   if ($40) {
    label = 5;
   } else {
    $66 = $4;
    $67 = ((($66)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)!=(0|0);
    do {
     if ($69) {
      $70 = $4;
      $71 = ((($70)) + 28|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(38);
      if (!($74)) {
       $75 = $4;
       $76 = ((($75)) + 28|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==(42);
       if (!($79)) {
        $80 = $4;
        $81 = ((($80)) + 28|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = HEAP32[$82>>2]|0;
        $84 = ($83|0)==(43);
        if (!($84)) {
         $85 = $4;
         $86 = ((($85)) + 28|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = HEAP32[$87>>2]|0;
         $89 = ($88|0)==(45);
         if (!($89)) {
          $90 = $4;
          $91 = ((($90)) + 28|0);
          $92 = HEAP32[$91>>2]|0;
          $93 = HEAP32[$92>>2]|0;
          $94 = ($93|0)==(126);
          if (!($94)) {
           $95 = $4;
           $96 = ((($95)) + 28|0);
           $97 = HEAP32[$96>>2]|0;
           $98 = HEAP32[$97>>2]|0;
           $99 = ($98|0)==(33);
           if (!($99)) {
            break;
           }
          }
         }
        }
       }
      }
      $100 = (_calloc(1,268)|0);
      $10 = $100;
      $101 = $4;
      $102 = ((($101)) + 28|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = HEAP32[$103>>2]|0;
      $11 = $104;
      $105 = $4;
      (_parser_match($105)|0);
      $106 = $4;
      $107 = $5;
      $108 = $6;
      $109 = (_cast_expression($106,$107,$108)|0);
      $110 = $10;
      $111 = ((($110)) + 264|0);
      HEAP32[$111>>2] = $109;
      $112 = $5;
      $113 = ((($112)) + 200|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($114|0)!=(0);
      if ($115) {
       break L5;
      }
      $116 = $11;
      $117 = ($116|0)==(33);
      do {
       if ($117) {
        $118 = $10;
        $119 = ((($118)) + 264|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = ((($120)) + 224|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = ($122|0)!=(0);
        $124 = $123 ^ 1;
        $125 = $124&1;
        $126 = $10;
        $127 = ((($126)) + 224|0);
        HEAP32[$127>>2] = $125;
        $128 = $10;
        $129 = ((($128)) + 8|0);
        $130 = $10;
        $131 = ((($130)) + 264|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ((($132)) + 8|0);
        _type_copy($12,$133);
        _memcpy(($129|0),($12|0),216)|0;
       } else {
        $134 = $11;
        $135 = ($134|0)==(126);
        if ($135) {
         $136 = $10;
         $137 = ((($136)) + 264|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = ((($138)) + 224|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = $140 ^ -1;
         $142 = $10;
         $143 = ((($142)) + 224|0);
         HEAP32[$143>>2] = $141;
         $144 = $10;
         $145 = ((($144)) + 8|0);
         $146 = $10;
         $147 = ((($146)) + 264|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = ((($148)) + 8|0);
         _type_copy($13,$149);
         _memcpy(($145|0),($13|0),216)|0;
         break;
        }
        $150 = $11;
        $151 = ($150|0)==(45);
        if ($151) {
         $152 = $10;
         $153 = ((($152)) + 264|0);
         $154 = HEAP32[$153>>2]|0;
         $155 = ((($154)) + 224|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = (0 - ($156))|0;
         $158 = $10;
         $159 = ((($158)) + 224|0);
         HEAP32[$159>>2] = $157;
         $160 = $10;
         $161 = ((($160)) + 8|0);
         $162 = $10;
         $163 = ((($162)) + 264|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = ((($164)) + 8|0);
         _type_copy($14,$165);
         _memcpy(($161|0),($14|0),216)|0;
         break;
        }
        $166 = $11;
        $167 = ($166|0)==(43);
        if ($167) {
         $168 = $10;
         $169 = ((($168)) + 264|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = ((($170)) + 224|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = $10;
         $174 = ((($173)) + 224|0);
         HEAP32[$174>>2] = $172;
         $175 = $10;
         $176 = ((($175)) + 8|0);
         $177 = $10;
         $178 = ((($177)) + 264|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ((($179)) + 8|0);
         _type_copy($15,$180);
         _memcpy(($176|0),($15|0),216)|0;
         break;
        }
        $181 = $11;
        $182 = ($181|0)==(42);
        if ($182) {
         $183 = $10;
         $184 = ((($183)) + 8|0);
         $185 = $10;
         $186 = ((($185)) + 264|0);
         $187 = HEAP32[$186>>2]|0;
         $188 = ((($187)) + 8|0);
         _type_copy($16,$188);
         _memcpy(($184|0),($16|0),216)|0;
         $189 = $10;
         $190 = ((($189)) + 8|0);
         $191 = ((($190)) + 208|0);
         $192 = HEAP32[$191>>2]|0;
         $193 = (_find_inner_declarator($192)|0);
         $17 = $193;
         $194 = $17;
         $195 = HEAP32[$194>>2]|0;
         $196 = ($195|0)!=(0|0);
         if ($196) {
          $197 = $17;
          _pointer_type_list_pop_front($197);
          break;
         } else {
          $198 = $5;
          $199 = $4;
          $200 = ((($199)) + 28|0);
          $201 = HEAP32[$200>>2]|0;
          _seterror_with_token($198,$201,1737,$vararg_buffer);
          break;
         }
        }
        $202 = $11;
        $203 = ($202|0)==(38);
        if (!($203)) {
         $231 = $5;
         $232 = $4;
         $233 = ((($232)) + 28|0);
         $234 = HEAP32[$233>>2]|0;
         _seterror_with_token($231,$234,9248,$vararg_buffer1);
         break L5;
        }
        $204 = $10;
        $205 = ((($204)) + 8|0);
        $206 = $10;
        $207 = ((($206)) + 264|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = ((($208)) + 8|0);
        _type_copy($18,$209);
        _memcpy(($205|0),($18|0),216)|0;
        $210 = $10;
        $211 = ((($210)) + 8|0);
        $212 = ((($211)) + 208|0);
        $213 = HEAP32[$212>>2]|0;
        $214 = (_find_inner_declarator($213)|0);
        $19 = $214;
        $215 = (_calloc(1,8)|0);
        $20 = $215;
        $216 = $20;
        $21 = $216;
        $217 = $19;
        $218 = HEAP32[$217>>2]|0;
        $219 = ($218|0)==(0|0);
        $220 = $21;
        $221 = $19;
        if ($219) {
         HEAP32[$221>>2] = $220;
         $222 = $21;
         $223 = $19;
         $224 = ((($223)) + 4|0);
         HEAP32[$224>>2] = $222;
         break;
        } else {
         $225 = ((($221)) + 4|0);
         $226 = HEAP32[$225>>2]|0;
         $227 = ((($226)) + 4|0);
         HEAP32[$227>>2] = $220;
         $228 = $21;
         $229 = $19;
         $230 = ((($229)) + 4|0);
         HEAP32[$230>>2] = $228;
         break;
        }
       }
      } while(0);
      $235 = $10;
      $7 = $235;
      break L5;
     }
    } while(0);
    $236 = $4;
    $237 = ((($236)) + 28|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = HEAP32[$238>>2]|0;
    $240 = ($239|0)==(9027);
    $241 = $4;
    if (!($240)) {
     $302 = ((($241)) + 28|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = HEAP32[$303>>2]|0;
     $305 = ($304|0)==(9038);
     $306 = $4;
     if ($305) {
      (_parser_match($306)|0);
      $307 = (_calloc(1,268)|0);
      $25 = $307;
      $308 = $25;
      HEAP32[$308>>2] = 11;
      $309 = $4;
      $310 = $5;
      _parser_match_tk($309,40,$310);
      $311 = $4;
      $312 = $5;
      $313 = (_type_name($311,$312)|0);
      $314 = $25;
      $315 = ((($314)) + 228|0);
      HEAP32[$315>>2] = $313;
      $316 = $25;
      $317 = ((($316)) + 8|0);
      $318 = $4;
      $319 = $25;
      $320 = ((($319)) + 228|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = ((($321)) + 12|0);
      $323 = HEAP32[$322>>2]|0;
      _make_type_using_declarator($26,$318,$323);
      _memcpy(($317|0),($26|0),216)|0;
      $324 = $4;
      $325 = $5;
      _parser_match_tk($324,41,$325);
      $326 = $4;
      $327 = $25;
      $328 = ((($327)) + 8|0);
      $329 = $5;
      $330 = (_type_get_sizeof($326,$328,$329)|0);
      $331 = $25;
      $332 = ((($331)) + 224|0);
      HEAP32[$332>>2] = $330;
      $333 = $25;
      $334 = ((($333)) + 8|0);
      _type_set_int($334);
      $335 = $25;
      $7 = $335;
      break;
     }
     $336 = ((($306)) + 28|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = HEAP32[$337>>2]|0;
     $339 = ($338|0)==(9037);
     if ($339) {
      break;
     }
     $340 = $4;
     $341 = $5;
     $342 = $6;
     $343 = (_postfix_expression($340,$341,$342)|0);
     $7 = $343;
     break;
    }
    (_parser_match($241)|0);
    $242 = (_calloc(1,268)|0);
    $22 = $242;
    $243 = $4;
    $244 = (_first_of_type_name_ahead($243)|0);
    if ($244) {
     $245 = $22;
     HEAP32[$245>>2] = 10;
     $246 = $4;
     $247 = $5;
     _parser_match_tk($246,40,$247);
     $248 = $4;
     $249 = $5;
     $250 = (_type_name($248,$249)|0);
     $251 = $22;
     $252 = ((($251)) + 228|0);
     HEAP32[$252>>2] = $250;
     $253 = $22;
     $254 = ((($253)) + 8|0);
     $255 = $4;
     $256 = $22;
     $257 = ((($256)) + 228|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ((($258)) + 12|0);
     $260 = HEAP32[$259>>2]|0;
     _make_type_using_declarator($23,$255,$260);
     _memcpy(($254|0),($23|0),216)|0;
     $261 = $4;
     $262 = $5;
     _parser_match_tk($261,41,$262);
     $263 = $4;
     $264 = $22;
     $265 = ((($264)) + 8|0);
     $266 = $5;
     $267 = (_type_get_sizeof($263,$265,$266)|0);
     $268 = $22;
     $269 = ((($268)) + 224|0);
     HEAP32[$269>>2] = $267;
    } else {
     $270 = $6;
     $271 = HEAP8[$270>>0]|0;
     $272 = $271&1;
     $273 = $272&1;
     $24 = $273;
     $274 = $6;
     HEAP8[$274>>0] = 0;
     $275 = $4;
     $276 = $5;
     $277 = $6;
     $278 = (_unary_expression($275,$276,$277)|0);
     $279 = $22;
     $280 = ((($279)) + 264|0);
     HEAP32[$280>>2] = $278;
     $281 = $24;
     $282 = $281&1;
     $283 = $6;
     $284 = $282&1;
     HEAP8[$283>>0] = $284;
     $285 = $5;
     $286 = ((($285)) + 200|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = ($287|0)!=(0);
     if ($288) {
      break;
     }
     $289 = $22;
     HEAP32[$289>>2] = 9;
     $290 = $4;
     $291 = $22;
     $292 = ((($291)) + 264|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = ((($293)) + 8|0);
     $295 = $5;
     $296 = (_type_get_sizeof($290,$294,$295)|0);
     $297 = $22;
     $298 = ((($297)) + 224|0);
     HEAP32[$298>>2] = $296;
    }
    $299 = $22;
    $300 = ((($299)) + 8|0);
    _type_set_int($300);
    $301 = $22;
    $7 = $301;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $41 = (_calloc(1,268)|0);
  $8 = $41;
  $42 = $4;
  $43 = ((($42)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(11051);
  $47 = $8;
  if ($46) {
   HEAP32[$47>>2] = 12;
  } else {
   HEAP32[$47>>2] = 13;
  }
  $48 = $4;
  (_parser_match($48)|0);
  $49 = $4;
  $50 = $5;
  $51 = $6;
  $52 = (_unary_expression($49,$50,$51)|0);
  $53 = $8;
  $54 = ((($53)) + 264|0);
  HEAP32[$54>>2] = $52;
  $55 = $5;
  $56 = ((($55)) + 200|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0);
  if (!($58)) {
   $59 = $8;
   $60 = ((($59)) + 8|0);
   $61 = $8;
   $62 = ((($61)) + 264|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($63)) + 8|0);
   _type_copy($9,$64);
   _memcpy(($60|0),($9|0),216)|0;
   $65 = $8;
   $7 = $65;
  }
 }
 $344 = $7;
 $3 = $344;
 $345 = $3;
 STACKTOP = sp;return ($345|0);
}
function _postfix_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 264|0;
 $14 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $21 = $3;
 $22 = (_first_of_type_name_ahead($21)|0);
 if ($22) {
  ___assert_fail((9119|0),(1596|0),1216,(1774|0));
  // unreachable;
 }
 $23 = $3;
 $24 = $4;
 $25 = $5;
 $26 = (_primary_expression($23,$24,$25)|0);
 $6 = $26;
 L4: while(1) {
  $27 = $4;
  $28 = ((($27)) + 200|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if (!($30)) {
   label = 47;
   break;
  }
  $31 = $3;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  if (!($34)) {
   label = 47;
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(91);
  do {
   if ($39) {
    $40 = $6;
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
     label = 8;
     break L4;
    }
    $42 = (_calloc(1,16)|0);
    $7 = $42;
    $43 = $7;
    $8 = $43;
    $44 = $6;
    $45 = ((($44)) + 252|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(0|0);
    $48 = $8;
    $49 = $6;
    $50 = ((($49)) + 252|0);
    if ($47) {
     HEAP32[$50>>2] = $48;
     $51 = $8;
     $52 = $6;
     $53 = ((($52)) + 252|0);
     $54 = ((($53)) + 4|0);
     HEAP32[$54>>2] = $51;
    } else {
     $55 = ((($50)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 12|0);
     HEAP32[$57>>2] = $48;
     $58 = $8;
     $59 = $6;
     $60 = ((($59)) + 252|0);
     $61 = ((($60)) + 4|0);
     HEAP32[$61>>2] = $58;
    }
    $62 = $3;
    (_parser_match($62)|0);
    $63 = $3;
    $64 = $4;
    $65 = $5;
    $66 = (_expression($63,$64,$65)|0);
    $67 = $7;
    $68 = ((($67)) + 8|0);
    HEAP32[$68>>2] = $66;
    $69 = $4;
    $70 = ((($69)) + 200|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)!=(0);
    if ($72) {
     label = 47;
     break L4;
    }
    $73 = $3;
    $74 = $4;
    _parser_match_tk($73,93,$74);
   } else {
    $75 = $3;
    $76 = ((($75)) + 28|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(40);
    if ($79) {
     $80 = (_calloc(1,16)|0);
     $9 = $80;
     $81 = $9;
     $10 = $81;
     $82 = $6;
     $83 = ((($82)) + 252|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(0|0);
     $86 = $10;
     $87 = $6;
     $88 = ((($87)) + 252|0);
     if ($85) {
      HEAP32[$88>>2] = $86;
      $89 = $10;
      $90 = $6;
      $91 = ((($90)) + 252|0);
      $92 = ((($91)) + 4|0);
      HEAP32[$92>>2] = $89;
     } else {
      $93 = ((($88)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ((($94)) + 12|0);
      HEAP32[$95>>2] = $86;
      $96 = $10;
      $97 = $6;
      $98 = ((($97)) + 252|0);
      $99 = ((($98)) + 4|0);
      HEAP32[$99>>2] = $96;
     }
     $100 = $3;
     (_parser_match($100)|0);
     $101 = $3;
     $102 = ((($101)) + 28|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)!=(41);
     if ($105) {
      $106 = $9;
      $107 = $3;
      $108 = $4;
      $109 = $5;
      _argument_expression_list($11,$107,$108,$109);
      ;HEAP32[$106>>2]=HEAP32[$11>>2]|0;HEAP32[$106+4>>2]=HEAP32[$11+4>>2]|0;
      $110 = $4;
      $111 = ((($110)) + 200|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112|0)!=(0);
      if ($113) {
       label = 47;
       break L4;
      }
     }
     $114 = $3;
     $115 = $4;
     _parser_match_tk($114,41,$115);
     break;
    }
    $116 = $3;
    $117 = ((($116)) + 28|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==(46);
    if (!($120)) {
     $121 = $3;
     $122 = ((($121)) + 28|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)==(11582);
     if (!($125)) {
      $195 = $3;
      $196 = ((($195)) + 28|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = HEAP32[$197>>2]|0;
      $199 = ($198|0)==(11051);
      if ($199) {
       $200 = (_calloc(1,16)|0);
       $17 = $200;
       $201 = $17;
       $18 = $201;
       $202 = $6;
       $203 = ((($202)) + 252|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = ($204|0)==(0|0);
       $206 = $18;
       $207 = $6;
       $208 = ((($207)) + 252|0);
       if ($205) {
        HEAP32[$208>>2] = $206;
        $209 = $18;
        $210 = $6;
        $211 = ((($210)) + 252|0);
        $212 = ((($211)) + 4|0);
        HEAP32[$212>>2] = $209;
       } else {
        $213 = ((($208)) + 4|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = ((($214)) + 12|0);
        HEAP32[$215>>2] = $206;
        $216 = $18;
        $217 = $6;
        $218 = ((($217)) + 252|0);
        $219 = ((($218)) + 4|0);
        HEAP32[$219>>2] = $216;
       }
       $220 = $3;
       (_parser_match($220)|0);
       break;
      }
      $221 = $3;
      $222 = ((($221)) + 28|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = HEAP32[$223>>2]|0;
      $225 = ($224|0)==(11565);
      if (!($225)) {
       label = 47;
       break L4;
      }
      $226 = (_calloc(1,16)|0);
      $19 = $226;
      $227 = $19;
      $20 = $227;
      $228 = $6;
      $229 = ((($228)) + 252|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ($230|0)==(0|0);
      $232 = $20;
      $233 = $6;
      $234 = ((($233)) + 252|0);
      if ($231) {
       HEAP32[$234>>2] = $232;
       $235 = $20;
       $236 = $6;
       $237 = ((($236)) + 252|0);
       $238 = ((($237)) + 4|0);
       HEAP32[$238>>2] = $235;
      } else {
       $239 = ((($234)) + 4|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = ((($240)) + 12|0);
       HEAP32[$241>>2] = $232;
       $242 = $20;
       $243 = $6;
       $244 = ((($243)) + 252|0);
       $245 = ((($244)) + 4|0);
       HEAP32[$245>>2] = $242;
      }
      $246 = $3;
      (_parser_match($246)|0);
      break;
     }
    }
    $126 = $6;
    $127 = ($126|0)!=(0|0);
    if (!($127)) {
     label = 24;
     break L4;
    }
    $128 = $3;
    (_parser_match($128)|0);
    $129 = $6;
    $130 = ((($129)) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = $131 & 32768;
    $133 = ($132|0)!=(0);
    if (!($133)) {
     $191 = $4;
     $192 = $3;
     $193 = ((($192)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     _seterror_with_token($191,$194,1856,$vararg_buffer2);
     break;
    }
    $134 = $3;
    $135 = $6;
    $136 = ((($135)) + 8|0);
    $137 = ((($136)) + 8|0);
    $138 = (_find_struct_or_union_specifier($134,$137)|0);
    $12 = $138;
    $139 = $12;
    $140 = ($139|0)!=(0|0);
    do {
     if ($140) {
      $141 = $12;
      $142 = $3;
      $143 = ((($142)) + 28|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($144)) + 4|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (_find_member_declarator($141,$146)|0);
      $13 = $147;
      $148 = $13;
      $149 = ($148|0)!=(0|0);
      if ($149) {
       $150 = $6;
       $151 = ((($150)) + 8|0);
       $152 = $3;
       $153 = $13;
       $154 = ((($153)) + 4|0);
       $155 = HEAP32[$154>>2]|0;
       _make_type_using_declarator($14,$152,$155);
       _memcpy(($151|0),($14|0),216)|0;
       break;
      } else {
       $156 = $4;
       $157 = $3;
       $158 = ((($157)) + 28|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = $3;
       $161 = ((($160)) + 28|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ((($162)) + 4|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = $6;
       $166 = ((($165)) + 8|0);
       $167 = ((($166)) + 8|0);
       HEAP32[$vararg_buffer>>2] = $164;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $167;
       _seterror_with_token($156,$159,1819,$vararg_buffer);
       break;
      }
     } else {
      $168 = $3;
      _print_scope($168);
     }
    } while(0);
    $169 = (_calloc(1,16)|0);
    $15 = $169;
    $170 = $15;
    $16 = $170;
    $171 = $6;
    $172 = ((($171)) + 252|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)==(0|0);
    $175 = $16;
    $176 = $6;
    $177 = ((($176)) + 252|0);
    if ($174) {
     HEAP32[$177>>2] = $175;
     $178 = $16;
     $179 = $6;
     $180 = ((($179)) + 252|0);
     $181 = ((($180)) + 4|0);
     HEAP32[$181>>2] = $178;
    } else {
     $182 = ((($177)) + 4|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ((($183)) + 12|0);
     HEAP32[$184>>2] = $175;
     $185 = $16;
     $186 = $6;
     $187 = ((($186)) + 252|0);
     $188 = ((($187)) + 4|0);
     HEAP32[$188>>2] = $185;
    }
    $189 = $3;
    $190 = $4;
    _parser_match_tk($189,8996,$190);
   }
  } while(0);
 }
 if ((label|0) == 8) {
  ___assert_fail((1793|0),(1596|0),1264,(1774|0));
  // unreachable;
 }
 else if ((label|0) == 24) {
  ___assert_fail((1793|0),(1596|0),1302,(1774|0));
  // unreachable;
 }
 else if ((label|0) == 47) {
  $247 = $6;
  STACKTOP = sp;return ($247|0);
 }
 return (0)|0;
}
function _primary_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $3;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(8996);
 if ($14) {
  $15 = (_calloc(1,268)|0);
  $6 = $15;
  $16 = $6;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $187 = $6;
   STACKTOP = sp;return ($187|0);
  }
  $18 = $3;
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_find_enumerator($18,$23)|0);
  $7 = $24;
  $25 = $7;
  $26 = ($25|0)!=(0|0);
  do {
   if ($26) {
    $27 = $6;
    HEAP32[$27>>2] = 2;
    $28 = $7;
    $29 = ((($28)) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $6;
    $32 = ((($31)) + 224|0);
    HEAP32[$32>>2] = $30;
    $33 = $6;
    $34 = ((($33)) + 8|0);
    _type_set_int($34);
   } else {
    $35 = $5;
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&1;
    if ($37) {
     $38 = $4;
     $39 = $3;
     $40 = ((($39)) + 28|0);
     $41 = HEAP32[$40>>2]|0;
     _seterror_with_token($38,$41,1884,$vararg_buffer);
     $42 = $4;
     $43 = ((($42)) + 200|0);
     HEAP32[$43>>2] = 1;
     $187 = $6;
     STACKTOP = sp;return ($187|0);
    }
    $44 = $3;
    $45 = $3;
    $46 = ((($45)) + 28|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_find_declarator($44,$49)|0);
    $8 = $50;
    $51 = $8;
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     $64 = $8;
     $65 = $6;
     $66 = ((($65)) + 240|0);
     HEAP32[$66>>2] = $64;
     $67 = $6;
     HEAP32[$67>>2] = 3;
     $68 = $6;
     $69 = ((($68)) + 8|0);
     $70 = $3;
     $71 = $8;
     _make_type_using_declarator($9,$70,$71);
     _memcpy(($69|0),($9|0),216)|0;
     break;
    }
    $53 = $4;
    $54 = $3;
    $55 = ((($54)) + 28|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $3;
    $58 = ((($57)) + 28|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    HEAP32[$vararg_buffer2>>2] = $61;
    _seterror_with_token($53,$56,1897,$vararg_buffer2);
    $62 = $4;
    $63 = ((($62)) + 200|0);
    HEAP32[$63>>2] = 1;
    $187 = $6;
    STACKTOP = sp;return ($187|0);
   }
  } while(0);
  $72 = $3;
  (_parser_match($72)|0);
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $73 = $3;
 $74 = ((($73)) + 28|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(128);
 if ($77) {
  $78 = (_calloc(1,268)|0);
  $6 = $78;
  $79 = $6;
  HEAP32[$79>>2] = 4;
  $80 = $6;
  $81 = ((($80)) + 8|0);
  $82 = ((($81)) + 4|0);
  HEAP32[$82>>2] = 1;
  $83 = $6;
  $84 = ((($83)) + 8|0);
  HEAP32[$84>>2] = 2;
  $85 = $5;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&1;
  if ($87) {
   $88 = $4;
   $89 = $3;
   $90 = ((($89)) + 28|0);
   $91 = HEAP32[$90>>2]|0;
   _seterror_with_token($88,$91,1884,$vararg_buffer4);
   $92 = $4;
   $93 = ((($92)) + 200|0);
   HEAP32[$93>>2] = 1;
   $187 = $6;
   STACKTOP = sp;return ($187|0);
  }
  $94 = $3;
  (_parser_match($94)|0);
  while(1) {
   $95 = $3;
   $96 = ((($95)) + 28|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)!=(0|0);
   if (!($98)) {
    label = 32;
    break;
   }
   $99 = $4;
   $100 = ((($99)) + 200|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==(0);
   if (!($102)) {
    label = 32;
    break;
   }
   $103 = $3;
   $104 = ((($103)) + 28|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(128);
   if (!($107)) {
    label = 32;
    break;
   }
   $108 = $3;
   (_parser_match($108)|0);
  }
  if ((label|0) == 32) {
   $187 = $6;
   STACKTOP = sp;return ($187|0);
  }
 }
 $109 = $3;
 $110 = ((($109)) + 28|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)==(129);
 if ($113) {
  $114 = (_calloc(1,268)|0);
  $6 = $114;
  $115 = $6;
  HEAP32[$115>>2] = 5;
  $116 = $6;
  $117 = ((($116)) + 8|0);
  _type_set_int($117);
  $118 = $3;
  (_parser_match($118)|0);
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $119 = $3;
 $120 = ((($119)) + 28|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = HEAP32[$121>>2]|0;
 $123 = (_is_number($122)|0);
 if ($123) {
  $124 = (_calloc(1,268)|0);
  $6 = $124;
  $125 = $3;
  $126 = ((($125)) + 28|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $6;
  $129 = ((($128)) + 232|0);
  HEAP32[$129>>2] = $127;
  $130 = $3;
  $131 = ((($130)) + 28|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $6;
  $134 = ((($133)) + 236|0);
  HEAP32[$134>>2] = $132;
  $135 = $6;
  HEAP32[$135>>2] = 6;
  $136 = $3;
  $137 = ((($136)) + 28|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $6;
  $140 = ((($139)) + 8|0);
  $141 = (_convert_to_integer($138,$140)|0);
  $142 = $6;
  $143 = ((($142)) + 224|0);
  HEAP32[$143>>2] = $141;
  $144 = $3;
  (_parser_match($144)|0);
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $145 = $3;
 $146 = ((($145)) + 28|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(9046);
 if ($149) {
  $150 = $5;
  $151 = HEAP8[$150>>0]|0;
  $152 = $151&1;
  if (!($152)) {
   $187 = $6;
   STACKTOP = sp;return ($187|0);
  }
  $153 = $4;
  $154 = $3;
  $155 = ((($154)) + 28|0);
  $156 = HEAP32[$155>>2]|0;
  _seterror_with_token($153,$156,1884,$vararg_buffer6);
  $157 = $4;
  $158 = ((($157)) + 200|0);
  HEAP32[$158>>2] = 1;
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $159 = $3;
 $160 = ((($159)) + 28|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)==(9052);
 $164 = $3;
 if ($163) {
  $165 = $4;
  $166 = $5;
  $167 = (_typeid_expression($164,$165,$166)|0);
  $6 = $167;
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $168 = ((($164)) + 28|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)==(40);
 if (!($171)) {
  $183 = $4;
  $184 = $3;
  $185 = ((($184)) + 28|0);
  $186 = HEAP32[$185>>2]|0;
  _seterror_with_token($183,$186,9166,$vararg_buffer8);
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $172 = $3;
 (_parser_match($172)|0);
 $173 = $3;
 $174 = $4;
 $175 = $5;
 $176 = (_expression($173,$174,$175)|0);
 $6 = $176;
 $177 = $4;
 $178 = ((($177)) + 200|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = ($179|0)!=(0);
 if ($180) {
  $187 = $6;
  STACKTOP = sp;return ($187|0);
 }
 $181 = $3;
 $182 = $4;
 _parser_match_tk($181,41,$182);
 $187 = $6;
 STACKTOP = sp;return ($187|0);
}
function _argument_expression_list($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 16|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $12 = (_calloc(1,8)|0);
 $8 = $12;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = (_assignment_expression($13,$14,$15)|0);
 $17 = $8;
 HEAP32[$17>>2] = $16;
 $18 = $8;
 $9 = $18;
 $19 = HEAP32[$7>>2]|0;
 $20 = ($19|0)==(0|0);
 $21 = $9;
 if ($20) {
  HEAP32[$7>>2] = $21;
  $22 = $9;
  $23 = ((($7)) + 4|0);
  HEAP32[$23>>2] = $22;
 } else {
  $24 = ((($7)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $21;
  $27 = $9;
  $28 = ((($7)) + 4|0);
  HEAP32[$28>>2] = $27;
 }
 while(1) {
  $29 = $5;
  $30 = ((($29)) + 200|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if (!($32)) {
   label = 11;
   break;
  }
  $33 = $4;
  $34 = ((($33)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(44);
  if (!($37)) {
   label = 11;
   break;
  }
  $38 = $4;
  (_parser_match($38)|0);
  $39 = (_calloc(1,8)|0);
  $10 = $39;
  $40 = $4;
  $41 = $5;
  $42 = $6;
  $43 = (_assignment_expression($40,$41,$42)|0);
  $44 = $10;
  HEAP32[$44>>2] = $43;
  $45 = $10;
  $11 = $45;
  $46 = HEAP32[$7>>2]|0;
  $47 = ($46|0)==(0|0);
  $48 = $11;
  if ($47) {
   HEAP32[$7>>2] = $48;
   $49 = $11;
   $50 = ((($7)) + 4|0);
   HEAP32[$50>>2] = $49;
  } else {
   $51 = ((($7)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 4|0);
   HEAP32[$53>>2] = $48;
   $54 = $11;
   $55 = ((($7)) + 4|0);
   HEAP32[$55>>2] = $54;
  }
 }
 if ((label|0) == 11) {
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _convert_to_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $5 = sp;
 $7 = sp + 264|0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 _memset(($5|0),0,260)|0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 while(1) {
  $12 = $6;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(39);
  if ($18) {
   $19 = $6;
   $20 = HEAP8[$19>>0]|0;
   $21 = $4;
   $22 = (($5) + ($21)|0);
   HEAP8[$22>>0] = $20;
   $23 = $4;
   $24 = (($23) + 1)|0;
   $4 = $24;
  }
  $25 = $6;
  $26 = ((($25)) + 1|0);
  $6 = $26;
 }
 _memset(($7|0),0,216)|0;
 $8 = 0;
 $27 = $2;
 $28 = HEAP32[$27>>2]|0;
 switch ($28|0) {
 case 134:  {
  $29 = HEAP32[$7>>2]|0;
  $30 = $29 | 8;
  HEAP32[$7>>2] = $30;
  $31 = (_strtol($5,0,10)|0);
  $8 = $31;
  $47 = $3;
  _memcpy(($47|0),($7|0),216)|0;
  $48 = $8;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case 135:  {
  $32 = HEAP32[$7>>2]|0;
  $33 = $32 | 8;
  HEAP32[$7>>2] = $33;
  $34 = (_strtol($5,0,8)|0);
  $8 = $34;
  $47 = $3;
  _memcpy(($47|0),($7|0),216)|0;
  $48 = $8;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case 136:  {
  $35 = HEAP32[$7>>2]|0;
  $36 = $35 | 8;
  HEAP32[$7>>2] = $36;
  $37 = ((($5)) + 2|0);
  $38 = (_strtol($37,0,16)|0);
  $8 = $38;
  $47 = $3;
  _memcpy(($47|0),($7|0),216)|0;
  $48 = $8;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case 137:  {
  $39 = HEAP32[$7>>2]|0;
  $40 = $39 | 8;
  HEAP32[$7>>2] = $40;
  $41 = ((($5)) + 2|0);
  $42 = (_strtol($41,0,2)|0);
  $8 = $42;
  $47 = $3;
  _memcpy(($47|0),($7|0),216)|0;
  $48 = $8;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case 138:  {
  $43 = HEAP32[$7>>2]|0;
  $44 = $43 | 64;
  HEAP32[$7>>2] = $44;
  ___assert_fail((9119|0),(1596|0),853,(1925|0));
  // unreachable;
  break;
 }
 case 139:  {
  $45 = HEAP32[$7>>2]|0;
  $46 = $45 | 64;
  HEAP32[$7>>2] = $46;
  ___assert_fail((9119|0),(1596|0),857,(1925|0));
  // unreachable;
  break;
 }
 default: {
  ___assert_fail((9119|0),(1596|0),860,(1925|0));
  // unreachable;
 }
 }
 return (0)|0;
}
function _typeid_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 248|0;
 $9 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $3;
 $11 = $4;
 _parser_match_tk($10,9052,$11);
 $12 = $3;
 $13 = $4;
 _parser_match_tk($12,40,$13);
 $14 = $3;
 $15 = (_first_of_type_name($14)|0);
 $16 = (_calloc(1,268)|0);
 $6 = $16;
 $17 = $6;
 HEAP32[$17>>2] = 1;
 if ($15) {
  $18 = $3;
  $19 = $4;
  $20 = (_type_name($18,$19)|0);
  $21 = $6;
  $22 = ((($21)) + 228|0);
  HEAP32[$22>>2] = $20;
  $23 = $6;
  $24 = ((($23)) + 8|0);
  $25 = $3;
  $26 = $6;
  $27 = ((($26)) + 228|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  _make_type_using_declarator($7,$25,$30);
  _memcpy(($24|0),($7|0),216)|0;
  (_printf(1913,$vararg_buffer)|0);
  $31 = $6;
  $32 = ((($31)) + 8|0);
  _print_type($32);
  (_printf(5664,$vararg_buffer1)|0);
  $56 = $3;
  $57 = $4;
  _parser_match_tk($56,41,$57);
  $58 = $6;
  STACKTOP = sp;return ($58|0);
 } else {
  $33 = $5;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&1;
  $36 = $35&1;
  $8 = $36;
  $37 = $5;
  HEAP8[$37>>0] = 0;
  $38 = $3;
  $39 = $4;
  $40 = $5;
  $41 = (_expression($38,$39,$40)|0);
  $42 = $6;
  $43 = ((($42)) + 264|0);
  HEAP32[$43>>2] = $41;
  $44 = $8;
  $45 = $44&1;
  $46 = $5;
  $47 = $45&1;
  HEAP8[$46>>0] = $47;
  $48 = $6;
  $49 = ((($48)) + 8|0);
  $50 = $6;
  $51 = ((($50)) + 264|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 8|0);
  _type_copy($9,$53);
  _memcpy(($49|0),($9|0),216)|0;
  (_printf(1913,$vararg_buffer3)|0);
  $54 = $6;
  $55 = ((($54)) + 8|0);
  _print_type($55);
  (_printf(5664,$vararg_buffer5)|0);
  $56 = $3;
  $57 = $4;
  _parser_match_tk($56,41,$57);
  $58 = $6;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _first_of_postfix_expression($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = (_first_of_type_name_ahead($3)|0);
 if ($4) {
  $$expand_i1_val = 1;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $5 = $2;
  $6 = (_is_first_of_primary_expression($5)|0);
  $$expand_i1_val2 = $6&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function _constant_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ((($7)) + 200|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $3 = 0;
  $16 = $3;
  STACKTOP = sp;return ($16|0);
 } else {
  $11 = $6;
  HEAP8[$11>>0] = 1;
  $12 = $4;
  $13 = $5;
  $14 = $6;
  $15 = (_conditional_expression($12,$13,$14)|0);
  $3 = $15;
  $16 = $3;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _stringhash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $2 = -2128831035;
 $3 = 0;
 $6 = $1;
 $7 = (_strlen($6)|0);
 $4 = $7;
 $8 = $4;
 $9 = (($8>>>0) / 10)&-1;
 $10 = (1 + ($9))|0;
 $5 = $10;
 while(1) {
  $11 = $3;
  $12 = $4;
  $13 = ($11>>>0)<($12>>>0);
  $14 = $2;
  if (!($13)) {
   break;
  }
  $15 = Math_imul(16777619, $14)|0;
  $16 = $1;
  $17 = $3;
  $18 = (($16) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = $15 ^ $20;
  $2 = $21;
  $22 = $5;
  $23 = $3;
  $24 = (($23) + ($22))|0;
  $3 = $24;
 }
 STACKTOP = sp;return ($14|0);
}
function _hashmap_remove_all($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $2 = 0;
 while(1) {
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  if (!($12)) {
   break;
  }
  $15 = $2;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $3 = $17;
  while(1) {
   $18 = $3;
   $19 = ($18|0)!=(0|0);
   if (!($19)) {
    break;
   }
   $20 = $3;
   $4 = $20;
   $21 = $4;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   _node_delete($23);
   $24 = $3;
   $25 = HEAP32[$24>>2]|0;
   $3 = $25;
   $26 = $4;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   _free($28);
   $29 = $4;
   _free($29);
  }
  $30 = $2;
  $31 = (($30) + 1)|0;
  $2 = $31;
 }
 _free($14);
 $32 = $1;
 HEAP32[$32>>2] = 0;
 $33 = $1;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = 0;
 STACKTOP = sp;return;
}
function _hashmap_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _hashmap_remove_all($2);
 STACKTOP = sp;return;
}
function _hashmap_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $5 = 0;
 $12 = $4;
 $13 = (_stringhash($12)|0);
 $6 = $13;
 $14 = $6;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14>>>0) % ($17>>>0))&-1;
 $7 = $18;
 $19 = $3;
 $20 = HEAP32[$19>>2]|0;
 $21 = $7;
 $22 = (($20) + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $8 = $23;
 while(1) {
  $24 = $8;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $8;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = ($28|0)==($29|0);
  if ($30) {
   $31 = $8;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $4;
   $35 = (_strcmp($33,$34)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    label = 7;
    break;
   }
  }
  $40 = $8;
  $41 = HEAP32[$40>>2]|0;
  $8 = $41;
 }
 if ((label|0) == 7) {
  $37 = $8;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $5 = $39;
 }
 $42 = $5;
 $2 = $42;
 $43 = $2;
 STACKTOP = sp;return ($43|0);
}
function _hashmap_remove($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $49 = $4;
  STACKTOP = sp;return ($49|0);
 }
 $11 = $3;
 $12 = (_stringhash($11)|0);
 $5 = $12;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = $2;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15>>>0) % ($18>>>0))&-1;
 $20 = (($14) + ($19<<2)|0);
 $6 = $20;
 $21 = $6;
 $22 = HEAP32[$21>>2]|0;
 $7 = $22;
 while(1) {
  $23 = $7;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $7;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = ($27|0)==($28|0);
  if ($29) {
   $30 = $7;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $3;
   $34 = (_strcmp($32,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    break;
   }
  }
  $46 = $7;
  $6 = $46;
  $47 = $7;
  $48 = HEAP32[$47>>2]|0;
  $7 = $48;
 }
 if ((label|0) == 8) {
  $49 = $4;
  STACKTOP = sp;return ($49|0);
 }
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = $6;
 HEAP32[$38>>2] = $37;
 $39 = $7;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $4 = $41;
 $42 = $7;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 $45 = $7;
 _free($45);
 $49 = $4;
 STACKTOP = sp;return ($49|0);
}
function _hashmap_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)<(1);
  if ($16) {
   $17 = $3;
   $18 = ((($17)) + 4|0);
   HEAP32[$18>>2] = 1000;
  }
  $19 = $3;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_calloc($21,4)|0);
  $23 = $3;
  HEAP32[$23>>2] = $22;
 }
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $85 = $6;
  STACKTOP = sp;return ($85|0);
 }
 $27 = $4;
 $28 = (_stringhash($27)|0);
 $7 = $28;
 $29 = $7;
 $30 = $3;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29>>>0) % ($32>>>0))&-1;
 $8 = $33;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = $8;
 $37 = (($35) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $9 = $38;
 while(1) {
  $39 = $9;
  $40 = ($39|0)!=(0|0);
  if (!($40)) {
   break;
  }
  $41 = $9;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $7;
  $45 = ($43|0)==($44|0);
  if ($45) {
   $46 = $9;
   $47 = ((($46)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $4;
   $50 = (_strcmp($48,$49)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    break;
   }
  }
  $52 = $9;
  $53 = HEAP32[$52>>2]|0;
  $9 = $53;
 }
 $54 = $9;
 $55 = ($54|0)==(0|0);
 if ($55) {
  $56 = (_calloc(1,16)|0);
  $9 = $56;
  $57 = $7;
  $58 = $9;
  $59 = ((($58)) + 4|0);
  HEAP32[$59>>2] = $57;
  $60 = $5;
  $61 = $9;
  $62 = ((($61)) + 12|0);
  HEAP32[$62>>2] = $60;
  $63 = $4;
  $64 = (___strdup($63)|0);
  $65 = $9;
  $66 = ((($65)) + 8|0);
  HEAP32[$66>>2] = $64;
  $67 = $3;
  $68 = HEAP32[$67>>2]|0;
  $69 = $8;
  $70 = (($68) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $9;
  HEAP32[$72>>2] = $71;
  $73 = $9;
  $74 = $3;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = (($75) + ($76<<2)|0);
  HEAP32[$77>>2] = $73;
  $78 = $3;
  $79 = ((($78)) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + 1)|0;
  HEAP32[$79>>2] = $81;
  $6 = 0;
  $85 = $6;
  STACKTOP = sp;return ($85|0);
 } else {
  $6 = 1;
  $82 = $5;
  $83 = $9;
  $84 = ((($83)) + 12|0);
  HEAP32[$84>>2] = $82;
  $85 = $6;
  STACKTOP = sp;return ($85|0);
 }
 return (0)|0;
}
function _readfile_core($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 $6 = sp + 92|0;
 $7 = sp + 88|0;
 $1 = $0;
 $2 = 0;
 $8 = $1;
 $9 = (_stat($8,$3)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $113 = $2;
  STACKTOP = sp;return ($113|0);
 }
 $11 = ((($3)) + 40|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (___muldi3(1,0,($14|0),($17|0))|0);
 $19 = (getTempRet0() | 0);
 $20 = (_i64Add(($18|0),($19|0),1,0)|0);
 $21 = (getTempRet0() | 0);
 $22 = (_malloc($20)|0);
 $4 = $22;
 $23 = $4;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $113 = $2;
  STACKTOP = sp;return ($113|0);
 }
 $25 = $1;
 $26 = (_fopen($25,4577)|0);
 $5 = $26;
 $27 = $5;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($3)) + 40|0);
  $30 = $29;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)>(0);
  $37 = ($32>>>0)>=(3);
  $38 = ($35|0)==(0);
  $39 = $38 & $37;
  $40 = $36 | $39;
  do {
   if ($40) {
    HEAP32[$6>>2] = 0;
    $41 = $4;
    $42 = $5;
    $43 = (_fs_fread2($41,1,3,$42,$6)|0);
    if ($43) {
     $44 = HEAP32[$6>>2]|0;
     $45 = ($44|0)==(3);
     $46 = $4;
     if (!($45)) {
      $94 = HEAP32[$6>>2]|0;
      $95 = (($46) + ($94)|0);
      HEAP8[$95>>0] = 0;
      $96 = $4;
      $2 = $96;
      $4 = 0;
      break;
     }
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $49 = ($48|0)==(239);
     if ($49) {
      $50 = $4;
      $51 = ((($50)) + 1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = ($53|0)==(187);
      if ($54) {
       $55 = $4;
       $56 = ((($55)) + 2|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57&255;
       $59 = ($58|0)==(191);
       if ($59) {
        $60 = $4;
        $61 = ((($3)) + 40|0);
        $62 = $61;
        $63 = $62;
        $64 = HEAP32[$63>>2]|0;
        $65 = (($62) + 4)|0;
        $66 = $65;
        $67 = HEAP32[$66>>2]|0;
        $68 = (_i64Subtract(($64|0),($67|0),3,0)|0);
        $69 = (getTempRet0() | 0);
        $70 = $5;
        $71 = (_fs_fread2($60,1,$68,$70,$6)|0);
        if (!($71)) {
         break;
        }
        $72 = $4;
        $73 = HEAP32[$6>>2]|0;
        $74 = (($72) + ($73)|0);
        HEAP8[$74>>0] = 0;
        $75 = $4;
        $2 = $75;
        $4 = 0;
        break;
       }
      }
     }
     $76 = $4;
     $77 = ((($76)) + 3|0);
     $78 = ((($3)) + 40|0);
     $79 = $78;
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 4)|0;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $85 = (_i64Subtract(($81|0),($84|0),3,0)|0);
     $86 = (getTempRet0() | 0);
     $87 = $5;
     $88 = (_fs_fread2($77,1,$85,$87,$6)|0);
     if ($88) {
      $89 = $4;
      $90 = HEAP32[$6>>2]|0;
      $91 = (3 + ($90))|0;
      $92 = (($89) + ($91)|0);
      HEAP8[$92>>0] = 0;
      $93 = $4;
      $2 = $93;
      $4 = 0;
     }
    }
   } else {
    HEAP32[$7>>2] = 0;
    $97 = $4;
    $98 = ((($3)) + 40|0);
    $99 = $98;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($99) + 4)|0;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = $5;
    $106 = (_fs_fread2($97,1,$101,$105,$7)|0);
    if ($106) {
     $107 = $4;
     $108 = HEAP32[$7>>2]|0;
     $109 = (($107) + ($108)|0);
     HEAP8[$109>>0] = 0;
     $110 = $4;
     $2 = $110;
     $4 = 0;
    }
   }
  } while(0);
  $111 = $5;
  (_fclose($111)|0);
 }
 $112 = $4;
 _free($112);
 $113 = $2;
 STACKTOP = sp;return ($113|0);
}
function _fs_fread2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $9;
 HEAP32[$12>>2] = 0;
 $10 = 0;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = (_fread($13,$14,$15,$16)|0);
 $11 = $17;
 $18 = $11;
 $19 = $7;
 $20 = ($18|0)==($19|0);
 $21 = $11;
 if ($20) {
  $22 = $9;
  HEAP32[$22>>2] = $21;
  $10 = 1;
 } else {
  $23 = $7;
  $24 = ($21>>>0)<($23>>>0);
  if ($24) {
   $25 = $8;
   $26 = (_feof($25)|0);
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $11;
    $29 = $9;
    HEAP32[$29>>2] = $28;
    $10 = 1;
   }
  }
 }
 $30 = $10;
 $31 = $30&1;
 STACKTOP = sp;return ($31|0);
}
function _readfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_strcmp($3,4579)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = (___strdup(2080)|0);
   $1 = $6;
  } else {
   $7 = $2;
   $8 = (_strcmp($7,4587)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (___strdup(3348)|0);
    $1 = $10;
    break;
   } else {
    $11 = $2;
    $12 = (_readfile_core($11)|0);
    $1 = $12;
    break;
   }
  }
 } while(0);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _scope_list_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $3;
  $8 = $2;
  HEAP32[$8>>2] = $7;
  $9 = $3;
  $10 = $2;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 } else {
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = ((($15)) + 36|0);
  HEAP32[$16>>2] = $14;
  $17 = $3;
  $18 = $2;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $17;
  $22 = $3;
  $23 = $2;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  STACKTOP = sp;return;
 }
}
function _scope_list_pop($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 $15 = $1;
 $16 = ((($15)) + 4|0);
 if ($14) {
  HEAP32[$16>>2] = 0;
  $17 = $1;
  HEAP32[$17>>2] = 0;
 } else {
  $18 = HEAP32[$16>>2]|0;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25|0)==($27|0);
  if ($28) {
   $29 = $1;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 32|0);
   HEAP32[$32>>2] = 0;
   $33 = $1;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 36|0);
   HEAP32[$36>>2] = 0;
  }
 }
 $37 = $2;
 $38 = ((($37)) + 32|0);
 HEAP32[$38>>2] = 0;
 $39 = $2;
 $40 = ((($39)) + 36|0);
 HEAP32[$40>>2] = 0;
 STACKTOP = sp;return;
}
function _seterror_with_token($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer19 = sp + 288|0;
 $vararg_buffer17 = sp + 280|0;
 $vararg_buffer15 = sp + 272|0;
 $vararg_buffer13 = sp + 264|0;
 $vararg_buffer10 = sp + 256|0;
 $vararg_buffer8 = sp + 248|0;
 $vararg_buffer3 = sp + 232|0;
 $vararg_buffer1 = sp + 224|0;
 $vararg_buffer = sp + 216|0;
 $6 = sp + 304|0;
 $7 = sp + 16|0;
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $3;
 $13 = ((($12)) + 200|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $16 = $4;
 $17 = ($16|0)==(0|0);
 if ($17) {
  (_ss_fprintf($6,4596,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $18 = $4;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $4;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $4;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $34;
   (_ss_fprintf($6,5531,$vararg_buffer1)|0);
  }
 }
 _memset(($7|0),0,200)|0;
 HEAP32[$8>>2] = $varargs;
 $35 = $5;
 (_vsnprintf($7,200,$35,$8)|0);
 $36 = $4;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $4;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $4;
  $42 = ((($41)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $40;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $43;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $7;
  (_ss_fprintf($6,4620,$vararg_buffer3)|0);
 }
 $44 = $4;
 $9 = $44;
 while(1) {
  $45 = $9;
  $46 = ((($45)) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0|0);
  if ($48) {
   $49 = $9;
   $50 = ((($49)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(10);
   $88 = $53;
  } else {
   $88 = 0;
  }
  $54 = $9;
  if (!($88)) {
   break;
  }
  $55 = ((($54)) + 36|0);
  $56 = HEAP32[$55>>2]|0;
  $9 = $56;
 }
 $10 = $54;
 while(1) {
  $57 = $10;
  $58 = ($57|0)!=(0|0);
  if (!($58)) {
   break;
  }
  $59 = $10;
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(10);
  if (!($61)) {
   break;
  }
  $62 = $10;
  $63 = ((($62)) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 & 2;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $10;
   $68 = ((($67)) + 24|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 & 4;
   $71 = ($70|0)!=(0);
   if ($71) {
    (_ss_fprintf($6,5588,$vararg_buffer8)|0);
   }
  }
  $72 = $10;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $74;
  (_ss_fprintf($6,5531,$vararg_buffer10)|0);
  $75 = $10;
  $76 = ((($75)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $10 = $77;
 }
 (_ss_fprintf($6,5664,$vararg_buffer13)|0);
 $11 = 1;
 while(1) {
  $78 = $11;
  $79 = $4;
  $80 = ((($79)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) - 1)|0;
  $83 = ($78|0)<($82|0);
  if (!($83)) {
   break;
  }
  (_ss_fprintf($6,5588,$vararg_buffer15)|0);
  $84 = $11;
  $85 = (($84) + 1)|0;
  $11 = $85;
 }
 (_ss_fprintf($6,4634,$vararg_buffer17)|0);
 $86 = $3;
 $87 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer19>>2] = $87;
 (_seterror($86,5531,$vararg_buffer19)|0);
 (_ss_close($6)|0);
 STACKTOP = sp;return;
}
function _print_scope($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 (_printf(4637,$vararg_buffer)|0);
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $2 = $9;
 $3 = 0;
 while(1) {
  $10 = $2;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $4 = 0;
  while(1) {
   $12 = $4;
   $13 = $2;
   $14 = ((($13)) + 16|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($12|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $2;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $4;
   $22 = (($20) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   if ($24) {
    $5 = 0;
    while(1) {
     $25 = $5;
     $26 = $3;
     $27 = ($25|0)<($26|0);
     if (!($27)) {
      break;
     }
     (_printf(5588,$vararg_buffer1)|0);
     $28 = $5;
     $29 = (($28) + 1)|0;
     $5 = $29;
    }
    $30 = $2;
    $31 = ((($30)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $4;
    $34 = (($32) + ($33<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $37;
    (_printf(4660,$vararg_buffer3)|0);
   }
   $38 = $4;
   $39 = (($38) + 1)|0;
   $4 = $39;
  }
  $6 = 0;
  while(1) {
   $40 = $6;
   $41 = $2;
   $42 = ((($41)) + 4|0);
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($40|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = $2;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = (($48) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $7 = 0;
    while(1) {
     $53 = $7;
     $54 = $3;
     $55 = ($53|0)<($54|0);
     if (!($55)) {
      break;
     }
     (_printf(5588,$vararg_buffer5)|0);
     $56 = $7;
     $57 = (($56) + 1)|0;
     $7 = $57;
    }
    $58 = $2;
    $59 = ((($58)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $6;
    $62 = (($60) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $65;
    (_printf(4664,$vararg_buffer7)|0);
   }
   $66 = $6;
   $67 = (($66) + 1)|0;
   $6 = $67;
  }
  $68 = $3;
  $69 = (($68) + 1)|0;
  $3 = $69;
  $70 = $2;
  $71 = ((($70)) + 32|0);
  $72 = HEAP32[$71>>2]|0;
  $2 = $72;
 }
 (_printf(4672,$vararg_buffer10)|0);
 STACKTOP = sp;return;
}
function _first_of_function_specifier_token($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(9015);
  if ($7) {
   $11 = 1;
  } else {
   $8 = $2;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(9048);
   $11 = $10;
  }
  $$expand_i1_val2 = $11&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function _first_is($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $2;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ($11|0)==($12|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function _first_of_function_specifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_of_function_specifier_token($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _first_of_enum_specifier_token($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(9009);
  $$expand_i1_val2 = $7&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $8 = $$pre_trunc&1;
 STACKTOP = sp;return ($8|0);
}
function _first_of_enum_specifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_of_enum_specifier_token($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _first_of_alignment_specifier($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(9037);
  $$expand_i1_val2 = $11&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function _first_of_atomic_type_specifier_token($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(9039);
  $$expand_i1_val2 = $7&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $8 = $$pre_trunc&1;
 STACKTOP = sp;return ($8|0);
}
function _first_of_atomic_type_specifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_of_atomic_type_specifier_token($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _first_of_storage_class_specifier($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $38 = $$pre_trunc&1;
  STACKTOP = sp;return ($38|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(9031);
 if ($11) {
  $37 = 1;
 } else {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(9010);
  if ($16) {
   $37 = 1;
  } else {
   $17 = $2;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(9028);
   if ($21) {
    $37 = 1;
   } else {
    $22 = $2;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(9050);
    if ($26) {
     $37 = 1;
    } else {
     $27 = $2;
     $28 = ((($27)) + 28|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(8999);
     if ($31) {
      $37 = 1;
     } else {
      $32 = $2;
      $33 = ((($32)) + 28|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(9022);
      $37 = $36;
     }
    }
   }
  }
 }
 $$expand_i1_val2 = $37&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $38 = $$pre_trunc&1;
 STACKTOP = sp;return ($38|0);
}
function _first_of_struct_or_union_token($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(9029);
 if ($4) {
  $8 = 1;
 } else {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(9032);
  $8 = $7;
 }
 STACKTOP = sp;return ($8|0);
}
function _first_of_struct_or_union($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_of_struct_or_union_token($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _first_of_type_qualifier_token($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(9003);
 if ($7) {
  $17 = 1;
 } else {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(9023);
  if ($10) {
   $17 = 1;
  } else {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(9035);
   if ($13) {
    $17 = 1;
   } else {
    $14 = $2;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(9039);
    $17 = $16;
   }
  }
 }
 $$expand_i1_val2 = $17&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function _first_of_type_qualifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_first_of_type_qualifier_token($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _find_variables($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 while(1) {
  $10 = $5;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = $5;
  $13 = ((($12)) + 16|0);
  $14 = $4;
  $15 = (_hashmap_find($13,$14)|0);
  $6 = $15;
  $16 = $6;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   label = 4;
   break;
  }
  $19 = $5;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
 }
 if ((label|0) == 4) {
  $18 = $6;
  $2 = $18;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $22 = $2;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _find_struct_or_union_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 while(1) {
  $11 = $6;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $6;
  $14 = ((($13)) + 4|0);
  $15 = $4;
  $16 = (_hashmap_find($14,$15)|0);
  $7 = $16;
  $17 = $7;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $7;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(2);
   if ($21) {
    $22 = $7;
    $23 = ((($22)) + -8|0);
    $5 = $23;
    $24 = $5;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if ($26) {
     label = 6;
     break;
    }
   }
  }
  $28 = $6;
  $29 = ((($28)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $6 = $30;
 }
 if ((label|0) == 6) {
  $27 = $5;
  $2 = $27;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $31 = $5;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _find_declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_find_variables($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(4);
  if ($13) {
   $14 = $5;
   $2 = $14;
   $15 = $2;
   STACKTOP = sp;return ($15|0);
  }
 }
 $2 = 0;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _find_enumerator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_find_variables($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(3);
  if ($13) {
   $14 = $5;
   $2 = $14;
   $15 = $2;
   STACKTOP = sp;return ($15|0);
  }
 }
 $2 = 0;
 $15 = $2;
 STACKTOP = sp;return ($15|0);
}
function _first_of_typedef_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$2>>0] = $$expand_i1_val;
  } else {
   $8 = $4;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(8996);
   if ($10) {
    $$expand_i1_val2 = 0;
    HEAP8[$2>>0] = $$expand_i1_val2;
    break;
   }
   $11 = $4;
   $12 = ((($11)) + 24|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 16;
   $15 = ($14|0)!=(0);
   if ($15) {
    $$expand_i1_val4 = 1;
    HEAP8[$2>>0] = $$expand_i1_val4;
    break;
   }
   $16 = $4;
   $17 = ((($16)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 32;
   $20 = ($19|0)!=(0);
   if ($20) {
    $$expand_i1_val6 = 0;
    HEAP8[$2>>0] = $$expand_i1_val6;
    break;
   }
   $21 = $3;
   $22 = $4;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_find_declarator($21,$24)|0);
   $5 = $25;
   $26 = $5;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $5;
    $29 = ((($28)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)!=(0|0);
    if ($31) {
     $32 = $5;
     $33 = ((($32)) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 & 1;
     $38 = ($37|0)!=(0);
     if ($38) {
      $39 = $4;
      $40 = ((($39)) + 24|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = $41 | 16;
      HEAP32[$40>>2] = $42;
      $$expand_i1_val8 = 1;
      HEAP8[$2>>0] = $$expand_i1_val8;
      break;
     }
    }
   }
   $43 = $4;
   $44 = ((($43)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 | 32;
   HEAP32[$44>>2] = $46;
   $$expand_i1_val10 = 0;
   HEAP8[$2>>0] = $$expand_i1_val10;
  }
 } while(0);
 $$pre_trunc = HEAP8[$2>>0]|0;
 $47 = $$pre_trunc&1;
 STACKTOP = sp;return ($47|0);
}
function _first_of_type_name_ahead($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$1>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = ((($8)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(40);
   if ($12) {
    $$expand_i1_val2 = 0;
    HEAP8[$1>>0] = $$expand_i1_val2;
    break;
   }
   $13 = $2;
   $14 = (_parser_look_ahead($13)|0);
   $3 = $14;
   $15 = $2;
   $16 = $3;
   $17 = (_first_of_type_specifier_token($15,$16)|0);
   if ($17) {
    $20 = 1;
   } else {
    $18 = $3;
    $19 = (_first_of_type_qualifier_token($18)|0);
    $20 = $19;
   }
   $$expand_i1_val4 = $20&1;
   HEAP8[$1>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$1>>0]|0;
 $21 = $$pre_trunc&1;
 STACKTOP = sp;return ($21|0);
}
function _parser_look_ahead($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 while(1) {
  $8 = $2;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $2;
   $11 = ((($10)) + 24|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 1;
   $14 = ($13|0)!=(0);
   $15 = $14 ^ 1;
   $19 = $15;
  } else {
   $19 = 0;
  }
  $16 = $2;
  if (!($19)) {
   break;
  }
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 STACKTOP = sp;return ($16|0);
}
function _first_of_type_specifier_token($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $74 = $$pre_trunc&1;
  STACKTOP = sp;return ($74|0);
 }
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(9034);
 do {
  if ($9) {
   $73 = 1;
  } else {
   $10 = $4;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(9002);
   if ($12) {
    $73 = 1;
   } else {
    $13 = $4;
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(9025);
    if ($15) {
     $73 = 1;
    } else {
     $16 = $4;
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(9016);
     if ($18) {
      $73 = 1;
     } else {
      $19 = $4;
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(9017);
      if ($21) {
       $73 = 1;
      } else {
       $22 = $4;
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==(9018);
       if ($24) {
        $73 = 1;
       } else {
        $25 = $4;
        $26 = HEAP32[$25>>2]|0;
        $27 = ($26|0)==(9019);
        if ($27) {
         $73 = 1;
        } else {
         $28 = $4;
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(9020);
         if ($30) {
          $73 = 1;
         } else {
          $31 = $4;
          $32 = HEAP32[$31>>2]|0;
          $33 = ($32|0)==(9021);
          if ($33) {
           $73 = 1;
          } else {
           $34 = $4;
           $35 = HEAP32[$34>>2]|0;
           $36 = ($35|0)==(9011);
           if ($36) {
            $73 = 1;
           } else {
            $37 = $4;
            $38 = HEAP32[$37>>2]|0;
            $39 = ($38|0)==(9007);
            if ($39) {
             $73 = 1;
            } else {
             $40 = $4;
             $41 = HEAP32[$40>>2]|0;
             $42 = ($41|0)==(9026);
             if ($42) {
              $73 = 1;
             } else {
              $43 = $4;
              $44 = HEAP32[$43>>2]|0;
              $45 = ($44|0)==(9033);
              if ($45) {
               $73 = 1;
              } else {
               $46 = $4;
               $47 = HEAP32[$46>>2]|0;
               $48 = ($47|0)==(9041);
               if ($48) {
                $73 = 1;
               } else {
                $49 = $4;
                $50 = HEAP32[$49>>2]|0;
                $51 = ($50|0)==(9042);
                if ($51) {
                 $73 = 1;
                } else {
                 $52 = $4;
                 $53 = HEAP32[$52>>2]|0;
                 $54 = ($53|0)==(9044);
                 if ($54) {
                  $73 = 1;
                 } else {
                  $55 = $4;
                  $56 = HEAP32[$55>>2]|0;
                  $57 = ($56|0)==(9045);
                  if ($57) {
                   $73 = 1;
                  } else {
                   $58 = $4;
                   $59 = HEAP32[$58>>2]|0;
                   $60 = ($59|0)==(9043);
                   if ($60) {
                    $73 = 1;
                   } else {
                    $61 = $4;
                    $62 = HEAP32[$61>>2]|0;
                    $63 = ($62|0)==(9051);
                    if ($63) {
                     $73 = 1;
                     break;
                    }
                    $64 = $4;
                    $65 = (_first_of_atomic_type_specifier_token($64)|0);
                    if ($65) {
                     $73 = 1;
                     break;
                    }
                    $66 = $4;
                    $67 = (_first_of_struct_or_union_token($66)|0);
                    if ($67) {
                     $73 = 1;
                     break;
                    }
                    $68 = $4;
                    $69 = (_first_of_enum_specifier_token($68)|0);
                    if ($69) {
                     $73 = 1;
                     break;
                    }
                    $70 = $3;
                    $71 = $4;
                    $72 = (_first_of_typedef_name($70,$71)|0);
                    $73 = $72;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $$expand_i1_val2 = $73&1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $74 = $$pre_trunc&1;
 STACKTOP = sp;return ($74|0);
}
function _first_of_type_name($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_first_of_type_specifier($2)|0);
 if ($3) {
  $6 = 1;
 } else {
  $4 = $1;
  $5 = (_first_of_type_qualifier($4)|0);
  $6 = $5;
 }
 STACKTOP = sp;return ($6|0);
}
function _first_of_type_specifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_first_of_type_specifier_token($2,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _first_of_type_specifier_qualifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_first_of_type_specifier($2)|0);
 if ($3) {
  $8 = 1;
 } else {
  $4 = $1;
  $5 = (_first_of_type_qualifier($4)|0);
  if ($5) {
   $8 = 1;
  } else {
   $6 = $1;
   $7 = (_first_of_alignment_specifier($6)|0);
   $8 = $7;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _first_of_compound_statement($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_first_is($2,123)|0);
 STACKTOP = sp;return ($3|0);
}
function _first_of_jump_statement($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $28 = $$pre_trunc&1;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(9013);
 if ($11) {
  $27 = 1;
 } else {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(9004);
  if ($16) {
   $27 = 1;
  } else {
   $17 = $2;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(9000);
   if ($21) {
    $27 = 1;
   } else {
    $22 = $2;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(9024);
    $27 = $26;
   }
  }
 }
 $$expand_i1_val2 = $27&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $28 = $$pre_trunc&1;
 STACKTOP = sp;return ($28|0);
}
function _first_of_selection_statement($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(9014);
 if ($11) {
  $17 = 1;
 } else {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(9030);
  $17 = $16;
 }
 $$expand_i1_val2 = $17&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function _first_of_iteration_statement($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(9036);
 if ($11) {
  $22 = 1;
 } else {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(9006);
  if ($16) {
   $22 = 1;
  } else {
   $17 = $2;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(9012);
   $22 = $21;
  }
 }
 $$expand_i1_val2 = $22&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $23 = $$pre_trunc&1;
 STACKTOP = sp;return ($23|0);
}
function _first_of_label($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$1>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = ((($8)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(8996);
   $13 = $2;
   if ($12) {
    $14 = (_parser_look_ahead($13)|0);
    $3 = $14;
    $15 = $3;
    $16 = ($15|0)!=(0|0);
    if ($16) {
     $17 = $3;
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(58);
     $20 = $19;
    } else {
     $20 = 0;
    }
    $$expand_i1_val2 = $20&1;
    HEAP8[$1>>0] = $$expand_i1_val2;
    break;
   }
   $21 = ((($13)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(9001);
   if ($24) {
    $$expand_i1_val4 = 1;
    HEAP8[$1>>0] = $$expand_i1_val4;
    break;
   }
   $25 = $2;
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(9005);
   if ($29) {
    $$expand_i1_val6 = 1;
    HEAP8[$1>>0] = $$expand_i1_val6;
    break;
   } else {
    $$expand_i1_val8 = 0;
    HEAP8[$1>>0] = $$expand_i1_val8;
    break;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$1>>0]|0;
 $30 = $$pre_trunc&1;
 STACKTOP = sp;return ($30|0);
}
function _first_of_declaration_specifier($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_first_of_storage_class_specifier($2)|0);
 if ($3) {
  $8 = 1;
 } else {
  $4 = $1;
  $5 = (_first_of_function_specifier($4)|0);
  if ($5) {
   $8 = 1;
  } else {
   $6 = $1;
   $7 = (_first_of_type_specifier_qualifier($6)|0);
   $8 = $7;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _first_of_static_assert_declaration($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(9049);
  $$expand_i1_val2 = $11&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function _first_of_attribute_specifier($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $$expand_i1_val = 0;
   HEAP8[$1>>0] = $$expand_i1_val;
  } else {
   $8 = $2;
   $9 = ((($8)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(91);
   if ($12) {
    $$expand_i1_val2 = 0;
    HEAP8[$1>>0] = $$expand_i1_val2;
    break;
   }
   $13 = $2;
   $14 = (_parser_look_ahead($13)|0);
   $3 = $14;
   $15 = $3;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    $17 = $3;
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(91);
    $20 = $19;
   } else {
    $20 = 0;
   }
   $$expand_i1_val4 = $20&1;
   HEAP8[$1>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$1>>0]|0;
 $21 = $$pre_trunc&1;
 STACKTOP = sp;return ($21|0);
}
function _first_of_labeled_statement($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_first_of_label($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _first_of_designator($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(91);
 if ($11) {
  $17 = 1;
 } else {
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(46);
  $17 = $16;
 }
 $$expand_i1_val2 = $17&1;
 HEAP8[$1>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function _previous_parser_token($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ((($6)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)!=(0);
  $11 = $10 ^ 1;
  $12 = $2;
  if (!($11)) {
   break;
  }
  $13 = ((($12)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
 }
 STACKTOP = sp;return ($12|0);
}
function _parser_skip_blanks($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = ((($2)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $1;
   $7 = ((($6)) + 28|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 1;
   $12 = ($11|0)!=(0);
   $13 = $12 ^ 1;
   $21 = $13;
  } else {
   $21 = 0;
  }
  $14 = $1;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  if (!($21)) {
   break;
  }
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = ((($19)) + 28|0);
  HEAP32[$20>>2] = $18;
 }
 STACKTOP = sp;return ($16|0);
}
function _parser_match($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = (_parser_skip_blanks($9)|0);
 STACKTOP = sp;return ($10|0);
}
function _parser_match_tk($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = ((($6)) + 200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $5;
  $15 = $3;
  $16 = ((($15)) + 20|0);
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  _seterror_with_token($14,$18,4693,$vararg_buffer);
  $19 = $5;
  $20 = ((($19)) + 200|0);
  HEAP32[$20>>2] = 1;
  STACKTOP = sp;return;
 }
 $21 = $3;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = $4;
 $26 = ($24|0)!=($25|0);
 if ($26) {
  $27 = $5;
  $28 = $3;
  $29 = ((($28)) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  _seterror_with_token($27,$30,4722,$vararg_buffer1);
  $31 = $5;
  HEAP32[$vararg_buffer3>>2] = $31;
  (_printf(5531,$vararg_buffer3)|0);
  $32 = $5;
  $33 = ((($32)) + 200|0);
  HEAP32[$33>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $34 = $3;
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $3;
  $40 = ((($39)) + 28|0);
  HEAP32[$40>>2] = $38;
  $41 = $3;
  (_parser_skip_blanks($41)|0);
  STACKTOP = sp;return;
 }
}
function _print_type_qualifier_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  _print_item($7,5827);
 }
 $8 = $3;
 $9 = $8 & 2;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $2;
  _print_item($11,5912);
 }
 $12 = $3;
 $13 = $12 & 4;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $2;
 _print_item($15,6011);
 STACKTOP = sp;return;
}
function _print_item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  (_printf(5588,$vararg_buffer)|0);
 }
 $7 = $3;
 HEAP32[$vararg_buffer1>>2] = $7;
 (_printf(5531,$vararg_buffer1)|0);
 $8 = $2;
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function _print_type_specifier_flags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  _print_item($7,6006);
 }
 $8 = $3;
 $9 = $8 & 256;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $2;
  _print_item($11,5997);
 }
 $12 = $3;
 $13 = $12 & 8;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $2;
  _print_item($15,5894);
 }
 $16 = $3;
 $17 = $16 & 4;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $2;
  _print_item($19,5928);
 }
 $20 = $3;
 $21 = $20 & 16;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $2;
  _print_item($23,5898);
 }
 $24 = $3;
 $25 = $24 & 2;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $2;
  _print_item($27,5822);
 }
 $28 = $3;
 $29 = $28 & 64;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $2;
  _print_item($31,5853);
 }
 $32 = $3;
 $33 = $32 & 32;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $2;
  _print_item($35,5872);
 }
 $36 = $3;
 $37 = $36 & 128;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $2;
  _print_item($39,5934);
 }
 $40 = $3;
 $41 = $40 & 512;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $2;
  _print_item($43,6118);
 }
 $44 = $3;
 $45 = $44 & 1024;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $2;
  _print_item($47,6124);
 }
 $48 = $3;
 $49 = $48 & 2048;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $2;
  _print_item($51,4740);
 }
 $52 = $3;
 $53 = $52 & 4096;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $2;
  _print_item($55,6145);
 }
 $56 = $3;
 $57 = $56 & 8192;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $60 = $2;
  $61 = ($60|0)!=(0|0);
  STACKTOP = sp;return ($61|0);
 }
 $59 = $2;
 _print_item($59,6133);
 $60 = $2;
 $61 = ($60|0)!=(0|0);
 STACKTOP = sp;return ($61|0);
}
function _type_specifier_is_integer($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = $3 & 2;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $2;
  $7 = $6 & 4;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = $2;
   $10 = $9 & 8;
   $11 = ($10|0)!=(0);
   if (!($11)) {
    $12 = $2;
    $13 = $12 & 16;
    $14 = ($13|0)!=(0);
    if (!($14)) {
     $15 = $2;
     $16 = $15 & 8;
     $17 = ($16|0)!=(0);
     if (!($17)) {
      $18 = $2;
      $19 = $18 & 262144;
      $20 = ($19|0)!=(0);
      if (!($20)) {
       $21 = $2;
       $22 = $21 & 524288;
       $23 = ($22|0)!=(0);
       if (!($23)) {
        $24 = $2;
        $25 = $24 & 1048576;
        $26 = ($25|0)!=(0);
        if (!($26)) {
         $27 = $2;
         $28 = $27 & 2097152;
         $29 = ($28|0)!=(0);
         if (!($29)) {
          $30 = $2;
          $31 = $30 & 4194304;
          $32 = ($31|0)!=(0);
          if (!($32)) {
           $$expand_i1_val2 = 0;
           HEAP8[$1>>0] = $$expand_i1_val2;
           $$pre_trunc = HEAP8[$1>>0]|0;
           $33 = $$pre_trunc&1;
           STACKTOP = sp;return ($33|0);
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $$expand_i1_val = 1;
 HEAP8[$1>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$1>>0]|0;
 $33 = $$pre_trunc&1;
 STACKTOP = sp;return ($33|0);
}
function _final_specifier($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 256;
 $9 = ($8|0)!=(0);
 if ($9) {
  label = 3;
 } else {
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 128;
  $13 = ($12|0)!=(0);
  if ($13) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = $4;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_type_specifier_is_integer($15)|0);
  if (!($16)) {
   $17 = $4;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 | 8;
   HEAP32[$17>>2] = $19;
  }
 }
 $20 = $5;
 $21 = ((($20)) + 200|0);
 $22 = HEAP32[$21>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _add_specifier($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = $9 & 16;
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $6;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 4194304;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $8;
    $17 = $5;
    $18 = ((($17)) + 28|0);
    $19 = HEAP32[$18>>2]|0;
    _seterror_with_token($16,$19,4751,$vararg_buffer);
    $4 = 1;
    $35 = $4;
    STACKTOP = sp;return ($35|0);
   }
   $20 = $6;
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 16;
   $23 = ($22|0)!=(0);
   $24 = $6;
   $25 = HEAP32[$24>>2]|0;
   if ($23) {
    $26 = $25 | 4194304;
    HEAP32[$24>>2] = $26;
    break;
   } else {
    $27 = $25 | 16;
    HEAP32[$24>>2] = $27;
    break;
   }
  } else {
   $28 = $7;
   $29 = $6;
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 | $28;
   HEAP32[$29>>2] = $31;
  }
 } while(0);
 $32 = $8;
 $33 = ((($32)) + 200|0);
 $34 = HEAP32[$33>>2]|0;
 $4 = $34;
 $35 = $4;
 STACKTOP = sp;return ($35|0);
}
function _declaration_specifiers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,36)|0);
 $4 = $7;
 L1: while(1) {
  $8 = $3;
  $9 = ((($8)) + 200|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   label = 27;
   break;
  }
  $12 = $2;
  $13 = (_first_of_declaration_specifier($12)|0);
  if (!($13)) {
   label = 27;
   break;
  }
  $14 = $2;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    label = 27;
    break;
   }
  }
  $24 = $2;
  $25 = $3;
  $26 = (_declaration_specifier($24,$25)|0);
  $5 = $26;
  $27 = $5;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  $31 = $5;
  do {
   if ($30) {
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)!=(0|0);
    if ($34) {
     $35 = $5;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)!=(0|0);
     if (!($39)) {
      $97 = $5;
      $98 = ((($97)) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ((($99)) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)!=(0|0);
      if (!($102)) {
       break;
      }
      $103 = $5;
      $104 = ((($103)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ((($105)) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[$107>>2]|0;
      $109 = $4;
      $110 = ((($109)) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = $111 | $108;
      HEAP32[$110>>2] = $112;
      break;
     }
     $40 = $2;
     $41 = $4;
     $42 = $5;
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[$44>>2]|0;
     $46 = HEAP32[$45>>2]|0;
     $47 = $3;
     $48 = (_add_specifier($40,$41,$46,$47)|0);
     $49 = ($48|0)!=(0);
     if ($49) {
      label = 27;
      break L1;
     }
     $50 = $5;
     $51 = ((($50)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)!=(0|0);
     $57 = $5;
     $58 = ((($57)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$59>>2]|0;
     if ($56) {
      $61 = ((($60)) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = $4;
      $64 = ((($63)) + 12|0);
      HEAP32[$64>>2] = $62;
      break;
     }
     $65 = ((($60)) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0|0);
     $68 = $5;
     $69 = ((($68)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = HEAP32[$70>>2]|0;
     if ($67) {
      $72 = ((($71)) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $4;
      $75 = ((($74)) + 16|0);
      HEAP32[$75>>2] = $73;
      break;
     }
     $76 = ((($71)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)!=(0|0);
     if ($78) {
      $79 = $5;
      $80 = ((($79)) + 4|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($82)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = HEAP32[$84>>2]|0;
      $86 = ($85|0)==(8996);
      if ($86) {
       $87 = $5;
       $88 = ((($87)) + 4|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = HEAP32[$89>>2]|0;
       $91 = ((($90)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($92)) + 4|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = $4;
       $96 = ((($95)) + 20|0);
       HEAP32[$96>>2] = $94;
      }
     }
    }
   } else {
    $113 = HEAP32[$31>>2]|0;
    $114 = ($113|0)!=(0|0);
    if ($114) {
     $115 = $5;
     $116 = HEAP32[$115>>2]|0;
     $117 = HEAP32[$116>>2]|0;
     $118 = $4;
     $119 = ((($118)) + 8|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $120 | $117;
     HEAP32[$119>>2] = $121;
    }
   }
  } while(0);
  $122 = $5;
  $6 = $122;
  $123 = $4;
  $124 = ((($123)) + 28|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)==(0|0);
  $127 = $6;
  $128 = $4;
  if ($126) {
   $129 = ((($128)) + 28|0);
   HEAP32[$129>>2] = $127;
   $130 = $6;
   $131 = $4;
   $132 = ((($131)) + 32|0);
   HEAP32[$132>>2] = $130;
  } else {
   $133 = ((($128)) + 32|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($134)) + 12|0);
   HEAP32[$135>>2] = $127;
   $136 = $6;
   $137 = $4;
   $138 = ((($137)) + 32|0);
   HEAP32[$138>>2] = $136;
  }
  $139 = $2;
  $140 = $3;
  (_attribute_specifier_sequence_opt($139,$140)|0);
  $141 = $2;
  $142 = ((($141)) + 28|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)==(8996);
  if ($145) {
   $146 = $4;
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)!=(0);
   if ($148) {
    label = 27;
    break;
   }
  }
 }
 if ((label|0) == 27) {
  $149 = $2;
  $150 = $4;
  $151 = $3;
  (_final_specifier($149,$150,$151)|0);
  $152 = $4;
  STACKTOP = sp;return ($152|0);
 }
 return (0)|0;
}
function _declaration_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,16)|0);
 $4 = $5;
 $6 = $2;
 $7 = (_first_of_storage_class_specifier($6)|0);
 $8 = $2;
 if ($7) {
  $9 = $3;
  $10 = (_storage_class_specifier($8,$9)|0);
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $12 = (_first_of_type_specifier_qualifier($8)|0);
 $13 = $2;
 if ($12) {
  $14 = $3;
  $15 = (_type_specifier_qualifier($13,$14)|0);
  $16 = $4;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 $18 = (_first_of_function_specifier($13)|0);
 if ($18) {
  $19 = $2;
  $20 = $3;
  $21 = (_function_specifier($19,$20)|0);
  $22 = $4;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 } else {
  $24 = $3;
  $25 = $2;
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  _seterror_with_token($24,$27,9166,$vararg_buffer);
  $28 = $4;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _attribute_specifier_sequence_opt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,8)|0);
 $4 = $6;
 while(1) {
  $7 = $3;
  $8 = ((($7)) + 200|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   label = 9;
   break;
  }
  $11 = $2;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 9;
   break;
  }
  $15 = $2;
  $16 = (_first_of_attribute_specifier($15)|0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $2;
  $18 = $3;
  $19 = (_attribute_specifier($17,$18)|0);
  $5 = $19;
  $20 = $4;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  $23 = $5;
  $24 = $4;
  if ($22) {
   HEAP32[$24>>2] = $23;
   $25 = $5;
   $26 = $4;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $25;
  } else {
   $28 = ((($24)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   HEAP32[$30>>2] = $23;
   $31 = $5;
   $32 = $4;
   $33 = ((($32)) + 4|0);
   HEAP32[$33>>2] = $31;
  }
 }
 if ((label|0) == 9) {
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _attribute_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,8)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 _parser_match_tk($6,91,$7);
 $8 = $2;
 $9 = $3;
 _parser_match_tk($8,91,$9);
 $10 = $2;
 $11 = $3;
 $12 = (_attribute_list($10,$11)|0);
 $13 = $4;
 HEAP32[$13>>2] = $12;
 $14 = $2;
 $15 = $3;
 _parser_match_tk($14,93,$15);
 $16 = $2;
 $17 = $3;
 _parser_match_tk($16,93,$17);
 $18 = $4;
 STACKTOP = sp;return ($18|0);
}
function _attribute_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,8)|0);
 $4 = $6;
 while(1) {
  $7 = $3;
  $8 = ((($7)) + 200|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   label = 13;
   break;
  }
  $11 = $2;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 13;
   break;
  }
  $15 = $2;
  $16 = (_first_of_attribute($15)|0);
  if (!($16)) {
   $17 = $2;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(44);
   if (!($21)) {
    label = 13;
    break;
   }
  }
  $22 = $2;
  $23 = (_first_of_attribute($22)|0);
  do {
   if ($23) {
    $24 = $2;
    $25 = $3;
    $26 = (_attribute($24,$25)|0);
    $5 = $26;
    $27 = $4;
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    $30 = $5;
    if ($29) {
     $31 = $4;
     HEAP32[$31>>2] = $30;
     $32 = $5;
     $33 = $4;
     $34 = ((($33)) + 4|0);
     HEAP32[$34>>2] = $32;
     break;
    } else {
     $35 = $4;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($37)) + 8|0);
     HEAP32[$38>>2] = $30;
     $39 = $5;
     $40 = $4;
     $41 = ((($40)) + 4|0);
     HEAP32[$41>>2] = $39;
     break;
    }
   }
  } while(0);
  $42 = $2;
  $43 = ((($42)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(44);
  if ($46) {
   $47 = $2;
   (_parser_match($47)|0);
  }
 }
 if ((label|0) == 13) {
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _first_of_attribute($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
 } else {
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(8996);
  $$expand_i1_val2 = $11&1;
  HEAP8[$1>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$1>>0]|0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function _attribute($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,12)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 $8 = (_attribute_token($6,$7)|0);
 $9 = $4;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(40);
 if (!($14)) {
  $20 = $4;
  STACKTOP = sp;return ($20|0);
 }
 $15 = $2;
 $16 = $3;
 $17 = (_attribute_argument_clause($15,$16)|0);
 $18 = $4;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = $4;
 STACKTOP = sp;return ($20|0);
}
function _attribute_token($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,4)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_strcmp($11,4862)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $36 = 1;
 } else {
  $14 = $2;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_strcmp($18,4873)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $36 = 1;
  } else {
   $21 = $2;
   $22 = ((($21)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_strcmp($25,4885)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    $36 = 1;
   } else {
    $28 = $2;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (_strcmp($32,4898)|0);
    $34 = ($33|0)==(0);
    $36 = $34;
   }
  }
 }
 $35 = $36&1;
 $5 = $35;
 $37 = $2;
 $38 = $3;
 _parser_match_tk($37,8996,$38);
 $39 = $2;
 $40 = ((($39)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(14906);
 if ($43) {
  $44 = $2;
  (_parser_match($44)|0);
  $45 = $2;
  $46 = $3;
  _parser_match_tk($45,8996,$46);
  $49 = $4;
  STACKTOP = sp;return ($49|0);
 }
 $47 = $5;
 $48 = $47&1;
 if ($48) {
  $49 = $4;
  STACKTOP = sp;return ($49|0);
 }
 (_printf(4908,$vararg_buffer)|0);
 $49 = $4;
 STACKTOP = sp;return ($49|0);
}
function _attribute_argument_clause($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,4)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 _parser_match_tk($6,40,$7);
 $8 = $2;
 $9 = $3;
 (_balanced_token_sequence_opt($8,$9)|0);
 $10 = $2;
 $11 = $3;
 _parser_match_tk($10,41,$11);
 $12 = $4;
 STACKTOP = sp;return ($12|0);
}
function _balanced_token_sequence_opt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $8 = (_calloc(1,8)|0);
 $4 = $8;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 L1: while(1) {
  $9 = $2;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(40);
  do {
   if ($17) {
    $18 = $5;
    $19 = (($18) + 1)|0;
    $5 = $19;
   } else {
    $20 = $2;
    $21 = ((($20)) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(91);
    if ($24) {
     $25 = $6;
     $26 = (($25) + 1)|0;
     $6 = $26;
     break;
    }
    $27 = $2;
    $28 = ((($27)) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(123);
    if ($31) {
     $32 = $7;
     $33 = (($32) + 1)|0;
     $7 = $33;
     break;
    }
    $34 = $2;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(41);
    if ($38) {
     $39 = $5;
     $40 = ($39|0)==(0);
     if ($40) {
      break L1;
     }
     $41 = $5;
     $42 = (($41) + -1)|0;
     $5 = $42;
     break;
    }
    $43 = $2;
    $44 = ((($43)) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(91);
    if ($47) {
     $48 = $6;
     $49 = (($48) + -1)|0;
     $6 = $49;
     break;
    }
    $50 = $2;
    $51 = ((($50)) + 28|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(123);
    if ($54) {
     $55 = $7;
     $56 = (($55) + -1)|0;
     $7 = $56;
    }
   }
  } while(0);
  $57 = $2;
  (_parser_match($57)|0);
 }
 $58 = $6;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $3;
  $61 = $2;
  $62 = ((($61)) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  _seterror_with_token($60,$63,4814,$vararg_buffer);
  $64 = $3;
  $65 = ((($64)) + 200|0);
  HEAP32[$65>>2] = 1;
 }
 $66 = $7;
 $67 = ($66|0)!=(0);
 if (!($67)) {
  $74 = $4;
  STACKTOP = sp;return ($74|0);
 }
 $68 = $3;
 $69 = $2;
 $70 = ((($69)) + 28|0);
 $71 = HEAP32[$70>>2]|0;
 _seterror_with_token($68,$71,4838,$vararg_buffer1);
 $72 = $3;
 $73 = ((($72)) + 200|0);
 HEAP32[$73>>2] = 1;
 $74 = $4;
 STACKTOP = sp;return ($74|0);
}
function _storage_class_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $10 = $3;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $14 = (_calloc(1,8)|0);
 $5 = $14;
 $15 = $3;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = $3;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 switch ($23|0) {
 case 9031:  {
  $24 = $5;
  HEAP32[$24>>2] = 1;
  break;
 }
 case 9010:  {
  $25 = $5;
  HEAP32[$25>>2] = 2;
  break;
 }
 case 9028:  {
  $26 = $5;
  HEAP32[$26>>2] = 4;
  break;
 }
 case 9050:  {
  $27 = $5;
  HEAP32[$27>>2] = 8;
  break;
 }
 case 8999:  {
  $28 = $5;
  HEAP32[$28>>2] = 16;
  break;
 }
 case 9022:  {
  $29 = $5;
  HEAP32[$29>>2] = 32;
  break;
 }
 default: {
  ___assert_fail((9119|0),(4929|0),1057,(5175|0));
  // unreachable;
 }
 }
 $30 = $3;
 (_parser_match($30)|0);
 $31 = $5;
 $2 = $31;
 $32 = $2;
 STACKTOP = sp;return ($32|0);
}
function _type_specifier_qualifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,16)|0);
 $4 = $5;
 $6 = $2;
 $7 = (_first_of_type_specifier($6)|0);
 $8 = $2;
 if ($7) {
  $9 = $3;
  $10 = (_type_specifier($8,$9)|0);
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 $12 = (_first_of_type_qualifier($8)|0);
 $13 = $2;
 if ($12) {
  $14 = $3;
  $15 = (_type_qualifier($13,$14)|0);
  $16 = $4;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 $18 = (_first_of_alignment_specifier($13)|0);
 if (!($18)) {
  ___assert_fail((9119|0),(4929|0),1659,(4938|0));
  // unreachable;
 }
 $19 = $2;
 $20 = $3;
 $21 = (_alignment_specifier($19,$20)|0);
 $22 = $4;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _function_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 } else {
  $10 = (_calloc(1,4)|0);
  $5 = $10;
  $11 = $3;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $5;
  HEAP32[$14>>2] = $13;
  $15 = $3;
  (_parser_match($15)|0);
  $16 = $5;
  $2 = $16;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _type_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = (_calloc(1,24)|0);
 $5 = $7;
 $8 = $3;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 do {
  switch ($11|0) {
  case 9051:  {
   $12 = $5;
   HEAP32[$12>>2] = 8388608;
   $13 = $3;
   (_parser_match($13)|0);
   $14 = $3;
   $15 = $4;
   _parser_match_tk($14,40,$15);
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;
   $16 = $3;
   $17 = $4;
   $18 = (_expression($16,$17,$6)|0);
   $19 = $5;
   $20 = ((($19)) + 20|0);
   HEAP32[$20>>2] = $18;
   $21 = $3;
   $22 = $4;
   _parser_match_tk($21,41,$22);
   $23 = $5;
   $2 = $23;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9034:  {
   $24 = $3;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $5;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = $26;
   $29 = $5;
   HEAP32[$29>>2] = 1;
   $30 = $3;
   (_parser_match($30)|0);
   $31 = $5;
   $2 = $31;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9002:  {
   $32 = $3;
   $33 = ((($32)) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $5;
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = $34;
   $37 = $5;
   HEAP32[$37>>2] = 2;
   $38 = $3;
   (_parser_match($38)|0);
   $39 = $5;
   $2 = $39;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9025:  {
   $40 = $3;
   $41 = ((($40)) + 28|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $5;
   $44 = ((($43)) + 4|0);
   HEAP32[$44>>2] = $42;
   $45 = $5;
   HEAP32[$45>>2] = 4;
   $46 = $3;
   $47 = ((($46)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = ((($49)) + 4|0);
   HEAP32[$50>>2] = $48;
   $51 = $3;
   (_parser_match($51)|0);
   $52 = $5;
   $2 = $52;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9016:  {
   $53 = $3;
   $54 = ((($53)) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $5;
   $57 = ((($56)) + 4|0);
   HEAP32[$57>>2] = $55;
   $58 = $5;
   HEAP32[$58>>2] = 8;
   $59 = $3;
   $60 = ((($59)) + 28|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $5;
   $63 = ((($62)) + 4|0);
   HEAP32[$63>>2] = $61;
   $64 = $3;
   (_parser_match($64)|0);
   $65 = $5;
   $2 = $65;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9018:  {
   $66 = $3;
   $67 = ((($66)) + 28|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $5;
   $70 = ((($69)) + 4|0);
   HEAP32[$70>>2] = $68;
   $71 = $5;
   HEAP32[$71>>2] = 262144;
   $72 = $3;
   $73 = ((($72)) + 28|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $5;
   $76 = ((($75)) + 4|0);
   HEAP32[$76>>2] = $74;
   $77 = $3;
   (_parser_match($77)|0);
   $78 = $5;
   $2 = $78;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9019:  {
   $79 = $3;
   $80 = ((($79)) + 28|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $5;
   $83 = ((($82)) + 4|0);
   HEAP32[$83>>2] = $81;
   $84 = $5;
   HEAP32[$84>>2] = 524288;
   $85 = $3;
   $86 = ((($85)) + 28|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $5;
   $89 = ((($88)) + 4|0);
   HEAP32[$89>>2] = $87;
   $90 = $3;
   (_parser_match($90)|0);
   $91 = $5;
   $2 = $91;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9020:  {
   $92 = $3;
   $93 = ((($92)) + 28|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $5;
   $96 = ((($95)) + 4|0);
   HEAP32[$96>>2] = $94;
   $97 = $5;
   HEAP32[$97>>2] = 1048576;
   $98 = $3;
   $99 = ((($98)) + 28|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $5;
   $102 = ((($101)) + 4|0);
   HEAP32[$102>>2] = $100;
   $103 = $3;
   (_parser_match($103)|0);
   $104 = $5;
   $2 = $104;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9021:  {
   $105 = $3;
   $106 = ((($105)) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $5;
   $109 = ((($108)) + 4|0);
   HEAP32[$109>>2] = $107;
   $110 = $5;
   HEAP32[$110>>2] = 2097152;
   $111 = $3;
   $112 = ((($111)) + 28|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $5;
   $115 = ((($114)) + 4|0);
   HEAP32[$115>>2] = $113;
   $116 = $3;
   (_parser_match($116)|0);
   $117 = $5;
   $2 = $117;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9017:  {
   $118 = $3;
   $119 = ((($118)) + 28|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $5;
   $122 = ((($121)) + 4|0);
   HEAP32[$122>>2] = $120;
   $123 = $5;
   HEAP32[$123>>2] = 16;
   $124 = $3;
   $125 = ((($124)) + 28|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $5;
   $128 = ((($127)) + 4|0);
   HEAP32[$128>>2] = $126;
   $129 = $3;
   (_parser_match($129)|0);
   $130 = $5;
   $2 = $130;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9011:  {
   $131 = $3;
   $132 = ((($131)) + 28|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $5;
   $135 = ((($134)) + 4|0);
   HEAP32[$135>>2] = $133;
   $136 = $5;
   HEAP32[$136>>2] = 32;
   $137 = $3;
   $138 = ((($137)) + 28|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $5;
   $141 = ((($140)) + 4|0);
   HEAP32[$141>>2] = $139;
   $142 = $3;
   (_parser_match($142)|0);
   $143 = $5;
   $2 = $143;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9007:  {
   $144 = $3;
   $145 = ((($144)) + 28|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $5;
   $148 = ((($147)) + 4|0);
   HEAP32[$148>>2] = $146;
   $149 = $5;
   HEAP32[$149>>2] = 64;
   $150 = $3;
   $151 = ((($150)) + 28|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $5;
   $154 = ((($153)) + 4|0);
   HEAP32[$154>>2] = $152;
   $155 = $3;
   (_parser_match($155)|0);
   $156 = $5;
   $2 = $156;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9026:  {
   $157 = $3;
   $158 = ((($157)) + 28|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $5;
   $161 = ((($160)) + 4|0);
   HEAP32[$161>>2] = $159;
   $162 = $5;
   HEAP32[$162>>2] = 128;
   $163 = $3;
   $164 = ((($163)) + 28|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $5;
   $167 = ((($166)) + 4|0);
   HEAP32[$167>>2] = $165;
   $168 = $3;
   (_parser_match($168)|0);
   $169 = $5;
   $2 = $169;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9033:  {
   $170 = $5;
   HEAP32[$170>>2] = 256;
   $171 = $3;
   $172 = ((($171)) + 28|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $5;
   $175 = ((($174)) + 4|0);
   HEAP32[$175>>2] = $173;
   $176 = $3;
   (_parser_match($176)|0);
   $177 = $5;
   $2 = $177;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9041:  {
   $178 = $3;
   $179 = ((($178)) + 28|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $5;
   $182 = ((($181)) + 4|0);
   HEAP32[$182>>2] = $180;
   $183 = $5;
   HEAP32[$183>>2] = 512;
   $184 = $3;
   $185 = ((($184)) + 28|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $5;
   $188 = ((($187)) + 4|0);
   HEAP32[$188>>2] = $186;
   $189 = $3;
   (_parser_match($189)|0);
   $190 = $5;
   $2 = $190;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9042:  {
   $191 = $3;
   $192 = ((($191)) + 28|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $5;
   $195 = ((($194)) + 4|0);
   HEAP32[$195>>2] = $193;
   $196 = $5;
   HEAP32[$196>>2] = 1024;
   $197 = $3;
   $198 = ((($197)) + 28|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $5;
   $201 = ((($200)) + 4|0);
   HEAP32[$201>>2] = $199;
   $202 = $3;
   (_parser_match($202)|0);
   $203 = $5;
   $2 = $203;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9044:  {
   $204 = $3;
   $205 = ((($204)) + 28|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = $5;
   $208 = ((($207)) + 4|0);
   HEAP32[$208>>2] = $206;
   $209 = $5;
   HEAP32[$209>>2] = 2048;
   $210 = $3;
   $211 = ((($210)) + 28|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $5;
   $214 = ((($213)) + 4|0);
   HEAP32[$214>>2] = $212;
   $215 = $3;
   (_parser_match($215)|0);
   $216 = $5;
   $2 = $216;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9045:  {
   $217 = $5;
   HEAP32[$217>>2] = 4096;
   $218 = $3;
   $219 = ((($218)) + 28|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $5;
   $222 = ((($221)) + 4|0);
   HEAP32[$222>>2] = $220;
   $223 = $3;
   (_parser_match($223)|0);
   $224 = $5;
   $2 = $224;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  case 9043:  {
   $225 = $5;
   HEAP32[$225>>2] = 8192;
   $226 = $3;
   $227 = ((($226)) + 28|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $5;
   $230 = ((($229)) + 4|0);
   HEAP32[$230>>2] = $228;
   $231 = $3;
   (_parser_match($231)|0);
   $232 = $5;
   $2 = $232;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
   break;
  }
  default: {
   $233 = $3;
   $234 = (_first_of_atomic_type_specifier($233)|0);
   do {
    if ($234) {
     $235 = $5;
     HEAP32[$235>>2] = 16384;
     $236 = $3;
     $237 = $4;
     $238 = (_atomic_type_specifier($236,$237)|0);
     $239 = $5;
     $240 = ((($239)) + 16|0);
     HEAP32[$240>>2] = $238;
    } else {
     $241 = $3;
     $242 = (_first_of_struct_or_union($241)|0);
     if ($242) {
      $243 = $5;
      HEAP32[$243>>2] = 32768;
      $244 = $3;
      $245 = $4;
      $246 = (_struct_or_union_specifier($244,$245)|0);
      $247 = $5;
      $248 = ((($247)) + 8|0);
      HEAP32[$248>>2] = $246;
      break;
     }
     $249 = $3;
     $250 = (_first_of_enum_specifier($249)|0);
     if ($250) {
      $251 = $5;
      HEAP32[$251>>2] = 65536;
      $252 = $3;
      $253 = $4;
      $254 = (_enum_specifier($252,$253)|0);
      $255 = $5;
      $256 = ((($255)) + 12|0);
      HEAP32[$256>>2] = $254;
      break;
     }
     $257 = $3;
     $258 = ((($257)) + 28|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)==(8996);
     if ($261) {
      $262 = $5;
      HEAP32[$262>>2] = 131072;
      $263 = $3;
      $264 = ((($263)) + 28|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ((($265)) + 24|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = $267 & 16;
      $269 = ($268|0)!=(0);
      if ($269) {
       $270 = $3;
       $271 = ((($270)) + 28|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = $5;
       $274 = ((($273)) + 4|0);
       HEAP32[$274>>2] = $272;
       $275 = $3;
       (_parser_match($275)|0);
       break;
      } else {
       ___assert_fail((5005|0),(4929|0),1255,(5043|0));
       // unreachable;
      }
     }
    }
   } while(0);
   $276 = $5;
   $2 = $276;
   $277 = $2;
   STACKTOP = sp;return ($277|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _type_qualifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ((($6)) + 200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $10 = (_calloc(1,12)|0);
 $5 = $10;
 $11 = $3;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - 9003)|0;
 $16 = $15 >>> 2;
 $17 = $15 << 30;
 $18 = $16 | $17;
 switch ($18|0) {
 case 0:  {
  $19 = $5;
  HEAP32[$19>>2] = 1;
  break;
 }
 case 5:  {
  $20 = $5;
  HEAP32[$20>>2] = 2;
  break;
 }
 case 8:  {
  $21 = $5;
  HEAP32[$21>>2] = 4;
  break;
 }
 case 9:  {
  $22 = $5;
  HEAP32[$22>>2] = 8;
  break;
 }
 default: {
 }
 }
 $23 = $3;
 (_parser_match($23)|0);
 $24 = $5;
 $2 = $24;
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _alignment_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,4)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = $3;
 _parser_match_tk($11,9037,$12);
 $13 = $2;
 $14 = $3;
 _parser_match_tk($13,40,$14);
 $15 = $2;
 $16 = (_first_of_type_name($15)|0);
 if ($16) {
  $17 = $2;
  $18 = $3;
  (_type_name($17,$18)|0);
  $21 = $2;
  $22 = $3;
  _parser_match_tk($21,41,$22);
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 } else {
  ;HEAP32[$5>>2]=HEAP32[1056>>2]|0;HEAP32[$5+4>>2]=HEAP32[1056+4>>2]|0;
  $19 = $2;
  $20 = $3;
  (_constant_expression($19,$20,$5)|0);
  $21 = $2;
  $22 = $3;
  _parser_match_tk($21,41,$22);
  $23 = $4;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _type_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,16)|0);
 $4 = $5;
 $6 = $2;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = $3;
 $12 = (_specifier_qualifier_list($10,$11)|0);
 $13 = $4;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = $4;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (_declarator($15,$18,0,1,0,$19)|0);
 $21 = $4;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = $4;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $4;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 20|0);
 HEAP32[$36>>2] = $32;
 $37 = $4;
 STACKTOP = sp;return ($37|0);
}
function _specifier_qualifier_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,32)|0);
 $4 = $7;
 L1: while(1) {
  $8 = $3;
  $9 = ((($8)) + 200|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   label = 22;
   break;
  }
  $12 = $2;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 22;
   break;
  }
  $16 = $2;
  $17 = (_first_of_type_specifier($16)|0);
  if (!($17)) {
   $18 = $2;
   $19 = (_first_of_type_qualifier($18)|0);
   if (!($19)) {
    label = 22;
    break;
   }
  }
  $20 = $2;
  $21 = ((($20)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 16;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $4;
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0);
   if ($29) {
    label = 22;
    break;
   }
  }
  $30 = $2;
  $31 = $3;
  $32 = (_type_specifier_qualifier($30,$31)|0);
  $5 = $32;
  $33 = $5;
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  do {
   if ($35) {
    $36 = $2;
    $37 = $4;
    $38 = $5;
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = $3;
    $42 = (_add_specifier($36,$37,$40,$41)|0);
    $43 = ($42|0)!=(0);
    if ($43) {
     label = 22;
     break L1;
    }
    $44 = $5;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0|0);
    $49 = $5;
    $50 = HEAP32[$49>>2]|0;
    if ($48) {
     $51 = ((($50)) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $4;
     $54 = ((($53)) + 8|0);
     HEAP32[$54>>2] = $52;
     break;
    }
    $55 = ((($50)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)!=(0|0);
    $58 = $5;
    $59 = HEAP32[$58>>2]|0;
    if ($57) {
     $60 = ((($59)) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $4;
     $63 = ((($62)) + 12|0);
     HEAP32[$63>>2] = $61;
     break;
    }
    $64 = ((($59)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(8996);
    if ($67) {
     $68 = $5;
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $4;
     $75 = ((($74)) + 20|0);
     HEAP32[$75>>2] = $73;
    }
   } else {
    $76 = $5;
    $77 = ((($76)) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)!=(0|0);
    if ($79) {
     $80 = $5;
     $81 = ((($80)) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$82>>2]|0;
     $84 = $4;
     $85 = ((($84)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $86 | $83;
     HEAP32[$85>>2] = $87;
    }
   }
  } while(0);
  $88 = $5;
  $6 = $88;
  $89 = $4;
  $90 = ((($89)) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(0|0);
  $93 = $6;
  $94 = $4;
  if ($92) {
   $95 = ((($94)) + 24|0);
   HEAP32[$95>>2] = $93;
   $96 = $6;
   $97 = $4;
   $98 = ((($97)) + 28|0);
   HEAP32[$98>>2] = $96;
  } else {
   $99 = ((($94)) + 28|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 8|0);
   HEAP32[$101>>2] = $93;
   $102 = $6;
   $103 = $4;
   $104 = ((($103)) + 28|0);
   HEAP32[$104>>2] = $102;
  }
  $105 = $2;
  $106 = $3;
  (_attribute_specifier_sequence_opt($105,$106)|0);
 }
 if ((label|0) == 22) {
  $107 = $2;
  $108 = $4;
  $109 = $3;
  (_final_specifier($107,$108,$109)|0);
  $110 = $4;
  STACKTOP = sp;return ($110|0);
 }
 return (0)|0;
}
function _declarator($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $13 = $3&1;
 $9 = $13;
 $10 = $4;
 $11 = $5;
 $14 = (_calloc(1,32)|0);
 $12 = $14;
 $15 = $12;
 HEAP32[$15>>2] = 4;
 $16 = $6;
 $17 = $11;
 $18 = (_pointer_opt($16,$17)|0);
 $19 = $12;
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = $18;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $24&1;
 $26 = $10;
 $27 = $11;
 $28 = (_direct_declarator($21,$22,$23,$25,$26,$27)|0);
 $29 = $12;
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = $28;
 $31 = $12;
 STACKTOP = sp;return ($31|0);
}
function _pointer_opt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $6 = $3;
  $7 = ((($6)) + 200|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   label = 13;
   break;
  }
  $10 = $2;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 13;
   break;
  }
  $14 = $2;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(42);
  if (!($18)) {
   label = 13;
   break;
  }
  $19 = (_calloc(1,8)|0);
  $5 = $19;
  $20 = $5;
  $4 = $20;
  $21 = $2;
  (_parser_match($21)|0);
  $22 = $2;
  $23 = $3;
  (_attribute_specifier_sequence_opt($22,$23)|0);
  $24 = $2;
  $25 = (_first_of_type_qualifier($24)|0);
  if ($25) {
   $26 = $2;
   $27 = $3;
   $28 = (_type_qualifier_list($26,$27)|0);
   $29 = $5;
   HEAP32[$29>>2] = $28;
  }
  while(1) {
   $30 = $3;
   $31 = ((($30)) + 200|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    break;
   }
   $34 = $2;
   $35 = ((($34)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   if (!($37)) {
    break;
   }
   $38 = $2;
   $39 = ((($38)) + 28|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(42);
   if (!($42)) {
    break;
   }
   $43 = $2;
   $44 = $3;
   $45 = (_pointer_opt($43,$44)|0);
   $46 = $5;
   $47 = ((($46)) + 4|0);
   HEAP32[$47>>2] = $45;
  }
 }
 if ((label|0) == 13) {
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _direct_declarator($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $17 = $3&1;
 $10 = $17;
 $11 = $4;
 $12 = $5;
 $18 = (_calloc(1,16)|0);
 $13 = $18;
 $19 = $7;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $13;
  $6 = $23;
  $121 = $6;
  STACKTOP = sp;return ($121|0);
 }
 $24 = $7;
 $25 = (_parser_look_ahead($24)|0);
 $14 = $25;
 $26 = $7;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(8996);
 $31 = $7;
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 do {
  if ($30) {
   $34 = $13;
   HEAP32[$34>>2] = $33;
   $35 = $11;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $7;
    $38 = ((($37)) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $11;
    HEAP32[$40>>2] = $39;
    $41 = $7;
    (_parser_match($41)|0);
    $42 = $7;
    $43 = $12;
    (_attribute_specifier_sequence_opt($42,$43)|0);
    label = 11;
    break;
   } else {
    $44 = $12;
    (_seterror($44,4963,$vararg_buffer)|0);
    break;
   }
  } else {
   $45 = HEAP32[$33>>2]|0;
   $46 = ($45|0)==(40);
   if ($46) {
    $47 = $7;
    $48 = $14;
    $49 = (_first_of_type_specifier_token($47,$48)|0);
    if ($49) {
     label = 11;
    } else {
     $50 = $14;
     $51 = (_first_of_type_qualifier_token($50)|0);
     if ($51) {
      label = 11;
     } else {
      $52 = $7;
      (_parser_match($52)|0);
      $53 = $7;
      $54 = $8;
      $55 = $9;
      $56 = $10;
      $57 = $56&1;
      $58 = $11;
      $59 = $12;
      $60 = (_declarator($53,$54,$55,$57,$58,$59)|0);
      $61 = $13;
      $62 = ((($61)) + 4|0);
      HEAP32[$62>>2] = $60;
      $63 = $7;
      (_parser_match($63)|0);
      label = 11;
     }
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 L14: do {
  if ((label|0) == 11) {
   while(1) {
    $64 = $12;
    $65 = ((($64)) + 200|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0);
    if (!($67)) {
     break L14;
    }
    $68 = $7;
    $69 = ((($68)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)!=(0|0);
    if (!($71)) {
     break L14;
    }
    $72 = $7;
    $73 = ((($72)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(91);
    if (!($76)) {
     $77 = $7;
     $78 = ((($77)) + 28|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(40);
     if (!($81)) {
      break L14;
     }
    }
    $82 = (_calloc(1,12)|0);
    $15 = $82;
    $83 = $15;
    $16 = $83;
    $84 = $13;
    $85 = ((($84)) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==(0|0);
    $88 = $16;
    $89 = $13;
    $90 = ((($89)) + 8|0);
    if ($87) {
     HEAP32[$90>>2] = $88;
     $91 = $16;
     $92 = $13;
     $93 = ((($92)) + 8|0);
     $94 = ((($93)) + 4|0);
     HEAP32[$94>>2] = $91;
    } else {
     $95 = ((($90)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($96)) + 8|0);
     HEAP32[$97>>2] = $88;
     $98 = $16;
     $99 = $13;
     $100 = ((($99)) + 8|0);
     $101 = ((($100)) + 4|0);
     HEAP32[$101>>2] = $98;
    }
    $102 = $7;
    $103 = ((($102)) + 28|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)==(91);
    $107 = $7;
    if ($106) {
     $108 = $12;
     $109 = (_array_declarator($107,$108)|0);
     $110 = $15;
     HEAP32[$110>>2] = $109;
    } else {
     $111 = ((($107)) + 28|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)==(40);
     if ($114) {
      $115 = $7;
      $116 = $12;
      $117 = (_function_declarator($115,$116)|0);
      $118 = $15;
      $119 = ((($118)) + 4|0);
      HEAP32[$119>>2] = $117;
     }
    }
   }
  }
 } while(0);
 $120 = $13;
 $6 = $120;
 $121 = $6;
 STACKTOP = sp;return ($121|0);
}
function _array_declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $3;
 $9 = ((($8)) + 200|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 L1: do {
  if (!($11)) {
   $12 = (_calloc(1,20)|0);
   $4 = $12;
   $13 = $4;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    $15 = $2;
    $16 = $3;
    _parser_match_tk($15,91,$16);
    $17 = $3;
    $18 = ((($17)) + 200|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0);
    if (!($20)) {
     $5 = 0;
     $21 = $2;
     $22 = ((($21)) + 28|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(9028);
     if ($25) {
      $26 = $2;
      (_parser_match($26)|0);
      $5 = 1;
     }
     $27 = $2;
     $28 = (_first_of_type_qualifier($27)|0);
     if ($28) {
      $29 = $2;
      $30 = $3;
      $31 = (_type_qualifier_list($29,$30)|0);
      $32 = $4;
      $33 = ((($32)) + 8|0);
      HEAP32[$33>>2] = $31;
     }
     $34 = $5;
     $35 = $34&1;
     if (!($35)) {
      $36 = $2;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(9028);
      if ($40) {
       $41 = $2;
       (_parser_match($41)|0);
       $5 = 1;
      }
     }
     $42 = $5;
     $43 = $42&1;
     do {
      if ($43) {
       ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;
       $44 = $2;
       $45 = $3;
       $46 = (_assignment_expression($44,$45,$6)|0);
       $47 = $4;
       HEAP32[$47>>2] = $46;
       $48 = $3;
       $49 = ((($48)) + 200|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)!=(0);
       if ($51) {
        break L1;
       }
       $52 = $4;
       $53 = HEAP32[$52>>2]|0;
       $54 = ((($53)) + 224|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = $4;
       $57 = ((($56)) + 12|0);
       HEAP32[$57>>2] = $55;
      } else {
       $58 = $2;
       $59 = ((($58)) + 28|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(42);
       $63 = $2;
       if ($62) {
        (_parser_match($63)|0);
        break;
       }
       $64 = ((($63)) + 28|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = HEAP32[$65>>2]|0;
       $67 = ($66|0)!=(93);
       if ($67) {
        ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
        $68 = $2;
        $69 = $3;
        $70 = (_assignment_expression($68,$69,$7)|0);
        $71 = $4;
        HEAP32[$71>>2] = $70;
        $72 = $3;
        $73 = ((($72)) + 200|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = ($74|0)!=(0);
        if ($75) {
         break L1;
        }
        $76 = $4;
        $77 = HEAP32[$76>>2]|0;
        $78 = ((($77)) + 224|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = $4;
        $81 = ((($80)) + 12|0);
        HEAP32[$81>>2] = $79;
       }
      }
     } while(0);
     $82 = $2;
     $83 = $3;
     _parser_match_tk($82,93,$83);
     $84 = $3;
     $85 = ((($84)) + 200|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)!=(0);
     if (!($87)) {
      $88 = $4;
      STACKTOP = sp;return ($88|0);
     }
    }
   }
  }
 } while(0);
 $88 = $4;
 STACKTOP = sp;return ($88|0);
}
function _function_declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,44)|0);
 $4 = $5;
 $6 = $2;
 $7 = $4;
 _scope_list_push($6,$7);
 $8 = $2;
 $9 = $3;
 _parser_match_tk($8,40,$9);
 $10 = $3;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(41);
  if ($18) {
   $19 = $2;
   $20 = $3;
   $21 = (_parameter_type_list($19,$20)|0);
   $22 = $4;
   $23 = ((($22)) + 40|0);
   HEAP32[$23>>2] = $21;
  }
 }
 $24 = $2;
 $25 = $3;
 _parser_match_tk($24,41,$25);
 $26 = $2;
 _scope_list_pop($26);
 $27 = $4;
 STACKTOP = sp;return ($27|0);
}
function _parameter_type_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,4)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 $8 = (_parameter_list($6,$7)|0);
 $9 = $4;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(3026478);
 if (!($14)) {
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 $15 = $2;
 (_parser_match($15)|0);
 $16 = $4;
 STACKTOP = sp;return ($16|0);
}
function _parameter_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,8)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = (_parameter_declaration($8,$9)|0);
 $5 = $10;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = $4;
 if ($13) {
  HEAP32[$15>>2] = $14;
  $16 = $5;
  $17 = $4;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
 } else {
  $19 = ((($15)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  HEAP32[$21>>2] = $14;
  $22 = $5;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
 }
 while(1) {
  $25 = $3;
  $26 = ((($25)) + 200|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   label = 14;
   break;
  }
  $29 = $2;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   label = 14;
   break;
  }
  $33 = $2;
  $34 = ((($33)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(44);
  if (!($37)) {
   label = 14;
   break;
  }
  $38 = $2;
  (_parser_match($38)|0);
  $39 = $2;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(3026478);
  if ($43) {
   label = 14;
   break;
  }
  $44 = $2;
  $45 = $3;
  $46 = (_parameter_declaration($44,$45)|0);
  $6 = $46;
  $47 = $4;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  $50 = $6;
  $51 = $4;
  if ($49) {
   HEAP32[$51>>2] = $50;
   $52 = $6;
   $53 = $4;
   $54 = ((($53)) + 4|0);
   HEAP32[$54>>2] = $52;
  } else {
   $55 = ((($51)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 12|0);
   HEAP32[$57>>2] = $50;
   $58 = $6;
   $59 = $4;
   $60 = ((($59)) + 4|0);
   HEAP32[$60>>2] = $58;
  }
  $61 = $3;
  $62 = ((($61)) + 200|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0);
  if ($64) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _parameter_declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,16)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 (_attribute_specifier_sequence_opt($6,$7)|0);
 $8 = $2;
 $9 = $3;
 $10 = (_declaration_specifiers($8,$9)|0);
 $11 = $4;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = $4;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = $3;
 $19 = (_declarator($13,0,$16,1,$17,$18)|0);
 $20 = $4;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $4;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $4;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 16|0);
 HEAP32[$28>>2] = $24;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  $43 = $4;
  STACKTOP = sp;return ($43|0);
 }
 $32 = $2;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 16|0);
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 (_hashmap_set($35,$39,$42)|0);
 $43 = $4;
 STACKTOP = sp;return ($43|0);
}
function _type_qualifier_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = (_calloc(1,12)|0);
 $4 = $8;
 $9 = $2;
 $10 = $3;
 $11 = (_type_qualifier($9,$10)|0);
 $5 = $11;
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 | $13;
 HEAP32[$14>>2] = $16;
 $17 = $5;
 $6 = $17;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 $22 = $6;
 $23 = $4;
 if ($21) {
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $6;
  $26 = $4;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
 } else {
  $28 = ((($23)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  HEAP32[$30>>2] = $22;
  $31 = $6;
  $32 = $4;
  $33 = ((($32)) + 8|0);
  HEAP32[$33>>2] = $31;
 }
 $5 = 0;
 while(1) {
  $34 = $3;
  $35 = ((($34)) + 200|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if (!($37)) {
   label = 12;
   break;
  }
  $38 = $2;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   label = 12;
   break;
  }
  $42 = $2;
  $43 = (_first_of_type_qualifier($42)|0);
  if (!($43)) {
   label = 12;
   break;
  }
  $44 = $2;
  $45 = $3;
  $46 = (_type_qualifier($44,$45)|0);
  $5 = $46;
  $47 = $5;
  $48 = HEAP32[$47>>2]|0;
  $49 = $4;
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 | $48;
  HEAP32[$49>>2] = $51;
  $52 = $5;
  $7 = $52;
  $53 = $4;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  $57 = $7;
  $58 = $4;
  if ($56) {
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = $57;
   $60 = $7;
   $61 = $4;
   $62 = ((($61)) + 8|0);
   HEAP32[$62>>2] = $60;
  } else {
   $63 = ((($58)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 8|0);
   HEAP32[$65>>2] = $57;
   $66 = $7;
   $67 = $4;
   $68 = ((($67)) + 8|0);
   HEAP32[$68>>2] = $66;
  }
 }
 if ((label|0) == 12) {
  $69 = $4;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _atomic_type_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,4)|0);
 $4 = $5;
 $6 = $2;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = $3;
 _parser_match_tk($10,9039,$11);
 $12 = $2;
 $13 = $3;
 _parser_match_tk($12,40,$13);
 $14 = $2;
 $15 = $3;
 (_type_name($14,$15)|0);
 $16 = $2;
 $17 = $3;
 _parser_match_tk($16,41,$17);
 $18 = $4;
 STACKTOP = sp;return ($18|0);
}
function _struct_or_union_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 while(1) {
  $12 = $4;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 28|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&1;
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $4 = $20;
 }
 $21 = (_calloc(1,220)|0);
 $5 = $21;
 $22 = $5;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = 2;
 $24 = $2;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(9029);
 if (!($28)) {
  $29 = $2;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(9032);
  if (!($33)) {
   ___assert_fail((9119|0),(4929|0),1286,(5080|0));
   // unreachable;
  }
 }
 $34 = $2;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $5;
 $38 = ((($37)) + 16|0);
 HEAP32[$38>>2] = $36;
 $39 = $2;
 (_parser_match($39)|0);
 $40 = $2;
 $41 = $3;
 (_attribute_specifier_sequence_opt($40,$41)|0);
 $6 = 0;
 $42 = $2;
 $43 = ((($42)) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(8996);
 if ($46) {
  $47 = $5;
  $48 = ((($47)) + 20|0);
  $49 = $5;
  $50 = ((($49)) + 20|0);
  $51 = $50;
  $52 = $2;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$vararg_buffer>>2] = $56;
  (_snprintf($48,$51,5531,$vararg_buffer)|0);
  $57 = $2;
  $58 = $2;
  $59 = ((($58)) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (_find_struct_or_union_specifier($57,$62)|0);
  $6 = $63;
  $64 = $6;
  $65 = ($64|0)!=(0|0);
  if (!($65)) {
   $66 = $4;
   $67 = ((($66)) + 4|0);
   $68 = $2;
   $69 = ((($68)) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $5;
   $74 = ((($73)) + 8|0);
   (_hashmap_set($67,$72,$74)|0);
  }
  $75 = $2;
  (_parser_match($75)|0);
 } else {
  $76 = HEAP32[2621]|0;
  $77 = (($76) + 1)|0;
  HEAP32[2621] = $77;
  $78 = $5;
  $79 = ((($78)) + 20|0);
  $80 = $5;
  $81 = ((($80)) + 20|0);
  $82 = $81;
  $83 = HEAP32[2621]|0;
  HEAP32[$vararg_buffer1>>2] = $83;
  (_snprintf($79,$82,5106,$vararg_buffer1)|0);
  $84 = $4;
  $85 = ((($84)) + 4|0);
  $86 = $5;
  $87 = ((($86)) + 20|0);
  $88 = $5;
  $89 = ((($88)) + 8|0);
  (_hashmap_set($85,$87,$89)|0);
 }
 $90 = $2;
 $91 = ((($90)) + 28|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(123);
 if ($94) {
  dest=$7; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $95 = ((($7)) + 28|0);
  HEAP8[$95>>0] = 1;
  $96 = $2;
  _scope_list_push($96,$7);
  $97 = $2;
  (_parser_match($97)|0);
  $98 = $5;
  $99 = $2;
  $100 = $3;
  _member_declaration_list($8,$99,$100);
  ;HEAP32[$98>>2]=HEAP32[$8>>2]|0;HEAP32[$98+4>>2]=HEAP32[$8+4>>2]|0;
  $101 = $2;
  $102 = $3;
  _parser_match_tk($101,125,$102);
  $103 = $2;
  _scope_list_pop($103);
 }
 $104 = $6;
 $105 = ($104|0)!=(0|0);
 if (!($105)) {
  $118 = $5;
  STACKTOP = sp;return ($118|0);
 }
 $106 = $6;
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0|0);
 if (!($108)) {
  $118 = $5;
  STACKTOP = sp;return ($118|0);
 }
 $109 = $5;
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0|0);
 if (!($111)) {
  $118 = $5;
  STACKTOP = sp;return ($118|0);
 }
 $112 = $4;
 $113 = ((($112)) + 4|0);
 $114 = $5;
 $115 = ((($114)) + 20|0);
 $116 = $5;
 $117 = ((($116)) + 8|0);
 (_hashmap_set($113,$115,$117)|0);
 $118 = $5;
 STACKTOP = sp;return ($118|0);
}
function _enum_specifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,16)|0);
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 1;
 $9 = $2;
 $10 = $3;
 _parser_match_tk($9,9009,$10);
 $11 = $2;
 $12 = $3;
 (_attribute_specifier_sequence_opt($11,$12)|0);
 $5 = 0;
 $13 = $2;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(8996);
 if ($17) {
  $18 = $2;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = $2;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $4;
  $28 = ((($27)) + 4|0);
  (_hashmap_set($21,$26,$28)|0);
  $5 = 1;
  $29 = $2;
  (_parser_match($29)|0);
 }
 $30 = $2;
 $31 = ((($30)) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(123);
 if ($34) {
  $35 = $2;
  $36 = $3;
  _parser_match_tk($35,123,$36);
  $37 = $2;
  $38 = $3;
  $39 = (_enumerator_list($37,$38)|0);
  $40 = $4;
  HEAP32[$40>>2] = $39;
  $41 = $2;
  $42 = ((($41)) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(44);
  if ($45) {
   $46 = $2;
   (_parser_match($46)|0);
  }
  $47 = $2;
  $48 = $3;
  _parser_match_tk($47,125,$48);
  $57 = $4;
  STACKTOP = sp;return ($57|0);
 } else {
  $49 = $5;
  $50 = $49&1;
  if ($50) {
   $57 = $4;
   STACKTOP = sp;return ($57|0);
  }
  $51 = $3;
  $52 = $2;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  _seterror_with_token($51,$54,5058,$vararg_buffer);
  $55 = $3;
  $56 = ((($55)) + 200|0);
  HEAP32[$56>>2] = 1;
  $57 = $4;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _enumerator_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,8)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = (_enumerator($8,$9)|0);
 $5 = $10;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = $4;
 if ($13) {
  HEAP32[$15>>2] = $14;
  $16 = $5;
  $17 = $4;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
 } else {
  $19 = ((($15)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 16|0);
  HEAP32[$21>>2] = $14;
  $22 = $5;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
 }
 while(1) {
  $25 = $3;
  $26 = ((($25)) + 200|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   label = 13;
   break;
  }
  $29 = $2;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   label = 13;
   break;
  }
  $33 = $2;
  $34 = ((($33)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(44);
  if (!($37)) {
   label = 13;
   break;
  }
  $38 = $2;
  (_parser_match($38)|0);
  $39 = $2;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(125);
  do {
   if ($43) {
    $44 = $2;
    $45 = $3;
    $46 = (_enumerator($44,$45)|0);
    $6 = $46;
    $47 = $4;
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0|0);
    $50 = $6;
    $51 = $4;
    if ($49) {
     HEAP32[$51>>2] = $50;
     $52 = $6;
     $53 = $4;
     $54 = ((($53)) + 4|0);
     HEAP32[$54>>2] = $52;
     break;
    } else {
     $55 = ((($51)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 16|0);
     HEAP32[$57>>2] = $50;
     $58 = $6;
     $59 = $4;
     $60 = ((($59)) + 4|0);
     HEAP32[$60>>2] = $58;
     break;
    }
   }
  } while(0);
 }
 if ((label|0) == 13) {
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _enumerator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,24)|0);
 $4 = $7;
 $8 = $4;
 HEAP32[$8>>2] = 3;
 $9 = $2;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $5 = $11;
 $12 = $2;
 $13 = $3;
 _parser_match_tk($12,8996,$13);
 $14 = $2;
 $15 = $3;
 (_attribute_specifier_sequence_opt($14,$15)|0);
 $16 = $5;
 $17 = $4;
 $18 = ((($17)) + 8|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = $4;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 (_hashmap_set($22,$27,$28)|0);
 $29 = $2;
 $30 = ((($29)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(61);
 if (!($33)) {
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $34 = $2;
 (_parser_match($34)|0);
 ;HEAP32[$6>>2]=HEAP32[1056>>2]|0;HEAP32[$6+4>>2]=HEAP32[1056+4>>2]|0;
 $35 = $2;
 $36 = $3;
 $37 = (_constant_expression($35,$36,$6)|0);
 $38 = $4;
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = $37;
 $40 = $4;
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 224|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $4;
 $46 = ((($45)) + 20|0);
 HEAP32[$46>>2] = $44;
 $47 = $4;
 STACKTOP = sp;return ($47|0);
}
function _member_declaration_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 $8 = $3;
 $9 = $4;
 $10 = (_member_declaration($8,$9)|0);
 $6 = $10;
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0|0);
 $13 = $6;
 if ($12) {
  HEAP32[$5>>2] = $13;
  $14 = $6;
  $15 = ((($5)) + 4|0);
  HEAP32[$15>>2] = $14;
 } else {
  $16 = ((($5)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = $13;
  $19 = $6;
  $20 = ((($5)) + 4|0);
  HEAP32[$20>>2] = $19;
 }
 while(1) {
  $21 = $4;
  $22 = ((($21)) + 200|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if (!($24)) {
   label = 11;
   break;
  }
  $25 = $3;
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(125);
  if (!($29)) {
   label = 11;
   break;
  }
  $30 = $3;
  $31 = $4;
  $32 = (_member_declaration($30,$31)|0);
  $7 = $32;
  $33 = HEAP32[$5>>2]|0;
  $34 = ($33|0)==(0|0);
  $35 = $7;
  if ($34) {
   HEAP32[$5>>2] = $35;
   $36 = $7;
   $37 = ((($5)) + 4|0);
   HEAP32[$37>>2] = $36;
  } else {
   $38 = ((($5)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 8|0);
   HEAP32[$40>>2] = $35;
   $41 = $7;
   $42 = ((($5)) + 4|0);
   HEAP32[$42>>2] = $41;
  }
 }
 if ((label|0) == 11) {
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _member_declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,12)|0);
 $4 = $5;
 $6 = $2;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(9049);
 $11 = $2;
 $12 = $3;
 if ($10) {
  (_static_assert_declaration($11,$12)|0);
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 }
 (_attribute_specifier_sequence_opt($11,$12)|0);
 $13 = $2;
 $14 = $3;
 $15 = (_specifier_qualifier_list($13,$14)|0);
 $16 = $4;
 HEAP32[$16>>2] = $15;
 $17 = $2;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(59);
 if ($21) {
  $22 = $2;
  $23 = $4;
  $24 = HEAP32[$23>>2]|0;
  $25 = $3;
  $26 = (_member_declarator_list($22,$24,$25)|0);
  $27 = $4;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = $26;
 }
 $29 = $2;
 $30 = $3;
 _parser_match_tk($29,59,$30);
 $31 = $4;
 STACKTOP = sp;return ($31|0);
}
function _static_assert_declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,16)|0);
 $4 = $7;
 $8 = $2;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = $2;
 $16 = $3;
 _parser_match_tk($15,9049,$16);
 $17 = $2;
 $18 = $3;
 _parser_match_tk($17,40,$18);
 ;HEAP32[$6>>2]=HEAP32[1056>>2]|0;HEAP32[$6+4>>2]=HEAP32[1056+4>>2]|0;
 $19 = $2;
 $20 = $3;
 $21 = (_constant_expression($19,$20,$6)|0);
 $22 = $4;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = $3;
 $25 = ((($24)) + 200|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $69 = $4;
  STACKTOP = sp;return ($69|0);
 }
 $28 = $2;
 $29 = ((($28)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(44);
 if ($32) {
  $33 = $2;
  (_parser_match($33)|0);
  $34 = $2;
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $4;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $36;
  $39 = $2;
  $40 = $3;
  _parser_match_tk($39,128,$40);
 }
 $41 = $2;
 $42 = $3;
 _parser_match_tk($41,41,$42);
 $43 = $2;
 $44 = ((($43)) + 28|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = $2;
 $49 = $3;
 _parser_match_tk($48,59,$49);
 $50 = $4;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 224|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0);
 if (!($55)) {
  $69 = $4;
  STACKTOP = sp;return ($69|0);
 }
 $56 = $4;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0|0);
 $60 = $3;
 $61 = $5;
 if ($59) {
  $62 = $4;
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$vararg_buffer>>2] = $66;
  _seterror_with_token($60,$61,5127,$vararg_buffer);
 } else {
  _seterror_with_token($60,$61,5153,$vararg_buffer1);
 }
 $67 = $3;
 $68 = ((($67)) + 200|0);
 HEAP32[$68>>2] = 1;
 $69 = $4;
 STACKTOP = sp;return ($69|0);
}
function _member_declarator_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = (_calloc(1,8)|0);
 $6 = $9;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = (_member_declarator($10,$11,$12)|0);
 $7 = $13;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 $17 = $7;
 $18 = $6;
 if ($16) {
  HEAP32[$18>>2] = $17;
  $19 = $7;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
 } else {
  $22 = ((($18)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 12|0);
  HEAP32[$24>>2] = $17;
  $25 = $7;
  $26 = $6;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $25;
 }
 while(1) {
  $28 = $5;
  $29 = ((($28)) + 200|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   label = 11;
   break;
  }
  $32 = $3;
  $33 = ((($32)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(44);
  if (!($36)) {
   label = 11;
   break;
  }
  $37 = $3;
  (_parser_match($37)|0);
  $38 = $3;
  $39 = $4;
  $40 = $5;
  $41 = (_member_declarator($38,$39,$40)|0);
  $8 = $41;
  $42 = $6;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  $45 = $8;
  $46 = $6;
  if ($44) {
   HEAP32[$46>>2] = $45;
   $47 = $8;
   $48 = $6;
   $49 = ((($48)) + 4|0);
   HEAP32[$49>>2] = $47;
  } else {
   $50 = ((($46)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 12|0);
   HEAP32[$52>>2] = $45;
   $53 = $8;
   $54 = $6;
   $55 = ((($54)) + 4|0);
   HEAP32[$55>>2] = $53;
  }
 }
 if ((label|0) == 11) {
  $56 = $6;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _member_declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = (_calloc(1,16)|0);
 $6 = $8;
 $9 = $3;
 $10 = $4;
 $11 = $6;
 $12 = $5;
 $13 = (_declarator($9,$10,0,0,$11,$12)|0);
 $14 = $6;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $4;
 $17 = $6;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = $16;
 $21 = $3;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(58);
 if (!($25)) {
  $32 = $6;
  STACKTOP = sp;return ($32|0);
 }
 $26 = $3;
 (_parser_match($26)|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $27 = $3;
 $28 = $5;
 $29 = (_constant_expression($27,$28,$7)|0);
 $30 = $6;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $6;
 STACKTOP = sp;return ($32|0);
}
function _declaration_core($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $10 = $1&1;
 $6 = $10;
 $7 = $2;
 $8 = $3;
 $11 = (_calloc(1,28)|0);
 $9 = $11;
 $12 = $5;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $9;
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = $14;
 $17 = $5;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(59);
 $22 = $5;
 if ($21) {
  $23 = $8;
  _parser_match_tk($22,59,$23);
  $24 = $9;
  $4 = $24;
  $78 = $4;
  STACKTOP = sp;return ($78|0);
 }
 $25 = (_first_of_static_assert_declaration($22)|0);
 $26 = $5;
 $27 = $8;
 do {
  if ($25) {
   $28 = (_static_assert_declaration($26,$27)|0);
   $29 = $9;
   HEAP32[$29>>2] = $28;
  } else {
   (_attribute_specifier_sequence_opt($26,$27)|0);
   $30 = $5;
   $31 = (_first_of_declaration_specifier($30)|0);
   if (!($31)) {
    $66 = $8;
    $67 = $5;
    $68 = ((($67)) + 28|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $5;
    $71 = ((($70)) + 28|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $74;
    _seterror_with_token($66,$69,5216,$vararg_buffer1);
    $75 = $8;
    $76 = ((($75)) + 200|0);
    HEAP32[$76>>2] = 1;
    break;
   }
   $32 = HEAP32[2622]|0;
   $33 = (($32) + 1)|0;
   HEAP32[2622] = $33;
   $34 = HEAP32[2622]|0;
   $35 = ($34|0)==(1328);
   if ($35) {
    (_printf(11088,$vararg_buffer)|0);
   }
   $36 = $5;
   $37 = $8;
   $38 = (_declaration_specifiers($36,$37)|0);
   $39 = $9;
   $40 = ((($39)) + 4|0);
   HEAP32[$40>>2] = $38;
   $41 = $5;
   $42 = ((($41)) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)!=(59);
   if ($45) {
    $46 = $5;
    $47 = $9;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $8;
    $51 = (_init_declarator_list($46,$49,$50)|0);
    $52 = $9;
    $53 = ((($52)) + 8|0);
    HEAP32[$53>>2] = $51;
   }
   $54 = $5;
   $55 = ((($54)) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $9;
   $58 = ((($57)) + 20|0);
   HEAP32[$58>>2] = $56;
   $59 = $5;
   $60 = (_first_is($59,123)|0);
   if (!($60)) {
    $64 = $5;
    $65 = $8;
    _parser_match_tk($64,59,$65);
    break;
   }
   $61 = $6;
   $62 = $61&1;
   if ($62) {
    $63 = $7;
    HEAP8[$63>>0] = 1;
    break;
   } else {
    ___assert_fail((9119|0),(4929|0),867,(5199|0));
    // unreachable;
   }
  }
 } while(0);
 $77 = $9;
 $4 = $77;
 $78 = $4;
 STACKTOP = sp;return ($78|0);
}
function _init_declarator_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = (_calloc(1,8)|0);
 $6 = $9;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = (_init_declarator($10,$11,$12)|0);
 $7 = $13;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 $17 = $7;
 $18 = $6;
 if ($16) {
  HEAP32[$18>>2] = $17;
  $19 = $7;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
 } else {
  $22 = ((($18)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = $17;
  $25 = $7;
  $26 = $6;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $25;
 }
 while(1) {
  $28 = $5;
  $29 = ((($28)) + 200|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   label = 13;
   break;
  }
  $32 = $3;
  $33 = ((($32)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if (!($35)) {
   label = 13;
   break;
  }
  $36 = $3;
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(44);
  if (!($40)) {
   label = 13;
   break;
  }
  $41 = $3;
  (_parser_match($41)|0);
  $42 = $3;
  $43 = $4;
  $44 = $5;
  $45 = (_init_declarator($42,$43,$44)|0);
  $8 = $45;
  $46 = $6;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  $49 = $8;
  $50 = $6;
  if ($48) {
   HEAP32[$50>>2] = $49;
   $51 = $8;
   $52 = $6;
   $53 = ((($52)) + 4|0);
   HEAP32[$53>>2] = $51;
  } else {
   $54 = ((($50)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 8|0);
   HEAP32[$56>>2] = $49;
   $57 = $8;
   $58 = $6;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = $57;
  }
  $60 = $5;
  $61 = ((($60)) + 200|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0);
  if ($63) {
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  $64 = $6;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _init_declarator($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = (_calloc(1,12)|0);
 $7 = $10;
 HEAP32[$8>>2] = 0;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = (_declarator($11,0,$12,0,$8,$13)|0);
 $15 = $7;
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $6;
  $19 = $4;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  _seterror_with_token($18,$21,5239,$vararg_buffer);
  $22 = $6;
  $23 = ((($22)) + 200|0);
  HEAP32[$23>>2] = 1;
  $24 = $7;
  $3 = $24;
  $68 = $3;
  STACKTOP = sp;return ($68|0);
 }
 $25 = $5;
 $26 = $7;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 16|0);
 HEAP32[$28>>2] = $25;
 $29 = HEAP32[$8>>2]|0;
 $30 = $7;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 24|0);
 HEAP32[$32>>2] = $29;
 $33 = $6;
 $34 = ((($33)) + 200|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0);
 if (!($36)) {
  $37 = $7;
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $9 = $42;
  $43 = $9;
  $44 = ($43|0)!=(0|0);
  if (!($44)) {
   ___assert_fail((9119|0),(4929|0),991,(5274|0));
   // unreachable;
  }
  $45 = $4;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = $9;
  $50 = $7;
  $51 = HEAP32[$50>>2]|0;
  (_hashmap_set($48,$49,$51)|0);
  $52 = $4;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)!=(0|0);
  if ($55) {
   $56 = $4;
   $57 = ((($56)) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(61);
   if ($60) {
    $61 = $4;
    (_parser_match($61)|0);
    $62 = $4;
    $63 = $6;
    $64 = (_initializer($62,$63)|0);
    $65 = $7;
    $66 = ((($65)) + 4|0);
    HEAP32[$66>>2] = $64;
   }
  }
 }
 $67 = $7;
 $3 = $67;
 $68 = $3;
 STACKTOP = sp;return ($68|0);
}
function _initializer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,16)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(123);
 if (!($11)) {
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
  $26 = $2;
  $27 = $3;
  $28 = (_assignment_expression($26,$27,$5)|0);
  $29 = $4;
  $30 = ((($29)) + 8|0);
  HEAP32[$30>>2] = $28;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 }
 $12 = $2;
 (_parser_match($12)|0);
 $13 = $2;
 $14 = $3;
 $15 = (_initializer_list($13,$14)|0);
 $16 = $4;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = ((($18)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(44);
 if ($22) {
  $23 = $2;
  (_parser_match($23)|0);
 }
 $24 = $2;
 $25 = $3;
 _parser_match_tk($24,125,$25);
 $31 = $4;
 STACKTOP = sp;return ($31|0);
}
function _initializer_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $11 = (_calloc(1,8)|0);
 $4 = $11;
 $5 = 0;
 $12 = $2;
 $13 = (_first_of_designator($12)|0);
 if ($13) {
  $14 = $2;
  $15 = $3;
  $16 = (_designation($14,$15)|0);
  $5 = $16;
 }
 $17 = $2;
 $18 = $3;
 $19 = (_initializer($17,$18)|0);
 $6 = $19;
 $20 = $5;
 $21 = $6;
 HEAP32[$21>>2] = $20;
 $22 = $6;
 $7 = $22;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 $26 = $7;
 $27 = $4;
 if ($25) {
  HEAP32[$27>>2] = $26;
  $28 = $7;
  $29 = $4;
  $30 = ((($29)) + 4|0);
  HEAP32[$30>>2] = $28;
 } else {
  $31 = ((($27)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = $26;
  $34 = $7;
  $35 = $4;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = $34;
 }
 while(1) {
  $37 = $3;
  $38 = ((($37)) + 200|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0);
  if (!($40)) {
   label = 17;
   break;
  }
  $41 = $2;
  $42 = ((($41)) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0|0);
  if (!($44)) {
   label = 17;
   break;
  }
  $45 = $2;
  $46 = ((($45)) + 28|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(44);
  if (!($49)) {
   label = 17;
   break;
  }
  $50 = $2;
  (_parser_match($50)|0);
  $51 = $2;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(125);
  if ($55) {
   label = 17;
   break;
  }
  $8 = 0;
  $56 = $2;
  $57 = (_first_of_designator($56)|0);
  if ($57) {
   $58 = $2;
   $59 = $3;
   $60 = (_designation($58,$59)|0);
   $8 = $60;
  }
  $61 = $2;
  $62 = $3;
  $63 = (_initializer($61,$62)|0);
  $9 = $63;
  $64 = $5;
  $65 = $9;
  HEAP32[$65>>2] = $64;
  $66 = $9;
  $10 = $66;
  $67 = $4;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0|0);
  $70 = $10;
  $71 = $4;
  if ($69) {
   HEAP32[$71>>2] = $70;
   $72 = $10;
   $73 = $4;
   $74 = ((($73)) + 4|0);
   HEAP32[$74>>2] = $72;
  } else {
   $75 = ((($71)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 12|0);
   HEAP32[$77>>2] = $70;
   $78 = $10;
   $79 = $4;
   $80 = ((($79)) + 4|0);
   HEAP32[$80>>2] = $78;
  }
 }
 if ((label|0) == 17) {
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _designation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,4)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 (_designator_list($6,$7)|0);
 $8 = $2;
 $9 = $3;
 _parser_match_tk($8,61,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _designator_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,8)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = (_designator($8,$9)|0);
 $5 = $10;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = $4;
 if ($13) {
  HEAP32[$15>>2] = $14;
  $16 = $5;
  $17 = $4;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
 } else {
  $19 = ((($15)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $14;
  $22 = $5;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
 }
 while(1) {
  $25 = $3;
  $26 = ((($25)) + 200|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   label = 12;
   break;
  }
  $29 = $2;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   label = 12;
   break;
  }
  $33 = $2;
  $34 = (_first_of_designator($33)|0);
  if (!($34)) {
   label = 12;
   break;
  }
  $35 = $2;
  $36 = $3;
  $37 = (_designator($35,$36)|0);
  $6 = $37;
  $38 = $4;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  $41 = $6;
  $42 = $4;
  if ($40) {
   HEAP32[$42>>2] = $41;
   $43 = $6;
   $44 = $4;
   $45 = ((($44)) + 4|0);
   HEAP32[$45>>2] = $43;
  } else {
   $46 = ((($42)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = $41;
   $49 = $6;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   HEAP32[$51>>2] = $49;
  }
 }
 if ((label|0) == 12) {
  $52 = $4;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _designator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,8)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(91);
 $12 = $2;
 if ($11) {
  $13 = $3;
  _parser_match_tk($12,91,$13);
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
  $14 = $2;
  $15 = $3;
  (_constant_expression($14,$15,$5)|0);
  $16 = $2;
  $17 = $3;
  _parser_match_tk($16,93,$17);
  $25 = $4;
  STACKTOP = sp;return ($25|0);
 }
 $18 = ((($12)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(46);
 if (!($21)) {
  $25 = $4;
  STACKTOP = sp;return ($25|0);
 }
 $22 = $2;
 (_parser_match($22)|0);
 $23 = $2;
 $24 = $3;
 _parser_match_tk($23,8996,$24);
 $25 = $4;
 STACKTOP = sp;return ($25|0);
}
function _function_definition_or_declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 HEAP8[$4>>0] = 0;
 $7 = $2;
 $8 = $3;
 $9 = (_declaration_core($7,1,$4,$8)|0);
 $5 = $9;
 $10 = HEAP8[$4>>0]|0;
 $11 = $10&1;
 if (!($11)) {
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 $12 = $5;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  ___assert_fail((5290|0),(4929|0),894,(5410|0));
  // unreachable;
 }
 $24 = $5;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $6 = $34;
 $35 = $2;
 $36 = $6;
 _scope_list_push($35,$36);
 $37 = $2;
 $38 = $3;
 $39 = (_function_body($37,$38)|0);
 $40 = $5;
 $41 = ((($40)) + 12|0);
 HEAP32[$41>>2] = $39;
 $42 = $2;
 _scope_list_pop($42);
 $43 = $5;
 STACKTOP = sp;return ($43|0);
}
function _function_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_compound_statement($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _compound_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,12)|0);
 $4 = $6;
 dest=$5; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = $2;
 _scope_list_push($7,$5);
 $8 = $2;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = $3;
 _parser_match_tk($12,123,$13);
 $14 = $2;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(125);
 if ($18) {
  $19 = $2;
  $20 = $3;
  $21 = (_block_item_list($19,$20)|0);
  $22 = $4;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $2;
 $25 = ((($24)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $4;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $2;
 $30 = $3;
 _parser_match_tk($29,125,$30);
 $31 = $2;
 _scope_list_pop($31);
 $32 = $4;
 STACKTOP = sp;return ($32|0);
}
function _block_item_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = (_calloc(1,8)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 $10 = (_block_item($8,$9)|0);
 $5 = $10;
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $5;
 $15 = $4;
 if ($13) {
  HEAP32[$15>>2] = $14;
  $16 = $5;
  $17 = $4;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
 } else {
  $19 = ((($15)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 16|0);
  HEAP32[$21>>2] = $14;
  $22 = $5;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
 }
 while(1) {
  $25 = $3;
  $26 = ((($25)) + 200|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   label = 12;
   break;
  }
  $29 = $2;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   label = 12;
   break;
  }
  $33 = $2;
  $34 = ((($33)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(125);
  if (!($37)) {
   label = 12;
   break;
  }
  $38 = $2;
  $39 = $3;
  $40 = (_block_item($38,$39)|0);
  $6 = $40;
  $41 = $4;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  $44 = $6;
  $45 = $4;
  if ($43) {
   HEAP32[$45>>2] = $44;
   $46 = $6;
   $47 = $4;
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = $46;
  } else {
   $49 = ((($45)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 16|0);
   HEAP32[$51>>2] = $44;
   $52 = $6;
   $53 = $4;
   $54 = ((($53)) + 4|0);
   HEAP32[$54>>2] = $52;
  }
 }
 if ((label|0) == 12) {
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _block_item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,20)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 (_attribute_specifier_sequence_opt($6,$7)|0);
 $8 = $2;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(9040);
 $13 = $2;
 if (!($12)) {
  $48 = (_first_of_declaration_specifier($13)|0);
  if (!($48)) {
   $49 = $2;
   $50 = (_first_of_static_assert_declaration($49)|0);
   if (!($50)) {
    $55 = $2;
    $56 = (_first_of_label($55)|0);
    $57 = $2;
    $58 = $3;
    if ($56) {
     $59 = (_label($57,$58)|0);
     $60 = $4;
     $61 = ((($60)) + 8|0);
     HEAP32[$61>>2] = $59;
     $65 = $4;
     STACKTOP = sp;return ($65|0);
    } else {
     $62 = (_unlabeled_statement($57,$58)|0);
     $63 = $4;
     $64 = ((($63)) + 12|0);
     HEAP32[$64>>2] = $62;
     $65 = $4;
     STACKTOP = sp;return ($65|0);
    }
   }
  }
  $51 = $2;
  $52 = $3;
  $53 = (_declaration($51,$52)|0);
  $54 = $4;
  HEAP32[$54>>2] = $53;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 (_parser_match($13)|0);
 $14 = $2;
 $15 = ((($14)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(123);
 L14: do {
  if ($18) {
   $19 = $2;
   (_parser_match($19)|0);
   while(1) {
    $20 = $3;
    $21 = ((($20)) + 200|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0);
    $24 = $2;
    if (!($23)) {
     break;
    }
    $25 = ((($24)) + 28|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(125);
    $29 = $2;
    (_parser_match($29)|0);
    if (!($28)) {
     break L14;
    }
   }
   (_parser_match($24)|0);
  } else {
   while(1) {
    $30 = $2;
    $31 = ((($30)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)!=(10);
    $35 = $2;
    if (!($34)) {
     break;
    }
    $36 = ((($35)) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 32|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $2;
    $41 = ((($40)) + 28|0);
    HEAP32[$41>>2] = $39;
   }
   (_parser_match($35)|0);
  }
 } while(0);
 $42 = $2;
 $43 = ((($42)) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(59);
 if (!($46)) {
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 $47 = $2;
 (_parser_match($47)|0);
 $65 = $4;
 STACKTOP = sp;return ($65|0);
}
function _declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_declaration_core($5,0,$4,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _label($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,4)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(8996);
 $12 = $2;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  $15 = $4;
  HEAP32[$15>>2] = $14;
  $16 = $2;
  (_parser_match($16)|0);
  $17 = $2;
  $18 = $3;
  _parser_match_tk($17,58,$18);
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $19 = HEAP32[$14>>2]|0;
 $20 = ($19|0)==(9001);
 $21 = $2;
 if ($20) {
  (_parser_match($21)|0);
  ;HEAP32[$5>>2]=HEAP32[1056>>2]|0;HEAP32[$5+4>>2]=HEAP32[1056+4>>2]|0;
  $22 = $2;
  $23 = $3;
  (_constant_expression($22,$23,$5)|0);
  $24 = $2;
  $25 = $3;
  _parser_match_tk($24,58,$25);
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $26 = ((($21)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(9005);
 if (!($29)) {
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $30 = $2;
 (_parser_match($30)|0);
 $31 = $2;
 $32 = $3;
 _parser_match_tk($31,58,$32);
 $33 = $4;
 STACKTOP = sp;return ($33|0);
}
function _unlabeled_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,20)|0);
 $4 = $5;
 $6 = $2;
 $7 = (_first_of_compound_statement($6)|0);
 $8 = $2;
 if ($7) {
  $9 = $3;
  $10 = (_compound_statement($8,$9)|0);
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $12 = (_first_of_selection_statement($8)|0);
 $13 = $2;
 if ($12) {
  $14 = $3;
  $15 = (_selection_statement($13,$14)|0);
  $16 = $4;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $18 = (_first_of_iteration_statement($13)|0);
 $19 = $2;
 if ($18) {
  $20 = $3;
  $21 = (_iteration_statement($19,$20)|0);
  $22 = $4;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $24 = (_first_of_jump_statement($19)|0);
 $25 = $2;
 $26 = $3;
 if ($24) {
  $27 = (_jump_statement($25,$26)|0);
  $28 = $4;
  $29 = ((($28)) + 12|0);
  HEAP32[$29>>2] = $27;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $30 = (_expression_statement($25,$26)|0);
  $31 = $4;
  $32 = ((($31)) + 16|0);
  HEAP32[$32>>2] = $30;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _selection_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp;
 $2 = $0;
 $3 = $1;
 $10 = (_calloc(1,24)|0);
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = ((($14)) + 16|0);
 HEAP32[$15>>2] = $13;
 dest=$5; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $16 = $2;
 _scope_list_push($16,$5);
 $17 = $2;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(9014);
 $22 = $2;
 if ($21) {
  (_parser_match($22)|0);
  $23 = $2;
  $24 = $3;
  _parser_match_tk($23,40,$24);
  $25 = $2;
  $26 = (_first_of_declaration_specifier($25)|0);
  if ($26) {
   $27 = $2;
   $28 = $3;
   $29 = (_declaration_specifiers($27,$28)|0);
   $6 = $29;
   $30 = $2;
   $31 = $6;
   $32 = $3;
   $33 = (_init_declarator_list($30,$31,$32)|0);
   $7 = $33;
   $34 = $7;
   $35 = HEAP32[$34>>2]|0;
   $36 = $4;
   HEAP32[$36>>2] = $35;
   $37 = $7;
   _free($37);
   $38 = $2;
   $39 = $3;
   _parser_match_tk($38,59,$39);
  }
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;
  $40 = $2;
  $41 = $3;
  $42 = (_expression($40,$41,$8)|0);
  $43 = $4;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $42;
  $45 = $2;
  $46 = $3;
  _parser_match_tk($45,41,$46);
  $47 = $2;
  $48 = $3;
  $49 = (_statement($47,$48)|0);
  $50 = $4;
  $51 = ((($50)) + 8|0);
  HEAP32[$51>>2] = $49;
  $52 = $2;
  $53 = ((($52)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(9008);
  if ($56) {
   $57 = $2;
   (_parser_match($57)|0);
   $58 = $2;
   $59 = $3;
   $60 = (_statement($58,$59)|0);
   $61 = $4;
   $62 = ((($61)) + 12|0);
   HEAP32[$62>>2] = $60;
  }
 } else {
  $63 = ((($22)) + 28|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(9030);
  if ($66) {
   $67 = $2;
   (_parser_match($67)|0);
   $68 = $2;
   $69 = $3;
   _parser_match_tk($68,40,$69);
   ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
   $70 = $2;
   $71 = $3;
   $72 = (_expression($70,$71,$9)|0);
   $73 = $4;
   $74 = ((($73)) + 4|0);
   HEAP32[$74>>2] = $72;
   $75 = $2;
   $76 = $3;
   _parser_match_tk($75,41,$76);
   $77 = $2;
   $78 = $3;
   $79 = (_statement($77,$78)|0);
   $80 = $4;
   $81 = ((($80)) + 8|0);
   HEAP32[$81>>2] = $79;
  }
 }
 $82 = $2;
 $83 = ((($82)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 36|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $4;
 $88 = ((($87)) + 20|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 _scope_list_pop($89);
 $90 = $4;
 STACKTOP = sp;return ($90|0);
}
function _iteration_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = (_calloc(1,4)|0);
 $4 = $8;
 $9 = $2;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9006);
 $14 = $2;
 if ($13) {
  (_parser_match($14)|0);
  $15 = $2;
  $16 = $3;
  (_statement($15,$16)|0);
  $17 = $2;
  $18 = $3;
  _parser_match_tk($17,9036,$18);
  $19 = $2;
  $20 = $3;
  _parser_match_tk($19,40,$20);
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
  $21 = $2;
  $22 = $3;
  (_expression($21,$22,$5)|0);
  $23 = $2;
  $24 = $3;
  _parser_match_tk($23,41,$24);
  $25 = $2;
  $26 = $3;
  _parser_match_tk($25,59,$26);
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 $27 = ((($14)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(9036);
 $31 = $2;
 if ($30) {
  (_parser_match($31)|0);
  $32 = $2;
  $33 = $3;
  _parser_match_tk($32,40,$33);
  ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;
  $34 = $2;
  $35 = $3;
  (_expression($34,$35,$6)|0);
  $36 = $2;
  $37 = $3;
  _parser_match_tk($36,41,$37);
  $38 = $2;
  $39 = $3;
  (_statement($38,$39)|0);
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 $40 = ((($31)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(9012);
 if (!($43)) {
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $44 = $2;
 (_parser_match($44)|0);
 $45 = $2;
 $46 = $3;
 _parser_match_tk($45,40,$46);
 $47 = $2;
 $48 = (_first_of_declaration_specifier($47)|0);
 $49 = $2;
 if ($48) {
  $50 = $3;
  (_declaration($49,$50)|0);
  $51 = $2;
  $52 = ((($51)) + 28|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)!=(59);
  if ($55) {
   $56 = $2;
   $57 = $3;
   (_expression($56,$57,$7)|0);
  }
  $58 = $2;
  $59 = $3;
  _parser_match_tk($58,59,$59);
  $60 = $2;
  $61 = ((($60)) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(41);
  if ($64) {
   $65 = $2;
   $66 = $3;
   (_expression($65,$66,$7)|0);
  }
  $67 = $2;
  $68 = $3;
  _parser_match_tk($67,41,$68);
  $69 = $2;
  $70 = $3;
  (_statement($69,$70)|0);
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 $71 = ((($49)) + 28|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(59);
 if ($74) {
  $75 = $2;
  $76 = $3;
  (_expression($75,$76,$7)|0);
 }
 $77 = $2;
 $78 = $3;
 _parser_match_tk($77,59,$78);
 $79 = $2;
 $80 = ((($79)) + 28|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(59);
 if ($83) {
  $84 = $2;
  $85 = $3;
  (_expression($84,$85,$7)|0);
 }
 $86 = $2;
 $87 = $3;
 _parser_match_tk($86,59,$87);
 $88 = $2;
 $89 = ((($88)) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)!=(41);
 if ($92) {
  $93 = $2;
  $94 = $3;
  (_expression($93,$94,$7)|0);
 }
 $95 = $2;
 $96 = $3;
 _parser_match_tk($95,41,$96);
 $97 = $2;
 $98 = $3;
 (_statement($97,$98)|0);
 $99 = $4;
 STACKTOP = sp;return ($99|0);
}
function _jump_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,4)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(9013);
 $12 = $2;
 do {
  if ($11) {
   (_parser_match($12)|0);
   $13 = $2;
   $14 = $3;
   _parser_match_tk($13,8996,$14);
  } else {
   $15 = ((($12)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(9004);
   $19 = $2;
   if ($18) {
    (_parser_match($19)|0);
    break;
   }
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(9000);
   $24 = $2;
   if ($23) {
    (_parser_match($24)|0);
    break;
   }
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(9024);
   if (!($28)) {
    ___assert_fail((9119|0),(4929|0),3024,(5445|0));
    // unreachable;
   }
   $29 = $2;
   (_parser_match($29)|0);
   $30 = $2;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(59);
   if ($34) {
    ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
    $35 = $2;
    $36 = $3;
    (_expression($35,$36,$5)|0);
   }
  }
 } while(0);
 $37 = $2;
 $38 = $3;
 _parser_match_tk($37,59,$38);
 $39 = $4;
 STACKTOP = sp;return ($39|0);
}
function _expression_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_calloc(1,4)|0);
 $4 = $6;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(59);
 if ($11) {
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
  $12 = $2;
  $13 = $3;
  $14 = (_expression($12,$13,$5)|0);
  $15 = $4;
  HEAP32[$15>>2] = $14;
 }
 $16 = $2;
 $17 = $3;
 _parser_match_tk($16,59,$17);
 $18 = $4;
 STACKTOP = sp;return ($18|0);
}
function _statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,8)|0);
 $4 = $5;
 $6 = $2;
 $7 = (_first_of_labeled_statement($6)|0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  $10 = (_labeled_statement($8,$9)|0);
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $15 = $4;
  STACKTOP = sp;return ($15|0);
 } else {
  $12 = (_unlabeled_statement($8,$9)|0);
  $13 = $4;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = $12;
  $15 = $4;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _labeled_statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_calloc(1,8)|0);
 $4 = $5;
 $6 = $2;
 $7 = $3;
 $8 = (_label($6,$7)|0);
 $9 = $4;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = $3;
 $12 = (_statement($10,$11)|0);
 $13 = $4;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = $4;
 STACKTOP = sp;return ($15|0);
}
function _find_member_declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 L1: while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   label = 13;
   break;
  }
  $6 = 0;
  $13 = $5;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = $5;
  L4: do {
   if ($16) {
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $6 = $20;
    while(1) {
     $21 = $6;
     $22 = ($21|0)!=(0|0);
     if (!($22)) {
      break L4;
     }
     $23 = $6;
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $4;
     $28 = (_strcmp($26,$27)|0);
     $29 = ($28|0)==(0);
     $30 = $6;
     if ($29) {
      label = 7;
      break L1;
     }
     $31 = ((($30)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $6 = $32;
    }
   } else {
    $33 = HEAP32[$17>>2]|0;
    $34 = ((($33)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0|0);
    if ($36) {
     $37 = $5;
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $7 = $40;
     $41 = $7;
     $42 = $4;
     $43 = (_find_member_declarator($41,$42)|0);
     $8 = $43;
     $44 = $8;
     $45 = ($44|0)!=(0|0);
     if ($45) {
      label = 11;
      break L1;
     }
    }
   }
  } while(0);
  $47 = $5;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $5 = $49;
 }
 if ((label|0) == 7) {
  $2 = $30;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 11) {
  $46 = $8;
  $2 = $46;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 13) {
  $2 = 0;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _translation_unit($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 while(1) {
  $7 = $4;
  $8 = ((($7)) + 200|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $3;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $3;
  $16 = $4;
  $17 = (_external_declaration($15,$16)|0);
  $6 = $17;
  $18 = HEAP32[$5>>2]|0;
  $19 = ($18|0)==(0|0);
  $20 = $6;
  if ($19) {
   HEAP32[$5>>2] = $20;
   $21 = $6;
   $22 = ((($5)) + 4|0);
   HEAP32[$22>>2] = $21;
  } else {
   $23 = ((($5)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 24|0);
   HEAP32[$25>>2] = $20;
   $26 = $6;
   $27 = ((($5)) + 4|0);
   HEAP32[$27>>2] = $26;
  }
 }
 if ((label|0) == 8) {
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _external_declaration($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_function_definition_or_declaration($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _parse($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = sp + 32|0;
 $6 = sp;
 $3 = $1;
 $4 = $2;
 dest=$5; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;HEAP32[$6+24>>2]=0|0;HEAP32[$6+28>>2]=0|0;
 _scope_list_push($6,$5);
 $7 = ((($6)) + 20|0);
 $8 = $3;
 ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;
 $9 = ((($6)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 28|0);
 HEAP32[$11>>2] = $10;
 (_parser_skip_blanks($6)|0);
 $12 = $4;
 _translation_unit($0,$6,$12);
 STACKTOP = sp;return;
}
function _print_declarator_type($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[$2>>0] = 0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 while(1) {
  $8 = $3;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  (_printf(5469,$vararg_buffer)|0);
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  _print_type_qualifier_flags($2,$11);
  $12 = $3;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
 }
 $15 = $1;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 _print_direct_declarator_type($21);
 STACKTOP = sp;return;
}
function _print_direct_declarator_type($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (_printf(5460,$vararg_buffer)|0);
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  _print_declarator_type($8);
  (_printf(5462,$vararg_buffer1)|0);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $2 = $11;
 while(1) {
  $12 = $2;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = ((($14)) + 13|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&1;
  if ($17) {
   (_printf(5466,$vararg_buffer3)|0);
  } else {
   $18 = $2;
   $19 = ((($18)) + 14|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&1;
   if ($21) {
    (_printf(5460,$vararg_buffer5)|0);
    $22 = $2;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $3 = $24;
    while(1) {
     $25 = $3;
     $26 = ($25|0)!=(0|0);
     if (!($26)) {
      break;
     }
     $27 = $3;
     $28 = $2;
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($27|0)!=($30|0);
     if ($31) {
      (_printf(5464,$vararg_buffer7)|0);
     }
     $32 = $3;
     _print_type($32);
     $33 = $3;
     $34 = ((($33)) + 212|0);
     $35 = HEAP32[$34>>2]|0;
     $3 = $35;
    }
    $36 = $2;
    $37 = ((($36)) + 12|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&1;
    if ($39) {
     (_printf(5471,$vararg_buffer9)|0);
    }
    (_printf(5462,$vararg_buffer11)|0);
   }
  }
  $40 = $2;
  $41 = ((($40)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  $2 = $42;
 }
 STACKTOP = sp;return;
}
function _print_type($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $1 = $0;
 HEAP8[$2>>0] = 1;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _print_type_qualifier_flags($2,$5);
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 32768;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   _print_item($2,5476);
   $10 = $1;
   $11 = ((($10)) + 8|0);
   HEAP32[$vararg_buffer>>2] = $11;
   (_printf(5531,$vararg_buffer)|0);
  } else {
   $12 = $1;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 65536;
   $15 = ($14|0)!=(0);
   if ($15) {
    _print_item($2,5484);
    $16 = $1;
    $17 = ((($16)) + 8|0);
    HEAP32[$vararg_buffer1>>2] = $17;
    (_printf(5531,$vararg_buffer1)|0);
    break;
   }
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 131072;
   $21 = ($20|0)!=(0);
   $22 = $1;
   if ($21) {
    $23 = ((($22)) + 8|0);
    _print_item($2,$23);
    break;
   } else {
    $24 = HEAP32[$22>>2]|0;
    (_print_type_specifier_flags($2,$24)|0);
    break;
   }
  }
 } while(0);
 $25 = $1;
 $26 = ((($25)) + 208|0);
 $27 = HEAP32[$26>>2]|0;
 _print_declarator_type($27);
 STACKTOP = sp;return;
}
function _get_ast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 $12 = $5;
 $13 = $4;
 $14 = $6;
 _tokenizer($8,$12,$13,0,$14);
 $15 = $6;
 $16 = ((($15)) + 200|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
 }
 dest=$9; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $19 = ((($9)) + 4|0);
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 5000;
 $21 = $6;
 _preprocessor($10,$9,$8,0,$21);
 ;HEAP32[$7>>2]=HEAP32[$10>>2]|0;HEAP32[$7+4>>2]=HEAP32[$10+4>>2]|0;
 $22 = $6;
 $23 = ((($22)) + 200|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
 } else {
  $26 = ((($7)) + 8|0);
  $27 = $6;
  _parse($11,$7,$27);
  ;HEAP32[$26>>2]=HEAP32[$11>>2]|0;HEAP32[$26+4>>2]=HEAP32[$11+4>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _CompileText($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 140|0;
 $13 = sp + 96|0;
 $14 = sp + 88|0;
 $15 = sp + 80|0;
 $16 = sp + 32|0;
 $17 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = 0;
 $18 = $6;
 $19 = (_strstr($18,5490)|0);
 $20 = ($19|0)!=(0|0);
 $spec$store$select = $20 ? 1 : 0;
 $9 = $spec$store$select;
 $10 = 0;
 $21 = $6;
 $22 = (_strstr($21,5493)|0);
 $23 = ($22|0)!=(0|0);
 $spec$store$select1 = $23 ? 1 : 0;
 $10 = $spec$store$select1;
 $24 = $6;
 $25 = (_strstr($24,5496)|0);
 $26 = ($25|0)!=(0|0);
 do {
  if ($26) {
   $8 = 1;
  } else {
   $27 = $6;
   $28 = (_strstr($27,5501)|0);
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $8 = 2;
    break;
   }
   $30 = $6;
   $31 = (_strstr($30,5506)|0);
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $8 = 3;
   }
  }
 } while(0);
 $33 = $6;
 HEAP32[$vararg_buffer>>2] = $33;
 (_printf(5510,$vararg_buffer)|0);
 _memset(($11|0),0,204)|0;
 $12 = 0;
 $34 = $9;
 $35 = $34&1;
 if ($35) {
  dest=$13; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $36 = $7;
  _tokenizer($14,$36,5524,0,$11);
  $37 = ((($11)) + 200|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if ($39) {
   _preprocessor($15,$13,$14,0,$11);
   $40 = ((($11)) + 200|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = HEAP32[$15>>2]|0;
    $44 = (_print_preprocessed_to_string2($43)|0);
    $12 = $44;
   }
  }
  _preprocessor_ctx_destroy($13);
 } else {
  dest=$16; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $45 = $8;
  $46 = ((($16)) + 44|0);
  HEAP32[$46>>2] = $45;
  $47 = $7;
  _get_ast($17,5524,$47,$11);
  $48 = ((($16)) + 28|0);
  ;HEAP32[$48>>2]=HEAP32[$17>>2]|0;HEAP32[$48+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$48+12>>2]=HEAP32[$17+12>>2]|0;
  _visit($16,$11);
  $49 = ((($16)) + 28|0);
  $50 = $10;
  $51 = $50&1;
  $52 = (_get_code_as_we_see($49,$51)|0);
  $12 = $52;
 }
 $53 = ((($11)) + 200|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0);
 if (!($55)) {
  $56 = $12;
  STACKTOP = sp;return ($56|0);
 }
 HEAP32[$vararg_buffer2>>2] = $11;
 (_printf(4660,$vararg_buffer2)|0);
 $56 = $12;
 STACKTOP = sp;return ($56|0);
}
function _preprocessor_ctx_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 _hashmap_destroy($3);
 STACKTOP = sp;return;
}
function _find_and_read_file($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $12 = $6;
 HEAP32[$vararg_buffer>>2] = $12;
 (_snprintf($11,300,5531,$vararg_buffer)|0);
 $13 = $5;
 $14 = ((($13)) + 24|0);
 $15 = $7;
 $16 = (_hashmap_find($14,$15)|0);
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $8;
  HEAP8[$18>>0] = 1;
  $4 = 0;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 $19 = $7;
 $20 = (_readfile($19)|0);
 $9 = $20;
 $21 = $9;
 $22 = ($21|0)==(0|0);
 L5: do {
  if ($22) {
   $23 = $5;
   $24 = ((($23)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $10 = $25;
   while(1) {
    $26 = $10;
    $27 = ($26|0)!=(0|0);
    if (!($27)) {
     break L5;
    }
    $28 = $7;
    $29 = $10;
    $30 = HEAP32[$29>>2]|0;
    $31 = $6;
    HEAP32[$vararg_buffer1>>2] = $30;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $31;
    (_snprintf($28,300,5534,$vararg_buffer1)|0);
    $32 = $5;
    $33 = ((($32)) + 24|0);
    $34 = $7;
    $35 = (_hashmap_find($33,$34)|0);
    $36 = ($35|0)!=(0|0);
    if ($36) {
     break;
    }
    $38 = $7;
    $39 = (_readfile($38)|0);
    $9 = $39;
    $40 = $9;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     break L5;
    }
    $42 = $10;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $10 = $44;
   }
   $37 = $8;
   HEAP8[$37>>0] = 1;
   $4 = 0;
   $46 = $4;
   STACKTOP = sp;return ($46|0);
  }
 } while(0);
 $45 = $9;
 $4 = $45;
 $46 = $4;
 STACKTOP = sp;return ($46|0);
}
function _copy_argument_list_tokens($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 while(1) {
  $10 = $4;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = (_token_is_blank($12)|0);
  if (!($13)) {
   $14 = $4;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(10);
   if (!($16)) {
    break;
   }
  }
  $17 = $4;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $4 = $19;
 }
 $5 = 1;
 $6 = 0;
 L8: while(1) {
  $20 = $4;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   label = 19;
   break;
  }
  $22 = $4;
  $23 = ($22|0)!=(0|0);
  do {
   if ($23) {
    $24 = $4;
    $25 = (_token_is_blank($24)|0);
    if (!($25)) {
     $26 = $4;
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(10);
     if (!($28)) {
      break;
     }
    }
    $29 = $4;
    $30 = $2;
    $31 = ((($30)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($29|0)==($32|0);
    if ($33) {
     label = 19;
     break L8;
    }
    $34 = $4;
    $35 = ((($34)) + 32|0);
    $36 = HEAP32[$35>>2]|0;
    $4 = $36;
    continue L8;
   }
  } while(0);
  $37 = $4;
  $38 = (_token_list_clone_and_add($3,$37)|0);
  $7 = $38;
  $39 = $7;
  $40 = ((($39)) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & 8;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $7;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 & -9;
   $48 = $7;
   $49 = ((($48)) + 24|0);
   HEAP32[$49>>2] = $47;
   $50 = $7;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 | 4;
   HEAP32[$51>>2] = $53;
  }
  $54 = $5;
  $55 = $54&1;
  if ($55) {
   $56 = $7;
   $57 = ((($56)) + 24|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & -5;
   $60 = $7;
   $61 = ((($60)) + 24|0);
   HEAP32[$61>>2] = $59;
   $62 = $7;
   $63 = ((($62)) + 24|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 & -9;
   $66 = $7;
   $67 = ((($66)) + 24|0);
   HEAP32[$67>>2] = $65;
   $5 = 0;
  }
  $68 = $7;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  _remove_line_continuation($70);
  $6 = 0;
  $71 = $4;
  $72 = $2;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($71|0)==($74|0);
  if ($75) {
   label = 19;
   break;
  }
  $76 = $4;
  $77 = ((($76)) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  $4 = $78;
 }
 if ((label|0) == 19) {
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _remove_line_continuation($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 $5 = $1;
 $3 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  $9 = $2;
  if (!($8)) {
   break;
  }
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(92);
  if ($12) {
   $13 = $2;
   $14 = ((($13)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)==(10);
   if ($17) {
    $18 = $2;
    $19 = ((($18)) + 1|0);
    $2 = $19;
    $20 = $2;
    $21 = ((($20)) + 1|0);
    $2 = $21;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $22 = $2;
   $23 = HEAP8[$22>>0]|0;
   $24 = $3;
   HEAP8[$24>>0] = $23;
   $25 = $2;
   $26 = ((($25)) + 1|0);
   $2 = $26;
   $27 = $3;
   $28 = ((($27)) + 1|0);
   $3 = $28;
  }
 }
 $29 = HEAP8[$9>>0]|0;
 $30 = $3;
 HEAP8[$30>>0] = $29;
 STACKTOP = sp;return;
}
function _copy_argument_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $1;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 _copy_argument_list_tokens($3,$6);
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (_calloc(1,40)|0);
  $4 = $9;
  $10 = (___strdup(11088)|0);
  $11 = $4;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $4;
  HEAP32[$13>>2] = 141;
  $14 = $4;
  (_token_list_add($3,$14)|0);
 }
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _find_macro_argument_by_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = (_strcmp($12,$13)|0);
  $15 = ($14|0)==(0);
  $16 = $5;
  if ($15) {
   label = 4;
   break;
  }
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $5 = $18;
 }
 if ((label|0) == 4) {
  $2 = $16;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _argument_list_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  ___assert_fail((5539|0),(5558|0),288,(5570|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = $3;
 $13 = $2;
 if ($11) {
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $12;
  $15 = $3;
  $16 = $2;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = $15;
  STACKTOP = sp;return;
 } else {
  $18 = ((($13)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  HEAP32[$20>>2] = $12;
  $21 = $3;
  $22 = $2;
  $23 = ((($22)) + 12|0);
  HEAP32[$23>>2] = $21;
  STACKTOP = sp;return;
 }
}
function _delete_macro($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  _free($4);
 }
 STACKTOP = sp;return;
}
function _find_macro($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = $4;
 $10 = (_hashmap_find($8,$9)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $2 = 0;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 } else {
  $13 = $5;
  $6 = $13;
  $14 = $6;
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _is_nondigit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(97);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)<=(122);
  if ($13) {
   $33 = 1;
   $32 = $33&1;
   STACKTOP = sp;return ($32|0);
  }
 }
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)>=(65);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)<=(90);
  if ($25) {
   $33 = 1;
   $32 = $33&1;
   STACKTOP = sp;return ($32|0);
  }
 }
 $26 = $1;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29 << 24 >> 24;
 $31 = ($30|0)==(95);
 $33 = $31;
 $32 = $33&1;
 STACKTOP = sp;return ($32|0);
}
function _is_digit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(48);
 if (!($7)) {
  $15 = 0;
  $14 = $15&1;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)<=(57);
 $15 = $13;
 $14 = $15&1;
 STACKTOP = sp;return ($14|0);
}
function _is_punctuator($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 L1: do {
  switch ($7|0) {
  case 92:  {
   $2 = 92;
   $8 = $1;
   _stream_match($8);
   break;
  }
  case 91:  {
   $2 = 91;
   $9 = $1;
   _stream_match($9);
   break;
  }
  case 93:  {
   $2 = 93;
   $10 = $1;
   _stream_match($10);
   break;
  }
  case 40:  {
   $2 = 40;
   $11 = $1;
   _stream_match($11);
   break;
  }
  case 41:  {
   $2 = 41;
   $12 = $1;
   _stream_match($12);
   break;
  }
  case 123:  {
   $2 = 123;
   $13 = $1;
   _stream_match($13);
   break;
  }
  case 125:  {
   $2 = 125;
   $14 = $1;
   _stream_match($14);
   break;
  }
  case 59:  {
   $2 = 59;
   $15 = $1;
   _stream_match($15);
   break;
  }
  case 44:  {
   $2 = 44;
   $16 = $1;
   _stream_match($16);
   break;
  }
  case 33:  {
   $2 = 33;
   $17 = $1;
   _stream_match($17);
   $18 = $1;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(61);
   if ($23) {
    $2 = 8509;
    $24 = $1;
    _stream_match($24);
   }
   break;
  }
  case 58:  {
   $2 = 58;
   $25 = $1;
   _stream_match($25);
   $26 = $1;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)==(58);
   if ($31) {
    $2 = 14906;
    $32 = $1;
    _stream_match($32);
   }
   break;
  }
  case 126:  {
   $2 = 126;
   $33 = $1;
   _stream_match($33);
   break;
  }
  case 63:  {
   $2 = 63;
   $34 = $1;
   _stream_match($34);
   break;
  }
  case 47:  {
   $2 = 47;
   $35 = $1;
   _stream_match($35);
   break;
  }
  case 42:  {
   $2 = 42;
   $36 = $1;
   _stream_match($36);
   break;
  }
  case 37:  {
   $2 = 37;
   $37 = $1;
   _stream_match($37);
   break;
  }
  case 45:  {
   $2 = 45;
   $38 = $1;
   _stream_match($38);
   $39 = $1;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)==(62);
   if ($44) {
    $2 = 11582;
    $45 = $1;
    _stream_match($45);
    break L1;
   }
   $46 = $1;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49 << 24 >> 24;
   $51 = ($50|0)==(45);
   if ($51) {
    $2 = 11565;
    $52 = $1;
    _stream_match($52);
    break L1;
   }
   $53 = $1;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP8[$55>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = ($57|0)==(61);
   if ($58) {
    $2 = 11581;
    $59 = $1;
    _stream_match($59);
   }
   break;
  }
  case 124:  {
   $2 = 124;
   $60 = $1;
   _stream_match($60);
   $61 = $1;
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = HEAP8[$63>>0]|0;
   $65 = $64 << 24 >> 24;
   $66 = ($65|0)==(124);
   if ($66) {
    $2 = 31868;
    $67 = $1;
    _stream_match($67);
    break L1;
   }
   $68 = $1;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 << 24 >> 24;
   $73 = ($72|0)==(61);
   if ($73) {
    $2 = 31805;
    $74 = $1;
    _stream_match($74);
   }
   break;
  }
  case 43:  {
   $2 = 43;
   $75 = $1;
   _stream_match($75);
   $76 = $1;
   $77 = ((($76)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = HEAP8[$78>>0]|0;
   $80 = $79 << 24 >> 24;
   $81 = ($80|0)==(43);
   if ($81) {
    $2 = 11051;
    $82 = $1;
    _stream_match($82);
    break L1;
   }
   $83 = $1;
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP8[$85>>0]|0;
   $87 = $86 << 24 >> 24;
   $88 = ($87|0)==(61);
   if ($88) {
    $2 = 11069;
    $89 = $1;
    _stream_match($89);
   }
   break;
  }
  case 61:  {
   $2 = 61;
   $90 = $1;
   _stream_match($90);
   $91 = $1;
   $92 = ((($91)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP8[$93>>0]|0;
   $95 = $94 << 24 >> 24;
   $96 = ($95|0)==(61);
   if ($96) {
    $2 = 15677;
    $97 = $1;
    _stream_match($97);
   }
   break;
  }
  case 94:  {
   $2 = 94;
   $98 = $1;
   _stream_match($98);
   $99 = $1;
   $100 = ((($99)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($101)) + 1|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103 << 24 >> 24;
   $105 = ($104|0)==(61);
   if ($105) {
    $2 = 24125;
    $106 = $1;
    _stream_match($106);
   }
   break;
  }
  case 38:  {
   $2 = 38;
   $107 = $1;
   _stream_match($107);
   $108 = $1;
   $109 = ((($108)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP8[$110>>0]|0;
   $112 = $111 << 24 >> 24;
   $113 = ($112|0)==(38);
   if ($113) {
    $2 = 9766;
    $114 = $1;
    _stream_match($114);
   }
   break;
  }
  case 62:  {
   $2 = 62;
   $115 = $1;
   _stream_match($115);
   $116 = $1;
   $117 = ((($116)) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = HEAP8[$118>>0]|0;
   $120 = $119 << 24 >> 24;
   $121 = ($120|0)==(62);
   if ($121) {
    $2 = 15934;
    $122 = $1;
    _stream_match($122);
    break L1;
   }
   $123 = $1;
   $124 = ((($123)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = HEAP8[$125>>0]|0;
   $127 = $126 << 24 >> 24;
   $128 = ($127|0)==(61);
   if ($128) {
    $2 = 15933;
    $129 = $1;
    _stream_match($129);
   }
   break;
  }
  case 60:  {
   $2 = 60;
   $130 = $1;
   _stream_match($130);
   $131 = $1;
   $132 = ((($131)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = HEAP8[$133>>0]|0;
   $135 = $134 << 24 >> 24;
   $136 = ($135|0)==(60);
   if ($136) {
    $2 = 15420;
    $137 = $1;
    _stream_match($137);
    break L1;
   }
   $138 = $1;
   $139 = ((($138)) + 4|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141 << 24 >> 24;
   $143 = ($142|0)==(61);
   if ($143) {
    $2 = 15421;
    $144 = $1;
    _stream_match($144);
   }
   break;
  }
  case 35:  {
   $2 = 35;
   $145 = $1;
   _stream_match($145);
   $146 = $1;
   $147 = ((($146)) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = HEAP8[$148>>0]|0;
   $150 = $149 << 24 >> 24;
   $151 = ($150|0)==(35);
   if ($151) {
    $2 = 8995;
    $152 = $1;
    _stream_match($152);
   }
   break;
  }
  case 46:  {
   $2 = 46;
   $153 = $1;
   _stream_match($153);
   $154 = $1;
   $155 = ((($154)) + 4|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = HEAP8[$156>>0]|0;
   $158 = $157 << 24 >> 24;
   $159 = ($158|0)==(46);
   if ($159) {
    $160 = $1;
    $161 = ((($160)) + 4|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($162)) + 1|0);
    $164 = HEAP8[$163>>0]|0;
    $165 = $164 << 24 >> 24;
    $166 = ($165|0)==(46);
    if ($166) {
     $2 = 3026478;
     $167 = $1;
     _stream_match($167);
     $168 = $1;
     _stream_match($168);
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $169 = $2;
 STACKTOP = sp;return ($169|0);
}
function _stream_match($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 1|0);
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = ($10|0)==(10);
 $12 = $1;
 if ($11) {
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $1;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = 1;
 } else {
  $18 = ((($12)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$18>>2] = $20;
 }
 $21 = $1;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 << 24 >> 24;
 $26 = ($25|0)==(92);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 1|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)==(10);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $1;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 1|0);
 HEAP32[$35>>2] = $37;
 $38 = $1;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 1|0);
 HEAP32[$39>>2] = $41;
 $42 = $1;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $1;
 $47 = ((($46)) + 12|0);
 HEAP32[$47>>2] = 1;
 STACKTOP = sp;return;
}
function _new_token($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = (_calloc(1,40)|0);
 $6 = $8;
 $9 = $4;
 $10 = $3;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $7 = $13;
 $14 = $7;
 $15 = (($14) + 1)|0;
 $16 = (_calloc($15,1)|0);
 $17 = $6;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $5;
 $20 = $6;
 HEAP32[$20>>2] = $19;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $3;
 $25 = $7;
 (_strncpy($23,$24,$25)|0);
 $26 = $6;
 STACKTOP = sp;return ($26|0);
}
function _identifier($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 _stream_match($7);
 while(1) {
  $8 = $1;
  $9 = (_is_nondigit($8)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $1;
   $12 = (_is_digit($11)|0);
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
  }
  $14 = $1;
  _stream_match($14);
 }
 $15 = $2;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_new_token($15,$18,8996)|0);
 $3 = $19;
 $20 = $3;
 STACKTOP = sp;return ($20|0);
}
function _is_nonzero_digit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(49);
 if (!($7)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)<=(57);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function _is_binary_digit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(48);
 if (!($7)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)<=(49);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function _is_hexadecimal_digit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(48);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)<=(57);
  if ($13) {
   $38 = 1;
   STACKTOP = sp;return ($38|0);
  }
 }
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)>=(97);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)<=(102);
  if ($25) {
   $38 = 1;
   STACKTOP = sp;return ($38|0);
  }
 }
 $26 = $1;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29 << 24 >> 24;
 $31 = ($30|0)>=(65);
 if (!($31)) {
  $38 = 0;
  STACKTOP = sp;return ($38|0);
 }
 $32 = $1;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP8[$34>>0]|0;
 $36 = $35 << 24 >> 24;
 $37 = ($36|0)<=(70);
 $38 = $37;
 STACKTOP = sp;return ($38|0);
}
function _is_octal_digit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(48);
 if (!($7)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)<=(55);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function _digit_sequence($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = (_is_digit($2)|0);
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  _stream_match($5);
 }
 STACKTOP = sp;return;
}
function _hexadecimal_digit_sequence($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _stream_match($2);
 while(1) {
  $3 = $1;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(39);
  if (!($8)) {
   $9 = $1;
   $10 = (_is_hexadecimal_digit($9)|0);
   if (!($10)) {
    break;
   }
  }
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(39);
  $17 = $1;
  _stream_match($17);
  if ($16) {
   $18 = $1;
   (_is_hexadecimal_digit($18)|0);
   $19 = $1;
   _stream_match($19);
  }
 }
 STACKTOP = sp;return;
}
function _integer_suffix_opt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(85);
 if (!($7)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(117);
  if (!($13)) {
   $41 = $1;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = ($45|0)==(108);
   if (!($46)) {
    STACKTOP = sp;return;
   }
   $47 = $1;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51 << 24 >> 24;
   $53 = ($52|0)==(108);
   if (!($53)) {
    STACKTOP = sp;return;
   }
   $54 = $1;
   _stream_match($54);
   $55 = $1;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $60 = ($59|0)==(108);
   if ($60) {
    $61 = $1;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($66|0)==(108);
    if ($67) {
     $68 = $1;
     _stream_match($68);
    }
   }
   $69 = $1;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = ($73|0)==(85);
   if (!($74)) {
    $75 = $1;
    $76 = ((($75)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP8[$77>>0]|0;
    $79 = $78 << 24 >> 24;
    $80 = ($79|0)==(117);
    if (!($80)) {
     STACKTOP = sp;return;
    }
   }
   $81 = $1;
   _stream_match($81);
   STACKTOP = sp;return;
  }
 }
 $14 = $1;
 _stream_match($14);
 $15 = $1;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(108);
 if ($20) {
  label = 5;
 } else {
  $21 = $1;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(76);
  if ($26) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $27 = $1;
  _stream_match($27);
 }
 $28 = $1;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)==(108);
 if (!($33)) {
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)==(76);
  if (!($39)) {
   STACKTOP = sp;return;
  }
 }
 $40 = $1;
 _stream_match($40);
 STACKTOP = sp;return;
}
function _exponent_part_opt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(101);
 if (!($7)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(69);
  if (!($13)) {
   STACKTOP = sp;return;
  }
 }
 $14 = $1;
 _stream_match($14);
 $15 = $1;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(45);
 if ($20) {
  label = 5;
 } else {
  $21 = $1;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(43);
  if ($26) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $27 = $1;
  _stream_match($27);
 }
 $28 = $1;
 _digit_sequence($28);
 STACKTOP = sp;return;
}
function _floating_suffix_opt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(108);
 if (!($7)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(76);
  if (!($13)) {
   $14 = $1;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)==(102);
   if (!($19)) {
    $20 = $1;
    $21 = ((($20)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(70);
    if (!($25)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $26 = $1;
 _stream_match($26);
 STACKTOP = sp;return;
}
function _parse_number_core($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(46);
 if ($8) {
  $2 = 138;
  $9 = $1;
  _stream_match($9);
  $10 = $1;
  _digit_sequence($10);
  $11 = $1;
  _exponent_part_opt($11);
  $12 = $1;
  _floating_suffix_opt($12);
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 $13 = $1;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(48);
 do {
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 1|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(120);
   if (!($25)) {
    $26 = $1;
    $27 = ((($26)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($28)) + 1|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)==(88);
    if (!($32)) {
     break;
    }
   }
   $2 = 136;
   $33 = $1;
   _stream_match($33);
   $34 = $1;
   _stream_match($34);
   while(1) {
    $35 = $1;
    $36 = (_is_hexadecimal_digit($35)|0);
    $37 = $1;
    if (!($36)) {
     break;
    }
    _stream_match($37);
   }
   _integer_suffix_opt($37);
   $38 = $1;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = ($42|0)==(46);
   if (!($43)) {
    $119 = $2;
    STACKTOP = sp;return ($119|0);
   }
   $2 = 139;
   $44 = $1;
   _hexadecimal_digit_sequence($44);
   $45 = $1;
   _floating_suffix_opt($45);
   $119 = $2;
   STACKTOP = sp;return ($119|0);
  }
 } while(0);
 $46 = $1;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP8[$48>>0]|0;
 $50 = $49 << 24 >> 24;
 $51 = ($50|0)==(48);
 do {
  if ($51) {
   $52 = $1;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 1|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = ($57|0)==(98);
   if (!($58)) {
    $59 = $1;
    $60 = ((($59)) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 1|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = ($64|0)==(66);
    if (!($65)) {
     break;
    }
   }
   $2 = 137;
   $66 = $1;
   _stream_match($66);
   $67 = $1;
   _stream_match($67);
   while(1) {
    $68 = $1;
    $69 = (_is_binary_digit($68)|0);
    $70 = $1;
    if (!($69)) {
     break;
    }
    _stream_match($70);
   }
   _integer_suffix_opt($70);
   $119 = $2;
   STACKTOP = sp;return ($119|0);
  }
 } while(0);
 $71 = $1;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP8[$73>>0]|0;
 $75 = $74 << 24 >> 24;
 $76 = ($75|0)==(48);
 if ($76) {
  $2 = 135;
  $77 = $1;
  _stream_match($77);
  while(1) {
   $78 = $1;
   $79 = (_is_octal_digit($78)|0);
   $80 = $1;
   if (!($79)) {
    break;
   }
   _stream_match($80);
  }
  _integer_suffix_opt($80);
  $81 = $1;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP8[$83>>0]|0;
  $85 = $84 << 24 >> 24;
  $86 = ($85|0)==(46);
  if (!($86)) {
   $119 = $2;
   STACKTOP = sp;return ($119|0);
  }
  $87 = $1;
  _hexadecimal_digit_sequence($87);
  $88 = $1;
  _floating_suffix_opt($88);
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 $89 = $1;
 $90 = (_is_nonzero_digit($89)|0);
 if (!($90)) {
  $119 = $2;
  STACKTOP = sp;return ($119|0);
 }
 $2 = 134;
 $91 = $1;
 _stream_match($91);
 while(1) {
  $92 = $1;
  $93 = (_is_digit($92)|0);
  $94 = ($93|0)!=(0);
  $95 = $1;
  if (!($94)) {
   break;
  }
  _stream_match($95);
 }
 _integer_suffix_opt($95);
 $96 = $1;
 $97 = ((($96)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = HEAP8[$98>>0]|0;
 $100 = $99 << 24 >> 24;
 $101 = ($100|0)==(101);
 if (!($101)) {
  $102 = $1;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP8[$104>>0]|0;
  $106 = $105 << 24 >> 24;
  $107 = ($106|0)==(69);
  if (!($107)) {
   $110 = $1;
   $111 = ((($110)) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = HEAP8[$112>>0]|0;
   $114 = $113 << 24 >> 24;
   $115 = ($114|0)==(46);
   if (!($115)) {
    $119 = $2;
    STACKTOP = sp;return ($119|0);
   }
   $2 = 138;
   $116 = $1;
   _digit_sequence($116);
   $117 = $1;
   _exponent_part_opt($117);
   $118 = $1;
   _floating_suffix_opt($118);
   $119 = $2;
   STACKTOP = sp;return ($119|0);
  }
 }
 $108 = $1;
 _exponent_part_opt($108);
 $109 = $1;
 _floating_suffix_opt($109);
 $119 = $2;
 STACKTOP = sp;return ($119|0);
}
function _is_number($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(134);
 $4 = $1;
 $5 = ($4|0)==(135);
 $or$cond = $3 | $5;
 $6 = $1;
 $7 = ($6|0)==(136);
 $or$cond3 = $or$cond | $7;
 $8 = $1;
 $9 = ($8|0)==(137);
 $or$cond5 = $or$cond3 | $9;
 $10 = $1;
 $11 = ($10|0)==(138);
 $or$cond7 = $or$cond5 | $11;
 if ($or$cond7) {
  $14 = 1;
  STACKTOP = sp;return ($14|0);
 }
 $12 = $1;
 $13 = ($12|0)==(139);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function _parse_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($2)) + 8|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($2)) + 12|0);
 HEAP32[$7>>2] = 1;
 $8 = (_parse_number_core($2)|0);
 STACKTOP = sp;return ($8|0);
}
function _first_of_character_constant($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(39);
 if ($7) {
  $67 = 1;
  STACKTOP = sp;return ($67|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(117);
 if ($13) {
  $14 = $1;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(56);
  if ($20) {
   $21 = $1;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 2|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)==(39);
   if ($27) {
    $67 = 1;
    STACKTOP = sp;return ($67|0);
   }
  }
 }
 $28 = $1;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)==(117);
 if ($33) {
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(39);
  if ($40) {
   $67 = 1;
   STACKTOP = sp;return ($67|0);
  }
 }
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 << 24 >> 24;
 $46 = ($45|0)==(85);
 if ($46) {
  $47 = $1;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 1|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)==(39);
  if ($53) {
   $67 = 1;
   STACKTOP = sp;return ($67|0);
  }
 }
 $54 = $1;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = ($58|0)==(76);
 if (!($59)) {
  $67 = 0;
  STACKTOP = sp;return ($67|0);
 }
 $60 = $1;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 1|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64 << 24 >> 24;
 $66 = ($65|0)==(39);
 $67 = $66;
 STACKTOP = sp;return ($67|0);
}
function _character_constant($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)==(117);
 $13 = $1;
 do {
  if ($12) {
   _stream_match($13);
   $14 = $1;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = ($19|0)==(56);
   if ($20) {
    $21 = $1;
    _stream_match($21);
   }
  } else {
   $22 = ((($13)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(85);
   if (!($26)) {
    $27 = $1;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)==(76);
    if (!($32)) {
     break;
    }
   }
   $33 = $1;
   _stream_match($33);
  }
 } while(0);
 $34 = $1;
 _stream_match($34);
 while(1) {
  $35 = $1;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)!=(39);
  $41 = $1;
  if (!($40)) {
   break;
  }
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)==(92);
  $47 = $1;
  _stream_match($47);
  if ($46) {
   $48 = $1;
   _stream_match($48);
  }
 }
 _stream_match($41);
 $49 = $2;
 $50 = $1;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (_new_token($49,$52,129)|0);
 $3 = $53;
 $54 = $3;
 STACKTOP = sp;return ($54|0);
}
function _first_of_string_literal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(34);
 if ($7) {
  $67 = 1;
  STACKTOP = sp;return ($67|0);
 }
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(117);
 if ($13) {
  $14 = $1;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(56);
  if ($20) {
   $21 = $1;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 2|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)==(34);
   if ($27) {
    $67 = 1;
    STACKTOP = sp;return ($67|0);
   }
  }
 }
 $28 = $1;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)==(117);
 if ($33) {
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(34);
  if ($40) {
   $67 = 1;
   STACKTOP = sp;return ($67|0);
  }
 }
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 << 24 >> 24;
 $46 = ($45|0)==(85);
 if ($46) {
  $47 = $1;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 1|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)==(34);
  if ($53) {
   $67 = 1;
   STACKTOP = sp;return ($67|0);
  }
 }
 $54 = $1;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = ($58|0)==(76);
 if (!($59)) {
  $67 = 0;
  STACKTOP = sp;return ($67|0);
 }
 $60 = $1;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 1|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64 << 24 >> 24;
 $66 = ($65|0)==(34);
 $67 = $66;
 STACKTOP = sp;return ($67|0);
}
function _string_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $2;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $7 = $16;
 $17 = $2;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)==(117);
 $23 = $2;
 do {
  if ($22) {
   _stream_match($23);
   $24 = $2;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(56);
   if ($29) {
    $30 = $2;
    _stream_match($30);
   }
  } else {
   $31 = ((($23)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(85);
   if (!($35)) {
    $36 = $2;
    $37 = ((($36)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(76);
    if (!($41)) {
     break;
    }
   }
   $42 = $2;
   _stream_match($42);
  }
 } while(0);
 $43 = $2;
 _stream_match($43);
 while(1) {
  $44 = $2;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)!=(34);
  $50 = $2;
  if (!($49)) {
   label = 15;
   break;
  }
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)==(0);
  if ($55) {
   label = 11;
   break;
  }
  $56 = $2;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)==(10);
  if ($61) {
   label = 11;
   break;
  }
  $67 = $2;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = ($71|0)==(92);
  $73 = $2;
  _stream_match($73);
  if ($72) {
   $74 = $2;
   _stream_match($74);
  }
 }
 if ((label|0) == 11) {
  $62 = $3;
  $63 = $2;
  $64 = HEAP32[$63>>2]|0;
  $65 = $6;
  $66 = $7;
  HEAP32[$vararg_buffer>>2] = $64;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $65;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $66;
  (_seterror($62,5590,$vararg_buffer)|0);
  $80 = $4;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 15) {
  _stream_match($50);
  $75 = $5;
  $76 = $2;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_new_token($75,$78,128)|0);
  $4 = $79;
  $80 = $4;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _ppnumber($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 $8 = (_is_digit($7)|0);
 $9 = ($8|0)!=(0);
 $10 = $1;
 do {
  if ($9) {
   _stream_match($10);
  } else {
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)==(46);
   if ($15) {
    $16 = $1;
    _stream_match($16);
    $17 = $1;
    _stream_match($17);
    break;
   } else {
    ___assert_fail((9119|0),(5558|0),1100,(5632|0));
    // unreachable;
   }
  }
 } while(0);
 L8: while(1) {
  $18 = $1;
  $19 = (_is_digit($18)|0);
  $20 = ($19|0)!=(0);
  $21 = $1;
  do {
   if ($20) {
    _stream_match($21);
   } else {
    $22 = (_is_nondigit($21)|0);
    $23 = ($22|0)!=(0);
    $24 = $1;
    if ($23) {
     _stream_match($24);
     break;
    }
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = ($28|0)==(39);
    $30 = $1;
    if ($29) {
     _stream_match($30);
     $31 = $1;
     $32 = (_is_digit($31)|0);
     $33 = ($32|0)!=(0);
     $34 = $1;
     if ($33) {
      _stream_match($34);
      break;
     }
     $35 = (_is_nondigit($34)|0);
     $36 = ($35|0)!=(0);
     if (!($36)) {
      label = 16;
      break L8;
     }
     $37 = $1;
     _stream_match($37);
     break;
    }
    $38 = ((($30)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)==(101);
    if (!($42)) {
     $43 = $1;
     $44 = ((($43)) + 4|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     $48 = ($47|0)==(69);
     if (!($48)) {
      $49 = $1;
      $50 = ((($49)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = HEAP8[$51>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($53|0)==(112);
      if (!($54)) {
       $55 = $1;
       $56 = ((($55)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = HEAP8[$57>>0]|0;
       $59 = $58 << 24 >> 24;
       $60 = ($59|0)==(80);
       if (!($60)) {
        $63 = $1;
        $64 = ((($63)) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = HEAP8[$65>>0]|0;
        $67 = $66 << 24 >> 24;
        $68 = ($67|0)==(46);
        if (!($68)) {
         label = 25;
         break L8;
        }
        $69 = $1;
        _stream_match($69);
        break;
       }
      }
     }
    }
    $61 = $1;
    _stream_match($61);
    $62 = $1;
    _stream_match($62);
   }
  } while(0);
 }
 if ((label|0) == 16) {
  ___assert_fail((9119|0),(5558|0),1126,(5632|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  $70 = $2;
  $71 = $1;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_new_token($70,$73,132)|0);
  $3 = $74;
  $75 = $3;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _tokenizer($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer = sp;
 $9 = sp + 104|0;
 $10 = sp + 88|0;
 $29 = sp + 128|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $35 = $5;
 $36 = ($35|0)==(0|0);
 if ($36) {
  ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
  STACKTOP = sp;return;
 }
 $37 = $5;
 HEAP32[$10>>2] = $37;
 $38 = ((($10)) + 4|0);
 $39 = $5;
 HEAP32[$38>>2] = $39;
 $40 = ((($10)) + 8|0);
 HEAP32[$40>>2] = 1;
 $41 = ((($10)) + 12|0);
 HEAP32[$41>>2] = 1;
 $11 = 0;
 $42 = $6;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $12 = 11088;
  $44 = $12;
  $45 = $12;
  $46 = ((($45)) + 1|0);
  $47 = (_new_token($44,$46,8998)|0);
  $11 = $47;
  $48 = $7;
  $49 = $11;
  $50 = ((($49)) + 20|0);
  HEAP32[$50>>2] = $48;
  $51 = $6;
  $52 = (___strdup($51)|0);
  $53 = $11;
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = $52;
  $55 = $11;
  (_token_list_add($9,$55)|0);
 }
 $13 = 1;
 $14 = 0;
 L8: while(1) {
  $56 = ((($10)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $15 = $57;
  $58 = ((($10)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $16 = $59;
  $60 = ((($10)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(0);
  if ($64) {
   label = 7;
   break;
  }
  $65 = (_is_digit($10)|0);
  $66 = ($65|0)!=(0);
  do {
   if (!($66)) {
    $67 = ((($10)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $71 = ($70|0)==(46);
    if ($71) {
     $72 = ((($10)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (_isdigit($75)|0);
     $77 = ($76|0)!=(0);
     if ($77) {
      break;
     }
    }
    $106 = (_first_of_string_literal($10)|0);
    if ($106) {
     $107 = $8;
     $108 = (_string_literal($10,$107)|0);
     $18 = $108;
     $109 = $18;
     $110 = ($109|0)==(0|0);
     if ($110) {
      break L8;
     }
     $111 = $14;
     $112 = $111&1;
     $113 = $112 ? 4 : 0;
     $114 = $18;
     $115 = ((($114)) + 24|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $116 | $113;
     HEAP32[$115>>2] = $117;
     $118 = $13;
     $119 = $118&1;
     $120 = $119 ? 8 : 0;
     $121 = $18;
     $122 = ((($121)) + 24|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $123 | $120;
     HEAP32[$122>>2] = $124;
     $125 = $7;
     $126 = $18;
     $127 = ((($126)) + 20|0);
     HEAP32[$127>>2] = $125;
     $128 = $11;
     $129 = $18;
     $130 = ((($129)) + 28|0);
     HEAP32[$130>>2] = $128;
     $131 = $15;
     $132 = $18;
     $133 = ((($132)) + 12|0);
     HEAP32[$133>>2] = $131;
     $134 = $16;
     $135 = $18;
     $136 = ((($135)) + 16|0);
     HEAP32[$136>>2] = $134;
     $137 = $18;
     (_token_list_add($9,$137)|0);
     $13 = 0;
     $14 = 0;
     continue L8;
    }
    $138 = (_first_of_character_constant($10)|0);
    if ($138) {
     $139 = (_character_constant($10)|0);
     $19 = $139;
     $140 = $14;
     $141 = $140&1;
     $142 = $141 ? 4 : 0;
     $143 = $19;
     $144 = ((($143)) + 24|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $145 | $142;
     HEAP32[$144>>2] = $146;
     $147 = $13;
     $148 = $147&1;
     $149 = $148 ? 8 : 0;
     $150 = $19;
     $151 = ((($150)) + 24|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $152 | $149;
     HEAP32[$151>>2] = $153;
     $154 = $7;
     $155 = $19;
     $156 = ((($155)) + 20|0);
     HEAP32[$156>>2] = $154;
     $157 = $11;
     $158 = $19;
     $159 = ((($158)) + 28|0);
     HEAP32[$159>>2] = $157;
     $160 = $15;
     $161 = $19;
     $162 = ((($161)) + 12|0);
     HEAP32[$162>>2] = $160;
     $163 = $16;
     $164 = $19;
     $165 = ((($164)) + 16|0);
     HEAP32[$165>>2] = $163;
     $166 = $19;
     (_token_list_add($9,$166)|0);
     $13 = 0;
     $14 = 0;
     continue L8;
    }
    $167 = (_is_nondigit($10)|0);
    $168 = ($167|0)!=(0);
    if ($168) {
     $169 = (_identifier($10)|0);
     $20 = $169;
     $170 = $14;
     $171 = $170&1;
     $172 = $171 ? 4 : 0;
     $173 = $20;
     $174 = ((($173)) + 24|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $175 | $172;
     HEAP32[$174>>2] = $176;
     $177 = $13;
     $178 = $177&1;
     $179 = $178 ? 8 : 0;
     $180 = $20;
     $181 = ((($180)) + 24|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $182 | $179;
     HEAP32[$181>>2] = $183;
     $184 = $7;
     $185 = $20;
     $186 = ((($185)) + 20|0);
     HEAP32[$186>>2] = $184;
     $187 = $11;
     $188 = $20;
     $189 = ((($188)) + 28|0);
     HEAP32[$189>>2] = $187;
     $190 = $15;
     $191 = $20;
     $192 = ((($191)) + 12|0);
     HEAP32[$192>>2] = $190;
     $193 = $16;
     $194 = $20;
     $195 = ((($194)) + 16|0);
     HEAP32[$195>>2] = $193;
     $196 = $20;
     (_token_list_add($9,$196)|0);
     $13 = 0;
     $14 = 0;
     continue L8;
    }
    $197 = ((($10)) + 4|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = HEAP8[$198>>0]|0;
    $200 = $199 << 24 >> 24;
    $201 = ($200|0)==(32);
    if (!($201)) {
     $202 = ((($10)) + 4|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = HEAP8[$203>>0]|0;
     $205 = $204 << 24 >> 24;
     $206 = ($205|0)==(9);
     if (!($206)) {
      $250 = ((($10)) + 4|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = HEAP8[$251>>0]|0;
      $253 = $252 << 24 >> 24;
      $254 = ($253|0)==(47);
      if ($254) {
       $255 = ((($10)) + 4|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = ((($256)) + 1|0);
       $258 = HEAP8[$257>>0]|0;
       $259 = $258 << 24 >> 24;
       $260 = ($259|0)==(47);
       if ($260) {
        $261 = ((($10)) + 4|0);
        $262 = HEAP32[$261>>2]|0;
        $23 = $262;
        _stream_match($10);
        _stream_match($10);
        while(1) {
         $263 = ((($10)) + 4|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = HEAP8[$264>>0]|0;
         $266 = $265 << 24 >> 24;
         $267 = ($266|0)!=(10);
         if (!($267)) {
          break;
         }
         _stream_match($10);
        }
        $268 = $23;
        $269 = ((($10)) + 4|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (_new_token($268,$270,130)|0);
        $24 = $271;
        $272 = $14;
        $273 = $272&1;
        $274 = $273 ? 4 : 0;
        $275 = $24;
        $276 = ((($275)) + 24|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277 | $274;
        HEAP32[$276>>2] = $278;
        $279 = $13;
        $280 = $279&1;
        $281 = $280 ? 8 : 0;
        $282 = $24;
        $283 = ((($282)) + 24|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 | $281;
        HEAP32[$283>>2] = $285;
        $286 = $7;
        $287 = $24;
        $288 = ((($287)) + 20|0);
        HEAP32[$288>>2] = $286;
        $289 = $11;
        $290 = $24;
        $291 = ((($290)) + 28|0);
        HEAP32[$291>>2] = $289;
        $292 = $15;
        $293 = $24;
        $294 = ((($293)) + 12|0);
        HEAP32[$294>>2] = $292;
        $295 = $16;
        $296 = $24;
        $297 = ((($296)) + 16|0);
        HEAP32[$297>>2] = $295;
        $298 = $24;
        (_token_list_add($9,$298)|0);
        $13 = 1;
        $14 = 0;
        continue L8;
       }
      }
      $299 = ((($10)) + 4|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = HEAP8[$300>>0]|0;
      $302 = $301 << 24 >> 24;
      $303 = ($302|0)==(47);
      if ($303) {
       $304 = ((($10)) + 4|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = ((($305)) + 1|0);
       $307 = HEAP8[$306>>0]|0;
       $308 = $307 << 24 >> 24;
       $309 = ($308|0)==(42);
       if ($309) {
        $310 = ((($10)) + 4|0);
        $311 = HEAP32[$310>>2]|0;
        $25 = $311;
        _stream_match($10);
        _stream_match($10);
        while(1) {
         $312 = ((($10)) + 4|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = HEAP8[$313>>0]|0;
         $315 = $314 << 24 >> 24;
         $316 = ($315|0)==(42);
         if ($316) {
          $317 = ((($10)) + 4|0);
          $318 = HEAP32[$317>>2]|0;
          $319 = ((($318)) + 1|0);
          $320 = HEAP8[$319>>0]|0;
          $321 = $320 << 24 >> 24;
          $322 = ($321|0)==(47);
          if ($322) {
           label = 37;
           break;
          }
         }
         $323 = ((($10)) + 4|0);
         $324 = HEAP32[$323>>2]|0;
         $325 = HEAP8[$324>>0]|0;
         $326 = $325 << 24 >> 24;
         $327 = ($326|0)==(0);
         if ($327) {
          label = 39;
          break;
         }
         _stream_match($10);
        }
        if ((label|0) == 37) {
         label = 0;
         _stream_match($10);
         _stream_match($10);
        }
        else if ((label|0) == 39) {
         label = 0;
         $328 = $8;
         (_seterror($328,5641,$vararg_buffer)|0);
        }
        $329 = $25;
        $330 = ((($10)) + 4|0);
        $331 = HEAP32[$330>>2]|0;
        $332 = (_new_token($329,$331,131)|0);
        $26 = $332;
        $333 = $14;
        $334 = $333&1;
        $335 = $334 ? 4 : 0;
        $336 = $26;
        $337 = ((($336)) + 24|0);
        $338 = HEAP32[$337>>2]|0;
        $339 = $338 | $335;
        HEAP32[$337>>2] = $339;
        $340 = $13;
        $341 = $340&1;
        $342 = $341 ? 8 : 0;
        $343 = $26;
        $344 = ((($343)) + 24|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = $345 | $342;
        HEAP32[$344>>2] = $346;
        $347 = $7;
        $348 = $26;
        $349 = ((($348)) + 20|0);
        HEAP32[$349>>2] = $347;
        $350 = $11;
        $351 = $26;
        $352 = ((($351)) + 28|0);
        HEAP32[$352>>2] = $350;
        $353 = $15;
        $354 = $26;
        $355 = ((($354)) + 12|0);
        HEAP32[$355>>2] = $353;
        $356 = $16;
        $357 = $26;
        $358 = ((($357)) + 16|0);
        HEAP32[$358>>2] = $356;
        $359 = $26;
        (_token_list_add($9,$359)|0);
        $13 = 0;
        $14 = 0;
        continue L8;
       }
      }
      $360 = $13;
      $361 = $360&1;
      if ($361) {
       $362 = ((($10)) + 4|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = HEAP8[$363>>0]|0;
       $365 = $364 << 24 >> 24;
       $366 = ($365|0)==(35);
       if ($366) {
        $367 = ((($10)) + 4|0);
        $368 = HEAP32[$367>>2]|0;
        $27 = $368;
        _stream_match($10);
        $369 = $27;
        $370 = ((($10)) + 4|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = (_new_token($369,$371,35)|0);
        $28 = $372;
        $373 = $14;
        $374 = $373&1;
        $375 = $374 ? 4 : 0;
        $376 = $28;
        $377 = ((($376)) + 24|0);
        $378 = HEAP32[$377>>2]|0;
        $379 = $378 | $375;
        HEAP32[$377>>2] = $379;
        $380 = $13;
        $381 = $380&1;
        $382 = $381 ? 8 : 0;
        $383 = $28;
        $384 = ((($383)) + 24|0);
        $385 = HEAP32[$384>>2]|0;
        $386 = $385 | $382;
        HEAP32[$384>>2] = $386;
        $387 = $7;
        $388 = $28;
        $389 = ((($388)) + 20|0);
        HEAP32[$389>>2] = $387;
        $390 = $11;
        $391 = $28;
        $392 = ((($391)) + 28|0);
        HEAP32[$392>>2] = $390;
        $393 = $15;
        $394 = $28;
        $395 = ((($394)) + 12|0);
        HEAP32[$395>>2] = $393;
        $396 = $16;
        $397 = $28;
        $398 = ((($397)) + 16|0);
        HEAP32[$398>>2] = $396;
        $399 = $28;
        HEAP32[$399>>2] = 127;
        $400 = $28;
        (_token_list_add($9,$400)|0);
        $13 = 0;
        $14 = 0;
        continue L8;
       }
      }
      $401 = ((($10)) + 4|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = HEAP8[$402>>0]|0;
      $404 = $403 << 24 >> 24;
      $405 = ($404|0)==(10);
      if (!($405)) {
       $406 = ((($10)) + 4|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = HEAP8[$407>>0]|0;
       $409 = $408 << 24 >> 24;
       $410 = ($409|0)==(13);
       if (!($410)) {
        $450 = ((($10)) + 4|0);
        $451 = HEAP32[$450>>2]|0;
        $31 = $451;
        $452 = (_is_punctuator($10)|0);
        $32 = $452;
        $453 = $32;
        $454 = ($453|0)!=(0);
        if ($454) {
         $455 = $31;
         $456 = ((($10)) + 4|0);
         $457 = HEAP32[$456>>2]|0;
         $458 = $32;
         $459 = (_new_token($455,$457,$458)|0);
         $33 = $459;
         $460 = $14;
         $461 = $460&1;
         $462 = $461 ? 4 : 0;
         $463 = $33;
         $464 = ((($463)) + 24|0);
         $465 = HEAP32[$464>>2]|0;
         $466 = $465 | $462;
         HEAP32[$464>>2] = $466;
         $467 = $13;
         $468 = $467&1;
         $469 = $468 ? 8 : 0;
         $470 = $33;
         $471 = ((($470)) + 24|0);
         $472 = HEAP32[$471>>2]|0;
         $473 = $472 | $469;
         HEAP32[$471>>2] = $473;
         $474 = $7;
         $475 = $33;
         $476 = ((($475)) + 20|0);
         HEAP32[$476>>2] = $474;
         $477 = $11;
         $478 = $33;
         $479 = ((($478)) + 28|0);
         HEAP32[$479>>2] = $477;
         $480 = $15;
         $481 = $33;
         $482 = ((($481)) + 12|0);
         HEAP32[$482>>2] = $480;
         $483 = $16;
         $484 = $33;
         $485 = ((($484)) + 16|0);
         HEAP32[$485>>2] = $483;
         $486 = $33;
         (_token_list_add($9,$486)|0);
         $13 = 0;
         $14 = 0;
         continue L8;
        } else {
         _stream_match($10);
         $487 = $31;
         $488 = ((($10)) + 4|0);
         $489 = HEAP32[$488>>2]|0;
         $490 = (_new_token($487,$489,133)|0);
         $34 = $490;
         $491 = $14;
         $492 = $491&1;
         $493 = $492 ? 4 : 0;
         $494 = $34;
         $495 = ((($494)) + 24|0);
         $496 = HEAP32[$495>>2]|0;
         $497 = $496 | $493;
         HEAP32[$495>>2] = $497;
         $498 = $13;
         $499 = $498&1;
         $500 = $499 ? 8 : 0;
         $501 = $34;
         $502 = ((($501)) + 24|0);
         $503 = HEAP32[$502>>2]|0;
         $504 = $503 | $500;
         HEAP32[$502>>2] = $504;
         $505 = $7;
         $506 = $34;
         $507 = ((($506)) + 20|0);
         HEAP32[$507>>2] = $505;
         $508 = $11;
         $509 = $34;
         $510 = ((($509)) + 28|0);
         HEAP32[$510>>2] = $508;
         $511 = $15;
         $512 = $34;
         $513 = ((($512)) + 12|0);
         HEAP32[$513>>2] = $511;
         $514 = $16;
         $515 = $34;
         $516 = ((($515)) + 16|0);
         HEAP32[$516>>2] = $514;
         $517 = $34;
         (_token_list_add($9,$517)|0);
         $13 = 0;
         $14 = 0;
         continue L8;
        }
       }
      }
      $411 = ((($10)) + 4|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = HEAP8[$412>>0]|0;
      $414 = $413 << 24 >> 24;
      $415 = ($414|0)==(13);
      if ($415) {
       $416 = ((($10)) + 4|0);
       $417 = HEAP32[$416>>2]|0;
       $418 = HEAP8[$417>>0]|0;
       $419 = $418 << 24 >> 24;
       $420 = ($419|0)==(10);
       if ($420) {
        _stream_match($10);
        _stream_match($10);
       } else {
        label = 50;
       }
      } else {
       label = 50;
      }
      if ((label|0) == 50) {
       label = 0;
       _stream_match($10);
      }
      ;HEAP8[$29>>0]=HEAP8[5664>>0]|0;HEAP8[$29+1>>0]=HEAP8[5664+1>>0]|0;
      $421 = ((($29)) + 1|0);
      $422 = (_new_token($29,$421,10)|0);
      $30 = $422;
      $423 = $14;
      $424 = $423&1;
      $425 = $424 ? 4 : 0;
      $426 = $30;
      $427 = ((($426)) + 24|0);
      $428 = HEAP32[$427>>2]|0;
      $429 = $428 | $425;
      HEAP32[$427>>2] = $429;
      $430 = $13;
      $431 = $430&1;
      $432 = $431 ? 8 : 0;
      $433 = $30;
      $434 = ((($433)) + 24|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = $435 | $432;
      HEAP32[$434>>2] = $436;
      $437 = $7;
      $438 = $30;
      $439 = ((($438)) + 20|0);
      HEAP32[$439>>2] = $437;
      $440 = $11;
      $441 = $30;
      $442 = ((($441)) + 28|0);
      HEAP32[$442>>2] = $440;
      $443 = $15;
      $444 = $30;
      $445 = ((($444)) + 12|0);
      HEAP32[$445>>2] = $443;
      $446 = $16;
      $447 = $30;
      $448 = ((($447)) + 16|0);
      HEAP32[$448>>2] = $446;
      $449 = $30;
      (_token_list_add($9,$449)|0);
      $13 = 1;
      $14 = 0;
      continue L8;
     }
    }
    $207 = ((($10)) + 4|0);
    $208 = HEAP32[$207>>2]|0;
    $21 = $208;
    while(1) {
     $209 = ((($10)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = HEAP8[$210>>0]|0;
     $212 = $211 << 24 >> 24;
     $213 = ($212|0)==(32);
     if (!($213)) {
      $214 = ((($10)) + 4|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = HEAP8[$215>>0]|0;
      $217 = $216 << 24 >> 24;
      $218 = ($217|0)==(9);
      if (!($218)) {
       break;
      }
     }
     _stream_match($10);
    }
    $219 = $21;
    $220 = ((($10)) + 4|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = (_new_token($219,$221,142)|0);
    $22 = $222;
    $223 = $14;
    $224 = $223&1;
    $225 = $224 ? 4 : 0;
    $226 = $22;
    $227 = ((($226)) + 24|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $228 | $225;
    HEAP32[$227>>2] = $229;
    $230 = $13;
    $231 = $230&1;
    $232 = $231 ? 8 : 0;
    $233 = $22;
    $234 = ((($233)) + 24|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $235 | $232;
    HEAP32[$234>>2] = $236;
    $237 = $7;
    $238 = $22;
    $239 = ((($238)) + 20|0);
    HEAP32[$239>>2] = $237;
    $240 = $11;
    $241 = $22;
    $242 = ((($241)) + 28|0);
    HEAP32[$242>>2] = $240;
    $243 = $15;
    $244 = $22;
    $245 = ((($244)) + 12|0);
    HEAP32[$245>>2] = $243;
    $246 = $16;
    $247 = $22;
    $248 = ((($247)) + 16|0);
    HEAP32[$248>>2] = $246;
    $249 = $22;
    (_token_list_add($9,$249)|0);
    $14 = 1;
    continue L8;
   }
  } while(0);
  $78 = (_ppnumber($10)|0);
  $17 = $78;
  $79 = $14;
  $80 = $79&1;
  $81 = $80 ? 4 : 0;
  $82 = $17;
  $83 = ((($82)) + 24|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 | $81;
  HEAP32[$83>>2] = $85;
  $86 = $13;
  $87 = $86&1;
  $88 = $87 ? 8 : 0;
  $89 = $17;
  $90 = ((($89)) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $91 | $88;
  HEAP32[$90>>2] = $92;
  $93 = $7;
  $94 = $17;
  $95 = ((($94)) + 20|0);
  HEAP32[$95>>2] = $93;
  $96 = $11;
  $97 = $17;
  $98 = ((($97)) + 28|0);
  HEAP32[$98>>2] = $96;
  $99 = $15;
  $100 = $17;
  $101 = ((($100)) + 12|0);
  HEAP32[$101>>2] = $99;
  $102 = $16;
  $103 = $17;
  $104 = ((($103)) + 16|0);
  HEAP32[$104>>2] = $102;
  $105 = $17;
  (_token_list_add($9,$105)|0);
  $13 = 0;
  $14 = 0;
 }
 if ((label|0) == 7) {
  _stream_match($10);
 }
 $518 = HEAP32[$9>>2]|0;
 $519 = ($518|0)!=(0|0);
 if (!($519)) {
  ___assert_fail((5666|0),(5558|0),1433,(5684|0));
  // unreachable;
 }
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
 STACKTOP = sp;return;
}
function _group_opt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $12 = sp;
 $6 = $1;
 $7 = $2;
 $13 = $3&1;
 $8 = $13;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 $14 = $7;
 $15 = (_token_list_is_empty($14)|0);
 if ($15) {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = $7;
  $17 = (_token_list_is_empty($16)|0);
  $18 = $17 ^ 1;
  if (!($18)) {
   break;
  }
  $19 = $7;
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(127);
  if ($22) {
   $23 = $7;
   $24 = HEAP32[$23>>2]|0;
   $25 = (_preprocessor_token_ahead_is_identifier($24,5694)|0);
   if ($25) {
    break;
   }
   $26 = $7;
   $27 = HEAP32[$26>>2]|0;
   $28 = (_preprocessor_token_ahead_is_identifier($27,5700)|0);
   if ($28) {
    break;
   }
   $29 = $7;
   $30 = HEAP32[$29>>2]|0;
   $31 = (_preprocessor_token_ahead_is_identifier($30,5705)|0);
   if ($31) {
    break;
   }
   $32 = $7;
   $33 = HEAP32[$32>>2]|0;
   $34 = (_preprocessor_token_ahead_is_identifier($33,5710)|0);
   if ($34) {
    break;
   }
   $35 = $7;
   $36 = HEAP32[$35>>2]|0;
   $37 = (_preprocessor_token_ahead_is_identifier($36,5718)|0);
   if ($37) {
    break;
   }
  }
  $38 = $6;
  $39 = $7;
  $40 = $8;
  $41 = $40&1;
  $42 = $9;
  $43 = $10;
  _group_part($12,$38,$39,$41,$42,$43);
  _token_list_append_list($11,$12);
  $44 = $10;
  $45 = ((($44)) + 200|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0);
  if ($47) {
   break;
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
 STACKTOP = sp;return;
}
function _preprocessor_token_ahead_is_identifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((9000|0),(5558|0),1700,(9010|0));
  // unreachable;
 }
 $8 = $3;
 $9 = (_preprocessor_look_ahead_core($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $5;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(8996);
  if ($14) {
   $15 = $5;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $4;
   $19 = (_strcmp($17,$18)|0);
   $20 = ($19|0)==(0);
   $$expand_i1_val = $20&1;
   HEAP8[$2>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$2>>0]|0;
   $21 = $$pre_trunc&1;
   STACKTOP = sp;return ($21|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $21 = $$pre_trunc&1;
 STACKTOP = sp;return ($21|0);
}
function _group_part($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $1;
 $7 = $2;
 $11 = $3&1;
 $8 = $11;
 $9 = $4;
 $10 = $5;
 $12 = $7;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(127);
 if (!($15)) {
  $62 = $6;
  $63 = $7;
  $64 = $8;
  $65 = $64&1;
  $66 = $9;
  $67 = $10;
  _text_line($0,$62,$63,$65,$66,$67);
  STACKTOP = sp;return;
 }
 $16 = $7;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_preprocessor_token_ahead_is_identifier($17,5727)|0);
 if (!($18)) {
  $19 = $7;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_preprocessor_token_ahead_is_identifier($20,5730)|0);
  if (!($21)) {
   $22 = $7;
   $23 = HEAP32[$22>>2]|0;
   $24 = (_preprocessor_token_ahead_is_identifier($23,5736)|0);
   if (!($24)) {
    $31 = $7;
    $32 = HEAP32[$31>>2]|0;
    $33 = (_preprocessor_token_ahead_is_identifier($32,5743)|0);
    if (!($33)) {
     $34 = $7;
     $35 = HEAP32[$34>>2]|0;
     $36 = (_preprocessor_token_ahead_is_identifier($35,5751)|0);
     if (!($36)) {
      $37 = $7;
      $38 = HEAP32[$37>>2]|0;
      $39 = (_preprocessor_token_ahead_is_identifier($38,5758)|0);
      if (!($39)) {
       $40 = $7;
       $41 = HEAP32[$40>>2]|0;
       $42 = (_preprocessor_token_ahead_is_identifier($41,5764)|0);
       if (!($42)) {
        $43 = $7;
        $44 = HEAP32[$43>>2]|0;
        $45 = (_preprocessor_token_ahead_is_identifier($44,5772)|0);
        if (!($45)) {
         $46 = $7;
         $47 = HEAP32[$46>>2]|0;
         $48 = (_preprocessor_token_ahead_is_identifier($47,5777)|0);
         if (!($48)) {
          $49 = $7;
          $50 = HEAP32[$49>>2]|0;
          $51 = (_preprocessor_token_ahead_is_identifier($50,5783)|0);
          if (!($51)) {
           $58 = $6;
           $59 = $7;
           $60 = $9;
           $61 = $10;
           _non_directive($0,$58,$59,$60,$61);
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
    $52 = $6;
    $53 = $7;
    $54 = $8;
    $55 = $54&1;
    $56 = $9;
    $57 = $10;
    _control_line($0,$52,$53,$55,$56,$57);
    STACKTOP = sp;return;
   }
  }
 }
 $25 = $6;
 $26 = $7;
 $27 = $8;
 $28 = $27&1;
 $29 = $9;
 $30 = $10;
 _if_section($0,$25,$26,$28,$29,$30);
 STACKTOP = sp;return;
}
function _if_section($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 32|0;
 $12 = sp + 57|0;
 $13 = sp + 24|0;
 $14 = sp + 56|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $17 = sp;
 $6 = $1;
 $7 = $2;
 $18 = $3&1;
 $8 = $18;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 HEAP8[$12>>0] = 0;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $21&1;
 $23 = $9;
 $24 = $10;
 _if_group($13,$19,$20,$22,$23,$12,$24);
 $25 = $10;
 $26 = ((($25)) + 200|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 if ($28) {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
 _token_list_append_list($11,$13);
 HEAP8[$14>>0] = 0;
 $29 = $7;
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(127);
 if ($32) {
  $33 = $7;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_preprocessor_token_ahead_is_identifier($34,5705)|0);
  if ($35) {
   label = 6;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $36 = $7;
  $37 = HEAP32[$36>>2]|0;
  $38 = (_preprocessor_token_ahead_is_identifier($37,5710)|0);
  if ($38) {
   label = 6;
  } else {
   $39 = $7;
   $40 = HEAP32[$39>>2]|0;
   $41 = (_preprocessor_token_ahead_is_identifier($40,5718)|0);
   if ($41) {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $42 = $6;
  $43 = $7;
  $44 = $8;
  $45 = $44&1;
  if ($45) {
   $46 = HEAP8[$12>>0]|0;
   $47 = $46&1;
   $48 = $47 ^ 1;
   $51 = $48;
  } else {
   $51 = 0;
  }
  $49 = $9;
  $50 = $10;
  _elif_groups($15,$42,$43,$51,$49,$14,$50);
  _token_list_append_list($11,$15);
 }
 $52 = $7;
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(127);
 if ($55) {
  $56 = $7;
  $57 = HEAP32[$56>>2]|0;
  $58 = (_preprocessor_token_ahead_is_identifier($57,5700)|0);
  if ($58) {
   $59 = $6;
   $60 = $7;
   $61 = $8;
   $62 = $61&1;
   if ($62) {
    $63 = HEAP8[$12>>0]|0;
    $64 = $63&1;
    if ($64) {
     $70 = 0;
    } else {
     $65 = HEAP8[$14>>0]|0;
     $66 = $65&1;
     $67 = $66 ^ 1;
     $70 = $67;
    }
   } else {
    $70 = 0;
   }
   $68 = $9;
   $69 = $10;
   _else_group($16,$59,$60,$70,$68,$69);
   _token_list_append_list($11,$16);
  }
 }
 $71 = $10;
 $72 = ((($71)) + 200|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0);
 if ($74) {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
 $75 = $6;
 $76 = $7;
 $77 = $9;
 $78 = $10;
 _endif_line($17,$75,$76,$77,$78);
 _token_list_append_list($11,$17);
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
 STACKTOP = sp;return;
}
function _control_line($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $vararg_buffer5 = sp + 432|0;
 $vararg_buffer3 = sp + 424|0;
 $vararg_buffer1 = sp + 416|0;
 $vararg_buffer = sp + 408|0;
 $11 = sp + 544|0;
 $12 = sp + 536|0;
 $13 = sp + 304|0;
 $14 = sp;
 $15 = sp + 568|0;
 $17 = sp + 520|0;
 $18 = sp + 512|0;
 $21 = sp + 496|0;
 $24 = sp + 480|0;
 $27 = sp + 464|0;
 $28 = sp + 456|0;
 $29 = sp + 448|0;
 $30 = sp + 440|0;
 $6 = $1;
 $7 = $2;
 $31 = $3&1;
 $8 = $31;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 $32 = $8;
 $33 = $32&1;
 if (!($33)) {
  $34 = $6;
  $35 = $7;
  $36 = $9;
  _pp_tokens_opt($12,$34,$35,$36);
  _token_list_append_list($11,$12);
  $37 = $7;
  $38 = $9;
  $39 = $10;
  (_match_token_level($11,$37,10,$38,$39)|0);
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
 $40 = $7;
 $41 = $9;
 $42 = $10;
 (_match_token_level($11,$40,127,$41,$42)|0);
 $43 = $7;
 $44 = $9;
 _skip_blanks_level($11,$43,$44);
 $45 = $7;
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_strcmp($48,5743)|0);
 $50 = ($49|0)==(0);
 $51 = $7;
 do {
  if ($50) {
   $52 = $9;
   $53 = $10;
   (_match_token_level($11,$51,8996,$52,$53)|0);
   $54 = $7;
   $55 = $9;
   _skip_blanks_level($11,$54,$55);
   dest=$13; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $56 = $7;
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(128);
   L7: do {
    if ($59) {
     $60 = $7;
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     (_strcat($13,$63)|0);
     $64 = $7;
     $65 = $9;
     _prematch_level($11,$64,$65);
    } else {
     while(1) {
      $66 = $7;
      $67 = HEAP32[$66>>2]|0;
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)!=(62);
      $70 = $7;
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($71)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      (_strcat($13,$73)|0);
      $74 = $7;
      $75 = $9;
      _prematch_level($11,$74,$75);
      if (!($69)) {
       break L7;
      }
     }
    }
   } while(0);
   $76 = $7;
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)!=(0|0);
   L14: do {
    if ($78) {
     while(1) {
      $79 = $7;
      $80 = HEAP32[$79>>2]|0;
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)!=(10);
      if (!($82)) {
       break L14;
      }
      $83 = $7;
      $84 = $9;
      _prematch_level($11,$83,$84);
     }
    }
   } while(0);
   $85 = $7;
   $86 = $9;
   $87 = $10;
   (_match_token_level($11,$85,10,$86,$87)|0);
   _memset(($14|0),0,300)|0;
   $88 = (_strlen($13)|0);
   $89 = (($88) - 1)|0;
   $90 = (($13) + ($89)|0);
   HEAP8[$90>>0] = 0;
   HEAP8[$15>>0] = 0;
   $91 = $6;
   $92 = ((($13)) + 1|0);
   $93 = (_find_and_read_file($91,$92,$14,$15)|0);
   $16 = $93;
   $94 = $16;
   $95 = ($94|0)!=(0|0);
   if ($95) {
    $96 = $16;
    $97 = $9;
    $98 = (($97) + 1)|0;
    $99 = $10;
    _tokenizer($17,$96,$14,$98,$99);
    $100 = $6;
    $101 = $9;
    $102 = (($101) + 1)|0;
    $103 = $10;
    _preprocessor($18,$100,$17,$102,$103);
    _token_list_append_list($11,$18);
    break;
   }
   $104 = HEAP8[$15>>0]|0;
   $105 = $104&1;
   if (!($105)) {
    $106 = $10;
    $107 = ((($11)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($13)) + 1|0);
    HEAP32[$vararg_buffer>>2] = $109;
    _seterror_with_token($106,$108,8618,$vararg_buffer);
   }
  } else {
   $110 = HEAP32[$51>>2]|0;
   $111 = ((($110)) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (_strcmp($112,5751)|0);
   $114 = ($113|0)==(0);
   if ($114) {
    $115 = (_calloc(1,32)|0);
    $19 = $115;
    $116 = $19;
    $117 = ($116|0)==(0|0);
    if ($117) {
     $118 = $10;
     (_seterror($118,8636,$vararg_buffer1)|0);
     break;
    }
    $119 = $7;
    $120 = $9;
    $121 = $10;
    (_match_token_level($11,$119,8996,$120,$121)|0);
    $122 = $7;
    $123 = $9;
    _skip_blanks_level($11,$122,$123);
    $124 = $6;
    $125 = ((($124)) + 4|0);
    $126 = $7;
    $127 = HEAP32[$126>>2]|0;
    $128 = ((($127)) + 4|0);
    $129 = HEAP32[$128>>2]|0;
    (_hashmap_find($125,$129)|0);
    $130 = $6;
    $131 = ((($130)) + 4|0);
    $132 = $7;
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($133)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $19;
    (_hashmap_set($131,$135,$136)|0);
    $137 = $7;
    $138 = HEAP32[$137>>2]|0;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (___strdup($140)|0);
    $142 = $19;
    $143 = ((($142)) + 8|0);
    HEAP32[$143>>2] = $141;
    $144 = $7;
    $145 = $9;
    $146 = $10;
    (_match_token_level($11,$144,8996,$145,$146)|0);
    $147 = $7;
    $148 = HEAP32[$147>>2]|0;
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(40);
    $151 = $19;
    $152 = ((($151)) + 24|0);
    do {
     if ($150) {
      HEAP8[$152>>0] = 1;
      $153 = $7;
      $154 = $9;
      $155 = $10;
      (_match_token_level($11,$153,40,$154,$155)|0);
      $156 = $7;
      $157 = $9;
      _skip_blanks_level($11,$156,$157);
      $158 = $7;
      $159 = HEAP32[$158>>2]|0;
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160|0)==(3026478);
      if ($161) {
       $162 = (_calloc(1,8)|0);
       $20 = $162;
       $163 = (___strdup(6602)|0);
       $164 = $20;
       HEAP32[$164>>2] = $163;
       $165 = $20;
       $166 = $19;
       $167 = ((($166)) + 20|0);
       HEAP32[$167>>2] = $165;
       $168 = $7;
       $169 = $9;
       $170 = $10;
       (_match_token_level($11,$168,3026478,$169,$170)|0);
       $171 = $7;
       $172 = $9;
       _skip_blanks_level($11,$171,$172);
       $173 = $7;
       $174 = $9;
       $175 = $10;
       (_match_token_level($11,$173,41,$174,$175)|0);
       break;
      }
      $176 = $7;
      $177 = HEAP32[$176>>2]|0;
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(41);
      if ($179) {
       $180 = $7;
       $181 = $9;
       $182 = $10;
       (_match_token_level($11,$180,41,$181,$182)|0);
       $183 = $7;
       $184 = $9;
       _skip_blanks_level($11,$183,$184);
       break;
      }
      $185 = $19;
      $186 = $7;
      $187 = $9;
      $188 = $10;
      _identifier_list($21,$185,$186,$187,$188);
      _token_list_append_list($11,$21);
      $189 = $7;
      $190 = $9;
      _skip_blanks_level($11,$189,$190);
      $191 = $7;
      $192 = HEAP32[$191>>2]|0;
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==(3026478);
      if ($194) {
       $195 = (_calloc(1,8)|0);
       $22 = $195;
       $196 = (___strdup(6602)|0);
       $197 = $22;
       HEAP32[$197>>2] = $196;
       $198 = $19;
       $199 = ((($198)) + 20|0);
       $200 = HEAP32[$199>>2]|0;
       $23 = $200;
       $201 = $23;
       $202 = ($201|0)!=(0|0);
       if (!($202)) {
        ___assert_fail((8650|0),(5558|0),2472,(8664|0));
        // unreachable;
       }
       while(1) {
        $203 = $23;
        $204 = ((($203)) + 4|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = ($205|0)!=(0|0);
        if (!($206)) {
         break;
        }
        $207 = $23;
        $208 = ((($207)) + 4|0);
        $209 = HEAP32[$208>>2]|0;
        $23 = $209;
       }
       $210 = $22;
       $211 = $23;
       $212 = ((($211)) + 4|0);
       HEAP32[$212>>2] = $210;
       $213 = $7;
       $214 = $9;
       $215 = $10;
       (_match_token_level($11,$213,3026478,$214,$215)|0);
      }
      $216 = $7;
      $217 = $9;
      _skip_blanks_level($11,$216,$217);
      $218 = $7;
      $219 = $9;
      $220 = $10;
      (_match_token_level($11,$218,41,$219,$220)|0);
     } else {
      HEAP8[$152>>0] = 0;
     }
    } while(0);
    $221 = $19;
    $222 = $7;
    $223 = $9;
    _replacement_list($24,$221,$222,$223);
    _token_list_append_list($11,$24);
    $224 = $7;
    $225 = $9;
    $226 = $10;
    (_match_token_level($11,$224,10,$225,$226)|0);
    break;
   }
   $227 = $7;
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($228)) + 4|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (_strcmp($230,5758)|0);
   $232 = ($231|0)==(0);
   $233 = $7;
   if ($232) {
    $234 = $9;
    $235 = $10;
    (_match_token_level($11,$233,8996,$234,$235)|0);
    $236 = $7;
    $237 = $9;
    _skip_blanks_level($11,$236,$237);
    $238 = $6;
    $239 = ((($238)) + 4|0);
    $240 = $7;
    $241 = HEAP32[$240>>2]|0;
    $242 = ((($241)) + 4|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (_hashmap_remove($239,$243)|0);
    $25 = $244;
    $245 = $6;
    $246 = $7;
    $247 = HEAP32[$246>>2]|0;
    $248 = ((($247)) + 4|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (_find_macro($245,$249)|0);
    $251 = ($250|0)==(0|0);
    if (!($251)) {
     ___assert_fail((8677|0),(5558|0),2502,(8664|0));
     // unreachable;
    }
    $252 = $25;
    $253 = ($252|0)!=(0|0);
    if ($253) {
     $254 = $25;
     $26 = $254;
     $255 = $26;
     _delete_macro($255);
     $256 = $7;
     $257 = $9;
     $258 = $10;
     (_match_token_level($11,$256,8996,$257,$258)|0);
    } else {
     $259 = $7;
     $260 = $9;
     $261 = $10;
     (_match_token_level($11,$259,8996,$260,$261)|0);
    }
    $262 = $7;
    $263 = $9;
    _skip_blanks_level($11,$262,$263);
    $264 = $7;
    $265 = $9;
    $266 = $10;
    (_match_token_level($11,$264,10,$265,$266)|0);
    break;
   }
   $267 = HEAP32[$233>>2]|0;
   $268 = ((($267)) + 4|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (_strcmp($269,5772)|0);
   $271 = ($270|0)==(0);
   $272 = $7;
   if ($271) {
    $273 = $9;
    $274 = $10;
    (_match_token_level($11,$272,8996,$273,$274)|0);
    $275 = $6;
    $276 = $7;
    $277 = $9;
    _pp_tokens_opt($27,$275,$276,$277);
    _token_list_append_list($11,$27);
    $278 = $7;
    $279 = $9;
    $280 = $10;
    (_match_token_level($11,$278,10,$279,$280)|0);
    break;
   }
   $281 = HEAP32[$272>>2]|0;
   $282 = ((($281)) + 4|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = (_strcmp($283,5777)|0);
   $285 = ($284|0)==(0);
   $286 = $7;
   if ($285) {
    $287 = $9;
    $288 = $10;
    (_match_token_level($11,$286,8996,$287,$288)|0);
    $289 = $6;
    $290 = $7;
    $291 = $9;
    _pp_tokens_opt($28,$289,$290,$291);
    _token_list_append_list($11,$28);
    $292 = $10;
    $293 = $7;
    $294 = HEAP32[$293>>2]|0;
    _seterror_with_token($292,$294,8726,$vararg_buffer3);
    $295 = $7;
    $296 = $9;
    $297 = $10;
    (_match_token_level($11,$295,10,$296,$297)|0);
    break;
   }
   $298 = HEAP32[$286>>2]|0;
   $299 = ((($298)) + 4|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (_strcmp($300,5764)|0);
   $302 = ($301|0)==(0);
   $303 = $7;
   if ($302) {
    $304 = $9;
    $305 = $10;
    (_match_token_level($11,$303,8996,$304,$305)|0);
    $306 = $6;
    $307 = $7;
    $308 = $9;
    _pp_tokens_opt($29,$306,$307,$308);
    _print_list($29);
    _token_list_append_list($11,$29);
    $309 = $7;
    $310 = $9;
    $311 = $10;
    (_match_token_level($11,$309,10,$310,$311)|0);
    (_printf(8733,$vararg_buffer5)|0);
    break;
   }
   $312 = HEAP32[$303>>2]|0;
   $313 = ((($312)) + 4|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = (_strcmp($314,5783)|0);
   $316 = ($315|0)==(0);
   if ($316) {
    $317 = $7;
    $318 = $9;
    $319 = $10;
    (_match_token_level($11,$317,8996,$318,$319)|0);
    $320 = $7;
    $321 = $9;
    _skip_blanks_level($11,$320,$321);
    $322 = $7;
    $323 = HEAP32[$322>>2]|0;
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)==(8996);
    if ($325) {
     $326 = $7;
     $327 = HEAP32[$326>>2]|0;
     $328 = ((($327)) + 4|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (_strcmp($329,8742)|0);
     $331 = ($330|0)==(0);
     if ($331) {
      $332 = $6;
      $333 = ((($332)) + 24|0);
      $334 = $7;
      $335 = HEAP32[$334>>2]|0;
      $336 = ((($335)) + 28|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = ((($337)) + 4|0);
      $339 = HEAP32[$338>>2]|0;
      (_hashmap_set($333,$339,(1))|0);
      $340 = $7;
      $341 = $9;
      $342 = $10;
      (_match_token_level($11,$340,8996,$341,$342)|0);
     }
    }
    $343 = $6;
    $344 = $7;
    $345 = $9;
    _pp_tokens_opt($30,$343,$344,$345);
    _token_list_append_list($11,$30);
    $346 = $7;
    $347 = $9;
    $348 = $10;
    (_match_token_level($11,$346,10,$347,$348)|0);
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
 STACKTOP = sp;return;
}
function _non_directive($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 _pp_tokens_opt($9,$10,$11,$12);
 $13 = $6;
 $14 = $7;
 _skip_blanks_level($9,$13,$14);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 (_match_token_level($9,$15,10,$16,$17)|0);
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
 STACKTOP = sp;return;
}
function _text_line($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $11 = sp + 72|0;
 $16 = sp + 40|0;
 $17 = sp + 32|0;
 $19 = sp + 8|0;
 $20 = sp;
 $6 = $1;
 $7 = $2;
 $23 = $3&1;
 $8 = $23;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 L1: while(1) {
  $24 = $7;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   label = 56;
   break;
  }
  $27 = $7;
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(127);
  if (!($30)) {
   label = 56;
   break;
  }
  $12 = 0;
  $31 = $7;
  $32 = HEAP32[$31>>2]|0;
  $13 = $32;
  $33 = $8;
  $34 = $33&1;
  do {
   if ($34) {
    $35 = $7;
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(8996);
    if ($38) {
     $39 = $6;
     $40 = $7;
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_find_macro($39,$43)|0);
     $12 = $44;
     $45 = $12;
     $46 = ($45|0)!=(0|0);
     if ($46) {
      $47 = $12;
      $48 = ((($47)) + 24|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = $49&1;
      if ($50) {
       $51 = $7;
       $52 = HEAP32[$51>>2]|0;
       $53 = (_preprocessor_token_ahead_is($52,40)|0);
       if (!($53)) {
        $12 = 0;
       }
      }
     }
     $54 = $6;
     $55 = ((($54)) + 36|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&1;
     if ($57) {
      $58 = ((($11)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)!=(0|0);
      if ($60) {
       $61 = ((($11)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(8996);
       if ($64) {
        $65 = ((($11)) + 4|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = ((($66)) + 4|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (_strcmp($68,5790)|0);
        $70 = ($69|0)==(0);
        if ($70) {
         $12 = 0;
         break;
        }
       }
      }
      $71 = ((($11)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)!=(0|0);
      if ($73) {
       $74 = ((($11)) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(40);
       if ($77) {
        $78 = ((($11)) + 4|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ((($79)) + 36|0);
        $81 = HEAP32[$80>>2]|0;
        $14 = $81;
        $82 = $14;
        $83 = ($82|0)!=(0|0);
        if ($83) {
         $84 = $14;
         $85 = HEAP32[$84>>2]|0;
         $86 = ($85|0)==(8996);
         if ($86) {
          $87 = $14;
          $88 = ((($87)) + 4|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = (_strcmp($89,5790)|0);
          $91 = ($90|0)==(0);
          if ($91) {
           $12 = 0;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $92 = $12;
  $93 = ($92|0)!=(0|0);
  $94 = $7;
  $95 = HEAP32[$94>>2]|0;
  if (!($93)) {
   $193 = (_token_is_blank($95)|0);
   if ($193) {
    $199 = 1;
   } else {
    $194 = $7;
    $195 = HEAP32[$194>>2]|0;
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(10);
    $199 = $197;
   }
   $198 = $199&1;
   $21 = $198;
   $200 = $8;
   $201 = $200&1;
   if ($201) {
    $202 = $7;
    $203 = HEAP32[$202>>2]|0;
    $204 = HEAP32[$203>>2]|0;
    $205 = (_is_never_final($204)|0);
    $206 = $205 ^ 1;
    $208 = $206;
   } else {
    $208 = 0;
   }
   $207 = $208&1;
   $22 = $207;
   $209 = $6;
   $210 = HEAP32[$209>>2]|0;
   $211 = $210 & 1;
   $212 = ($211|0)!=(0);
   do {
    if ($212) {
     $213 = $22;
     $214 = $213&1;
     $215 = $7;
     if ($214) {
      _prematch($11,$215);
      $216 = ((($11)) + 4|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ((($217)) + 24|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
      $221 = ((($11)) + 4|0);
      $222 = HEAP32[$221>>2]|0;
      _token_promote($222);
      break;
     } else {
      (_token_list_pop_front($215)|0);
      break;
     }
    } else {
     $223 = $21;
     $224 = $223&1;
     $225 = $7;
     _prematch($11,$225);
     if (!($224)) {
      $226 = $22;
      $227 = $226&1;
      if ($227) {
       $228 = ((($11)) + 4|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ((($229)) + 24|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = $231 | 1;
       HEAP32[$230>>2] = $232;
       $233 = ((($11)) + 4|0);
       $234 = HEAP32[$233>>2]|0;
       _token_promote($234);
      }
     }
    }
   } while(0);
   continue;
  }
  $96 = ((($95)) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  $15 = $97;
  $98 = $12;
  $99 = $7;
  $100 = $9;
  $101 = $10;
  _collect_macro_arguments($16,$98,$99,$100,$101);
  $102 = $10;
  $103 = ((($102)) + 200|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)!=(0);
  if ($105) {
   label = 56;
   break;
  }
  $106 = $6;
  $107 = $12;
  $108 = $9;
  $109 = $10;
  _expand_macro($17,$106,0,$107,$16,$108,$109);
  $110 = HEAP32[$17>>2]|0;
  $111 = ($110|0)!=(0|0);
  if ($111) {
   $112 = $15;
   $113 = HEAP32[$17>>2]|0;
   $114 = ((($113)) + 24|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $115 | $112;
   HEAP32[$114>>2] = $116;
  }
  $117 = $13;
  $118 = ((($117)) + 28|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $13;
  $121 = ((($120)) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $13;
  $124 = ((($123)) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  _token_list_set_file($17,$119,$122,$125);
  $126 = $7;
  _token_list_append_list_at_beginning($126,$17);
  $127 = $6;
  $128 = HEAP32[$127>>2]|0;
  $129 = $128 & 1;
  $130 = ($129|0)!=(0);
  if (!($130)) {
   _token_list_append_list($11,$16);
  }
  while(1) {
   $131 = $12;
   $132 = ($131|0)!=(0|0);
   if (!($132)) {
    break;
   }
   $12 = 0;
   $133 = $7;
   $134 = HEAP32[$133>>2]|0;
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)==(8996);
   if ($136) {
    $137 = $6;
    $138 = $7;
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($139)) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (_find_macro($137,$141)|0);
    $12 = $142;
    $143 = $12;
    $144 = ($143|0)!=(0|0);
    if ($144) {
     $145 = $12;
     $146 = ((($145)) + 24|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = $147&1;
     if ($148) {
      $149 = $7;
      $150 = HEAP32[$149>>2]|0;
      $151 = (_preprocessor_token_ahead_is($150,40)|0);
      if (!($151)) {
       $12 = 0;
      }
     }
    }
    $152 = $12;
    $153 = ($152|0)!=(0|0);
    if ($153) {
     $154 = $7;
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($155)) + 24|0);
     $157 = HEAP32[$156>>2]|0;
     $18 = $157;
     $158 = $12;
     $159 = $7;
     $160 = $9;
     $161 = $10;
     _collect_macro_arguments($19,$158,$159,$160,$161);
     $162 = $10;
     $163 = ((($162)) + 200|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)!=(0);
     if ($165) {
      label = 56;
      break L1;
     }
     $166 = $6;
     $167 = HEAP32[$166>>2]|0;
     $168 = $167 & 1;
     $169 = ($168|0)!=(0);
     if (!($169)) {
      _token_list_append_list($11,$19);
     }
     $170 = $6;
     $171 = $12;
     $172 = $9;
     $173 = $10;
     _expand_macro($20,$170,0,$171,$19,$172,$173);
     $174 = $10;
     $175 = ((($174)) + 200|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($176|0)!=(0);
     if ($177) {
      label = 56;
      break L1;
     }
     $178 = $13;
     $179 = ((($178)) + 28|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $13;
     $182 = ((($181)) + 12|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $13;
     $185 = ((($184)) + 16|0);
     $186 = HEAP32[$185>>2]|0;
     _token_list_set_file($20,$180,$183,$186);
     $187 = HEAP32[$20>>2]|0;
     $188 = ($187|0)!=(0|0);
     if ($188) {
      $189 = $18;
      $190 = HEAP32[$20>>2]|0;
      $191 = ((($190)) + 24|0);
      HEAP32[$191>>2] = $189;
     }
     $192 = $7;
     _token_list_append_list_at_beginning($192,$20);
    }
   }
  }
 }
 if ((label|0) == 56) {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _preprocessor_token_ahead_is($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_preprocessor_look_ahead_core($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $5;
  $11 = HEAP32[$10>>2]|0;
  $12 = $4;
  $13 = ($11|0)==($12|0);
  if ($13) {
   $$expand_i1_val = 1;
   HEAP8[$2>>0] = $$expand_i1_val;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $$expand_i1_val2 = 0;
  HEAP8[$2>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$2>>0]|0;
 $14 = $$pre_trunc&1;
 STACKTOP = sp;return ($14|0);
}
function _collect_macro_arguments($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 32|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(8996);
 if (!($17)) {
  ___assert_fail((6690|0),(5558|0),2603,(6726|0));
  // unreachable;
 }
 $18 = $6;
 $19 = $7;
 $20 = $8;
 (_match_token_level($9,$18,8996,$19,$20)|0);
 $21 = $5;
 $22 = ((($21)) + 24|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$9+12>>2]|0;
  STACKTOP = sp;return;
 }
 $25 = $5;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $10 = $27;
 $11 = 1;
 $28 = $6;
 _skip_blanks($9,$28);
 $29 = $6;
 $30 = $7;
 $31 = $8;
 (_match_token_level($9,$29,40,$30,$31)|0);
 $32 = $6;
 _skip_blanks($9,$32);
 $33 = $6;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(41);
 if ($36) {
  $37 = $5;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = (_calloc(1,16)|0);
   $12 = $41;
   $42 = $10;
   $43 = HEAP32[$42>>2]|0;
   $44 = (___strdup($43)|0);
   $45 = $12;
   HEAP32[$45>>2] = $44;
   $46 = $12;
   _argument_list_add($9,$46);
  }
  $47 = $6;
  $48 = $7;
  $49 = $8;
  (_match_token_level($9,$47,41,$48,$49)|0);
  ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$9+12>>2]|0;
  STACKTOP = sp;return;
 }
 $50 = (_calloc(1,16)|0);
 $13 = $50;
 $51 = $10;
 $52 = HEAP32[$51>>2]|0;
 $53 = (___strdup($52)|0);
 $54 = $13;
 HEAP32[$54>>2] = $53;
 L15: while(1) {
  $55 = $6;
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   break;
  }
  $58 = $6;
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(40);
  do {
   if ($61) {
    $62 = $11;
    $63 = (($62) + 1)|0;
    $11 = $63;
    $64 = $13;
    $65 = ((($64)) + 4|0);
    $66 = $6;
    $67 = HEAP32[$66>>2]|0;
    (_token_list_clone_and_add($65,$67)|0);
    $68 = $6;
    $69 = $7;
    $70 = $8;
    (_match_token_level($9,$68,40,$69,$70)|0);
   } else {
    $71 = $6;
    $72 = HEAP32[$71>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(41);
    $75 = $11;
    if ($74) {
     $76 = (($75) + -1)|0;
     $11 = $76;
     $77 = $11;
     $78 = ($77|0)==(0);
     if ($78) {
      label = 15;
      break L15;
     }
     $103 = $13;
     $104 = ((($103)) + 4|0);
     $105 = $6;
     $106 = HEAP32[$105>>2]|0;
     (_token_list_clone_and_add($104,$106)|0);
     $107 = $6;
     $108 = $7;
     $109 = $8;
     (_match_token_level($9,$107,41,$108,$109)|0);
     break;
    }
    $110 = ($75|0)==(1);
    if ($110) {
     $111 = $6;
     $112 = HEAP32[$111>>2]|0;
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)==(44);
     if ($114) {
      $115 = $10;
      $116 = HEAP32[$115>>2]|0;
      $117 = (_strcmp($116,6602)|0);
      $118 = ($117|0)==(0);
      if ($118) {
       $119 = $13;
       $120 = ((($119)) + 4|0);
       $121 = $6;
       $122 = HEAP32[$121>>2]|0;
       (_token_list_clone_and_add($120,$122)|0);
       $123 = $6;
       $124 = $7;
       $125 = $8;
       (_match_token_level($9,$123,44,$124,$125)|0);
       break;
      }
      $126 = $6;
      $127 = $7;
      $128 = $8;
      (_match_token_level($9,$126,44,$127,$128)|0);
      $129 = $13;
      _argument_list_add($9,$129);
      $13 = 0;
      $130 = (_calloc(1,16)|0);
      $13 = $130;
      $131 = $10;
      $132 = ((($131)) + 4|0);
      $133 = HEAP32[$132>>2]|0;
      $10 = $133;
      $134 = $10;
      $135 = ($134|0)==(0|0);
      if ($135) {
       label = 25;
       break L15;
      }
      $139 = $10;
      $140 = HEAP32[$139>>2]|0;
      $141 = (___strdup($140)|0);
      $142 = $13;
      HEAP32[$142>>2] = $141;
      break;
     }
    }
    $143 = $13;
    $144 = ((($143)) + 4|0);
    $145 = $6;
    $146 = HEAP32[$145>>2]|0;
    (_token_list_clone_and_add($144,$146)|0);
    $147 = $6;
    $148 = $7;
    _prematch_level($9,$147,$148);
   }
  } while(0);
 }
 do {
  if ((label|0) == 15) {
   $79 = $6;
   $80 = $7;
   $81 = $8;
   (_match_token_level($9,$79,41,$80,$81)|0);
   $82 = $13;
   _argument_list_add($9,$82);
   $83 = $10;
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $10 = $85;
   $86 = $10;
   $87 = ($86|0)!=(0|0);
   if ($87) {
    $88 = $10;
    $89 = HEAP32[$88>>2]|0;
    $90 = (_strcmp($89,6602)|0);
    $91 = ($90|0)==(0);
    if ($91) {
     $92 = (_calloc(1,16)|0);
     $13 = $92;
     $93 = $10;
     $94 = HEAP32[$93>>2]|0;
     $95 = (___strdup($94)|0);
     $96 = $13;
     HEAP32[$96>>2] = $95;
     $97 = $13;
     _argument_list_add($9,$97);
     break;
    } else {
     $98 = $8;
     $99 = $6;
     $100 = HEAP32[$99>>2]|0;
     _seterror_with_token($98,$100,6750,$vararg_buffer);
     $101 = $8;
     $102 = ((($101)) + 200|0);
     HEAP32[$102>>2] = 1;
     break;
    }
   }
  }
  else if ((label|0) == 25) {
   $136 = $8;
   $137 = $6;
   $138 = HEAP32[$137>>2]|0;
   _seterror_with_token($136,$138,6812,$vararg_buffer1);
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$9+12>>2]|0;
 STACKTOP = sp;return;
}
function _expand_macro($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = sp + 48|0;
 $14 = sp + 40|0;
 $15 = sp + 32|0;
 $16 = sp + 24|0;
 $17 = sp + 16|0;
 $18 = sp + 8|0;
 $19 = sp;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $20 = $9;
 $21 = ((($20)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$21>>2] = $23;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;
 $24 = $8;
 $25 = $9;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_macro_already_expanded($24,$27)|0);
 if ($28) {
  ___assert_fail((6215|0),(5558|0),3247,(6260|0));
  // unreachable;
 }
 $29 = $9;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$14>>2] = $31;
 $32 = $8;
 $33 = ((($14)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = $9;
 $35 = ((($34)) + 24|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $9;
 $39 = $12;
 if ($37) {
  _macro_copy_replacement_list($15,$38,$39);
  $40 = $7;
  $41 = $10;
  $42 = $12;
  _replace_macro_arguments($16,$40,$14,$15,$41,$42);
  $43 = $12;
  $44 = ((($43)) + 200|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   $47 = $7;
   $48 = $11;
   $49 = $12;
   _replacement_list_reexamination($17,$47,$14,$16,$48,$49);
   $50 = $12;
   $51 = ((($50)) + 200|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0);
   if (!($53)) {
    _token_list_append_list($13,$17);
   }
  }
 } else {
  _macro_copy_replacement_list($18,$38,$39);
  $54 = $7;
  $55 = $11;
  $56 = $12;
  _replacement_list_reexamination($19,$54,$14,$18,$55,$56);
  $57 = $12;
  $58 = ((($57)) + 200|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)!=(0);
  if (!($60)) {
   _token_list_append_list($13,$19);
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function _is_never_final($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(8998);
 $4 = $1;
 $5 = ($4|0)==(142);
 $or$cond = $3 | $5;
 $6 = $1;
 $7 = ($6|0)==(130);
 $or$cond3 = $or$cond | $7;
 $8 = $1;
 $9 = ($8|0)==(131);
 $or$cond5 = $or$cond3 | $9;
 $10 = $1;
 $11 = ($10|0)==(141);
 $or$cond7 = $or$cond5 | $11;
 if ($or$cond7) {
  $14 = 1;
  STACKTOP = sp;return ($14|0);
 }
 $12 = $1;
 $13 = ($12|0)==(10);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function _prematch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_token_list_pop_front($5)|0);
 (_token_list_add($4,$6)|0);
 STACKTOP = sp;return;
}
function _token_promote($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(8996);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_is_keyword($8)|0);
  $2 = $9;
  $10 = $2;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  $12 = $2;
  $13 = $1;
  HEAP32[$13>>2] = $12;
  STACKTOP = sp;return;
 } else {
  $14 = HEAP32[$6>>2]|0;
  $15 = ($14|0)==(132);
  if (!($15)) {
   STACKTOP = sp;return;
  }
  $16 = $1;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_parse_number($18)|0);
  $20 = $1;
  HEAP32[$20>>2] = $19;
  STACKTOP = sp;return;
 }
}
function _is_keyword($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 << 24 >> 24;
 L1: do {
  switch ($5|0) {
  case 97:  {
   $6 = $1;
   $7 = (_strcmp(5798,$6)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $2 = 9038;
    break L1;
   }
   $9 = $1;
   $10 = (_strcmp(5806,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $2 = 8999;
   }
   break;
  }
  case 98:  {
   $12 = $1;
   $13 = (_strcmp(5811,$12)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $2 = 9000;
   }
   break;
  }
  case 99:  {
   $15 = $1;
   $16 = (_strcmp(5817,$15)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $2 = 9001;
    break L1;
   }
   $18 = $1;
   $19 = (_strcmp(5822,$18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $2 = 9002;
    break L1;
   }
   $21 = $1;
   $22 = (_strcmp(5827,$21)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $2 = 9003;
    break L1;
   }
   $24 = $1;
   $25 = (_strcmp(5833,$24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $2 = 9004;
   }
   break;
  }
  case 100:  {
   $27 = $1;
   $28 = (_strcmp(5842,$27)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $2 = 9005;
    break L1;
   }
   $30 = $1;
   $31 = (_strcmp(5850,$30)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $2 = 9006;
    break L1;
   }
   $33 = $1;
   $34 = (_strcmp(5853,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $2 = 9007;
   }
   break;
  }
  case 101:  {
   $36 = $1;
   $37 = (_strcmp(5700,$36)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $2 = 9008;
    break L1;
   }
   $39 = $1;
   $40 = (_strcmp(5860,$39)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    $2 = 9009;
    break L1;
   }
   $42 = $1;
   $43 = (_strcmp(5865,$42)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $2 = 9010;
   }
   break;
  }
  case 102:  {
   $45 = $1;
   $46 = (_strcmp(5872,$45)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    $2 = 9011;
    break L1;
   }
   $48 = $1;
   $49 = (_strcmp(5878,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $2 = 9012;
   }
   break;
  }
  case 103:  {
   $51 = $1;
   $52 = (_strcmp(5882,$51)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $2 = 9013;
   }
   break;
  }
  case 105:  {
   $54 = $1;
   $55 = (_strcmp(5727,$54)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    $2 = 9014;
    break L1;
   }
   $57 = $1;
   $58 = (_strcmp(5887,$57)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $2 = 9015;
    break L1;
   }
   $60 = $1;
   $61 = (_strcmp(5894,$60)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    $2 = 9016;
   }
   break;
  }
  case 108:  {
   $63 = $1;
   $64 = (_strcmp(5898,$63)|0);
   $65 = ($64|0)==(0);
   if ($65) {
    $2 = 9017;
   }
   break;
  }
  case 114:  {
   $66 = $1;
   $67 = (_strcmp(5903,$66)|0);
   $68 = ($67|0)==(0);
   if ($68) {
    $2 = 9022;
    break L1;
   }
   $69 = $1;
   $70 = (_strcmp(5912,$69)|0);
   $71 = ($70|0)==(0);
   if ($71) {
    $2 = 9023;
    break L1;
   }
   $72 = $1;
   $73 = (_strcmp(5921,$72)|0);
   $74 = ($73|0)==(0);
   if ($74) {
    $2 = 9024;
   }
   break;
  }
  case 115:  {
   $75 = $1;
   $76 = (_strcmp(5928,$75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    $2 = 9025;
    break L1;
   }
   $78 = $1;
   $79 = (_strcmp(5934,$78)|0);
   $80 = ($79|0)==(0);
   if ($80) {
    $2 = 9026;
    break L1;
   }
   $81 = $1;
   $82 = (_strcmp(5941,$81)|0);
   $83 = ($82|0)==(0);
   if ($83) {
    $2 = 9027;
    break L1;
   }
   $84 = $1;
   $85 = (_strcmp(5948,$84)|0);
   $86 = ($85|0)==(0);
   if ($86) {
    $2 = 9028;
    break L1;
   }
   $87 = $1;
   $88 = (_strcmp(5955,$87)|0);
   $89 = ($88|0)==(0);
   if ($89) {
    $2 = 9029;
    break L1;
   }
   $90 = $1;
   $91 = (_strcmp(5962,$90)|0);
   $92 = ($91|0)==(0);
   if ($92) {
    $2 = 9030;
   }
   break;
  }
  case 116:  {
   $93 = $1;
   $94 = (_strcmp(5969,$93)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $2 = 9031;
   }
   $96 = $1;
   $97 = (_strcmp(5977,$96)|0);
   $98 = ($97|0)==(0);
   if ($98) {
    $2 = 9051;
   }
   $99 = $1;
   $100 = (_strcmp(5984,$99)|0);
   $101 = ($100|0)==(0);
   if ($101) {
    $2 = 9052;
   }
   break;
  }
  case 117:  {
   $102 = $1;
   $103 = (_strcmp(5991,$102)|0);
   $104 = ($103|0)==(0);
   if ($104) {
    $2 = 9032;
    break L1;
   }
   $105 = $1;
   $106 = (_strcmp(5997,$105)|0);
   $107 = ($106|0)==(0);
   if ($107) {
    $2 = 9033;
   }
   break;
  }
  case 118:  {
   $108 = $1;
   $109 = (_strcmp(6006,$108)|0);
   $110 = ($109|0)==(0);
   if ($110) {
    $2 = 9034;
    break L1;
   }
   $111 = $1;
   $112 = (_strcmp(6011,$111)|0);
   $113 = ($112|0)==(0);
   if ($113) {
    $2 = 9035;
   }
   break;
  }
  case 119:  {
   $114 = $1;
   $115 = (_strcmp(6020,$114)|0);
   $116 = ($115|0)==(0);
   if ($116) {
    $2 = 9036;
   }
   break;
  }
  case 95:  {
   $117 = $1;
   $118 = (_strcmp(6026,$117)|0);
   $119 = ($118|0)==(0);
   do {
    if ($119) {
     $2 = 9018;
    } else {
     $120 = $1;
     $121 = (_strcmp(6033,$120)|0);
     $122 = ($121|0)==(0);
     if ($122) {
      $2 = 9019;
      break;
     }
     $123 = $1;
     $124 = (_strcmp(6041,$123)|0);
     $125 = ($124|0)==(0);
     if ($125) {
      $2 = 9020;
      break;
     }
     $126 = $1;
     $127 = (_strcmp(6049,$126)|0);
     $128 = ($127|0)==(0);
     if ($128) {
      $2 = 9021;
      break;
     }
     $129 = $1;
     $130 = (_strcmp(6057,$129)|0);
     $131 = ($130|0)==(0);
     if ($131) {
      $2 = 9015;
      break;
     }
     $132 = $1;
     $133 = (_strcmp(6071,$132)|0);
     $134 = ($133|0)==(0);
     if ($134) {
      $2 = 9015;
      break;
     }
     $135 = $1;
     $136 = (_strcmp(6080,$135)|0);
     $137 = ($136|0)==(0);
     if (!($137)) {
      $138 = $1;
      $139 = (_strcmp(6085,$138)|0);
      $140 = ($139|0)==(0);
      if (!($140)) {
       break;
      }
     }
     $2 = 9040;
    }
   } while(0);
   $141 = $1;
   $142 = (_strcmp(6091,$141)|0);
   $143 = ($142|0)==(0);
   if ($143) {
    $2 = 9038;
    break L1;
   }
   $144 = $1;
   $145 = (_strcmp(6101,$144)|0);
   $146 = ($145|0)==(0);
   if ($146) {
    $2 = 9037;
    break L1;
   }
   $147 = $1;
   $148 = (_strcmp(6110,$147)|0);
   $149 = ($148|0)==(0);
   if ($149) {
    $2 = 9039;
    break L1;
   }
   $150 = $1;
   $151 = (_strcmp(6118,$150)|0);
   $152 = ($151|0)==(0);
   if ($152) {
    $2 = 9041;
    break L1;
   }
   $153 = $1;
   $154 = (_strcmp(6124,$153)|0);
   $155 = ($154|0)==(0);
   if ($155) {
    $2 = 9042;
    break L1;
   }
   $156 = $1;
   $157 = (_strcmp(6133,$156)|0);
   $158 = ($157|0)==(0);
   if ($158) {
    $2 = 9044;
    break L1;
   }
   $159 = $1;
   $160 = (_strcmp(6145,$159)|0);
   $161 = ($160|0)==(0);
   if ($161) {
    $2 = 9045;
    break L1;
   }
   $162 = $1;
   $163 = (_strcmp(6133,$162)|0);
   $164 = ($163|0)==(0);
   if ($164) {
    $2 = 9043;
    break L1;
   }
   $165 = $1;
   $166 = (_strcmp(6156,$165)|0);
   $167 = ($166|0)==(0);
   if ($167) {
    $2 = 9046;
    break L1;
   }
   $168 = $1;
   $169 = (_strcmp(6165,$168)|0);
   $170 = ($169|0)==(0);
   if ($170) {
    $2 = 9047;
    break L1;
   }
   $171 = $1;
   $172 = (_strcmp(6176,$171)|0);
   $173 = ($172|0)==(0);
   if ($173) {
    $2 = 9048;
    break L1;
   }
   $174 = $1;
   $175 = (_strcmp(6186,$174)|0);
   $176 = ($175|0)==(0);
   if ($176) {
    $2 = 9049;
    break L1;
   }
   $177 = $1;
   $178 = (_strcmp(6201,$177)|0);
   $179 = ($178|0)==(0);
   if ($179) {
    $2 = 9050;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $180 = $2;
 STACKTOP = sp;return ($180|0);
}
function _macro_already_expanded($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $4;
  $10 = $5;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strcmp($9,$11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $5;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $5 = $16;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 1;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 0;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _macro_copy_replacement_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $6 = sp;
 $3 = $1;
 $4 = $2;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_strcmp($9,6625)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $4;
  _tokenizer($5,6634,11088,0,$12);
  (_token_list_pop_front($5)|0);
  $13 = HEAP32[$5>>2]|0;
  $14 = ((($13)) + 24|0);
  HEAP32[$14>>2] = 0;
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
  STACKTOP = sp;return;
 }
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_strcmp($17,6636)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $4;
  _tokenizer($6,6645,11088,0,$20);
  (_token_list_pop_front($6)|0);
  $21 = HEAP32[$6>>2]|0;
  $22 = ((($21)) + 24|0);
  HEAP32[$22>>2] = 0;
  ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;
  STACKTOP = sp;return;
 }
 $23 = $3;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_strcmp($25,6652)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  ___assert_fail((9119|0),(5558|0),3217,(6662|0));
  // unreachable;
 }
 $28 = $3;
 $29 = ((($28)) + 12|0);
 _copy_replacement_list($0,$29);
 STACKTOP = sp;return;
}
function _replace_macro_arguments($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer = sp;
 $11 = sp + 88|0;
 $16 = sp + 72|0;
 $19 = sp + 56|0;
 $21 = sp + 40|0;
 $23 = sp + 24|0;
 $24 = sp + 16|0;
 $25 = sp + 8|0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 $12 = 0;
 $13 = 0;
 L1: while(1) {
  $26 = $8;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   break;
  }
  $29 = $8;
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 & 8;
  $34 = ($33|0)!=(0);
  if ($34) {
   label = 4;
   break;
  }
  $35 = $8;
  $36 = HEAP32[$35>>2]|0;
  $37 = (_token_is_blank($36)|0);
  if ($37) {
   label = 6;
   break;
  }
  $38 = ((($11)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   $41 = ((($11)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_token_is_blank($42)|0);
   if ($43) {
    label = 9;
    break;
   }
  }
  $14 = 0;
  $44 = $8;
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(8996);
  if ($47) {
   $48 = $9;
   $49 = $8;
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (_find_macro_argument_by_name($48,$52)|0);
   $14 = $53;
  }
  $54 = $14;
  $55 = ($54|0)!=(0|0);
  do {
   if ($55) {
    $15 = 0;
    $56 = $8;
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($57)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (_strcmp($59,6602)|0);
    $61 = ($60|0)==(0);
    $spec$store$select = $61 ? 1 : 0;
    $15 = $spec$store$select;
    $62 = ((($11)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)!=(0|0);
    if ($64) {
     $65 = ((($11)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(35);
     if ($68) {
      $69 = $8;
      (_token_list_pop_front($69)|0);
      while(1) {
       $70 = ((($11)) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (_token_is_blank($71)|0);
       (_token_list_pop_back($11)|0);
       if (!($72)) {
        break;
       }
      }
      $73 = $14;
      _copy_argument_list($16,$73);
      $74 = $15;
      $75 = $74&1;
      if ($75) {
       $13 = 1;
       $76 = HEAP32[$16>>2]|0;
       $77 = ($76|0)==(0|0);
       if ($77) {
        $82 = 1;
       } else {
        $78 = HEAP32[$16>>2]|0;
        $79 = HEAP32[$78>>2]|0;
        $80 = ($79|0)==(141);
        $82 = $80;
       }
       $81 = $82&1;
       $12 = $81;
      }
      $83 = (_token_list_join_tokens($16,1)|0);
      $17 = $83;
      $84 = $17;
      $85 = ($84|0)==(0|0);
      if ($85) {
       label = 23;
       break L1;
      }
      $89 = (_calloc(1,40)|0);
      $18 = $89;
      $90 = $17;
      $91 = $18;
      $92 = ((($91)) + 4|0);
      HEAP32[$92>>2] = $90;
      $93 = $18;
      HEAP32[$93>>2] = 128;
      $94 = $18;
      (_token_list_add($11,$94)|0);
      continue L1;
     }
    }
    $95 = ((($11)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)!=(0|0);
    if ($97) {
     $98 = ((($11)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(8995);
     if ($101) {
      $102 = $8;
      (_token_list_pop_front($102)|0);
      $103 = $14;
      _copy_argument_list($19,$103);
      $104 = $15;
      $105 = $104&1;
      if ($105) {
       $13 = 1;
       $106 = HEAP32[$19>>2]|0;
       $107 = ($106|0)==(0|0);
       if ($107) {
        $112 = 1;
       } else {
        $108 = HEAP32[$19>>2]|0;
        $109 = HEAP32[$108>>2]|0;
        $110 = ($109|0)==(141);
        $112 = $110;
       }
       $111 = $112&1;
       $12 = $111;
      }
      _token_list_append_list($11,$19);
      break;
     }
    }
    $113 = $8;
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 32|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)!=(0|0);
    if ($117) {
     $118 = $8;
     $119 = HEAP32[$118>>2]|0;
     $120 = ((($119)) + 32|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122|0)==(8995);
     if ($123) {
      $124 = $8;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($125)) + 24|0);
      $127 = HEAP32[$126>>2]|0;
      $20 = $127;
      $128 = $8;
      (_token_list_pop_front($128)|0);
      $129 = $14;
      _copy_argument_list($21,$129);
      $130 = HEAP32[$21>>2]|0;
      $131 = ($130|0)!=(0|0);
      if ($131) {
       $132 = $20;
       $133 = HEAP32[$21>>2]|0;
       $134 = ((($133)) + 24|0);
       HEAP32[$134>>2] = $132;
      }
      $135 = $15;
      $136 = $135&1;
      if ($136) {
       $13 = 1;
       $137 = HEAP32[$21>>2]|0;
       $138 = ($137|0)==(0|0);
       if ($138) {
        $143 = 1;
       } else {
        $139 = HEAP32[$21>>2]|0;
        $140 = HEAP32[$139>>2]|0;
        $141 = ($140|0)==(141);
        $143 = $141;
       }
       $142 = $143&1;
       $12 = $142;
      }
      _token_list_append_list($11,$21);
      $144 = $8;
      _prematch($11,$144);
      break;
     }
    }
    $145 = $8;
    $146 = HEAP32[$145>>2]|0;
    $147 = ((($146)) + 24|0);
    $148 = HEAP32[$147>>2]|0;
    $22 = $148;
    $149 = $8;
    (_token_list_pop_front($149)|0);
    $150 = $14;
    _copy_argument_list($23,$150);
    $151 = HEAP32[$23>>2]|0;
    $152 = ($151|0)!=(0|0);
    if ($152) {
     $153 = $22;
     $154 = HEAP32[$23>>2]|0;
     $155 = ((($154)) + 24|0);
     HEAP32[$155>>2] = $153;
    }
    $156 = $6;
    $157 = $7;
    $158 = $10;
    _replacement_list_reexamination($24,$156,$157,$23,0,$158);
    $159 = $10;
    $160 = ((($159)) + 200|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)!=(0);
    if ($162) {
     break L1;
    }
    $163 = $15;
    $164 = $163&1;
    if ($164) {
     $13 = 1;
     $165 = HEAP32[$24>>2]|0;
     $166 = ($165|0)==(0|0);
     if ($166) {
      $171 = 1;
     } else {
      $167 = HEAP32[$24>>2]|0;
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(141);
      $171 = $169;
     }
     $170 = $171&1;
     $12 = $170;
    }
    _token_list_append_list($11,$24);
   } else {
    $172 = $8;
    _prematch($11,$172);
   }
  } while(0);
 }
 if ((label|0) == 4) {
  ___assert_fail((6386|0),(5558|0),2891,(6503|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  ___assert_fail((6527|0),(5558|0),2892,(6503|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  ___assert_fail((6560|0),(5558|0),2893,(6503|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  $86 = $10;
  $87 = $8;
  $88 = HEAP32[$87>>2]|0;
  _seterror_with_token($86,$88,9166,$vararg_buffer);
 }
 $173 = $13;
 $174 = $173&1;
 if ($174) {
  $175 = $6;
  $176 = $12;
  $177 = $176&1;
  _replace_vaopt($25,$175,$11,$177);
  ;HEAP32[$0>>2]=HEAP32[$25>>2]|0;HEAP32[$0+4>>2]=HEAP32[$25+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _replacement_list_reexamination($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 48|0;
 $12 = sp + 40|0;
 $16 = sp + 8|0;
 $17 = sp;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 $18 = $8;
 $19 = $10;
 _concatenate($12,$18,$19);
 while(1) {
  $20 = HEAP32[$12>>2]|0;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   label = 36;
   break;
  }
  $22 = HEAP32[$12>>2]|0;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 8;
  $26 = ($25|0)!=(0);
  if ($26) {
   label = 4;
   break;
  }
  $27 = HEAP32[$12>>2]|0;
  $28 = (_token_is_blank($27)|0);
  if ($28) {
   label = 6;
   break;
  }
  $13 = 0;
  $29 = HEAP32[$12>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(8996);
  do {
   if ($31) {
    $32 = $6;
    $33 = HEAP32[$12>>2]|0;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_find_macro($32,$35)|0);
    $13 = $36;
    $37 = $13;
    $38 = ($37|0)!=(0|0);
    if ($38) {
     $39 = $13;
     $40 = ((($39)) + 24|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&1;
     if ($42) {
      $43 = HEAP32[$12>>2]|0;
      $44 = (_preprocessor_token_ahead_is($43,40)|0);
      if (!($44)) {
       $13 = 0;
      }
     }
    }
    $45 = $13;
    $46 = ($45|0)!=(0|0);
    if ($46) {
     $47 = $7;
     $48 = HEAP32[$12>>2]|0;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (_macro_already_expanded($47,$50)|0);
     if ($51) {
      $52 = HEAP32[$12>>2]|0;
      HEAP32[$52>>2] = 8997;
      $13 = 0;
     }
    }
    $53 = $6;
    $54 = ((($53)) + 36|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&1;
    if ($56) {
     $57 = ((($11)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)!=(0|0);
     if ($59) {
      $60 = ((($11)) + 4|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(8996);
      if ($63) {
       $64 = ((($11)) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ((($65)) + 4|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (_strcmp($67,5790)|0);
       $69 = ($68|0)==(0);
       if ($69) {
        $13 = 0;
        break;
       }
      }
     }
     $70 = ((($11)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)!=(0|0);
     if ($72) {
      $73 = ((($11)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==(40);
      if ($76) {
       $77 = ((($11)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       $14 = $80;
       $81 = $14;
       $82 = ($81|0)!=(0|0);
       if ($82) {
        $83 = $14;
        $84 = HEAP32[$83>>2]|0;
        $85 = ($84|0)==(8996);
        if ($85) {
         $86 = $14;
         $87 = ((($86)) + 4|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (_strcmp($88,5790)|0);
         $90 = ($89|0)==(0);
         if ($90) {
          $13 = 0;
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $91 = $13;
  $92 = ($91|0)!=(0|0);
  if ($92) {
   $93 = HEAP32[$12>>2]|0;
   $94 = ((($93)) + 24|0);
   $95 = HEAP32[$94>>2]|0;
   $15 = $95;
   $96 = $13;
   $97 = $9;
   $98 = $10;
   _collect_macro_arguments($16,$96,$12,$97,$98);
   $99 = $10;
   $100 = ((($99)) + 200|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)!=(0);
   if ($102) {
    label = 36;
    break;
   }
   $103 = $6;
   $104 = $7;
   $105 = $13;
   $106 = $9;
   $107 = $10;
   _expand_macro($17,$103,$104,$105,$16,$106,$107);
   $108 = $10;
   $109 = ((($108)) + 200|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)!=(0);
   if ($111) {
    label = 36;
    break;
   }
   $112 = HEAP32[$17>>2]|0;
   $113 = ($112|0)!=(0|0);
   if ($113) {
    $114 = $15;
    $115 = HEAP32[$17>>2]|0;
    $116 = ((($115)) + 24|0);
    HEAP32[$116>>2] = $114;
   }
   _token_list_append_list_at_beginning($12,$17);
  } else {
   $117 = $9;
   $118 = HEAP32[$12>>2]|0;
   $119 = ((($118)) + 20|0);
   HEAP32[$119>>2] = $117;
   $120 = HEAP32[$12>>2]|0;
   $121 = ((($120)) + 24|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 | 2;
   HEAP32[$121>>2] = $123;
   $124 = HEAP32[$12>>2]|0;
   $125 = ((($124)) + 24|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 & 8;
   $128 = ($127|0)!=(0);
   if ($128) {
    label = 33;
    break;
   }
   _prematch($11,$12);
  }
 }
 if ((label|0) == 4) {
  ___assert_fail((6273|0),(5558|0),3046,(6325|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  ___assert_fail((6356|0),(5558|0),3047,(6325|0));
  // unreachable;
 }
 else if ((label|0) == 33) {
  ___assert_fail((6273|0),(5558|0),3116,(6325|0));
  // unreachable;
 }
 else if ((label|0) == 36) {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _concatenate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $8 = sp + 24|0;
 $3 = $1;
 $4 = $2;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 while(1) {
  $9 = $3;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 20;
   break;
  }
  $12 = $3;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 8;
  $17 = ($16|0)!=(0);
  if ($17) {
   label = 4;
   break;
  }
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(8995);
  if ($21) {
   $22 = ((($5)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    label = 7;
    break;
   }
   $28 = $3;
   (_token_list_pop_front($28)|0);
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   $29 = ((($5)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = ((($5)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $39;
    (_ss_fprintf($6,5531,$vararg_buffer1)|0);
   }
   $40 = $3;
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0|0);
   if ($42) {
    $43 = $3;
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $3;
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($51)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $53;
     (_ss_fprintf($6,5531,$vararg_buffer3)|0);
    }
   }
   $54 = $3;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0|0);
   if ($56) {
    $57 = $3;
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($58)) + 20|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60;
   } else {
    $61 = 0;
   }
   $7 = $61;
   $62 = $3;
   (_token_list_pop_front($62)|0);
   $63 = HEAP32[$6>>2]|0;
   $64 = $7;
   $65 = $4;
   _tokenizer($8,$63,0,$64,$65);
   $66 = HEAP32[$8>>2]|0;
   $67 = ($66|0)!=(0|0);
   if ($67) {
    $68 = ((($5)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 24|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = HEAP32[$8>>2]|0;
    $73 = ((($72)) + 24|0);
    HEAP32[$73>>2] = $71;
   }
   (_token_list_pop_back($5)|0);
   _token_list_append_list($5,$8);
   $74 = $3;
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(0|0);
   if ($76) {
    label = 20;
    break;
   }
  } else {
   $77 = $3;
   _prematch($5,$77);
  }
 }
 if ((label|0) == 4) {
  ___assert_fail((6386|0),(5558|0),2741,(6441|0));
  // unreachable;
 }
 else if ((label|0) == 7) {
  $25 = $4;
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  _seterror_with_token($25,$27,6453,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _replace_vaopt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $4 = $1;
 $5 = $2;
 $10 = $3&1;
 $6 = $10;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 while(1) {
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(8996);
  L4: do {
   if ($17) {
    $18 = $5;
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_strcmp($21,6614)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $24 = $5;
     (_token_list_pop_front($24)|0);
     $25 = $5;
     (_token_list_pop_front($25)|0);
     $26 = $6;
     $27 = $26&1;
     if ($27) {
      $8 = 1;
      while(1) {
       $28 = $5;
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)!=(0|0);
       if (!($30)) {
        break L4;
       }
       $31 = $5;
       $32 = HEAP32[$31>>2]|0;
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(40);
       $35 = $5;
       do {
        if ($34) {
         (_token_list_pop_front($35)|0);
         $36 = $8;
         $37 = (($36) + 1)|0;
         $8 = $37;
        } else {
         $38 = HEAP32[$35>>2]|0;
         $39 = HEAP32[$38>>2]|0;
         $40 = ($39|0)==(41);
         if ($40) {
          $41 = $8;
          $42 = (($41) + -1)|0;
          $8 = $42;
          $43 = $5;
          (_token_list_pop_front($43)|0);
          $44 = $8;
          $45 = ($44|0)==(0);
          if ($45) {
           break L4;
          } else {
           break;
          }
         } else {
          $46 = $5;
          (_token_list_pop_front($46)|0);
          break;
         }
        }
       } while(0);
      }
     }
     $9 = 1;
     L20: while(1) {
      $47 = $5;
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)!=(0|0);
      if (!($49)) {
       break L4;
      }
      $50 = $5;
      $51 = HEAP32[$50>>2]|0;
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)==(40);
      $54 = $5;
      do {
       if ($53) {
        _prematch($7,$54);
        $55 = $9;
        $56 = (($55) + 1)|0;
        $9 = $56;
       } else {
        $57 = HEAP32[$54>>2]|0;
        $58 = HEAP32[$57>>2]|0;
        $59 = ($58|0)==(41);
        if (!($59)) {
         $65 = $5;
         _prematch($7,$65);
         break;
        }
        $60 = $9;
        $61 = (($60) + -1)|0;
        $9 = $61;
        $62 = $9;
        $63 = ($62|0)==(0);
        $64 = $5;
        if ($63) {
         break L20;
        }
        _prematch($7,$64);
       }
      } while(0);
     }
     (_token_list_pop_front($64)|0);
    } else {
     label = 24;
    }
   } else {
    label = 24;
   }
  } while(0);
  if ((label|0) == 24) {
   label = 0;
   $66 = $5;
   _prematch($7,$66);
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
 STACKTOP = sp;return;
}
function _copy_replacement_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 while(1) {
  $10 = $4;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = (_token_is_blank($12)|0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $4 = $16;
 }
 $5 = 1;
 $6 = 0;
 while(1) {
  $17 = $4;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 17;
   break;
  }
  $19 = $4;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $4;
   $22 = (_token_is_blank($21)|0);
   if ($22) {
    $23 = $4;
    $24 = $2;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)==($26|0);
    if ($27) {
     label = 17;
     break;
    }
    $28 = $4;
    $29 = ((($28)) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    $4 = $30;
    continue;
   }
  }
  $31 = $4;
  $32 = (_token_list_clone_and_add($3,$31)|0);
  $7 = $32;
  $33 = $7;
  $34 = ((($33)) + 24|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 8;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $7;
   $39 = ((($38)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -9;
   $42 = $7;
   $43 = ((($42)) + 24|0);
   HEAP32[$43>>2] = $41;
   $44 = $7;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 | 4;
   HEAP32[$45>>2] = $47;
  }
  $48 = $5;
  $49 = $48&1;
  if ($49) {
   $50 = $7;
   $51 = ((($50)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 & -5;
   $54 = $7;
   $55 = ((($54)) + 24|0);
   HEAP32[$55>>2] = $53;
   $56 = $7;
   $57 = ((($56)) + 24|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & -9;
   $60 = $7;
   $61 = ((($60)) + 24|0);
   HEAP32[$61>>2] = $59;
   $5 = 0;
  }
  $62 = $7;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  _remove_line_continuation($64);
  $6 = 0;
  $65 = $4;
  $66 = $2;
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($65|0)==($68|0);
  if ($69) {
   label = 17;
   break;
  }
  $70 = $4;
  $71 = ((($70)) + 32|0);
  $72 = HEAP32[$71>>2]|0;
  $4 = $72;
 }
 if ((label|0) == 17) {
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _match_token_level($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  label = 3;
 } else {
  $13 = $6;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $7;
  $17 = ($15|0)!=($16|0);
  if ($17) {
   label = 3;
  } else {
   label = 8;
  }
 }
 do {
  if ((label|0) == 3) {
   $18 = $7;
   $19 = ($18|0)==(10);
   if ($19) {
    $20 = $6;
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     label = 8;
     break;
    }
   }
   $23 = $6;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0|0);
   $26 = $9;
   if ($25) {
    $27 = $6;
    $28 = HEAP32[$27>>2]|0;
    $29 = $7;
    $30 = (_get_token_name($29)|0);
    $31 = $6;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$32>>2]|0;
    $34 = (_get_token_name($33)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $34;
    _seterror_with_token($26,$28,6825,$vararg_buffer);
    break;
   } else {
    $35 = $5;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    _seterror_with_token($26,$37,6851,$vararg_buffer2);
    break;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $38 = $6;
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $5;
   $42 = $6;
   $43 = (_token_list_pop_front($42)|0);
   (_token_list_add($41,$43)|0);
  }
 }
 $44 = $9;
 $45 = ((($44)) + 200|0);
 $46 = HEAP32[$45>>2]|0;
 STACKTOP = sp;return ($46|0);
}
function _skip_blanks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (_token_is_blank($5)|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $3;
  $9 = (_token_list_pop_front($8)|0);
  (_token_list_add($7,$9)|0);
 }
 STACKTOP = sp;return;
}
function _prematch_level($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (_token_list_pop_front($7)|0);
 (_token_list_add($6,$8)|0);
 STACKTOP = sp;return;
}
function _get_token_name($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split172D = 0, $switch$split202D = 0, $switch$split22D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $switch$split2D = ($3|0)<(9003);
 L1: do {
  if ($switch$split2D) {
   do {
    switch ($3|0) {
    case 0:  {
     $1 = 6866;
     label = 117;
     break L1;
     break;
    }
    case 10:  {
     $1 = 6871;
     label = 117;
     break L1;
     break;
    }
    case 32:  {
     $1 = 6879;
     label = 117;
     break L1;
     break;
    }
    case 33:  {
     $1 = 6885;
     label = 117;
     break L1;
     break;
    }
    case 34:  {
     $1 = 6902;
     label = 117;
     break L1;
     break;
    }
    case 35:  {
     $1 = 6917;
     label = 117;
     break L1;
     break;
    }
    case 36:  {
     $1 = 6929;
     label = 117;
     break L1;
     break;
    }
    case 37:  {
     $1 = 6941;
     label = 117;
     break L1;
     break;
    }
    case 38:  {
     $1 = 6954;
     label = 117;
     break L1;
     break;
    }
    case 39:  {
     $1 = 6964;
     label = 117;
     break L1;
     break;
    }
    case 40:  {
     $1 = 6975;
     label = 117;
     break L1;
     break;
    }
    case 41:  {
     $1 = 6992;
     label = 117;
     break L1;
     break;
    }
    case 42:  {
     $1 = 7010;
     label = 117;
     break L1;
     break;
    }
    case 43:  {
     $1 = 7019;
     label = 117;
     break L1;
     break;
    }
    case 44:  {
     $1 = 7029;
     label = 117;
     break L1;
     break;
    }
    case 45:  {
     $1 = 7035;
     label = 117;
     break L1;
     break;
    }
    case 46:  {
     $1 = 7048;
     label = 117;
     break L1;
     break;
    }
    case 47:  {
     $1 = 7058;
     label = 117;
     break L1;
     break;
    }
    case 58:  {
     $1 = 7066;
     label = 117;
     break L1;
     break;
    }
    case 59:  {
     $1 = 7072;
     label = 117;
     break L1;
     break;
    }
    case 60:  {
     $1 = 7082;
     label = 117;
     break L1;
     break;
    }
    case 61:  {
     $1 = 7097;
     label = 117;
     break L1;
     break;
    }
    case 62:  {
     $1 = 7109;
     label = 117;
     break L1;
     break;
    }
    case 63:  {
     $1 = 7127;
     label = 117;
     break L1;
     break;
    }
    case 64:  {
     $1 = 7141;
     label = 117;
     break L1;
     break;
    }
    case 91:  {
     $1 = 7155;
     label = 117;
     break L1;
     break;
    }
    case 93:  {
     $1 = 7191;
     label = 117;
     break L1;
     break;
    }
    case 94:  {
     $1 = 7212;
     label = 117;
     break L1;
     break;
    }
    case 95:  {
     $1 = 7230;
     label = 117;
     break L1;
     break;
    }
    case 96:  {
     $1 = 7240;
     label = 117;
     break L1;
     break;
    }
    case 123:  {
     $1 = 7253;
     label = 117;
     break L1;
     break;
    }
    case 124:  {
     $1 = 7272;
     label = 117;
     break L1;
     break;
    }
    case 125:  {
     $1 = 7286;
     label = 117;
     break L1;
     break;
    }
    case 126:  {
     $1 = 7306;
     label = 117;
     break L1;
     break;
    }
    case 127:  {
     $1 = 7312;
     label = 117;
     break L1;
     break;
    }
    case 128:  {
     $1 = 7330;
     label = 117;
     break L1;
     break;
    }
    case 130:  {
     $1 = 7345;
     label = 117;
     break L1;
     break;
    }
    case 131:  {
     $1 = 7358;
     label = 117;
     break L1;
     break;
    }
    case 132:  {
     $1 = 7365;
     label = 117;
     break L1;
     break;
    }
    case 133:  {
     $1 = 7374;
     label = 117;
     break L1;
     break;
    }
    case 134:  {
     $1 = 7393;
     label = 117;
     break L1;
     break;
    }
    case 135:  {
     $1 = 7422;
     label = 117;
     break L1;
     break;
    }
    case 136:  {
     $1 = 7449;
     label = 117;
     break L1;
     break;
    }
    case 137:  {
     $1 = 7482;
     label = 117;
     break L1;
     break;
    }
    case 138:  {
     $1 = 7510;
     label = 117;
     break L1;
     break;
    }
    case 139:  {
     $1 = 7548;
     label = 117;
     break L1;
     break;
    }
    case 140:  {
     $1 = 7590;
     label = 117;
     break L1;
     break;
    }
    case 141:  {
     $1 = 7612;
     label = 117;
     break L1;
     break;
    }
    case 142:  {
     $1 = 7627;
     label = 117;
     break L1;
     break;
    }
    case 8995:  {
     $1 = 7722;
     label = 117;
     break L1;
     break;
    }
    case 8996:  {
     $1 = 7749;
     label = 117;
     break L1;
     break;
    }
    case 8997:  {
     $1 = 7760;
     label = 117;
     break L1;
     break;
    }
    case 8998:  {
     $1 = 7776;
     label = 117;
     break L1;
     break;
    }
    case 8999:  {
     $1 = 7790;
     label = 117;
     break L1;
     break;
    }
    case 9000:  {
     $1 = 7803;
     label = 117;
     break L1;
     break;
    }
    case 9001:  {
     $1 = 7817;
     label = 117;
     break L1;
     break;
    }
    case 9002:  {
     $1 = 7830;
     label = 117;
     break L1;
     break;
    }
    default: {
     label = 116;
     break L1;
    }
    }
   } while(0);
  } else {
   $switch$split22D = ($3|0)<(9031);
   if ($switch$split22D) {
    do {
     switch ($3|0) {
     case 9003:  {
      $1 = 7843;
      label = 117;
      break L1;
      break;
     }
     case 9004:  {
      $1 = 7857;
      label = 117;
      break L1;
      break;
     }
     case 9005:  {
      $1 = 7874;
      label = 117;
      break L1;
      break;
     }
     case 9006:  {
      $1 = 7890;
      label = 117;
      break L1;
      break;
     }
     case 9007:  {
      $1 = 7901;
      label = 117;
      break L1;
      break;
     }
     case 9008:  {
      $1 = 7916;
      label = 117;
      break L1;
      break;
     }
     case 9009:  {
      $1 = 7929;
      label = 117;
      break L1;
      break;
     }
     case 9010:  {
      $1 = 7942;
      label = 117;
      break L1;
      break;
     }
     case 9011:  {
      $1 = 7957;
      label = 117;
      break L1;
      break;
     }
     case 9012:  {
      $1 = 7971;
      label = 117;
      break L1;
      break;
     }
     case 9013:  {
      $1 = 7983;
      label = 117;
      break L1;
      break;
     }
     case 9014:  {
      $1 = 7996;
      label = 117;
      break L1;
      break;
     }
     case 9015:  {
      $1 = 8007;
      label = 117;
      break L1;
      break;
     }
     case 9016:  {
      $1 = 8022;
      label = 117;
      break L1;
      break;
     }
     case 9017:  {
      $1 = 8034;
      label = 117;
      break L1;
      break;
     }
     case 9018:  {
      $1 = 8047;
      label = 117;
      break L1;
      break;
     }
     case 9019:  {
      $1 = 8061;
      label = 117;
      break L1;
      break;
     }
     case 9020:  {
      $1 = 8076;
      label = 117;
      break L1;
      break;
     }
     case 9021:  {
      $1 = 8091;
      label = 117;
      break L1;
      break;
     }
     case 9022:  {
      $1 = 8106;
      label = 117;
      break L1;
      break;
     }
     case 9023:  {
      $1 = 8123;
      label = 117;
      break L1;
      break;
     }
     case 9024:  {
      $1 = 8140;
      label = 117;
      break L1;
      break;
     }
     case 9025:  {
      $1 = 8155;
      label = 117;
      break L1;
      break;
     }
     case 9026:  {
      $1 = 8169;
      label = 117;
      break L1;
      break;
     }
     case 9027:  {
      $1 = 8184;
      label = 117;
      break L1;
      break;
     }
     case 9028:  {
      $1 = 8199;
      label = 117;
      break L1;
      break;
     }
     case 9029:  {
      $1 = 8214;
      label = 117;
      break L1;
      break;
     }
     case 9030:  {
      $1 = 8229;
      label = 117;
      break L1;
      break;
     }
     default: {
      label = 116;
      break L1;
     }
     }
    } while(0);
   }
   $switch$split52D = ($3|0)<(9046);
   if ($switch$split52D) {
    do {
     switch ($3|0) {
     case 9031:  {
      $1 = 8244;
      label = 117;
      break L1;
      break;
     }
     case 9032:  {
      $1 = 8260;
      label = 117;
      break L1;
      break;
     }
     case 9033:  {
      $1 = 8274;
      label = 117;
      break L1;
      break;
     }
     case 9034:  {
      $1 = 8291;
      label = 117;
      break L1;
      break;
     }
     case 9035:  {
      $1 = 8304;
      label = 117;
      break L1;
      break;
     }
     case 9036:  {
      $1 = 8321;
      label = 117;
      break L1;
      break;
     }
     case 9037:  {
      $1 = 8335;
      label = 117;
      break L1;
      break;
     }
     case 9038:  {
      $1 = 8352;
      label = 117;
      break L1;
      break;
     }
     case 9039:  {
      $1 = 8369;
      label = 117;
      break L1;
      break;
     }
     case 9041:  {
      $1 = 8385;
      label = 117;
      break L1;
      break;
     }
     case 9042:  {
      $1 = 8399;
      label = 117;
      break L1;
      break;
     }
     case 9043:  {
      $1 = 8416;
      label = 117;
      break L1;
      break;
     }
     case 9044:  {
      $1 = 8436;
      label = 117;
      break L1;
      break;
     }
     case 9045:  {
      $1 = 8455;
      label = 117;
      break L1;
      break;
     }
     default: {
      label = 116;
      break L1;
     }
     }
    } while(0);
   }
   $switch$split82D = ($3|0)<(9766);
   if ($switch$split82D) {
    switch ($3|0) {
    case 9046:  {
     $1 = 8474;
     label = 117;
     break L1;
     break;
    }
    case 9047:  {
     $1 = 8491;
     label = 117;
     break L1;
     break;
    }
    case 9048:  {
     $1 = 8510;
     label = 117;
     break L1;
     break;
    }
    case 9049:  {
     $1 = 8528;
     label = 117;
     break L1;
     break;
    }
    case 9050:  {
     $1 = 8551;
     label = 117;
     break L1;
     break;
    }
    case 9051:  {
     $1 = 8573;
     label = 117;
     break L1;
     break;
    }
    case 9052:  {
     $1 = 8588;
     label = 117;
     break L1;
     break;
    }
    default: {
     label = 116;
     break L1;
    }
    }
   }
   $switch$split112D = ($3|0)<(12079);
   if ($switch$split112D) {
    switch ($3|0) {
    case 11051:  {
     $1 = 7634;
     label = 117;
     break L1;
     break;
    }
    case 11565:  {
     $1 = 7643;
     label = 117;
     break L1;
     break;
    }
    case 11582:  {
     $1 = 7654;
     label = 117;
     break L1;
     break;
    }
    case 9766:  {
     $1 = 7701;
     label = 117;
     break L1;
     break;
    }
    default: {
     label = 116;
     break L1;
    }
    }
   }
   $switch$split142D = ($3|0)<(15934);
   if ($switch$split142D) {
    $switch$split172D = ($3|0)<(15420);
    if ($switch$split172D) {
     switch ($3|0) {
     case 12079:  {
      break;
     }
     default: {
      label = 116;
      break L1;
     }
     }
     $1 = 7175;
     label = 117;
     break;
    } else {
     switch ($3|0) {
     case 15420:  {
      break;
     }
     default: {
      label = 116;
      break L1;
     }
     }
     $1 = 7660;
     label = 117;
     break;
    }
   } else {
    $switch$split202D = ($3|0)<(31868);
    if ($switch$split202D) {
     switch ($3|0) {
     case 15934:  {
      break;
     }
     default: {
      label = 116;
      break L1;
     }
     }
     $1 = 7670;
     label = 117;
     break;
    } else {
     switch ($3|0) {
     case 31868:  {
      break;
     }
     default: {
      label = 116;
      break L1;
     }
     }
     $1 = 7681;
     label = 117;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 116) {
  ___assert_fail((9119|0),(5558|0),3791,(8603|0));
  // unreachable;
 }
 else if ((label|0) == 117) {
  $4 = $1;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _preprocessor_look_ahead_core($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $1 = 0;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 }
 $8 = $2;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $3 = $10;
 $11 = $3;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 }
 while(1) {
  $13 = $3;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $3;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(142);
   if ($17) {
    $31 = 1;
   } else {
    $18 = $3;
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(141);
    if ($20) {
     $31 = 1;
    } else {
     $21 = $3;
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(130);
     if ($23) {
      $31 = 1;
     } else {
      $24 = $3;
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(131);
      $31 = $26;
     }
    }
   }
  } else {
   $31 = 0;
  }
  $27 = $3;
  if (!($31)) {
   break;
  }
  $28 = ((($27)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $3 = $29;
 }
 $1 = $27;
 $30 = $1;
 STACKTOP = sp;return ($30|0);
}
function _pp_tokens_opt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 while(1) {
  $8 = $5;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(10);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = $6;
  _prematch_level($7,$12,$13);
 }
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
 STACKTOP = sp;return;
}
function _skip_blanks_level($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 while(1) {
  $6 = $4;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = $4;
  $10 = HEAP32[$9>>2]|0;
  $11 = (_token_is_blank($10)|0);
  if (!($11)) {
   label = 5;
   break;
  }
  $12 = $3;
  $13 = $4;
  $14 = (_token_list_pop_front($13)|0);
  (_token_list_add($12,$14)|0);
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _preprocessor($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 8|0;
 $10 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $11 = $6;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
  STACKTOP = sp;return;
 }
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(8998);
 if ($17) {
  $18 = $6;
  _prematch_level($9,$18,1);
 }
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 _group_opt($10,$19,$20,1,$21,$22);
 _token_list_append_list($9,$10);
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
 STACKTOP = sp;return;
}
function _identifier_list($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 8|0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $11 = $6;
 _skip_blanks($9,$11);
 $12 = (_calloc(1,8)|0);
 $10 = $12;
 $13 = $6;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___strdup($16)|0);
 $18 = $10;
 HEAP32[$18>>2] = $17;
 $19 = $10;
 $20 = $5;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 (_match_token_level($9,$22,8996,$23,$24)|0);
 $25 = $6;
 _skip_blanks($9,$25);
 while(1) {
  $26 = $6;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(44);
  if (!($29)) {
   label = 5;
   break;
  }
  $30 = $6;
  $31 = $7;
  $32 = $8;
  (_match_token_level($9,$30,44,$31,$32)|0);
  $33 = $6;
  _skip_blanks($9,$33);
  $34 = $6;
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(3026478);
  if ($37) {
   label = 5;
   break;
  }
  $38 = (_calloc(1,8)|0);
  $39 = $10;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = $38;
  $41 = $10;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $10 = $43;
  $44 = $6;
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (___strdup($47)|0);
  $49 = $10;
  HEAP32[$49>>2] = $48;
  $50 = $6;
  $51 = $7;
  $52 = $8;
  (_match_token_level($9,$50,8996,$51,$52)|0);
  $53 = $6;
  _skip_blanks($9,$53);
 }
 if ((label|0) == 5) {
  ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _replacement_list($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $8 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 while(1) {
  $9 = $5;
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(10);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = $6;
  _match_level($7,$13,$14);
 }
 $15 = $4;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _copy_replacement_list($8,$7);
  $19 = $4;
  $20 = ((($19)) + 12|0);
  _token_list_append_list($20,$8);
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((8747|0),(5558|0),2281,(8784|0));
  // unreachable;
 }
}
function _match_level($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = (_token_list_pop_front($7)|0);
 (_token_list_add($6,$8)|0);
 STACKTOP = sp;return;
}
function _if_group($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $13 = sp + 40|0;
 $16 = sp + 24|0;
 $17 = sp + 16|0;
 $18 = sp + 8|0;
 $7 = $1;
 $8 = $2;
 $19 = $3&1;
 $9 = $19;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $20 = $11;
 HEAP8[$20>>0] = 0;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;
 $21 = $8;
 $22 = $10;
 $23 = $12;
 (_match_token_level($13,$21,127,$22,$23)|0);
 $24 = $8;
 $25 = $10;
 _skip_blanks_level($13,$24,$25);
 $26 = $8;
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(8996);
 if (!($29)) {
  ___assert_fail((6690|0),(5558|0),1999,(8991|0));
  // unreachable;
 }
 $30 = $8;
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_strcmp($33,5730)|0);
 $35 = ($34|0)==(0);
 $36 = $8;
 do {
  if ($35) {
   $37 = $10;
   $38 = $12;
   (_match_token_level($13,$36,8996,$37,$38)|0);
   $39 = $8;
   $40 = $10;
   _skip_blanks_level($13,$39,$40);
   $41 = $9;
   $42 = $41&1;
   if ($42) {
    $43 = $7;
    $44 = $8;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_find_macro($43,$47)|0);
    $14 = $48;
    $49 = $14;
    $50 = ($49|0)!=(0|0);
    $51 = $50 ? 1 : 0;
    $52 = ($51|0)!=(0);
    $53 = $11;
    $54 = $52&1;
    HEAP8[$53>>0] = $54;
   }
   $55 = $8;
   $56 = $10;
   $57 = $12;
   (_match_token_level($13,$55,8996,$56,$57)|0);
   $58 = $8;
   $59 = $10;
   _skip_blanks_level($13,$58,$59);
   $60 = $8;
   $61 = $10;
   $62 = $12;
   (_match_token_level($13,$60,10,$61,$62)|0);
  } else {
   $63 = HEAP32[$36>>2]|0;
   $64 = ((($63)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_strcmp($65,5736)|0);
   $67 = ($66|0)==(0);
   $68 = $8;
   if ($67) {
    $69 = $10;
    $70 = $12;
    (_match_token_level($13,$68,8996,$69,$70)|0);
    $71 = $8;
    $72 = $10;
    _skip_blanks_level($13,$71,$72);
    $73 = $9;
    $74 = $73&1;
    if ($74) {
     $75 = $7;
     $76 = $8;
     $77 = HEAP32[$76>>2]|0;
     $78 = ((($77)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (_find_macro($75,$79)|0);
     $15 = $80;
     $81 = $15;
     $82 = ($81|0)==(0|0);
     $83 = $82 ? 1 : 0;
     $84 = ($83|0)!=(0);
     $85 = $11;
     $86 = $84&1;
     HEAP8[$85>>0] = $86;
    }
    $87 = $8;
    $88 = $10;
    $89 = $12;
    (_match_token_level($13,$87,8996,$88,$89)|0);
    $90 = $8;
    $91 = $10;
    _skip_blanks_level($13,$90,$91);
    $92 = $8;
    $93 = $10;
    $94 = $12;
    (_match_token_level($13,$92,10,$93,$94)|0);
    break;
   }
   $95 = HEAP32[$68>>2]|0;
   $96 = ((($95)) + 4|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (_strcmp($97,5727)|0);
   $99 = ($98|0)==(0);
   if (!($99)) {
    $119 = $12;
    $120 = $8;
    $121 = HEAP32[$120>>2]|0;
    _seterror_with_token($119,$121,9166,$vararg_buffer);
    ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
    STACKTOP = sp;return;
   }
   $100 = $8;
   $101 = $10;
   $102 = $12;
   (_match_token_level($13,$100,8996,$101,$102)|0);
   $103 = $8;
   $104 = $10;
   _skip_blanks_level($13,$103,$104);
   $105 = $9;
   $106 = $105&1;
   if ($106) {
    ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;
    $107 = $7;
    $108 = $8;
    $109 = $10;
    $110 = $12;
    $111 = (_preprocessor_constant_expression($107,$16,$108,$109,$110)|0);
    $112 = ($111|0)!=(0);
    $113 = $11;
    $114 = $112&1;
    HEAP8[$113>>0] = $114;
    _token_list_append_list($13,$16);
   } else {
    $115 = $8;
    _IgnorePreprocessorLine($17,$115);
    _token_list_append_list($13,$17);
   }
   $116 = $8;
   $117 = $10;
   $118 = $12;
   (_match_token_level($13,$116,10,$117,$118)|0);
  }
 } while(0);
 $122 = $7;
 $123 = $8;
 $124 = $9;
 $125 = $124&1;
 if ($125) {
  $126 = $11;
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&1;
  $131 = $128;
 } else {
  $131 = 0;
 }
 $129 = $10;
 $130 = $12;
 _group_opt($18,$122,$123,$131,$129,$130);
 _token_list_append_list($13,$18);
 ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function _elif_groups($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $13 = sp + 16|0;
 $15 = sp + 44|0;
 $16 = sp + 8|0;
 $17 = sp;
 $7 = $1;
 $8 = $2;
 $18 = $3&1;
 $9 = $18;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;
 $14 = 0;
 HEAP8[$15>>0] = 0;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $21&1;
 $23 = $10;
 $24 = $12;
 _elif_group($16,$19,$20,$22,$23,$15,$24);
 _token_list_append_list($13,$16);
 $25 = HEAP8[$15>>0]|0;
 $26 = $25&1;
 if ($26) {
  $14 = 1;
 }
 $27 = $8;
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(127);
 if ($30) {
  $31 = $8;
  $32 = HEAP32[$31>>2]|0;
  $33 = (_preprocessor_token_ahead_is_identifier($32,5705)|0);
  if ($33) {
   label = 7;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $34 = $8;
  $35 = HEAP32[$34>>2]|0;
  $36 = (_preprocessor_token_ahead_is_identifier($35,5710)|0);
  if ($36) {
   label = 7;
  } else {
   $37 = $8;
   $38 = HEAP32[$37>>2]|0;
   $39 = (_preprocessor_token_ahead_is_identifier($38,5718)|0);
   if ($39) {
    label = 7;
   }
  }
 }
 if ((label|0) == 7) {
  $40 = $7;
  $41 = $8;
  $42 = $9;
  $43 = $42&1;
  if ($43) {
   $44 = $14;
   $45 = $44&1;
   $46 = $45 ^ 1;
   $49 = $46;
  } else {
   $49 = 0;
  }
  $47 = $10;
  $48 = $12;
  _elif_groups($17,$40,$41,$49,$47,$15,$48);
  _token_list_append_list($13,$17);
  $50 = HEAP8[$15>>0]|0;
  $51 = $50&1;
  if ($51) {
   $14 = 1;
  }
 }
 $52 = $14;
 $53 = $52&1;
 $54 = $11;
 $55 = $53&1;
 HEAP8[$54>>0] = $55;
 ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function _else_group($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $12 = sp;
 $6 = $1;
 $7 = $2;
 $13 = $3&1;
 $8 = $13;
 $9 = $4;
 $10 = $5;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;
 $14 = $7;
 $15 = $9;
 $16 = $10;
 (_match_token_level($11,$14,127,$15,$16)|0);
 $17 = $7;
 $18 = $9;
 _skip_blanks_level($11,$17,$18);
 $19 = $7;
 $20 = $9;
 $21 = $10;
 (_match_token_level($11,$19,8996,$20,$21)|0);
 $22 = $7;
 $23 = $9;
 _skip_blanks_level($11,$22,$23);
 $24 = $7;
 $25 = $9;
 $26 = $10;
 (_match_token_level($11,$24,10,$25,$26)|0);
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $29&1;
 $31 = $9;
 $32 = $10;
 _group_opt($12,$27,$28,$30,$31,$32);
 _token_list_append_list($11,$12);
 ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;HEAP32[$0+4>>2]=HEAP32[$11+4>>2]|0;
 STACKTOP = sp;return;
}
function _endif_line($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;
 $10 = $6;
 $11 = $7;
 $12 = $8;
 (_match_token_level($9,$10,127,$11,$12)|0);
 $13 = $6;
 $14 = $7;
 _skip_blanks_level($9,$13,$14);
 $15 = $6;
 $16 = $7;
 $17 = $8;
 (_match_token_level($9,$15,8996,$16,$17)|0);
 $18 = $6;
 $19 = $7;
 _skip_blanks_level($9,$18,$19);
 $20 = $6;
 $21 = $7;
 $22 = $8;
 (_match_token_level($9,$20,10,$21,$22)|0);
 ;HEAP32[$0>>2]=HEAP32[$9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$9+4>>2]|0;
 STACKTOP = sp;return;
}
function _elif_group($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 32|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $17 = sp;
 $7 = $1;
 $8 = $2;
 $18 = $3&1;
 $9 = $18;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $19 = $11;
 HEAP8[$19>>0] = 0;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;
 $20 = $8;
 $21 = $10;
 $22 = $12;
 (_match_token_level($13,$20,127,$21,$22)|0);
 $23 = $8;
 _skip_blanks($13,$23);
 $14 = 0;
 $24 = $8;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_strcmp($27,5705)|0);
 $29 = ($28|0)==(0);
 $30 = $8;
 do {
  if ($29) {
   $31 = $10;
   $32 = $12;
   (_match_token_level($13,$30,8996,$31,$32)|0);
   $33 = $8;
   _skip_blanks($13,$33);
   $34 = $9;
   $35 = $34&1;
   if ($35) {
    ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;
    $36 = $7;
    $37 = $8;
    $38 = $10;
    $39 = $12;
    $40 = (_preprocessor_constant_expression($36,$15,$37,$38,$39)|0);
    $14 = $40;
    _token_list_append_list($13,$15);
    break;
   } else {
    $41 = $8;
    _IgnorePreprocessorLine($16,$41);
    break;
   }
  } else {
   $42 = HEAP32[$30>>2]|0;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_strcmp($44,5710)|0);
   $46 = ($45|0)==(0);
   $47 = $8;
   if ($46) {
    $48 = $10;
    $49 = $12;
    (_match_token_level($13,$47,8996,$48,$49)|0);
    $50 = $8;
    _skip_blanks($13,$50);
    $51 = $9;
    $52 = $51&1;
    if ($52) {
     $53 = $7;
     $54 = ((($53)) + 4|0);
     $55 = $8;
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($56)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (_hashmap_find($54,$58)|0);
     $60 = ($59|0)!=(0|0);
     $61 = $60 ? 1 : 0;
     $14 = $61;
    }
    $62 = $8;
    $63 = $10;
    $64 = $12;
    (_match_token_level($13,$62,8996,$63,$64)|0);
    break;
   }
   $65 = HEAP32[$47>>2]|0;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (_strcmp($67,5718)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = $8;
    $71 = $10;
    $72 = $12;
    (_match_token_level($13,$70,8996,$71,$72)|0);
    $73 = $8;
    _skip_blanks($13,$73);
    $74 = $9;
    $75 = $74&1;
    if ($75) {
     $76 = $7;
     $77 = ((($76)) + 4|0);
     $78 = $8;
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($79)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_hashmap_find($77,$81)|0);
     $83 = ($82|0)==(0|0);
     $84 = $83 ? 1 : 0;
     $14 = $84;
    }
    $85 = $8;
    $86 = $10;
    $87 = $12;
    (_match_token_level($13,$85,8996,$86,$87)|0);
   }
  }
 } while(0);
 $88 = $14;
 $89 = ($88|0)!=(0);
 $90 = $11;
 $91 = $89&1;
 HEAP8[$90>>0] = $91;
 $92 = $8;
 _skip_blanks($13,$92);
 $93 = $8;
 $94 = $10;
 $95 = $12;
 (_match_token_level($13,$93,10,$94,$95)|0);
 $96 = $7;
 $97 = $8;
 $98 = $9;
 $99 = $98&1;
 if (!($99)) {
  $105 = 0;
  $103 = $10;
  $104 = $12;
  _group_opt($17,$96,$97,$105,$103,$104);
  _token_list_append_list($13,$17);
  ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 }
 $100 = $11;
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&1;
 $105 = $102;
 $103 = $10;
 $104 = $12;
 _group_opt($17,$96,$97,$105,$103,$104);
 _token_list_append_list($13,$17);
 ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function _preprocessor_constant_expression($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $13 = sp + 56|0;
 $14 = sp + 48|0;
 $15 = sp + 40|0;
 $16 = sp + 8|0;
 $17 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $18 = $5;
 $19 = ((($18)) + 36|0);
 HEAP8[$19>>0] = 1;
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;
 while(1) {
  $20 = $7;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $23 = $7;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(10);
  if (!($26)) {
   break;
  }
  $27 = $7;
  $28 = (_token_list_pop_front($27)|0);
  (_token_list_add($10,$28)|0);
 }
 $29 = $6;
 ;HEAP32[$29>>2]=HEAP32[$10>>2]|0;HEAP32[$29+4>>2]=HEAP32[$10+4>>2]|0;
 _copy_replacement_list($11,$10);
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $12 = $31;
 $32 = $5;
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 1;
 HEAP32[$32>>2] = $34;
 $35 = $5;
 $36 = $9;
 _preprocessor($13,$35,$11,1,$36);
 $37 = $12;
 $38 = $5;
 HEAP32[$38>>2] = $37;
 $39 = $5;
 $40 = $9;
 _process_defined($14,$39,$13,$40);
 $41 = $5;
 _process_identifiers($15,$41,$14);
 $42 = HEAP32[$15>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;HEAP32[$16+16>>2]=0|0;HEAP32[$16+20>>2]=0|0;HEAP32[$16+24>>2]=0|0;HEAP32[$16+28>>2]=0|0;
  $44 = ((($16)) + 20|0);
  ;HEAP32[$44>>2]=HEAP32[$15>>2]|0;HEAP32[$44+4>>2]=HEAP32[$15+4>>2]|0;
  $45 = HEAP32[$15>>2]|0;
  $46 = ((($16)) + 28|0);
  HEAP32[$46>>2] = $45;
  (_parser_skip_blanks($16)|0);
  ;HEAP32[$17>>2]=HEAP32[1056>>2]|0;HEAP32[$17+4>>2]=HEAP32[1056+4>>2]|0;
  $47 = $9;
  _pre_constant_expression($16,$47,$17);
  $48 = $5;
  $49 = ((($48)) + 36|0);
  HEAP8[$49>>0] = 0;
  $50 = ((($17)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  STACKTOP = sp;return ($51|0);
 } else {
  ___assert_fail((8801|0),(5558|0),1918,(8820|0));
  // unreachable;
 }
 return (0)|0;
}
function _IgnorePreprocessorLine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $1;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;
 while(1) {
  $4 = $2;
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(10);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = (_token_list_pop_front($8)|0);
  (_token_list_add($3,$9)|0);
 }
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function _process_defined($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $7 = sp + 16|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 L1: while(1) {
  $12 = $5;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 22;
   break;
  }
  $15 = $5;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(8996);
  if ($18) {
   $19 = $5;
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_strcmp($22,5790)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $5;
    (_token_list_pop_front($25)|0);
    $26 = $5;
    _skip_blanks($7,$26);
    $8 = 0;
    $27 = $5;
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(40);
    if ($30) {
     $31 = $5;
     (_token_list_pop_front($31)|0);
     $8 = 1;
    }
    $32 = $5;
    _skip_blanks($7,$32);
    $33 = $4;
    $34 = $5;
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_find_macro($33,$37)|0);
    $9 = $38;
    $39 = $5;
    $40 = (_token_list_pop_front($39)|0);
    $10 = $40;
    $41 = $10;
    HEAP32[$41>>2] = 134;
    $42 = $10;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    _free($44);
    $45 = $9;
    $46 = ($45|0)!=(0|0);
    if ($46) {
     $47 = (___strdup(6634)|0);
     $48 = $10;
     $49 = ((($48)) + 4|0);
     HEAP32[$49>>2] = $47;
    } else {
     $50 = (___strdup(8900)|0);
     $51 = $10;
     $52 = ((($51)) + 4|0);
     HEAP32[$52>>2] = $50;
    }
    $53 = $10;
    (_token_list_add($7,$53)|0);
    $54 = $8;
    $55 = $54&1;
    if ($55) {
     $56 = $5;
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)!=(41);
     if ($59) {
      label = 12;
      break;
     }
     $63 = $5;
     (_token_list_pop_front($63)|0);
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
  do {
   if ((label|0) == 14) {
    label = 0;
    $64 = $5;
    $65 = HEAP32[$64>>2]|0;
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(8996);
    if ($67) {
     $68 = $5;
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (_strcmp($71,8941)|0);
     $73 = ($72|0)==(0);
     if ($73) {
      label = 16;
      break L1;
     }
    }
    $74 = $5;
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(8996);
    if ($77) {
     $78 = $5;
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($79)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_strcmp($81,8971)|0);
     $83 = ($82|0)==(0);
     if ($83) {
      $84 = $5;
      (_token_list_pop_front($84)|0);
      $85 = $5;
      (_token_list_pop_front($85)|0);
      $86 = $5;
      $87 = (_token_list_pop_front($86)|0);
      $11 = $87;
      $88 = $11;
      HEAP32[$88>>2] = 134;
      $89 = $11;
      $90 = ((($89)) + 4|0);
      $91 = HEAP32[$90>>2]|0;
      _free($91);
      $92 = (___strdup(8900)|0);
      $93 = $11;
      $94 = ((($93)) + 4|0);
      HEAP32[$94>>2] = $92;
      $95 = $11;
      (_token_list_add($7,$95)|0);
      $96 = $5;
      (_token_list_pop_front($96)|0);
      break;
     }
    }
    $97 = $5;
    $98 = (_token_list_pop_front($97)|0);
    (_token_list_add($7,$98)|0);
   }
  } while(0);
 }
 if ((label|0) == 12) {
  $60 = $6;
  $61 = $5;
  $62 = HEAP32[$61>>2]|0;
  _seterror_with_token($60,$62,8931,$vararg_buffer);
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  ___assert_fail((9119|0),(5558|0),1798,(8955|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _process_identifiers($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 $8 = $4;
 $9 = (_token_list_is_empty($8)|0);
 if ($9) {
  ___assert_fail((8853|0),(5558|0),1829,(8880|0));
  // unreachable;
 }
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 while(1) {
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(8996);
  if ($16) {
   $17 = $3;
   $18 = $4;
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (_find_macro($17,$21)|0);
   $6 = $22;
   $23 = $4;
   $24 = (_token_list_pop_front($23)|0);
   $7 = $24;
   $25 = $7;
   HEAP32[$25>>2] = 134;
   $26 = $7;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   _free($28);
   $29 = $6;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = (___strdup(6634)|0);
    $32 = $7;
    $33 = ((($32)) + 4|0);
    HEAP32[$33>>2] = $31;
   } else {
    $34 = (___strdup(8900)|0);
    $35 = $7;
    $36 = ((($35)) + 4|0);
    HEAP32[$36>>2] = $34;
   }
   $37 = $7;
   (_token_list_add($5,$37)|0);
  } else {
   $38 = $4;
   $39 = (_token_list_pop_front($38)|0);
   (_token_list_add($5,$39)|0);
  }
 }
 $40 = (_token_list_is_empty($5)|0);
 if ($40) {
  ___assert_fail((8902|0),(5558|0),1858,(8880|0));
  // unreachable;
 } else {
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function _node_delete($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function _get_code_as_we_see($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 32|0;
 $2 = $0;
 $6 = $1&1;
 $3 = $6;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $5 = $8;
 while(1) {
  $9 = $5;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $5;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  do {
   if ($14) {
    $15 = $5;
    $16 = ((($15)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 2;
    $19 = ($18|0)!=(0);
    if (!($19)) {
     $20 = $5;
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)!=(8998);
     if ($22) {
      $23 = $3;
      $24 = $23&1;
      $25 = $5;
      if (!($24)) {
       $34 = ((($25)) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       HEAP32[$vararg_buffer5>>2] = $35;
       (_ss_fprintf($4,5531,$vararg_buffer5)|0);
       break;
      }
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==(130);
      if ($27) {
       (_ss_fprintf($4,5664,$vararg_buffer)|0);
       break;
      }
      $28 = $5;
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(131);
      if ($30) {
       (_ss_fprintf($4,5588,$vararg_buffer1)|0);
       break;
      } else {
       $31 = $5;
       $32 = ((($31)) + 4|0);
       $33 = HEAP32[$32>>2]|0;
       HEAP32[$vararg_buffer3>>2] = $33;
       (_ss_fprintf($4,5531,$vararg_buffer3)|0);
       break;
      }
     }
    }
   }
  } while(0);
  $36 = $5;
  $37 = ((($36)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $5 = $38;
 }
 $39 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function _print_preprocessed_to_string2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 40|0;
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___strdup(9381)|0);
  $1 = $7;
  $63 = $1;
  STACKTOP = sp;return ($63|0);
 }
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $8 = $2;
 $4 = $8;
 while(1) {
  $9 = $4;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  $16 = $4;
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  if ($15) {
   $19 = ($18|0)>(0);
   $20 = $4;
   $21 = ((($20)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   do {
    if ($19) {
     $23 = $22 & 8;
     $24 = ($23|0)!=(0);
     if ($24) {
      (_ss_fprintf($3,5664,$vararg_buffer)|0);
      break;
     }
     $25 = $4;
     $26 = ((($25)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 & 4;
     $29 = ($28|0)!=(0);
     if ($29) {
      (_ss_fprintf($3,5588,$vararg_buffer1)|0);
     }
    } else {
     $30 = $22 & 2;
     $31 = ($30|0)!=(0);
     if ($31) {
      $32 = $4;
      $33 = ((($32)) + 24|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $34 & 4;
      $36 = ($35|0)!=(0);
      if ($36) {
       (_ss_fprintf($3,5588,$vararg_buffer3)|0);
      }
     }
    }
   } while(0);
   $37 = $4;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $4;
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[$vararg_buffer5>>2] = $45;
    (_ss_fprintf($3,5531,$vararg_buffer5)|0);
   }
   $46 = $4;
   $47 = ((($46)) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   $4 = $48;
  } else {
   $49 = ($18|0)==(0);
   do {
    if ($49) {
     $50 = $4;
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(142);
     if (!($52)) {
      $53 = $4;
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(10);
      if (!($55)) {
       break;
      }
     }
     $56 = $4;
     $57 = ((($56)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $58;
     (_ss_fprintf($3,5531,$vararg_buffer7)|0);
    }
   } while(0);
   $59 = $4;
   $60 = ((($59)) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   $4 = $61;
  }
 }
 $62 = HEAP32[$3>>2]|0;
 $1 = $62;
 $63 = $1;
 STACKTOP = sp;return ($63|0);
}
function _ss_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return 0;
}
function _ss_vafprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((9049|0),(9058|0),42,(9069|0));
  // unreachable;
 }
 $7 = 0;
 $11 = $6;
 $vacopy_currentptr = HEAP32[$11>>2]|0;
 HEAP32[$8>>2] = $vacopy_currentptr;
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) + ($16)|0);
 $18 = $4;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) - ($23))|0;
 $25 = $5;
 $26 = (_vsnprintf($17,$24,$25,$8)|0);
 $7 = $26;
 $27 = $7;
 $28 = ($27|0)<(0);
 if ($28) {
  $3 = -1;
  $54 = $3;
  STACKTOP = sp;return ($54|0);
 }
 $29 = $4;
 $30 = $4;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $7;
 $34 = (($32) + ($33))|0;
 $35 = (_reserve($29,$34)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $3 = -1;
  $54 = $3;
  STACKTOP = sp;return ($54|0);
 }
 $37 = $4;
 $38 = HEAP32[$37>>2]|0;
 $39 = $4;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($38) + ($41)|0);
 $43 = $5;
 $44 = $6;
 $45 = (_vsprintf($42,$43,$44)|0);
 $7 = $45;
 $46 = $7;
 $47 = ($46|0)>(0);
 if ($47) {
  $48 = $7;
  $49 = $4;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($48))|0;
  HEAP32[$50>>2] = $52;
 }
 $53 = $7;
 $3 = $53;
 $54 = $3;
 STACKTOP = sp;return ($54|0);
}
function _reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 if (!($10)) {
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = (($13) + 1)|0;
 $15 = $14;
 $16 = (_realloc($12,$15)|0);
 $5 = $16;
 $17 = $5;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $5;
  $20 = $2;
  HEAP32[$20>>2] = $19;
  $21 = $3;
  $22 = $2;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $21;
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  $27 = (($25) + ($26)|0);
  HEAP8[$27>>0] = 0;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 } else {
  $28 = (___errno_location()|0);
  HEAP32[$28>>2] = 12;
  $4 = 1;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _ss_fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$4>>2] = $varargs;
 $6 = $2;
 $7 = $3;
 $8 = (_ss_vafprintf($6,$7,$4)|0);
 $5 = $8;
 $9 = $5;
 STACKTOP = sp;return ($9|0);
}
function _seterror($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 200|0);
  HEAP32[$11>>2] = 1;
  HEAP32[$4>>2] = $varargs;
  $12 = $2;
  $13 = $3;
  $14 = (_vsnprintf($12,200,$13,$4)|0);
  $5 = $14;
  $15 = $5;
  STACKTOP = sp;return ($15|0);
 } else {
  ___assert_fail((9082|0),(9102|0),29,(9110|0));
  // unreachable;
 }
 return (0)|0;
}
function _pre_primary_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(8996);
 if ($11) {
  ___assert_fail((9119|0),(9125|0),35,(9143|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(128);
 if ($16) {
  ___assert_fail((9119|0),(9125|0),39,(9143|0));
  // unreachable;
 }
 $17 = $3;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(129);
 if ($21) {
  ___assert_fail((9119|0),(9125|0),43,(9143|0));
  // unreachable;
 }
 $22 = $3;
 $23 = ((($22)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = (_is_number($25)|0);
 if ($26) {
  _memset(($6|0),0,216)|0;
  $27 = $3;
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_convert_to_integer($29,$6)|0);
  $31 = $5;
  $32 = ((($31)) + 4|0);
  HEAP32[$32>>2] = $30;
  $33 = $3;
  (_parser_match($33)|0);
  STACKTOP = sp;return;
 }
 $34 = $3;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(9046);
 if ($38) {
  ___assert_fail((9119|0),(9125|0),54,(9143|0));
  // unreachable;
 }
 $39 = $3;
 $40 = ((($39)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(9052);
 if ($43) {
  ___assert_fail((9119|0),(9125|0),58,(9143|0));
  // unreachable;
 }
 $44 = $3;
 $45 = ((($44)) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(40);
 if (!($48)) {
  $59 = $4;
  $60 = $3;
  $61 = ((($60)) + 28|0);
  $62 = HEAP32[$61>>2]|0;
  _seterror_with_token($59,$62,9166,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $49 = $3;
 (_parser_match($49)|0);
 $50 = $3;
 $51 = $4;
 $52 = $5;
 _pre_expression($50,$51,$52);
 $53 = $4;
 $54 = ((($53)) + 200|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0);
 if ($56) {
  STACKTOP = sp;return;
 }
 $57 = $3;
 $58 = $4;
 _parser_match_tk($57,41,$58);
 STACKTOP = sp;return;
}
function _pre_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _pre_assignment_expression($6,$7,$8);
 $9 = $4;
 $10 = ((($9)) + 200|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 while(1) {
  $13 = $3;
  $14 = ((($13)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(44);
  if (!($17)) {
   label = 6;
   break;
  }
  $18 = $3;
  (_parser_match($18)|0);
  $19 = $3;
  $20 = $4;
  $21 = $5;
  _pre_expression($19,$20,$21);
  $22 = $4;
  $23 = ((($22)) + 200|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function _pre_assignment_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _pre_conditional_expression($6,$7,$8);
 $9 = $4;
 $10 = ((($9)) + 200|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $3;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $3;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(61);
 if (!($21)) {
  $22 = $3;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(10813);
  if (!($26)) {
   $27 = $3;
   $28 = ((($27)) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(12093);
   if (!($31)) {
    $32 = $3;
    $33 = ((($32)) + 28|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(11069);
    if (!($36)) {
     $37 = $3;
     $38 = ((($37)) + 28|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(11581);
     if (!($41)) {
      $42 = $3;
      $43 = ((($42)) + 28|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(3947581);
      if (!($46)) {
       $47 = $3;
       $48 = ((($47)) + 28|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)==(4079165);
       if (!($51)) {
        $52 = $3;
        $53 = ((($52)) + 28|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)==(9789);
        if (!($56)) {
         $57 = $3;
         $58 = ((($57)) + 28|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = HEAP32[$59>>2]|0;
         $61 = ($60|0)==(24125);
         if (!($61)) {
          $62 = $3;
          $63 = ((($62)) + 28|0);
          $64 = HEAP32[$63>>2]|0;
          $65 = HEAP32[$64>>2]|0;
          $66 = ($65|0)==(31805);
          if (!($66)) {
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 ___assert_fail((9119|0),(9125|0),634,(9177|0));
 // unreachable;
}
function _pre_conditional_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pre_logical_OR_expression($8,$9,$10);
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $3;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $3;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(63);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $3;
 (_parser_match($24)|0);
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 $29 = $3;
 $30 = $4;
 if ($28) {
  $31 = $5;
  _pre_expression($29,$30,$31);
  $32 = $4;
  $33 = ((($32)) + 200|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0);
  if ($35) {
   STACKTOP = sp;return;
  } else {
   $36 = $3;
   (_parser_match($36)|0);
   $37 = $3;
   $38 = $4;
   _pre_conditional_expression($37,$38,$6);
   STACKTOP = sp;return;
  }
 }
 _pre_expression($29,$30,$7);
 $39 = $4;
 $40 = ((($39)) + 200|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  STACKTOP = sp;return;
 }
 $43 = $3;
 (_parser_match($43)|0);
 $44 = $3;
 $45 = $4;
 $46 = $5;
 _pre_conditional_expression($44,$45,$46);
 STACKTOP = sp;return;
}
function _pre_logical_OR_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _pre_logical_AND_expression($7,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = $3;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 9;
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(31868);
  if (!($22)) {
   label = 9;
   break;
  }
  $23 = $3;
  (_parser_match($23)|0);
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  _pre_logical_AND_expression($27,$28,$29);
  $30 = $4;
  $31 = ((($30)) + 200|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 9;
   break;
  }
  $34 = $6;
  $35 = ($34|0)!=(0);
  if ($35) {
   $41 = 1;
  } else {
   $36 = $5;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0);
   $41 = $39;
  }
  $40 = $41&1;
  $42 = $5;
  $43 = ((($42)) + 4|0);
  HEAP32[$43>>2] = $40;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _pre_logical_AND_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _pre_inclusive_OR_expression($7,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = $3;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 9;
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(9766);
  if (!($22)) {
   label = 9;
   break;
  }
  $23 = $3;
  (_parser_match($23)|0);
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  _pre_inclusive_OR_expression($27,$28,$29);
  $30 = $4;
  $31 = ((($30)) + 200|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 9;
   break;
  }
  $34 = $6;
  $35 = ($34|0)!=(0);
  if ($35) {
   $36 = $5;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0);
   $41 = $39;
  } else {
   $41 = 0;
  }
  $40 = $41&1;
  $42 = $5;
  $43 = ((($42)) + 4|0);
  HEAP32[$43>>2] = $40;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _pre_inclusive_OR_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _pre_exclusive_OR_expression($7,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = $3;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 7;
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(124);
  if (!($22)) {
   label = 7;
   break;
  }
  $23 = $3;
  (_parser_match($23)|0);
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  _pre_exclusive_OR_expression($27,$28,$29);
  $30 = $4;
  $31 = ((($30)) + 200|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 7;
   break;
  }
  $34 = $6;
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $34 | $37;
  $39 = $5;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = $38;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _pre_exclusive_OR_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _pre_AND_expression($7,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = $3;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 7;
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(94);
  if (!($22)) {
   label = 7;
   break;
  }
  $23 = $3;
  (_parser_match($23)|0);
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  _pre_AND_expression($27,$28,$29);
  $30 = $4;
  $31 = ((($30)) + 200|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 7;
   break;
  }
  $34 = $6;
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $34 ^ $37;
  $39 = $5;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = $38;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _pre_AND_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _pre_equality_expression($7,$8,$9);
 $10 = $4;
 $11 = ((($10)) + 200|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = $3;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 7;
   break;
  }
  $18 = $3;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(38);
  if (!($22)) {
   label = 7;
   break;
  }
  $23 = $3;
  (_parser_match($23)|0);
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  _pre_equality_expression($27,$28,$29);
  $30 = $4;
  $31 = ((($30)) + 200|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 7;
   break;
  }
  $34 = $6;
  $35 = $5;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $34 & $37;
  $39 = $5;
  $40 = ((($39)) + 4|0);
  HEAP32[$40>>2] = $38;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _pre_equality_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pre_relational_expression($8,$9,$10);
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 13;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(15677);
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(8509);
   if (!($28)) {
    label = 13;
    break;
   }
  }
  $29 = $3;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
  $33 = $3;
  (_parser_match($33)|0);
  $34 = $5;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $7 = $36;
  $37 = $3;
  $38 = $4;
  $39 = $5;
  _pre_multiplicative_expression($37,$38,$39);
  $40 = $4;
  $41 = ((($40)) + 200|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0);
  if ($43) {
   label = 13;
   break;
  }
  $44 = $6;
  $45 = ($44|0)==(15677);
  if ($45) {
   $46 = $7;
   $47 = $5;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($46|0)==($49|0);
   $51 = $50&1;
   $52 = $5;
   $53 = ((($52)) + 4|0);
   HEAP32[$53>>2] = $51;
  } else {
   $54 = $6;
   $55 = ($54|0)==(8509);
   if (!($55)) {
    label = 11;
    break;
   }
   $56 = $7;
   $57 = $5;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($56|0)!=($59|0);
   $61 = $60&1;
   $62 = $5;
   $63 = ((($62)) + 4|0);
   HEAP32[$63>>2] = $61;
  }
 }
 if ((label|0) == 11) {
  ___assert_fail((9119|0),(9125|0),461,(9203|0));
  // unreachable;
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
}
function _pre_relational_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pre_shift_expression($8,$9,$10);
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 18;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(62);
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(60);
   if (!($28)) {
    $29 = $3;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(15933);
    if (!($33)) {
     $34 = $3;
     $35 = ((($34)) + 28|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(15421);
     if (!($38)) {
      label = 18;
      break;
     }
    }
   }
  }
  $39 = $3;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $6 = $42;
  $43 = $3;
  (_parser_match($43)|0);
  $44 = $5;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $7 = $46;
  $47 = $3;
  $48 = $4;
  $49 = $5;
  _pre_multiplicative_expression($47,$48,$49);
  $50 = $4;
  $51 = ((($50)) + 200|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)!=(0);
  if ($53) {
   label = 18;
   break;
  }
  $54 = $6;
  $55 = ($54|0)==(62);
  do {
   if ($55) {
    $56 = $7;
    $57 = $5;
    $58 = ((($57)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($56|0)>($59|0);
    $61 = $60&1;
    $62 = $5;
    $63 = ((($62)) + 4|0);
    HEAP32[$63>>2] = $61;
   } else {
    $64 = $6;
    $65 = ($64|0)==(60);
    if ($65) {
     $66 = $7;
     $67 = $5;
     $68 = ((($67)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($66|0)<($69|0);
     $71 = $70&1;
     $72 = $5;
     $73 = ((($72)) + 4|0);
     HEAP32[$73>>2] = $71;
     break;
    }
    $74 = $6;
    $75 = ($74|0)==(15933);
    if ($75) {
     $76 = $7;
     $77 = $5;
     $78 = ((($77)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($76|0)>=($79|0);
     $81 = $80&1;
     $82 = $5;
     $83 = ((($82)) + 4|0);
     HEAP32[$83>>2] = $81;
     break;
    }
    $84 = $6;
    $85 = ($84|0)==(15421);
    if ($85) {
     $86 = $7;
     $87 = $5;
     $88 = ((($87)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($86|0)<=($89|0);
     $91 = $90&1;
     $92 = $5;
     $93 = ((($92)) + 4|0);
     HEAP32[$93>>2] = $91;
    }
   }
  } while(0);
 }
 if ((label|0) == 18) {
  STACKTOP = sp;return;
 }
}
function _pre_multiplicative_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pre_cast_expression($8,$9,$10);
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 15;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(42);
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(47);
   if (!($28)) {
    $29 = $3;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(37);
    if (!($33)) {
     label = 15;
     break;
    }
   }
  }
  $34 = $3;
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $6 = $37;
  $38 = $3;
  (_parser_match($38)|0);
  $39 = $5;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $7 = $41;
  $42 = $3;
  $43 = $4;
  $44 = $5;
  _pre_cast_expression($42,$43,$44);
  $45 = $4;
  $46 = ((($45)) + 200|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  if ($48) {
   label = 15;
   break;
  }
  $49 = $6;
  $50 = ($49|0)==(42);
  do {
   if ($50) {
    $51 = $7;
    $52 = $5;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = Math_imul($51, $54)|0;
    $56 = $5;
    $57 = ((($56)) + 4|0);
    HEAP32[$57>>2] = $55;
   } else {
    $58 = $6;
    $59 = ($58|0)==(47);
    if ($59) {
     $60 = $7;
     $61 = $5;
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($60|0) / ($63|0))&-1;
     $65 = $5;
     $66 = ((($65)) + 4|0);
     HEAP32[$66>>2] = $64;
     break;
    }
    $67 = $6;
    $68 = ($67|0)==(37);
    if ($68) {
     $69 = $7;
     $70 = $5;
     $71 = ((($70)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($69|0) % ($72|0))&-1;
     $74 = $5;
     $75 = ((($74)) + 4|0);
     HEAP32[$75>>2] = $73;
    }
   }
  } while(0);
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function _pre_cast_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _pre_unary_expression($6,$7,$8);
 STACKTOP = sp;return;
}
function _pre_unary_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(11051);
 if ($11) {
  ___assert_fail((9119|0),(9125|0),165,(9227|0));
  // unreachable;
 }
 $12 = $3;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(11565);
 if ($16) {
  ___assert_fail((9119|0),(9125|0),165,(9227|0));
  // unreachable;
 }
 $17 = $3;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 do {
  if ($20) {
   $21 = $3;
   $22 = ((($21)) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(38);
   if (!($25)) {
    $26 = $3;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(42);
    if (!($30)) {
     $31 = $3;
     $32 = ((($31)) + 28|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(43);
     if (!($35)) {
      $36 = $3;
      $37 = ((($36)) + 28|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(45);
      if (!($40)) {
       $41 = $3;
       $42 = ((($41)) + 28|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(126);
       if (!($45)) {
        $46 = $3;
        $47 = ((($46)) + 28|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)==(33);
        if (!($50)) {
         break;
        }
       }
      }
     }
    }
   }
   $51 = $3;
   $52 = ((($51)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   $6 = $54;
   $55 = $3;
   (_parser_match($55)|0);
   $56 = $3;
   $57 = $4;
   $58 = $5;
   _pre_cast_expression($56,$57,$58);
   $59 = $4;
   $60 = ((($59)) + 200|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)!=(0);
   if ($62) {
    STACKTOP = sp;return;
   }
   $63 = $6;
   $64 = ($63|0)==(33);
   if ($64) {
    $65 = $5;
    $66 = ((($65)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)!=(0);
    $69 = $68 ^ 1;
    $70 = $69&1;
    $71 = $5;
    $72 = ((($71)) + 4|0);
    HEAP32[$72>>2] = $70;
    STACKTOP = sp;return;
   }
   $73 = $6;
   $74 = ($73|0)==(126);
   if ($74) {
    $75 = $5;
    $76 = ((($75)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $77 ^ -1;
    $79 = $5;
    $80 = ((($79)) + 4|0);
    HEAP32[$80>>2] = $78;
    STACKTOP = sp;return;
   }
   $81 = $6;
   $82 = ($81|0)==(45);
   if ($82) {
    $83 = $5;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (0 - ($85))|0;
    $87 = $5;
    $88 = ((($87)) + 4|0);
    HEAP32[$88>>2] = $86;
    STACKTOP = sp;return;
   }
   $89 = $6;
   $90 = ($89|0)==(43);
   if ($90) {
    $91 = $5;
    $92 = ((($91)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $5;
    $95 = ((($94)) + 4|0);
    HEAP32[$95>>2] = $93;
    STACKTOP = sp;return;
   }
   $96 = $6;
   $97 = ($96|0)==(42);
   if ($97) {
    ___assert_fail((9119|0),(9125|0),190,(9227|0));
    // unreachable;
   }
   $98 = $6;
   $99 = ($98|0)==(38);
   if ($99) {
    ___assert_fail((9119|0),(9125|0),194,(9227|0));
    // unreachable;
   }
   $100 = $4;
   $101 = $3;
   $102 = ((($101)) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   _seterror_with_token($100,$103,9248,$vararg_buffer);
   STACKTOP = sp;return;
  }
 } while(0);
 $104 = $3;
 $105 = ((($104)) + 28|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(9027);
 if ($108) {
  ___assert_fail((9119|0),(9125|0),203,(9227|0));
  // unreachable;
 }
 $109 = $3;
 $110 = ((($109)) + 28|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)==(9037);
 if ($113) {
  ___assert_fail((9119|0),(9125|0),207,(9227|0));
  // unreachable;
 }
 $114 = $3;
 $115 = $4;
 $116 = $5;
 _pre_postfix_expression($114,$115,$116);
 STACKTOP = sp;return;
}
function _pre_postfix_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _pre_primary_expression($6,$7,$8);
 $9 = $4;
 $10 = ((($9)) + 200|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = ((($13)) + 200|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $3;
 $18 = ((($17)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = $3;
 $22 = ((($21)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(91);
 if ($25) {
  ___assert_fail((9119|0),(9125|0),114,(9262|0));
  // unreachable;
 }
 $26 = $3;
 $27 = ((($26)) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(40);
 if ($30) {
  ___assert_fail((9119|0),(9125|0),118,(9262|0));
  // unreachable;
 }
 $31 = $3;
 $32 = ((($31)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(46);
 if ($35) {
  ___assert_fail((9119|0),(9125|0),122,(9262|0));
  // unreachable;
 }
 $36 = $3;
 $37 = ((($36)) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(11582);
 if ($40) {
  ___assert_fail((9119|0),(9125|0),122,(9262|0));
  // unreachable;
 }
 $41 = $3;
 $42 = ((($41)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(11051);
 if ($45) {
  ___assert_fail((9119|0),(9125|0),126,(9262|0));
  // unreachable;
 }
 $46 = $3;
 $47 = ((($46)) + 28|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(11565);
 if ($50) {
  ___assert_fail((9119|0),(9125|0),130,(9262|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _pre_shift_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pre_additive_expression($8,$9,$10);
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 12;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(15934);
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(15420);
   if (!($28)) {
    label = 12;
    break;
   }
  }
  $29 = $3;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
  $33 = $3;
  (_parser_match($33)|0);
  $34 = $5;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $7 = $36;
  $37 = $3;
  $38 = $4;
  $39 = $5;
  _pre_multiplicative_expression($37,$38,$39);
  $40 = $4;
  $41 = ((($40)) + 200|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0);
  if ($43) {
   label = 12;
   break;
  }
  $44 = $6;
  $45 = ($44|0)==(15934);
  if ($45) {
   $46 = $7;
   $47 = $5;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $46 >> $49;
   $51 = $5;
   $52 = ((($51)) + 4|0);
   HEAP32[$52>>2] = $50;
  } else {
   $53 = $6;
   $54 = ($53|0)==(15420);
   if ($54) {
    $55 = $7;
    $56 = $5;
    $57 = ((($56)) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $55 << $58;
    $60 = $5;
    $61 = ((($60)) + 4|0);
    HEAP32[$61>>2] = $59;
   }
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _pre_additive_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pre_multiplicative_expression($8,$9,$10);
 $11 = $4;
 $12 = ((($11)) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $3;
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 14;
   break;
  }
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(43);
  if (!($23)) {
   $24 = $3;
   $25 = ((($24)) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(45);
   if (!($28)) {
    label = 14;
    break;
   }
  }
  $29 = $3;
  $30 = ((($29)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
  $33 = $3;
  (_parser_match($33)|0);
  $34 = $3;
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   label = 7;
   break;
  }
  $39 = $5;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $7 = $41;
  $42 = $3;
  $43 = $4;
  $44 = $5;
  _pre_multiplicative_expression($42,$43,$44);
  $45 = $4;
  $46 = ((($45)) + 200|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  if ($48) {
   label = 14;
   break;
  }
  $49 = $6;
  $50 = ($49|0)==(43);
  if ($50) {
   $51 = $7;
   $52 = $5;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + ($54))|0;
   $56 = $5;
   $57 = ((($56)) + 4|0);
   HEAP32[$57>>2] = $55;
  } else {
   $58 = $6;
   $59 = ($58|0)==(45);
   if ($59) {
    $60 = $7;
    $61 = $5;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) - ($63))|0;
    $65 = $5;
    $66 = ((($65)) + 4|0);
    HEAP32[$66>>2] = $64;
   }
  }
 }
 if ((label|0) == 7) {
  $38 = $4;
  (_seterror($38,9285,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function _pre_constant_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 HEAP8[$6>>0] = 1;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 _pre_conditional_expression($7,$8,$9);
 STACKTOP = sp;return;
}
function _next_parser_token($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ((($6)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 1;
  $10 = ($9|0)!=(0);
  $11 = $10 ^ 1;
  $12 = $2;
  if (!($11)) {
   break;
  }
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $2 = $14;
 }
 STACKTOP = sp;return ($12|0);
}
function _convert_if_statement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $4;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(9014);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $4;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $6 = $24;
 $25 = $4;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_next_parser_token($27)|0);
 $7 = $28;
 $29 = $7;
 $30 = (_next_parser_token($29)|0);
 $7 = $30;
 $31 = $7;
 $8 = $31;
 while(1) {
  $32 = $7;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(59);
  if ($36) {
   break;
  }
  $37 = $7;
  $38 = (_next_parser_token($37)|0);
  $7 = $38;
 }
 $39 = $3;
 $40 = ((($39)) + 28|0);
 $41 = $8;
 $42 = $7;
 _token_list_remove($9,$40,$41,$42);
 $43 = $3;
 $44 = ((($43)) + 28|0);
 $45 = $6;
 _token_list_insert_after($44,$45,$9);
 $46 = $5;
 _tokenizer($10,9309,11088,0,$46);
 $47 = $3;
 $48 = ((($47)) + 28|0);
 $49 = $6;
 _token_list_insert_after($48,$49,$10);
 $50 = $5;
 _tokenizer($11,9311,11088,0,$50);
 $51 = $3;
 $52 = ((($51)) + 28|0);
 $53 = $4;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_previous_parser_token($55)|0);
 _token_list_insert_after($52,$56,$11);
 STACKTOP = sp;return;
}
function _visit_selection_statement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _convert_if_statement($6,$7,$8);
 STACKTOP = sp;return;
}
function _remove_char($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $2 = 0;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 $9 = $3;
 $5 = $9;
 $10 = $3;
 $6 = $10;
 while(1) {
  $11 = $6;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = $4;
  $18 = $17 << 24 >> 24;
  $19 = ($16|0)==($18|0);
  $20 = $6;
  if ($19) {
   $21 = ((($20)) + 1|0);
   $6 = $21;
  } else {
   $22 = HEAP8[$20>>0]|0;
   $23 = $5;
   HEAP8[$23>>0] = $22;
   $24 = $6;
   $25 = ((($24)) + 1|0);
   $6 = $25;
   $26 = $5;
   $27 = ((($26)) + 1|0);
   $5 = $27;
  }
 }
 $28 = $5;
 HEAP8[$28>>0] = 0;
 $29 = $3;
 $2 = $29;
 $30 = $2;
 STACKTOP = sp;return ($30|0);
}
function _visit_expression($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $8 = sp + 80|0;
 $10 = sp;
 $12 = sp + 64|0;
 $13 = sp + 56|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $4;
 $15 = HEAP32[$14>>2]|0;
 switch ($15|0) {
 case 26: case 23: case 22: case 21: case 20: case 19: case 18: case 15: case 33: case 14: case 13: case 12: case 10: case 9: case 8: case 27: case 28: case 29: case 30: case 31:  {
  $121 = $4;
  $122 = ((($121)) + 260|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)!=(0|0);
  if ($124) {
   $125 = $3;
   $126 = $4;
   $127 = ((($126)) + 260|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $5;
   _visit_expression($125,$128,$129);
  }
  $130 = $4;
  $131 = ((($130)) + 264|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)!=(0|0);
  if ($133) {
   $134 = $3;
   $135 = $4;
   $136 = ((($135)) + 264|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $5;
   _visit_expression($134,$137,$138);
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $16 = $4;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $4;
   $19 = ((($18)) + 240|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0|0);
   if ($23) {
    $24 = $4;
    $25 = ((($24)) + 240|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 24|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_strcmp($30,9313)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $33 = $4;
     $34 = ((($33)) + 252|0);
     $35 = HEAP32[$34>>2]|0;
     $6 = $35;
     $36 = $6;
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)!=(0|0);
     if ($38) {
      (_printf(9321,$vararg_buffer)|0);
      $39 = $6;
      $40 = HEAP32[$39>>2]|0;
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($41)) + 8|0);
      _print_type($42);
     }
    }
   }
  }
  $43 = $4;
  $44 = ((($43)) + 252|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0|0);
  if (!($46)) {
   STACKTOP = sp;return;
  }
  $47 = $4;
  $48 = ((($47)) + 252|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$49>>2]|0;
  $7 = $50;
  while(1) {
   $51 = $7;
   $52 = ($51|0)!=(0|0);
   if (!($52)) {
    break;
   }
   $53 = $7;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $3;
    $57 = $7;
    $58 = HEAP32[$57>>2]|0;
    $59 = $5;
    _visit_expression($56,$58,$59);
   }
   $60 = $7;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $7 = $62;
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $63 = $3;
  $64 = ((($63)) + 44|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65>>>0)<(2);
  if ($66) {
   $67 = $4;
   $68 = ((($67)) + 232|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(137);
   if ($71) {
    _memset(($8|0),0,216)|0;
    $72 = $4;
    $73 = ((($72)) + 232|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (_convert_to_integer($74,$8)|0);
    $9 = $75;
    ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;HEAP32[$10+16>>2]=0|0;HEAP32[$10+20>>2]=0|0;HEAP32[$10+24>>2]=0|0;HEAP32[$10+28>>2]=0|0;HEAP16[$10+32>>1]=0|0;HEAP8[$10+34>>0]=0|0;
    HEAP8[$10>>0] = 48;
    $76 = ((($10)) + 1|0);
    HEAP8[$76>>0] = 120;
    $77 = $9;
    HEAP32[$vararg_buffer1>>2] = $77;
    (_snprintf($10,35,9342,$vararg_buffer1)|0);
    $78 = $4;
    $79 = ((($78)) + 232|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    _free($82);
    $83 = (___strdup($10)|0);
    $84 = $4;
    $85 = ((($84)) + 232|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ((($86)) + 4|0);
    HEAP32[$87>>2] = $83;
    STACKTOP = sp;return;
   }
  }
  $88 = $3;
  $89 = ((($88)) + 44|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90>>>0)<(2);
  if (!($91)) {
   STACKTOP = sp;return;
  }
  $92 = $4;
  $93 = ((($92)) + 232|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  (_remove_char($96,39)|0);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $97 = $3;
  $98 = $4;
  $99 = ((($98)) + 248|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $5;
  _visit_compound_statement($97,$100,$101);
  $102 = $4;
  $103 = ((($102)) + 232|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 36|0);
  $106 = HEAP32[$105>>2]|0;
  $11 = $106;
  $107 = $3;
  $108 = ((($107)) + 28|0);
  $109 = $4;
  $110 = ((($109)) + 232|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $4;
  $113 = ((($112)) + 236|0);
  $114 = HEAP32[$113>>2]|0;
  _token_list_remove($12,$108,$111,$114);
  $115 = $3;
  $116 = ((($115)) + 12|0);
  _token_list_append_list($116,$12);
  $117 = $5;
  _tokenizer($13,9347,11088,0,$117);
  (_token_list_pop_front($13)|0);
  $118 = $3;
  $119 = ((($118)) + 28|0);
  $120 = $11;
  _token_list_insert_after($119,$120,$13);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _visit_compound_statement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $3;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 _visit_block_item_list($10,$13,$14);
 STACKTOP = sp;return;
}
function _visit_block_item_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 while(1) {
  $9 = $5;
  $10 = ((($9)) + 200|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  $15 = $12 ? $14 : 0;
  if (!($15)) {
   break;
  }
  $16 = $3;
  $17 = $6;
  $18 = $5;
  _visit_block_item($16,$17,$18);
  $19 = $6;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $6 = $21;
 }
 STACKTOP = sp;return;
}
function _visit_block_item($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  _visit_declaration($9,$11,$12);
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $3;
  $18 = $4;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  _visit_unlabeled_statement($17,$20,$21);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _visit_declaration($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $4;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 $6 = $17;
 while(1) {
  $18 = $6;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   break;
  }
  $20 = $6;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  do {
   if ($23) {
    $24 = $6;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $30 = $3;
     $31 = $6;
     $32 = ((($31)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($33)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $5;
     _visit_expression($30,$35,$36);
     break;
    }
    $37 = $6;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
    }
   }
  } while(0);
  $42 = $6;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $6 = $44;
 }
 $45 = $4;
 $46 = ((($45)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $4;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $55 = $3;
   $56 = $4;
   $57 = ((($56)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $5;
   _visit_block_item_list($55,$60,$61);
  }
 }
 $62 = $4;
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $3;
 $66 = ((($65)) + 44|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67>>>0)<(1);
 if ($68) {
  $69 = $4;
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$70>>2]|0;
  $7 = $71;
  while(1) {
   $72 = $7;
   $73 = $4;
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 32|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($72|0)!=($78|0);
   if (!($79)) {
    break;
   }
   $80 = $7;
   $81 = ((($80)) + 24|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 | 2;
   HEAP32[$81>>2] = $83;
   $84 = $7;
   $85 = ((($84)) + 32|0);
   $86 = HEAP32[$85>>2]|0;
   $7 = $86;
  }
  STACKTOP = sp;return;
 }
 $87 = $3;
 $88 = ((($87)) + 44|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(1);
 if (!($90)) {
  STACKTOP = sp;return;
 }
 $91 = $4;
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if (!($95)) {
  STACKTOP = sp;return;
 }
 $96 = $4;
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (_previous_parser_token($99)|0);
 $8 = $100;
 $101 = (___strdup(9352)|0);
 $102 = $8;
 $103 = ((($102)) + 4|0);
 HEAP32[$103>>2] = $101;
 STACKTOP = sp;return;
}
function _visit_unlabeled_statement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = $5;
  _visit_compound_statement($9,$11,$12);
  STACKTOP = sp;return;
 }
 $13 = $4;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $3;
  $18 = $4;
  $19 = ((($18)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  _visit_expression_statement($17,$20,$21);
  STACKTOP = sp;return;
 }
 $22 = $4;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = $4;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = $4;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $3;
 $35 = $4;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 _visit_selection_statement($34,$37,$38);
 STACKTOP = sp;return;
}
function _visit_expression_statement($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 _visit_expression($9,$11,$12);
 STACKTOP = sp;return;
}
function _visit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 28|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 while(1) {
  $9 = $3;
  $10 = ((($9)) + 200|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  $13 = $4;
  $14 = ($13|0)!=(0|0);
  $15 = $12 ? $14 : 0;
  $16 = $2;
  if (!($15)) {
   break;
  }
  $17 = $4;
  $18 = $3;
  _visit_declaration($16,$17,$18);
  $19 = $2;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $2;
   $24 = ((($23)) + 28|0);
   $25 = $4;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = ((($30)) + 12|0);
   _token_list_insert_after($24,$29,$31);
   $32 = $2;
   $33 = ((($32)) + 12|0);
   HEAP32[$33>>2] = 0;
   $34 = $2;
   $35 = ((($34)) + 12|0);
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = 0;
  }
  $37 = $4;
  $38 = ((($37)) + 24|0);
  $39 = HEAP32[$38>>2]|0;
  $4 = $39;
 }
 $40 = ((($16)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $43 = $2;
 $44 = ((($43)) + 28|0);
 $45 = $2;
 $46 = ((($45)) + 20|0);
 _token_list_append_list($44,$46);
 STACKTOP = sp;return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[2623]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (10532 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[2623] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(10500)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (10532 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[2623] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(10512)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (10532 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[2623] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(10500)>>2] = $76;
     HEAP32[(10512)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(10496)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (10796 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (10796 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(10496)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(10512)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (10532 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[2623] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(10500)>>2] = $$0171$i;
       HEAP32[(10512)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(10496)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (10796 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (10796 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(10500)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (10796 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(10496)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (10532 + ($382<<2)|0);
           $384 = HEAP32[2623]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[2623] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (10796 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(10496)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(10500)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(10512)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(10512)>>2] = $465;
   HEAP32[(10500)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(10500)>>2] = 0;
   HEAP32[(10512)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(10504)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(10504)>>2] = $480;
  $481 = HEAP32[(10516)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(10516)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[2741]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(10972)>>2] = 4096;
  HEAP32[(10968)>>2] = 4096;
  HEAP32[(10976)>>2] = -1;
  HEAP32[(10980)>>2] = -1;
  HEAP32[(10984)>>2] = 0;
  HEAP32[(10936)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[2741] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(10972)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(10932)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(10924)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(10936)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(10516)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (10940);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(10968)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(10924)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(10932)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(10972)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(10936)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(10936)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(10924)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(10924)>>2] = $582;
  $583 = HEAP32[(10928)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(10928)>>2] = $582;
  }
  $585 = HEAP32[(10516)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(10508)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(10508)>>2] = $$748$i;
    }
    HEAP32[(10940)>>2] = $$748$i;
    HEAP32[(10944)>>2] = $$723947$i;
    HEAP32[(10952)>>2] = 0;
    $590 = HEAP32[2741]|0;
    HEAP32[(10528)>>2] = $590;
    HEAP32[(10524)>>2] = -1;
    HEAP32[(10544)>>2] = (10532);
    HEAP32[(10540)>>2] = (10532);
    HEAP32[(10552)>>2] = (10540);
    HEAP32[(10548)>>2] = (10540);
    HEAP32[(10560)>>2] = (10548);
    HEAP32[(10556)>>2] = (10548);
    HEAP32[(10568)>>2] = (10556);
    HEAP32[(10564)>>2] = (10556);
    HEAP32[(10576)>>2] = (10564);
    HEAP32[(10572)>>2] = (10564);
    HEAP32[(10584)>>2] = (10572);
    HEAP32[(10580)>>2] = (10572);
    HEAP32[(10592)>>2] = (10580);
    HEAP32[(10588)>>2] = (10580);
    HEAP32[(10600)>>2] = (10588);
    HEAP32[(10596)>>2] = (10588);
    HEAP32[(10608)>>2] = (10596);
    HEAP32[(10604)>>2] = (10596);
    HEAP32[(10616)>>2] = (10604);
    HEAP32[(10612)>>2] = (10604);
    HEAP32[(10624)>>2] = (10612);
    HEAP32[(10620)>>2] = (10612);
    HEAP32[(10632)>>2] = (10620);
    HEAP32[(10628)>>2] = (10620);
    HEAP32[(10640)>>2] = (10628);
    HEAP32[(10636)>>2] = (10628);
    HEAP32[(10648)>>2] = (10636);
    HEAP32[(10644)>>2] = (10636);
    HEAP32[(10656)>>2] = (10644);
    HEAP32[(10652)>>2] = (10644);
    HEAP32[(10664)>>2] = (10652);
    HEAP32[(10660)>>2] = (10652);
    HEAP32[(10672)>>2] = (10660);
    HEAP32[(10668)>>2] = (10660);
    HEAP32[(10680)>>2] = (10668);
    HEAP32[(10676)>>2] = (10668);
    HEAP32[(10688)>>2] = (10676);
    HEAP32[(10684)>>2] = (10676);
    HEAP32[(10696)>>2] = (10684);
    HEAP32[(10692)>>2] = (10684);
    HEAP32[(10704)>>2] = (10692);
    HEAP32[(10700)>>2] = (10692);
    HEAP32[(10712)>>2] = (10700);
    HEAP32[(10708)>>2] = (10700);
    HEAP32[(10720)>>2] = (10708);
    HEAP32[(10716)>>2] = (10708);
    HEAP32[(10728)>>2] = (10716);
    HEAP32[(10724)>>2] = (10716);
    HEAP32[(10736)>>2] = (10724);
    HEAP32[(10732)>>2] = (10724);
    HEAP32[(10744)>>2] = (10732);
    HEAP32[(10740)>>2] = (10732);
    HEAP32[(10752)>>2] = (10740);
    HEAP32[(10748)>>2] = (10740);
    HEAP32[(10760)>>2] = (10748);
    HEAP32[(10756)>>2] = (10748);
    HEAP32[(10768)>>2] = (10756);
    HEAP32[(10764)>>2] = (10756);
    HEAP32[(10776)>>2] = (10764);
    HEAP32[(10772)>>2] = (10764);
    HEAP32[(10784)>>2] = (10772);
    HEAP32[(10780)>>2] = (10772);
    HEAP32[(10792)>>2] = (10780);
    HEAP32[(10788)>>2] = (10780);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(10516)>>2] = $599;
    HEAP32[(10504)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(10980)>>2]|0;
    HEAP32[(10520)>>2] = $605;
   } else {
    $$024372$i = (10940);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(10504)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(10516)>>2] = $631;
       HEAP32[(10504)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(10980)>>2]|0;
       HEAP32[(10520)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(10508)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(10508)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (10940);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(10504)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(10504)>>2] = $678;
        HEAP32[(10516)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(10512)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(10500)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(10500)>>2] = $684;
         HEAP32[(10512)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[2623]|0;
            $703 = $702 & $701;
            HEAP32[2623] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (10796 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(10496)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(10496)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (10532 + ($763<<2)|0);
         $765 = HEAP32[2623]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[2623] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (10796 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(10496)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(10496)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (10940);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(10516)>>2] = $870;
    HEAP32[(10504)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(10980)>>2]|0;
    HEAP32[(10520)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(10940)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(10940)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(10940)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(10940)+12>>2]|0;
    HEAP32[(10940)>>2] = $$748$i;
    HEAP32[(10944)>>2] = $$723947$i;
    HEAP32[(10952)>>2] = 0;
    HEAP32[(10948)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (10532 + ($892<<2)|0);
      $894 = HEAP32[2623]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[2623] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (10796 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(10496)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(10496)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(10504)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(10504)>>2] = $971;
   $972 = HEAP32[(10516)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(10516)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(10508)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(10512)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(10500)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[2623]|0;
     $29 = $28 & $27;
     HEAP32[2623] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (10796 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(10496)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(10496)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(10516)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(10504)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(10504)>>2] = $98;
   HEAP32[(10516)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(10512)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(10512)>>2] = 0;
   HEAP32[(10500)>>2] = 0;
   return;
  }
  $103 = HEAP32[(10512)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(10500)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(10500)>>2] = $106;
   HEAP32[(10512)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[2623]|0;
     $122 = $121 & $120;
     HEAP32[2623] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (10796 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(10496)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(10496)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(10512)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(10500)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (10532 + ($183<<2)|0);
  $185 = HEAP32[2623]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[2623] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (10796 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(10496)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(10496)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(10524)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(10524)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (10948);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(10524)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(10972)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(10516)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(10504)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(10516)>>2] = $33;
  HEAP32[(10504)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(10512)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(10500)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(10500)>>2] = $storemerge1;
  HEAP32[(10512)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[2623]|0;
    $81 = $80 & $79;
    HEAP32[2623] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (10796 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(10496)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(10496)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(10512)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(10500)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[2623]|0;
     $25 = $24 & $23;
     HEAP32[2623] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (10796 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(10496)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(10496)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(10516)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(10504)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(10504)>>2] = $89;
   HEAP32[(10516)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(10512)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(10512)>>2] = 0;
   HEAP32[(10500)>>2] = 0;
   return;
  }
  $94 = HEAP32[(10512)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(10500)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(10500)>>2] = $97;
   HEAP32[(10512)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[2623]|0;
     $113 = $112 & $111;
     HEAP32[2623] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (10796 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(10496)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(10496)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(10512)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(10500)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (10532 + ($174<<2)|0);
  $176 = HEAP32[2623]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[2623] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (10796 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(10496)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(10496)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_731($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $8 = (___syscall140(140,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $17 = $4;
  $18 = $17;
  HEAP32[$18>>2] = -1;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = -1;
  $21 = -1;$22 = -1;
 } else {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $21 = $16;$22 = $13;
 }
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11052|0);
}
function _dummy_731($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 5;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtox_761($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 120|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$6>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  $24 = (($22) + ($18))|0;
  $25 = (($24) - ($23))|0;
  $26 = (($0) + ($25)|0);
  HEAP32[$1>>2] = $26;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)<(0);
 $14 = $13 << 31 >> 31;
 $15 = ((($0)) + 120|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = ($1|0)!=(0);
 $21 = ($2|0)!=(0);
 $22 = $20 | $21;
 $23 = ($14|0)>($2|0);
 $24 = ($12>>>0)>($1>>>0);
 $25 = ($14|0)==($2|0);
 $26 = $25 & $24;
 $27 = $23 | $26;
 $or$cond = $22 & $27;
 if ($or$cond) {
  $28 = $11;
  $29 = (($28) + ($1)|0);
  $30 = ((($0)) + 104|0);
  HEAP32[$30>>2] = $29;
 } else {
  $31 = ((($0)) + 104|0);
  HEAP32[$31>>2] = $9;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 104|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((17) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((17) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (9362 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((17) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((17) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((17) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((17) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((17) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((17) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((17) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((17) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(0);
 $9 = ($7|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  label = 3;
 } else {
  $11 = ((($0)) + 120|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)<($7|0);
  $19 = ($14>>>0)<($4>>>0);
  $20 = ($17|0)==($7|0);
  $21 = $20 & $19;
  $22 = $18 | $21;
  if ($22) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $23 = (___uflow($0)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 4;
  } else {
   $26 = $1;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)==(0);
   $33 = ($31|0)==(0);
   $34 = $32 & $33;
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($34) {
    $35 = $$pre;
    $89 = $35;
    label = 9;
   } else {
    $36 = ((($0)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
    $39 = (($$pre) - ($38))|0;
    $40 = ($39|0)<(0);
    $41 = $40 << 31 >> 31;
    $42 = ((($0)) + 120|0);
    $43 = $42;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (_i64Subtract(($28|0),($31|0),($45|0),($48|0))|0);
    $50 = (getTempRet0() | 0);
    $51 = ($50|0)>($41|0);
    $52 = ($49>>>0)>($39>>>0);
    $53 = ($50|0)==($41|0);
    $54 = $53 & $52;
    $55 = $51 | $54;
    $56 = $$pre;
    if ($55) {
     $89 = $56;
     label = 9;
    } else {
     $57 = (($49) + -1)|0;
     $58 = (($37) + ($57)|0);
     $59 = ((($0)) + 104|0);
     HEAP32[$59>>2] = $58;
     $61 = $56;
    }
   }
   if ((label|0) == 9) {
    $60 = ((($0)) + 104|0);
    HEAP32[$60>>2] = $$pre;
    $61 = $89;
   }
   $62 = ($61|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($62) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $84 = $$pre29;
   } else {
    $63 = HEAP32[$$phi$trans$insert28>>2]|0;
    $64 = $61;
    $65 = (($64) + 1)|0;
    $66 = (($65) - ($63))|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($0)) + 120|0);
    $70 = $69;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (_i64Add(($72|0),($75|0),($66|0),($68|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = $69;
    $79 = $78;
    HEAP32[$79>>2] = $76;
    $80 = (($78) + 4)|0;
    $81 = $80;
    HEAP32[$81>>2] = $77;
    $82 = $63;
    $84 = $82;
   }
   $83 = ((($84)) + -1|0);
   $85 = HEAP8[$83>>0]|0;
   $86 = $85&255;
   $87 = ($23|0)==($86|0);
   if ($87) {
    $$0 = $23;
   } else {
    $88 = $23&255;
    HEAP8[$83>>0] = $88;
    $$0 = $23;
   }
  }
 }
 if ((label|0) == 4) {
  $25 = ((($0)) + 104|0);
  HEAP32[$25>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_761($0,$1,$2,-2147483648,0)|0);
 $4 = (getTempRet0() | 0);
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp;
 _memcpy(($5|0),(912|0),144)|0;
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___vfprintf_internal($0,$1,$2,6,7)|0);
 return ($3|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_662($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_662($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 9388;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (9389) : (9394);
  $spec$select565 = $19 ? $$ : (9391);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 9407 : 9411;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 9415 : 9419;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_659($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_659($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexp($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (752 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_659($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_659($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_659($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_659($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_659($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_659($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,9423,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_659($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,9423,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_659($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_659($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function _pop_arg_long_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$1>>2]|0;
 $2 = $arglist_current;
 $3 = ((0) + 8|0);
 $expanded1 = $3;
 $expanded = (($expanded1) - 1)|0;
 $4 = (($2) + ($expanded))|0;
 $5 = ((0) + 8|0);
 $expanded5 = $5;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $6 = $4 & $expanded3;
 $7 = $6;
 $8 = +HEAPF64[$7>>3];
 $arglist_next = ((($7)) + 8|0);
 HEAP32[$1>>2] = $arglist_next;
 HEAPF64[$0>>3] = $8;
 return;
}
function ___vfprintf_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select45 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 208|0;
 $6 = sp + 160|0;
 $7 = sp + 80|0;
 $8 = sp;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $vacopy_currentptr;
 $9 = (_printf_core(0,$1,$5,$7,$6,$3,$4)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(-1);
  if ($13) {
   $14 = (___lockfile($0)|0);
   $41 = $14;
  } else {
   $41 = 0;
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = $15 & 32;
  $17 = ((($0)) + 74|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(1);
  if ($19) {
   $20 = $15 & -33;
   HEAP32[$0>>2] = $20;
  }
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $25 = ((($0)) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$25>>2] = $8;
   $27 = ((($0)) + 28|0);
   HEAP32[$27>>2] = $8;
   $28 = ((($0)) + 20|0);
   HEAP32[$28>>2] = $8;
   HEAP32[$21>>2] = 80;
   $29 = ((($8)) + 80|0);
   $30 = ((($0)) + 16|0);
   HEAP32[$30>>2] = $29;
   $31 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $32 = ($26|0)==(0|0);
   if ($32) {
    $$1 = $31;
   } else {
    $33 = ((($0)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    (FUNCTION_TABLE_iiii[$34 & 15]($0,0,0)|0);
    $35 = HEAP32[$28>>2]|0;
    $36 = ($35|0)==(0|0);
    $spec$select = $36 ? -1 : $31;
    HEAP32[$25>>2] = $26;
    HEAP32[$21>>2] = 0;
    HEAP32[$30>>2] = 0;
    HEAP32[$27>>2] = 0;
    HEAP32[$28>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $24 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $$1 = $24;
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = $37 & 32;
  $39 = ($38|0)==(0);
  $spec$select45 = $39 ? $$1 : -1;
  $40 = $37 | $16;
  HEAP32[$0>>2] = $40;
  $42 = ($41|0)==(0);
  if (!($42)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0;
 var $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1252 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0;
 var $$2258$ = 0, $$2263 = 0, $$2273 = 0, $$3259 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre362 = 0, $$pre364 = 0, $$pre365 = 0, $$pre365$pre = 0, $$pre366 = 0, $$pre370 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge328 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0;
 var $or$cond278 = 0, $or$cond280 = 0, $or$cond285 = 0, $spec$select = 0, $spec$select283 = 0, $spec$select286 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $spec$select300 = 0, $spec$select301 = 0, $storemerge275$lcssa = 0, $storemerge275329 = 0, $storemerge276 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp;
 $10 = sp + 48|0;
 $11 = sp + 60|0;
 HEAP32[$7>>2] = $1;
 $12 = ($0|0)!=(0|0);
 $13 = ((($9)) + 40|0);
 $14 = $13;
 $15 = ((($9)) + 39|0);
 $16 = ((($10)) + 4|0);
 $$0245$ph = 0;$$0249$ph = 0;$$0271$ph = 0;
 L1: while(1) {
  $$0245 = $$0245$ph;$$0249 = $$0249$ph;
  while(1) {
   $17 = ($$0249|0)>(-1);
   do {
    if ($17) {
     $18 = (2147483647 - ($$0249))|0;
     $19 = ($$0245|0)>($18|0);
     if ($19) {
      $20 = (___errno_location()|0);
      HEAP32[$20>>2] = 75;
      $$1250 = -1;
      break;
     } else {
      $21 = (($$0245) + ($$0249))|0;
      $$1250 = $21;
      break;
     }
    } else {
     $$1250 = $$0249;
    }
   } while(0);
   $22 = HEAP32[$7>>2]|0;
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    label = 92;
    break L1;
   }
   $25 = $23;$27 = $22;
   L12: while(1) {
    switch ($25<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0251$lcssa = $27;
     break L12;
     break;
    }
    default: {
    }
    }
    $26 = ((($27)) + 1|0);
    HEAP32[$7>>2] = $26;
    $$pre = HEAP8[$26>>0]|0;
    $25 = $$pre;$27 = $26;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0251323 = $27;$29 = $27;
     while(1) {
      $28 = ((($29)) + 1|0);
      $30 = HEAP8[$28>>0]|0;
      $31 = ($30<<24>>24)==(37);
      if (!($31)) {
       $$0251$lcssa = $$0251323;
       break L15;
      }
      $32 = ((($$0251323)) + 1|0);
      $33 = ((($29)) + 2|0);
      HEAP32[$7>>2] = $33;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(37);
      if ($35) {
       $$0251323 = $32;$29 = $33;
      } else {
       $$0251$lcssa = $32;
       break;
      }
     }
    }
   } while(0);
   $36 = $$0251$lcssa;
   $37 = $22;
   $38 = (($36) - ($37))|0;
   if ($12) {
    _out($0,$22,$38);
   }
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $$0245 = $38;$$0249 = $$1250;
   }
  }
  $40 = HEAP32[$7>>2]|0;
  $41 = ((($40)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_isdigit($43)|0);
  $45 = ($44|0)==(0);
  $$pre362 = HEAP32[$7>>2]|0;
  if ($45) {
   $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
  } else {
   $46 = ((($$pre362)) + 2|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)==(36);
   if ($48) {
    $49 = ((($$pre362)) + 1|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = (($51) + -48)|0;
    $$0255 = $52;$$1272 = 1;$$sink = 3;
   } else {
    $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
   }
  }
  $53 = (($$pre362) + ($$sink)|0);
  HEAP32[$7>>2] = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = (($55) + -32)|0;
  $57 = ($56>>>0)>(31);
  $58 = 1 << $56;
  $59 = $58 & 75913;
  $60 = ($59|0)==(0);
  $brmerge328 = $57 | $60;
  if ($brmerge328) {
   $$0264$lcssa = 0;$$lcssa310 = $54;$storemerge275$lcssa = $53;
  } else {
   $$0264330 = 0;$62 = $56;$storemerge275329 = $53;
   while(1) {
    $61 = 1 << $62;
    $63 = $61 | $$0264330;
    $64 = ((($storemerge275329)) + 1|0);
    HEAP32[$7>>2] = $64;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (($66) + -32)|0;
    $68 = ($67>>>0)>(31);
    $69 = 1 << $67;
    $70 = $69 & 75913;
    $71 = ($70|0)==(0);
    $brmerge = $68 | $71;
    if ($brmerge) {
     $$0264$lcssa = $63;$$lcssa310 = $65;$storemerge275$lcssa = $64;
     break;
    } else {
     $$0264330 = $63;$62 = $67;$storemerge275329 = $64;
    }
   }
  }
  $72 = ($$lcssa310<<24>>24)==(42);
  if ($72) {
   $73 = ((($storemerge275$lcssa)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = (_isdigit($75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    label = 27;
   } else {
    $78 = HEAP32[$7>>2]|0;
    $79 = ((($78)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)==(36);
    if ($81) {
     $82 = ((($78)) + 1|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = (($84) + -48)|0;
     $86 = (($4) + ($85<<2)|0);
     HEAP32[$86>>2] = 10;
     $87 = HEAP8[$82>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (($88) + -48)|0;
     $90 = (($3) + ($89<<3)|0);
     $91 = $90;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($78)) + 3|0);
     $$0261 = $93;$$2273 = 1;$storemerge276 = $97;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $98 = ($$1272|0)==(0);
    if (!($98)) {
     $$0 = -1;
     break;
    }
    if ($12) {
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $367 = $105;
    } else {
     $367 = 0;
    }
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    $$0261 = $367;$$2273 = 0;$storemerge276 = $107;
   }
   HEAP32[$7>>2] = $storemerge276;
   $108 = ($$0261|0)<(0);
   $109 = $$0264$lcssa | 8192;
   $110 = (0 - ($$0261))|0;
   $spec$select293 = $108 ? $109 : $$0264$lcssa;
   $spec$select294 = $108 ? $110 : $$0261;
   $$1262 = $spec$select294;$$1265 = $spec$select293;$$3274 = $$2273;$114 = $storemerge276;
  } else {
   $111 = (_getint($7)|0);
   $112 = ($111|0)<(0);
   if ($112) {
    $$0 = -1;
    break;
   }
   $$pre364 = HEAP32[$7>>2]|0;
   $$1262 = $111;$$1265 = $$0264$lcssa;$$3274 = $$1272;$114 = $$pre364;
  }
  $113 = HEAP8[$114>>0]|0;
  $115 = ($113<<24>>24)==(46);
  do {
   if ($115) {
    $116 = ((($114)) + 1|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = ($117<<24>>24)==(42);
    if (!($118)) {
     HEAP32[$7>>2] = $116;
     $154 = (_getint($7)|0);
     $$pre365$pre = HEAP32[$7>>2]|0;
     $$0256 = $154;$$pre365 = $$pre365$pre;
     break;
    }
    $119 = ((($114)) + 2|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120 << 24 >> 24;
    $122 = (_isdigit($121)|0);
    $123 = ($122|0)==(0);
    if (!($123)) {
     $124 = HEAP32[$7>>2]|0;
     $125 = ((($124)) + 3|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = ($126<<24>>24)==(36);
     if ($127) {
      $128 = ((($124)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 << 24 >> 24;
      $131 = (($130) + -48)|0;
      $132 = (($4) + ($131<<2)|0);
      HEAP32[$132>>2] = 10;
      $133 = HEAP8[$128>>0]|0;
      $134 = $133 << 24 >> 24;
      $135 = (($134) + -48)|0;
      $136 = (($3) + ($135<<3)|0);
      $137 = $136;
      $138 = $137;
      $139 = HEAP32[$138>>2]|0;
      $140 = (($137) + 4)|0;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($124)) + 4|0);
      HEAP32[$7>>2] = $143;
      $$0256 = $139;$$pre365 = $143;
      break;
     }
    }
    $144 = ($$3274|0)==(0);
    if (!($144)) {
     $$0 = -1;
     break L1;
    }
    if ($12) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $145 = $arglist_current2;
     $146 = ((0) + 4|0);
     $expanded11 = $146;
     $expanded10 = (($expanded11) - 1)|0;
     $147 = (($145) + ($expanded10))|0;
     $148 = ((0) + 4|0);
     $expanded15 = $148;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $149 = $147 & $expanded13;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $arglist_next3 = ((($150)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $368 = $151;
    } else {
     $368 = 0;
    }
    $152 = HEAP32[$7>>2]|0;
    $153 = ((($152)) + 2|0);
    HEAP32[$7>>2] = $153;
    $$0256 = $368;$$pre365 = $153;
   } else {
    $$0256 = -1;$$pre365 = $114;
   }
  } while(0);
  $$0254 = 0;$156 = $$pre365;
  while(1) {
   $155 = HEAP8[$156>>0]|0;
   $157 = $155 << 24 >> 24;
   $158 = (($157) + -65)|0;
   $159 = ($158>>>0)>(57);
   if ($159) {
    $$0 = -1;
    break L1;
   }
   $160 = ((($156)) + 1|0);
   HEAP32[$7>>2] = $160;
   $161 = HEAP8[$156>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = (($162) + -65)|0;
   $164 = ((288 + (($$0254*58)|0)|0) + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = (($166) + -1)|0;
   $168 = ($167>>>0)<(8);
   if ($168) {
    $$0254 = $166;$156 = $160;
   } else {
    break;
   }
  }
  $169 = ($165<<24>>24)==(0);
  if ($169) {
   $$0 = -1;
   break;
  }
  $170 = ($165<<24>>24)==(19);
  $171 = ($$0255|0)>(-1);
  do {
   if ($170) {
    if ($171) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($171) {
     $172 = (($4) + ($$0255<<2)|0);
     HEAP32[$172>>2] = $166;
     $173 = (($3) + ($$0255<<3)|0);
     $174 = $173;
     $175 = $174;
     $176 = HEAP32[$175>>2]|0;
     $177 = (($174) + 4)|0;
     $178 = $177;
     $179 = HEAP32[$178>>2]|0;
     $180 = $8;
     $181 = $180;
     HEAP32[$181>>2] = $176;
     $182 = (($180) + 4)|0;
     $183 = $182;
     HEAP32[$183>>2] = $179;
     label = 54;
     break;
    }
    if (!($12)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($8,$166,$2,$6);
    $$pre366 = HEAP32[$7>>2]|0;
    $185 = $$pre366;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($12) {
    $185 = $160;
    label = 55;
   } else {
    $$0245$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $184 = ((($185)) + -1|0);
    $186 = HEAP8[$184>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = ($$0254|0)!=(0);
    $189 = $187 & 15;
    $190 = ($189|0)==(3);
    $or$cond278 = $188 & $190;
    $191 = $187 & -33;
    $$0237 = $or$cond278 ? $191 : $187;
    $192 = $$1265 & 8192;
    $193 = ($192|0)==(0);
    $194 = $$1265 & -65537;
    $spec$select = $193 ? $$1265 : $194;
    L79: do {
     switch ($$0237|0) {
     case 110:  {
      $trunc = $$0254&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $201 = HEAP32[$8>>2]|0;
       HEAP32[$201>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $202 = HEAP32[$8>>2]|0;
       HEAP32[$202>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $203 = ($$1250|0)<(0);
       $204 = $203 << 31 >> 31;
       $205 = HEAP32[$8>>2]|0;
       $206 = $205;
       $207 = $206;
       HEAP32[$207>>2] = $$1250;
       $208 = (($206) + 4)|0;
       $209 = $208;
       HEAP32[$209>>2] = $204;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $210 = $$1250&65535;
       $211 = HEAP32[$8>>2]|0;
       HEAP16[$211>>1] = $210;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $212 = $$1250&255;
       $213 = HEAP32[$8>>2]|0;
       HEAP8[$213>>0] = $212;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $214 = HEAP32[$8>>2]|0;
       HEAP32[$214>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $215 = ($$1250|0)<(0);
       $216 = $215 << 31 >> 31;
       $217 = HEAP32[$8>>2]|0;
       $218 = $217;
       $219 = $218;
       HEAP32[$219>>2] = $$1250;
       $220 = (($218) + 4)|0;
       $221 = $220;
       HEAP32[$221>>2] = $216;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0245$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $222 = ($$0256>>>0)>(8);
      $223 = $222 ? $$0256 : 8;
      $224 = $spec$select | 8;
      $$1238 = 120;$$1257 = $223;$$3267 = $224;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1238 = $$0237;$$1257 = $$0256;$$3267 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $246 = $8;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (_fmt_o($248,$251,$13)|0);
      $253 = $spec$select & 8;
      $254 = ($253|0)==(0);
      $255 = $252;
      $256 = (($14) - ($255))|0;
      $257 = ($$0256|0)>($256|0);
      $258 = (($256) + 1)|0;
      $259 = $254 | $257;
      $spec$select297 = $259 ? $$0256 : $258;
      $$0231 = $252;$$1235 = 0;$$1240 = 9371;$$2258 = $spec$select297;$$4268 = $spec$select;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $260 = $8;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = (($260) + 4)|0;
      $264 = $263;
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)<(0);
      if ($266) {
       $267 = (_i64Subtract(0,0,($262|0),($265|0))|0);
       $268 = (getTempRet0() | 0);
       $269 = $8;
       $270 = $269;
       HEAP32[$270>>2] = $267;
       $271 = (($269) + 4)|0;
       $272 = $271;
       HEAP32[$272>>2] = $268;
       $$0234 = 1;$$0239 = 9371;$279 = $267;$280 = $268;
       label = 72;
       break L79;
      } else {
       $273 = $spec$select & 2048;
       $274 = ($273|0)==(0);
       $275 = $spec$select & 1;
       $276 = ($275|0)==(0);
       $$ = $276 ? 9371 : (9373);
       $spec$select298 = $274 ? $$ : (9372);
       $277 = $spec$select & 2049;
       $278 = ($277|0)!=(0);
       $spec$select299 = $278&1;
       $$0234 = $spec$select299;$$0239 = $spec$select298;$279 = $262;$280 = $265;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $195 = $8;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + 4)|0;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $$0234 = 0;$$0239 = 9371;$279 = $197;$280 = $200;
      label = 72;
      break;
     }
     case 99:  {
      $300 = $8;
      $301 = $300;
      $302 = HEAP32[$301>>2]|0;
      $303 = (($300) + 4)|0;
      $304 = $303;
      $305 = HEAP32[$304>>2]|0;
      $306 = $302&255;
      HEAP8[$15>>0] = $306;
      $$1 = $15;$$2236 = 0;$$2241 = 9371;$$5 = 1;$$6270 = $194;$$pre$phiZ2D = $14;
      break;
     }
     case 115:  {
      $307 = HEAP32[$8>>2]|0;
      $308 = ($307|0)==(0|0);
      $309 = $308 ? 9381 : $307;
      $310 = (_memchr($309,0,$$0256)|0);
      $311 = ($310|0)==(0|0);
      $312 = $310;
      $313 = $309;
      $314 = (($312) - ($313))|0;
      $315 = (($309) + ($$0256)|0);
      $$3259 = $311 ? $$0256 : $314;
      $$1252 = $311 ? $315 : $310;
      $$pre370 = $$1252;
      $$1 = $309;$$2236 = 0;$$2241 = 9371;$$5 = $$3259;$$6270 = $194;$$pre$phiZ2D = $$pre370;
      break;
     }
     case 67:  {
      $316 = $8;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      HEAP32[$10>>2] = $318;
      HEAP32[$16>>2] = 0;
      HEAP32[$8>>2] = $10;
      $$4260372 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $322 = ($$0256|0)==(0);
      if ($322) {
       _pad_659($0,32,$$1262,0,$spec$select);
       $$0242315373 = 0;
       label = 89;
      } else {
       $$4260372 = $$0256;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $345 = +HEAPF64[$8>>3];
      $346 = (FUNCTION_TABLE_iidiiii[$5 & 7]($0,$345,$$1262,$$0256,$spec$select,$$0237)|0);
      $$0245$ph$be = $346;
      break L77;
      break;
     }
     default: {
      $$1 = $22;$$2236 = 0;$$2241 = 9371;$$5 = $$0256;$$6270 = $spec$select;$$pre$phiZ2D = $14;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $225 = $8;
      $226 = $225;
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + 4)|0;
      $229 = $228;
      $230 = HEAP32[$229>>2]|0;
      $231 = $$1238 & 32;
      $232 = (_fmt_x($227,$230,$13,$231)|0);
      $233 = $8;
      $234 = $233;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($233) + 4)|0;
      $237 = $236;
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      $242 = $$3267 & 8;
      $243 = ($242|0)==(0);
      $or$cond280 = $243 | $241;
      $244 = $$1238 >>> 4;
      $245 = (9371 + ($244)|0);
      $spec$select295 = $or$cond280 ? 9371 : $245;
      $spec$select296 = $or$cond280 ? 0 : 2;
      $$0231 = $232;$$1235 = $spec$select296;$$1240 = $spec$select295;$$2258 = $$1257;$$4268 = $$3267;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $281 = (_fmt_u($279,$280,$13)|0);
      $$0231 = $281;$$1235 = $$0234;$$1240 = $$0239;$$2258 = $$0256;$$4268 = $spec$select;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $323 = HEAP32[$8>>2]|0;
      $$0232336 = $323;$$0242335 = 0;
      while(1) {
       $324 = HEAP32[$$0232336>>2]|0;
       $325 = ($324|0)==(0);
       if ($325) {
        $$0242315 = $$0242335;
        break;
       }
       $326 = (_wctomb($11,$324)|0);
       $327 = ($326|0)<(0);
       $328 = (($$4260372) - ($$0242335))|0;
       $329 = ($326>>>0)>($328>>>0);
       $or$cond285 = $327 | $329;
       if ($or$cond285) {
        label = 83;
        break;
       }
       $330 = ((($$0232336)) + 4|0);
       $331 = (($326) + ($$0242335))|0;
       $332 = ($$4260372>>>0)>($331>>>0);
       if ($332) {
        $$0232336 = $330;$$0242335 = $331;
       } else {
        $$0242315 = $331;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($327) {
        $$0 = -1;
        break L1;
       } else {
        $$0242315 = $$0242335;
       }
      }
      _pad_659($0,32,$$1262,$$0242315,$spec$select);
      $333 = ($$0242315|0)==(0);
      if ($333) {
       $$0242315373 = 0;
       label = 89;
      } else {
       $334 = HEAP32[$8>>2]|0;
       $$1233342 = $334;$$1243341 = 0;
       while(1) {
        $335 = HEAP32[$$1233342>>2]|0;
        $336 = ($335|0)==(0);
        if ($336) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $337 = (_wctomb($11,$335)|0);
        $338 = (($337) + ($$1243341))|0;
        $339 = ($338|0)>($$0242315|0);
        if ($339) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $340 = ((($$1233342)) + 4|0);
        _out($0,$11,$337);
        $341 = ($338>>>0)<($$0242315>>>0);
        if ($341) {
         $$1233342 = $340;$$1243341 = $338;
        } else {
         $$0242315373 = $$0242315;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $282 = ($$2258|0)>(-1);
     $283 = $$4268 & -65537;
     $spec$select283 = $282 ? $283 : $$4268;
     $284 = $8;
     $285 = $284;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($284) + 4)|0;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = ($286|0)!=(0);
     $291 = ($289|0)!=(0);
     $292 = $290 | $291;
     $293 = ($$2258|0)!=(0);
     $or$cond = $293 | $292;
     $294 = $$0231;
     $295 = (($14) - ($294))|0;
     $296 = $292 ^ 1;
     $297 = $296&1;
     $298 = (($295) + ($297))|0;
     $299 = ($$2258|0)>($298|0);
     $$2258$ = $299 ? $$2258 : $298;
     $spec$select300 = $or$cond ? $$2258$ : 0;
     $spec$select301 = $or$cond ? $$0231 : $13;
     $$1 = $spec$select301;$$2236 = $$1235;$$2241 = $$1240;$$5 = $spec$select300;$$6270 = $spec$select283;$$pre$phiZ2D = $14;
    }
    else if ((label|0) == 89) {
     label = 0;
     $342 = $spec$select ^ 8192;
     _pad_659($0,32,$$1262,$$0242315373,$342);
     $343 = ($$1262|0)>($$0242315373|0);
     $344 = $343 ? $$1262 : $$0242315373;
     $$0245$ph$be = $344;
     break;
    }
    $347 = $$1;
    $348 = (($$pre$phiZ2D) - ($347))|0;
    $349 = ($$5|0)<($348|0);
    $spec$select286 = $349 ? $348 : $$5;
    $350 = (($spec$select286) + ($$2236))|0;
    $351 = ($$1262|0)<($350|0);
    $$2263 = $351 ? $350 : $$1262;
    _pad_659($0,32,$$2263,$350,$$6270);
    _out($0,$$2241,$$2236);
    $352 = $$6270 ^ 65536;
    _pad_659($0,48,$$2263,$350,$352);
    _pad_659($0,48,$spec$select286,$348,0);
    _out($0,$$1,$348);
    $353 = $$6270 ^ 8192;
    _pad_659($0,32,$$2263,$350,$353);
    $$0245$ph$be = $$2263;
   }
  } while(0);
  $$0245$ph = $$0245$ph$be;$$0249$ph = $$1250;$$0271$ph = $$3274;
 }
 L123: do {
  if ((label|0) == 92) {
   $354 = ($0|0)==(0|0);
   if ($354) {
    $355 = ($$0271$ph|0)==(0);
    if ($355) {
     $$0 = 0;
    } else {
     $$2244322 = 1;
     while(1) {
      $356 = (($4) + ($$2244322<<2)|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($357|0)==(0);
      if ($358) {
       break;
      }
      $359 = (($3) + ($$2244322<<3)|0);
      _pop_arg($359,$357,$2,$6);
      $360 = (($$2244322) + 1)|0;
      $361 = ($360>>>0)<(10);
      if ($361) {
       $$2244322 = $360;
      } else {
       $$0 = 1;
       break L123;
      }
     }
     $$3319 = $$2244322;
     while(1) {
      $364 = (($4) + ($$3319<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(0);
      $362 = (($$3319) + 1)|0;
      if (!($366)) {
       $$0 = -1;
       break L123;
      }
      $363 = ($362>>>0)<(10);
      if ($363) {
       $$3319 = $362;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1250;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1>>>0)>(20);
 L1: do {
  if (!($4)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $5 = $arglist_current;
     $6 = ((0) + 4|0);
     $expanded25 = $6;
     $expanded = (($expanded25) - 1)|0;
     $7 = (($5) + ($expanded))|0;
     $8 = ((0) + 4|0);
     $expanded29 = $8;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $9 = $7 & $expanded27;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $arglist_next = ((($10)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $11;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $12 = $arglist_current2;
     $13 = ((0) + 4|0);
     $expanded32 = $13;
     $expanded31 = (($expanded32) - 1)|0;
     $14 = (($12) + ($expanded31))|0;
     $15 = ((0) + 4|0);
     $expanded36 = $15;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $16 = $14 & $expanded34;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $arglist_next3 = ((($17)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $19 = ($18|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = $0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $25 = $arglist_current5;
     $26 = ((0) + 4|0);
     $expanded39 = $26;
     $expanded38 = (($expanded39) - 1)|0;
     $27 = (($25) + ($expanded38))|0;
     $28 = ((0) + 4|0);
     $expanded43 = $28;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $29 = $27 & $expanded41;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $arglist_next6 = ((($30)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $32 = $0;
     $33 = $32;
     HEAP32[$33>>2] = $31;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $36 = $arglist_current8;
     $37 = ((0) + 8|0);
     $expanded46 = $37;
     $expanded45 = (($expanded46) - 1)|0;
     $38 = (($36) + ($expanded45))|0;
     $39 = ((0) + 8|0);
     $expanded50 = $39;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $40 = $38 & $expanded48;
     $41 = $40;
     $42 = $41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next9 = ((($41)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $48 = $0;
     $49 = $48;
     HEAP32[$49>>2] = $44;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $47;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $52 = $arglist_current11;
     $53 = ((0) + 4|0);
     $expanded53 = $53;
     $expanded52 = (($expanded53) - 1)|0;
     $54 = (($52) + ($expanded52))|0;
     $55 = ((0) + 4|0);
     $expanded57 = $55;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $56 = $54 & $expanded55;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $arglist_next12 = ((($57)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $59 = $58&65535;
     $60 = $59 << 16 >> 16;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = $0;
     $64 = $63;
     HEAP32[$64>>2] = $60;
     $65 = (($63) + 4)|0;
     $66 = $65;
     HEAP32[$66>>2] = $62;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $67 = $arglist_current14;
     $68 = ((0) + 4|0);
     $expanded60 = $68;
     $expanded59 = (($expanded60) - 1)|0;
     $69 = (($67) + ($expanded59))|0;
     $70 = ((0) + 4|0);
     $expanded64 = $70;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $71 = $69 & $expanded62;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $arglist_next15 = ((($72)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $73 & 65535;
     $74 = $0;
     $75 = $74;
     HEAP32[$75>>2] = $$mask31;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $78 = $arglist_current17;
     $79 = ((0) + 4|0);
     $expanded67 = $79;
     $expanded66 = (($expanded67) - 1)|0;
     $80 = (($78) + ($expanded66))|0;
     $81 = ((0) + 4|0);
     $expanded71 = $81;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $82 = $80 & $expanded69;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $arglist_next18 = ((($83)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $85 = $84&255;
     $86 = $85 << 24 >> 24;
     $87 = ($86|0)<(0);
     $88 = $87 << 31 >> 31;
     $89 = $0;
     $90 = $89;
     HEAP32[$90>>2] = $86;
     $91 = (($89) + 4)|0;
     $92 = $91;
     HEAP32[$92>>2] = $88;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $93 = $arglist_current20;
     $94 = ((0) + 4|0);
     $expanded74 = $94;
     $expanded73 = (($expanded74) - 1)|0;
     $95 = (($93) + ($expanded73))|0;
     $96 = ((0) + 4|0);
     $expanded78 = $96;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $97 = $95 & $expanded76;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $arglist_next21 = ((($98)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $99 & 255;
     $100 = $0;
     $101 = $100;
     HEAP32[$101>>2] = $$mask;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $104 = $arglist_current23;
     $105 = ((0) + 8|0);
     $expanded81 = $105;
     $expanded80 = (($expanded81) - 1)|0;
     $106 = (($104) + ($expanded80))|0;
     $107 = ((0) + 8|0);
     $expanded85 = $107;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $108 = $106 & $expanded83;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next24 = ((($109)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $110;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$3 & 7]($0,$2);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (752 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_659($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_440()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_440() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1072|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 15]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___DOUBLE_BITS_662($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 128|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 128|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_599()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 132|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_599() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(9425,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(9425,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1176)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,144)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 152|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 8;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 5;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 3;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(10992)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((11056|0));
 return (11064|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((11056|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 96|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[267]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[267]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiiii[$21 & 3]($0,$17,$19,1)|0);
   $22 = (getTempRet0() | 0);
  }
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _feof($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 4;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 4;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $2 << 24 >> 24;
   $5 = (_strchr($0,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = ((($1)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = $5;
    } else {
     $10 = ((($5)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($1)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (_twobyte_strstr($5,$1)|0);
       $$0 = $16;
       break;
      }
      $17 = ((($5)) + 2|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 3|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if ($22) {
        $23 = (_threebyte_strstr($5,$1)|0);
        $$0 = $23;
        break;
       }
       $24 = ((($5)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $$0 = 0;
       } else {
        $27 = ((($1)) + 4|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)==(0);
        if ($29) {
         $30 = (_fourbyte_strstr($5,$1)|0);
         $$0 = $30;
         break;
        } else {
         $31 = (_twoway_strstr($5,$1)|0);
         $$0 = $31;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in16 = 0, $$01415 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = ((($0)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 L1: do {
  if ($11) {
   $26 = 0;
  } else {
   $12 = HEAP8[$0>>0]|0;
   $13 = $12&255;
   $14 = $13 << 8;
   $15 = $10&255;
   $16 = $14 | $15;
   $$0$in16 = $16;$$01415 = $9;
   while(1) {
    $17 = $$0$in16 & 65535;
    $18 = ($17|0)==($8|0);
    if ($18) {
     break;
    }
    $19 = $17 << 8;
    $20 = ((($$01415)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = $19 | $22;
    $24 = ($21<<24>>24)==(0);
    if ($24) {
     $26 = 0;
     break L1;
    } else {
     $$0$in16 = $23;$$01415 = $20;
    }
   }
   $25 = ((($$01415)) + -1|0);
   $26 = $25;
  }
 } while(0);
 return ($26|0);
}
function _threebyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = $21 | $17;
 $23 = ((($0)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $28 = ($24<<24>>24)==(0);
 $29 = ($27|0)==($14|0);
 $or$cond17 = $29 | $28;
 if ($or$cond17) {
  $$016$lcssa = $23;$$lcssa = $28;
 } else {
  $$01618 = $23;$$019 = $27;
  while(1) {
   $30 = ((($$01618)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $$019 | $32;
   $34 = $33 << 8;
   $35 = ($31<<24>>24)==(0);
   $36 = ($34|0)==($14|0);
   $or$cond = $36 | $35;
   if ($or$cond) {
    $$016$lcssa = $30;$$lcssa = $35;
    break;
   } else {
    $$01618 = $30;$$019 = $34;
   }
  }
 }
 $37 = ((($$016$lcssa)) + -2|0);
 $38 = $$lcssa ? 0 : $37;
 return ($38|0);
}
function _fourbyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$018$lcssa = 0, $$01820 = 0, $$021 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($1)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = HEAP8[$0>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = ((($0)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $25 | $21;
 $27 = ((($0)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $26 | $30;
 $32 = ((($0)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $31 | $34;
 $36 = ($33<<24>>24)==(0);
 $37 = ($35|0)==($18|0);
 $or$cond19 = $37 | $36;
 if ($or$cond19) {
  $$018$lcssa = $32;$$lcssa = $36;
 } else {
  $$01820 = $32;$$021 = $35;
  while(1) {
   $38 = $$021 << 8;
   $39 = ((($$01820)) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $38 | $41;
   $43 = ($40<<24>>24)==(0);
   $44 = ($42|0)==($18|0);
   $or$cond = $44 | $43;
   if ($or$cond) {
    $$018$lcssa = $39;$$lcssa = $43;
    break;
   } else {
    $$01820 = $39;$$021 = $42;
   }
  }
 }
 $45 = ((($$018$lcssa)) + -3|0);
 $46 = $$lcssa ? 0 : $45;
 return ($46|0);
}
function _twoway_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$lcssa237 = 0, $$0175219 = 0, $$0179218 = 0, $$0185217 = 0, $$0189$lcssa236 = 0, $$0189216 = 0, $$0193$lcssa234235 = 0, $$0193225 = 0, $$1176 = 0, $$1180 = 0, $$1186 = 0, $$1190 = 0, $$2177$$0175 = 0, $$2177$lcssa = 0, $$2177210 = 0;
 var $$2181209 = 0, $$2187208 = 0, $$2191$$0189 = 0, $$2191$$0189$ = 0, $$2191$lcssa = 0, $$2191207 = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182 = 0, $$3188 = 0, $$3192 = 0, $$4183 = 0, $$4183$sink = 0, $$5 = 0, $$5184201 = 0, $$6202 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond194 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0175$lcssa237 = 1;$$0189$lcssa236 = -1;$$0193$lcssa234235 = 0;$$2177$lcssa = 1;$$2191$lcssa = -1;
   label = 25;
  } else {
   $$0193225 = 0;$10 = $4;
   while(1) {
    $6 = (($0) + ($$0193225)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$3 = 0;
     break L1;
    }
    $9 = $10&255;
    $11 = $9 & 31;
    $12 = 1 << $11;
    $13 = $9 >>> 5;
    $14 = (($2) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 | $12;
    HEAP32[$14>>2] = $16;
    $17 = (($$0193225) + 1)|0;
    $18 = (($3) + ($9<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = (($1) + ($17)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     break;
    } else {
     $$0193225 = $17;$10 = $20;
    }
   }
   $22 = ($17>>>0)>(1);
   if ($22) {
    $$0175219 = 1;$$0179218 = 1;$$0185217 = 0;$$0189216 = -1;$27 = 1;
    while(1) {
     $23 = (($$0179218) + ($$0189216))|0;
     $24 = (($1) + ($23)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = (($1) + ($27)|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($25<<24>>24)==($28<<24>>24);
     do {
      if ($29) {
       $30 = ($$0179218|0)==($$0175219|0);
       if ($30) {
        $31 = (($$0175219) + ($$0185217))|0;
        $$1176 = $$0175219;$$1180 = 1;$$1186 = $31;$$1190 = $$0189216;
        break;
       } else {
        $32 = (($$0179218) + 1)|0;
        $$1176 = $$0175219;$$1180 = $32;$$1186 = $$0185217;$$1190 = $$0189216;
        break;
       }
      } else {
       $33 = ($25&255)>($28&255);
       if ($33) {
        $34 = (($27) - ($$0189216))|0;
        $$1176 = $34;$$1180 = 1;$$1186 = $27;$$1190 = $$0189216;
        break;
       } else {
        $35 = (($$0185217) + 1)|0;
        $$1176 = 1;$$1180 = 1;$$1186 = $35;$$1190 = $$0185217;
        break;
       }
      }
     } while(0);
     $36 = (($$1180) + ($$1186))|0;
     $37 = ($36>>>0)<($17>>>0);
     if ($37) {
      $$0175219 = $$1176;$$0179218 = $$1180;$$0185217 = $$1186;$$0189216 = $$1190;$27 = $36;
     } else {
      break;
     }
    }
    if ($22) {
     $$2177210 = 1;$$2181209 = 1;$$2187208 = 0;$$2191207 = -1;$42 = 1;
     while(1) {
      $38 = (($$2181209) + ($$2191207))|0;
      $39 = (($1) + ($38)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = (($1) + ($42)|0);
      $43 = HEAP8[$41>>0]|0;
      $44 = ($40<<24>>24)==($43<<24>>24);
      do {
       if ($44) {
        $45 = ($$2181209|0)==($$2177210|0);
        if ($45) {
         $46 = (($$2177210) + ($$2187208))|0;
         $$3178 = $$2177210;$$3182 = 1;$$3188 = $46;$$3192 = $$2191207;
         break;
        } else {
         $47 = (($$2181209) + 1)|0;
         $$3178 = $$2177210;$$3182 = $47;$$3188 = $$2187208;$$3192 = $$2191207;
         break;
        }
       } else {
        $48 = ($40&255)<($43&255);
        if ($48) {
         $49 = (($42) - ($$2191207))|0;
         $$3178 = $49;$$3182 = 1;$$3188 = $42;$$3192 = $$2191207;
         break;
        } else {
         $50 = (($$2187208) + 1)|0;
         $$3178 = 1;$$3182 = 1;$$3188 = $50;$$3192 = $$2187208;
         break;
        }
       }
      } while(0);
      $51 = (($$3182) + ($$3188))|0;
      $52 = ($51>>>0)<($17>>>0);
      if ($52) {
       $$2177210 = $$3178;$$2181209 = $$3182;$$2187208 = $$3188;$$2191207 = $$3192;$42 = $51;
      } else {
       $$0175$lcssa237 = $$1176;$$0189$lcssa236 = $$1190;$$0193$lcssa234235 = $17;$$2177$lcssa = $$3178;$$2191$lcssa = $$3192;
       label = 25;
       break;
      }
     }
    } else {
     $$0175$lcssa237 = $$1176;$$0189$lcssa236 = $$1190;$$0193$lcssa234235 = $17;$$2177$lcssa = 1;$$2191$lcssa = -1;
     label = 25;
    }
   } else {
    $$0175$lcssa237 = 1;$$0189$lcssa236 = -1;$$0193$lcssa234235 = $17;$$2177$lcssa = 1;$$2191$lcssa = -1;
    label = 25;
   }
  }
 } while(0);
 L34: do {
  if ((label|0) == 25) {
   $53 = (($$2191$lcssa) + 1)|0;
   $54 = (($$0189$lcssa236) + 1)|0;
   $55 = ($53>>>0)>($54>>>0);
   $$2177$$0175 = $55 ? $$2177$lcssa : $$0175$lcssa237;
   $$2191$$0189 = $55 ? $$2191$lcssa : $$0189$lcssa236;
   $56 = (($1) + ($$2177$$0175)|0);
   $57 = (($$2191$$0189) + 1)|0;
   $58 = (_memcmp($1,$56,$57)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $64 = (($$0193$lcssa234235) - ($$2177$$0175))|0;
    $$0168 = $64;$$5 = $$2177$$0175;$$pre$phiZ2D = $64;
   } else {
    $60 = (($$0193$lcssa234235) - ($$2191$$0189))|0;
    $61 = (($60) + -1)|0;
    $62 = ($$2191$$0189>>>0)>($61>>>0);
    $$2191$$0189$ = $62 ? $$2191$$0189 : $61;
    $63 = (($$2191$$0189$) + 1)|0;
    $$pre = (($$0193$lcssa234235) - ($63))|0;
    $$0168 = 0;$$5 = $63;$$pre$phiZ2D = $$pre;
   }
   $65 = $$0193$lcssa234235 | 63;
   $66 = (($$0193$lcssa234235) + -1)|0;
   $67 = ($$0168|0)!=(0);
   $$0166 = $0;$$0169 = 0;$$0170 = $0;
   while(1) {
    $68 = $$0170;
    $69 = $$0166;
    $70 = (($68) - ($69))|0;
    $71 = ($70>>>0)<($$0193$lcssa234235>>>0);
    do {
     if ($71) {
      $72 = (_memchr($$0170,0,$65)|0);
      $73 = ($72|0)==(0|0);
      if ($73) {
       $77 = (($$0170) + ($65)|0);
       $$3173 = $77;
       break;
      } else {
       $74 = $72;
       $75 = (($74) - ($69))|0;
       $76 = ($75>>>0)<($$0193$lcssa234235>>>0);
       if ($76) {
        $$3 = 0;
        break L34;
       } else {
        $$3173 = $72;
        break;
       }
      }
     } else {
      $$3173 = $$0170;
     }
    } while(0);
    $78 = (($$0166) + ($66)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $80 >>> 5;
    $82 = (($2) + ($81<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $80 & 31;
    $85 = 1 << $84;
    $86 = $85 & $83;
    $87 = ($86|0)==(0);
    L48: do {
     if ($87) {
      $$0169$be = 0;$$4183$sink = $$0193$lcssa234235;
     } else {
      $88 = (($3) + ($80<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($$0193$lcssa234235) - ($89))|0;
      $91 = ($90|0)==(0);
      if (!($91)) {
       $92 = ($$0169|0)!=(0);
       $or$cond = $67 & $92;
       $93 = ($90>>>0)<($$5>>>0);
       $or$cond194 = $or$cond & $93;
       $$4183 = $or$cond194 ? $$pre$phiZ2D : $90;
       $$0169$be = 0;$$4183$sink = $$4183;
       break;
      }
      $95 = ($57>>>0)>($$0169>>>0);
      $96 = $95 ? $57 : $$0169;
      $97 = (($1) + ($96)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = ($98<<24>>24)==(0);
      L53: do {
       if (!($99)) {
        $$5184201 = $96;$102 = $98;
        while(1) {
         $100 = (($$0166) + ($$5184201)|0);
         $101 = HEAP8[$100>>0]|0;
         $103 = ($102<<24>>24)==($101<<24>>24);
         if (!($103)) {
          break;
         }
         $104 = (($$5184201) + 1)|0;
         $105 = (($1) + ($104)|0);
         $106 = HEAP8[$105>>0]|0;
         $107 = ($106<<24>>24)==(0);
         if ($107) {
          break L53;
         } else {
          $$5184201 = $104;$102 = $106;
         }
        }
        $108 = (($$5184201) - ($$2191$$0189))|0;
        $$0169$be = 0;$$4183$sink = $108;
        break L48;
       }
      } while(0);
      if (!($95)) {
       $$3 = $$0166;
       break L34;
      }
      $$6202 = $57;
      while(1) {
       $109 = (($$6202) + -1)|0;
       $111 = (($1) + ($109)|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = (($$0166) + ($109)|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = ($112<<24>>24)==($114<<24>>24);
       if (!($115)) {
        $$0169$be = $$0168;$$4183$sink = $$5;
        break L48;
       }
       $110 = ($109>>>0)>($$0169>>>0);
       if ($110) {
        $$6202 = $109;
       } else {
        $$3 = $$0166;
        break L34;
       }
      }
     }
    } while(0);
    $94 = (($$0166) + ($$4183$sink)|0);
    $$0166 = $94;$$0169 = $$0169$be;$$0170 = $$3173;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return ($$345|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 15]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[266]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((11084|0));
 return;
}
function __get_tzname() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11068|0);
}
function __get_daylight() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11076|0);
}
function __get_timezone() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11080|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&7](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&3](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iidiiii = [b1,b1,b1,b1,b1,b1,_fmt_fp,b1];
var FUNCTION_TABLE_iiii = [b2,b2,___stdout_write,b2,_sn_write,___stdio_write,b2,b2,___stdio_read,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,___stdio_seek];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,_pop_arg_long_double];

  return { _CompileText: _CompileText, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_vii: dynCall_vii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real__CompileText = asm["_CompileText"]; asm["_CompileText"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__CompileText.apply(null, arguments);
};

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"]; asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"]; asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"]; asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"]; asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _CompileText = Module["_CompileText"] = asm["_CompileText"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



