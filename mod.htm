<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<p><a href="algorithms.htm">Algorithms</a></p>

<h3>mod</h3>

<p>Returns the remainder of integer division.</p>

<p><strong>Assume same base</strong></p>

<hr>
<h3>Declaration</h3>
<pre>
 <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator &gt;
    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod(LeftIterator left_first,
                           LeftIterator left_last,
                           <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> value)
</pre>

<hr>
<h3>Implementation</h3>

<pre>
 <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator &gt;
    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod(LeftIterator left_first,
                           LeftIterator left_last,
                           <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> value)
    {
        assert(value &lt; base);
        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> carry = <span class="number">0</span>;
        --left_last;

        <span class="keyword">for</span> (;;)
        {
            carry = (carry * base + *left_last) % value;

            <span class="keyword">if</span> (left_last == left_first)
            {
                <span class="keyword">break</span>;
            }

            --left_last;
        }

        assert(carry &lt; base);
        <span class="keyword">return</span> carry;
    }
</pre>

<hr>
<h3>Declaration</h3>
<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> mod(LeftIterator left_first,
             LeftIterator left_last,
             RightIterator right_first,
             RightIterator right_last,
             OutIterator out_first,
             OutIterator out_last)
</pre>

<hr>

<h3>Implementation</h3>

<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> mod(LeftIterator left_first,
             LeftIterator left_last,
             RightIterator right_first,
             RightIterator right_last,
             OutIterator out_first,
             OutIterator out_last)
    {
        <span class="keyword">if</span> (sig_digits(right_first, right_last) == <span class="number">1</span>)
        {
            *out_first = mod&lt;base&gt;(left_first, left_last, *right_first);
        }
        <span class="keyword">else</span>
        {
            longmod&lt;base&gt;(left_first, left_last, right_first, right_last, out_first, out_last);
        }
    }

</pre>


<h3>longmod</h3>

<hr>
<h3>Declaration</h3>
<pre>
 <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> longmod(LeftIterator left_first,
                 LeftIterator left_last,
                 RightIterator right_first,
                 RightIterator right_last,
                 OutIterator out_first,
                 OutIterator out_last)
</pre>


<hr>
<h3>Implementation</h3>
<pre>
 <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> longmod(LeftIterator left_first,
                 LeftIterator left_last,
                 RightIterator right_first,
                 RightIterator right_last,
                 OutIterator out_first,
                 OutIterator out_last)
    {
        <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span>, <span class="string">&quot;base must be &gt; 1&quot;</span>);
        <span class="comment">//base sanity check
</span>        assert(check_digits&lt;base&gt;(left_first, left_last));
        assert(check_digits&lt;base&gt;(right_first, right_last));

        <span class="keyword">const</span> size_t n = sig_digits(left_first, left_last);
        <span class="keyword">const</span> size_t m = sig_digits(right_first , right_last);
        <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  <span class="keyword">long</span> ulong;

        RightIterator sigvlast = sig_digit_end(right_first, right_last);
        ulong ym_1 = *(sigvlast - <span class="number">1</span>);
        ulong f = base / (ym_1 + <span class="number">1</span>);
        multiply_in_place&lt;base&gt;(left_first, left_last, f);
        multiply_in_place&lt;base&gt;(right_first, right_last, f);

        <span class="keyword">for</span> (<span class="keyword">int</span> k = n - m; k &gt;= <span class="number">0</span>; k--)
        {
            ulong qt = trialdigit2&lt;base&gt;(left_first, right_first, (size_t)k, (size_t)m);
            std::<span class="keyword2">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; dq((right_last - right_first) + <span class="number">1</span>);
            multiply&lt;base&gt;(right_first, right_last, qt, dq.begin(), dq.end());

            <span class="keyword">if</span> (compare(left_first + k, left_first + k + m,
                        dq.begin(), dq.begin() + m) == <span class="number">-1</span>)
            {
                qt = qt - <span class="number">1</span>;
                multiply&lt;base&gt;(left_first, left_last, qt, dq.begin(), dq.end());
            }

            subtract_in_place&lt;base&gt;(left_first + k, left_first + k + m, dq.begin(),  dq.begin() + m);

            <span class="comment">//cleaning non used digits
</span>            <span class="keyword">for</span> (<span class="keyword">int</span> i = k + m; i &lt; n; i++)
            {
                left_first[i] = <span class="number">0</span>;
            }

            println2(left_first , left_last);
        }

        assert(is_zero(out_first, out_last));
        divide&lt;base&gt;(left_first , left_last, out_first, out_last, f);
    };

</pre>

<h3>Sample:</h3>


<pre>

<span class="keyword">void</span> mod_test()
{
    <span class="keyword">using</span> <span class="keyword">namespace</span> std;
    <span class="keyword">int</span> u[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>};
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">1</span>) == <span class="number">0</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">2</span>) == <span class="number">1</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">3</span>) == <span class="number">0</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">4</span>) == <span class="number">1</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">5</span>) == <span class="number">1</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">6</span>) == <span class="number">3</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">7</span>) == <span class="number">6</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">8</span>) == <span class="number">1</span>);
    assert(mod&lt;<span class="number">10</span>&gt;(begin(u), end(u), <span class="number">9</span>) == <span class="number">6</span>);
}

<span class="keyword">void</span> longmod_test()
{
    <span class="keyword">using</span> <span class="keyword">namespace</span> std;
    {
        <span class="keyword">int</span> u[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>};
        <span class="keyword">int</span> v[] = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>};
        <span class="keyword">int</span> r[] = {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>};
        mod&lt;<span class="number">10</span>&gt;(begin(u), end(u),
                    begin(v), end(v),
                    begin(r), end(r));
        assert(r[<span class="number">0</span>] == <span class="number">6</span>);        
        assert(r[<span class="number">1</span>] == <span class="number">0</span>);
    }
    {
        <span class="keyword">int</span> u[] = {<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">0</span>};
        <span class="keyword">int</span> v[] = {<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>};
        <span class="keyword">int</span> r[] = {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>};
        mod&lt;<span class="number">10</span>&gt;(begin(u), end(u),
                    begin(v), end(v),
                    begin(r), end(r));
        assert(r[<span class="number">0</span>] == <span class="number">9</span>);        
        assert(r[<span class="number">1</span>] == <span class="number">0</span>);
    }
}


</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  