
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>Adding double buffer for conio.h</p>

<p>TODO release resources and linux implementation</p>

<pre>
<span class="keyword">#include</span> <span class="string">&quot;conio.h&quot;</span>

<span class="keyword">void</span> edit(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">char</span>* buffer)
{
	c_textcolor(WHITE);
	c_textbackground(BLUE);

	c_gotoxy(x, y);
	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; i++)
	{
		<span class="keyword">if</span> (*buffer)
		{
			c_printf(<span class="string">&quot;%c&quot;</span>, *buffer);
			buffer++;
		}
		<span class="keyword">else</span>
			c_printf(<span class="string">&quot; &quot;</span>);
		
	}

	
}

<span class="keyword">void</span> screen()
{
	edit(<span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="string">&quot;teste&quot;</span>);
	edit(<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="string">&quot;teste2&quot;</span>);
	

}

<span class="keyword">int</span> main(<span class="keyword">void</span>)
{
	c_init();
	
	<span class="keyword">int</span> i = <span class="number">0</span>;
	<span class="keyword">int</span> j = <span class="number">1</span>;
	<span class="keyword">while</span> (<span class="number">1</span>) {
		
		c_begin();


		c_textcolor(WHITE);
		c_textbackground(GREEN);
		c_clrscr();
		
		screen();

		<span class="comment">//for (int i = 1 ; i &lt; j; i++)
</span>//		  c_printf(<span class="string">&quot;A&quot;</span>);
		
		c_end();

		j++;
		Sleep(<span class="number">30</span>);
		<span class="keyword">if</span> (j == <span class="number">50</span>)
			j = <span class="number">1</span>;
	}

	c_destroy();

	<span class="keyword">return</span> <span class="number">0</span>;
}
</pre>




<pre>
<span class="keyword">#pragma</span> once

<span class="keyword">extern</span> HANDLE hConsole;<span class="comment">//; GetStdHandle(STD_OUTPUT_HANDLE);
</span>
<span class="keyword">enum</span> COLORS
{
  BLACK = <span class="number">0</span>,
  BLUE = <span class="number">1</span>,
  GREEN = <span class="number">2</span>,
  CYAN = <span class="number">3</span>,
  RED = <span class="number">4</span>,
  MAGENTA = <span class="number">5</span>,
  BROWN = <span class="number">6</span>,
  LIGHTGRAY = <span class="number">7</span>,
  DARKGRAY = <span class="number">8</span>,
  LIGHTBLUE = <span class="number">9</span>,
  LIGHTGREEN = <span class="number">10</span>,
  LIGHTCYAN = <span class="number">11</span>,
  LIGHTRED = <span class="number">12</span>,
  LIGHTMAGENTA = <span class="number">13</span>,
  YELLOW = <span class="number">14</span>,
  WHITE = <span class="number">15</span>,
  BLINK = <span class="number">128</span>
};

<span class="keyword">enum</span> CURSORTYPE
{
  _NOCURSOR,<span class="comment">//     turns off the cursor
</span>  _SOLIDCURSOR,<span class="comment">//  solid block cursor
</span>  _NORMALCURSOR <span class="comment">// normal underscore cursor
</span>};

<span class="keyword">struct</span> text_info
{
  <span class="keyword">unsigned</span> <span class="keyword">char</span> attribute;      <span class="comment">/* text attribute */</span>
  <span class="keyword">unsigned</span> <span class="keyword">char</span> normattr;       <span class="comment">/* normal attribute */</span>
  <span class="keyword">int</span> screenheight;   <span class="comment">/* text screen's height */</span>
  <span class="keyword">int</span> screenwidth;    <span class="comment">/* text screen's width */</span>
  <span class="keyword">int</span> curx;           <span class="comment">/* x-coordinate in current window */</span>
  <span class="keyword">int</span> cury;           <span class="comment">/* y-coordinate in current window */</span>
};



<span class="keyword">int</span>   c_getch(<span class="keyword">void</span>);
<span class="keyword">int</span>   c_getche(<span class="keyword">void</span>);
<span class="keyword">int</span>   c_kbhit(<span class="keyword">void</span>);

<span class="keyword">void</span>  c_clrscr();
<span class="keyword">void</span>  c_gotoxy(<span class="keyword">int</span> x, <span class="keyword">int</span> y);
<span class="keyword">void</span>  c_setcursortype(<span class="keyword">int</span> cur_t);
<span class="keyword">void</span>  c_textbackground(<span class="keyword">int</span> newcolor);
<span class="keyword">void</span>  c_textcolor(<span class="keyword">int</span> newcolor);
<span class="keyword">int</span>   c_wherex(<span class="keyword">void</span>);
<span class="keyword">int</span>   c_wherey(<span class="keyword">void</span>);
<span class="keyword">void</span>  c_gettextinfo(<span class="keyword">struct</span> text_info *r);
<span class="keyword">void</span>  c_textattr(<span class="keyword">int</span> newattr);

<span class="keyword">void</span> c_init();
<span class="keyword">void</span> c_destroy();
<span class="keyword">void</span> c_begin();
<span class="keyword">void</span> c_end();
<span class="keyword">void</span> c_printf(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...);
</pre>


<pre>


<span class="keyword">#ifdef</span> _WIN32



<span class="keyword">#include</span> &lt;windows.h&gt;
<span class="keyword">#include</span> &lt;conio.h&gt;
<span class="keyword">#include</span> <span class="string">&quot;conio.h&quot;</span>
<span class="keyword">#include</span> &lt;limits.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;

HANDLE hNewScreenBuffer = <span class="number">0</span>;
HANDLE hNewScreenBuffer2 = <span class="number">0</span>;


<span class="keyword">void</span> c_init()
{
    <span class="keyword">struct</span> text_info ti;
    c_gettextinfo(&amp;ti);

    hNewScreenBuffer = CreateConsoleScreenBuffer(
        GENERIC_WRITE | GENERIC_READ,
        <span class="number">0</span>,
        NULL,                    <span class="comment">// default security attributes 
</span>        CONSOLE_TEXTMODE_BUFFER, <span class="comment">// must be TEXTMODE 
</span>        NULL);                   <span class="comment">// reserved; must be NULL 
</span>

    hNewScreenBuffer2 = CreateConsoleScreenBuffer(
        GENERIC_WRITE | GENERIC_READ,
        <span class="number">0</span>,
        NULL,                    <span class="comment">// default security attributes 
</span>        CONSOLE_TEXTMODE_BUFFER, <span class="comment">// must be TEXTMODE 
</span>        NULL);                   <span class="comment">// reserved; must be NULL 
</span>

    COORD coordBufSize = { ti.screenwidth, ti.screenheight };
    SetConsoleScreenBufferSize(hNewScreenBuffer, coordBufSize);


    SMALL_RECT srctWriteRect = { <span class="number">0</span> };
    srctWriteRect.Right = ti.screenwidth - <span class="number">1</span>;
    srctWriteRect.Bottom = ti.screenheight - <span class="number">1</span>;

    SetConsoleWindowInfo(hNewScreenBuffer, TRUE, &amp;srctWriteRect);

    SetConsoleScreenBufferSize(hNewScreenBuffer2, coordBufSize);
    SetConsoleWindowInfo(hNewScreenBuffer2, TRUE, &amp;srctWriteRect);

    
}

<span class="keyword">void</span> c_begin()
{
    
}

<span class="keyword">void</span> c_destroy()
{
}

<span class="keyword">void</span> c_printf(<span class="keyword">const</span> <span class="keyword">char</span>* format, ...)
{
    <span class="keyword">char</span> buffer[<span class="number">1000</span>];

    va_list args;
    va_start(args, format);
    <span class="keyword">int</span> n = vsnprintf(buffer, <span class="number">1000</span>, format, args);
    va_end(args);

    <span class="keyword">int</span> numberOfCharsWritten;
    WriteConsoleA(
        hConsole,
        buffer,
        n,
        &amp;numberOfCharsWritten,
        <span class="number">0</span>);
}

<span class="keyword">void</span> c_end()
{

    SetConsoleActiveScreenBuffer(hConsole);


    <span class="keyword">if</span> (hConsole == hNewScreenBuffer2)
    {
        hConsole = hNewScreenBuffer;
    }
    <span class="keyword">else</span>
    {
        hConsole = hNewScreenBuffer2;
    }
}


HANDLE hConsole = <span class="number">0</span>;<span class="comment">//GetStdHandle(STD_OUTPUT_HANDLE);
</span>
<span class="keyword">static</span> <span class="keyword">void</span> clearbits(<span class="keyword">unsigned</span> <span class="keyword">char</span> * v,
  <span class="keyword">int</span> bit_index,
  <span class="keyword">int</span> nbits)
{
  <span class="keyword">unsigned</span> mask = ~((<span class="keyword">unsigned</span> <span class="keyword">char</span>)(<span class="number">0</span>)) &lt;&lt; (<span class="keyword">sizeof</span>(v) * CHAR_BIT - (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(nbits));
  mask = mask &gt;&gt; (<span class="keyword">sizeof</span>(v) * CHAR_BIT - (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(bit_index)-(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(nbits));
  *v &amp;= ~mask;
}


<span class="keyword">static</span> <span class="keyword">void</span> setbits(<span class="keyword">unsigned</span> <span class="keyword">char</span> *v,
  <span class="keyword">int</span> bit_index,
  <span class="keyword">int</span> nbits,
  <span class="keyword">unsigned</span> <span class="keyword">char</span> number)
{
  clearbits(&amp;number, nbits, <span class="keyword">sizeof</span>(number) * CHAR_BIT - nbits);

  <span class="keyword">unsigned</span> <span class="keyword">char</span> big = number;
  big = (big &lt;&lt; bit_index);

  clearbits(v, bit_index, nbits);
  *v |= big;
}


<span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> getbits(<span class="keyword">unsigned</span> <span class="keyword">char</span> v, <span class="keyword">int</span> bit_index, <span class="keyword">int</span> nbits)
{
  <span class="keyword">unsigned</span> <span class="keyword">char</span> r = v &gt;&gt; bit_index;
  clearbits(&amp;r, nbits, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>) * CHAR_BIT - nbits);
  <span class="keyword">return</span> r;
}


<span class="keyword">void</span> c_gettextinfo(<span class="keyword">struct</span> text_info *r)
{
  <span class="keyword">if</span> (hConsole == NULL)
    hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  <span class="keyword">if</span> (r == <span class="number">0</span>)
    <span class="keyword">return</span>;

  CONSOLE_SCREEN_BUFFER_INFO csbi;
  <span class="keyword">if</span> (GetConsoleScreenBufferInfo(hConsole, &amp;csbi))
  {

      r-&gt;attribute = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)csbi.wAttributes;
      r-&gt;curx = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)csbi.dwCursorPosition.X;
      r-&gt;cury = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)csbi.dwCursorPosition.Y;
      r-&gt;screenwidth = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)csbi.dwMaximumWindowSize.X;
      r-&gt;screenheight = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)csbi.dwMaximumWindowSize.Y;
      r-&gt;normattr = <span class="number">0</span>;
  }
  <span class="keyword">else</span>
  {
      <span class="keyword">int</span> e = GetLastError();
      e = <span class="number">0</span>;
  }
}

<span class="keyword">int</span> c_kbhit(<span class="keyword">void</span>)
{
  <span class="keyword">return</span> _kbhit();
}
<span class="keyword">int</span> c_getch(<span class="keyword">void</span>)
{
  <span class="keyword">return</span> _getch();
}

<span class="keyword">int</span> c_getche(<span class="keyword">void</span>)
{
  <span class="keyword">return</span> _getche();
}

<span class="keyword">void</span> c_setcursortype(<span class="keyword">int</span> cur_t)
{
    <span class="keyword">if</span> (hConsole == NULL)
        hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  CONSOLE_CURSOR_INFO ci;

  <span class="keyword">switch</span> (cur_t)
  {
  <span class="keyword">case</span> _NOCURSOR:<span class="comment">//     (turns off the cursor)
</span>    ci.bVisible = FALSE;
    ci.dwSize = <span class="number">1</span>;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> _SOLIDCURSOR:<span class="comment">//  (solid block cursor)
</span>    ci.bVisible = TRUE;
    ci.dwSize = <span class="number">100</span>;
    <span class="keyword">break</span>;

  <span class="keyword">default</span>:
  <span class="keyword">case</span> _NORMALCURSOR: <span class="comment">// (normal underscore cursor)
</span>    ci.bVisible = TRUE;
    ci.dwSize = <span class="number">50</span>;
    <span class="keyword">break</span>;
  }

  SetConsoleCursorInfo(hConsole, &amp;ci);
}

<span class="keyword">void</span> c_textattr(<span class="keyword">int</span> newattr)
{
    <span class="keyword">if</span> (hConsole == NULL)
        hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  SetConsoleTextAttribute(hConsole, newattr);
}

<span class="keyword">void</span> c_textbackground(<span class="keyword">int</span> newcolor)
{
    
  <span class="keyword">struct</span> text_info ti;
  c_gettextinfo(&amp;ti);
  <span class="keyword">unsigned</span> <span class="keyword">char</span> wColor = ti.attribute;
  <span class="keyword">unsigned</span> <span class="keyword">char</span> old = getbits(wColor, <span class="number">4</span>, <span class="number">4</span>);
  setbits(&amp;wColor, <span class="number">4</span>, <span class="number">4</span>, newcolor);
  c_textattr(wColor);
}

<span class="keyword">void</span> c_textcolor(<span class="keyword">int</span> newcolor)
{
  <span class="keyword">struct</span> text_info ti;
  c_gettextinfo(&amp;ti);
  <span class="keyword">unsigned</span> <span class="keyword">char</span> wColor = ti.attribute;
  <span class="keyword">int</span> old = getbits(wColor, <span class="number">0</span>, <span class="number">4</span>);
  setbits(&amp;wColor, <span class="number">0</span>, <span class="number">4</span>, newcolor);
  c_textattr(wColor);
}


<span class="keyword">int</span> c_wherex()
{
  CONSOLE_SCREEN_BUFFER_INFO cbsi;
  <span class="keyword">if</span> (GetConsoleScreenBufferInfo(hConsole, &amp;cbsi))
  {
    <span class="keyword">return</span> cbsi.dwCursorPosition.X + <span class="number">1</span>;
  }
  <span class="keyword">return</span> <span class="number">-1</span>;
}

<span class="keyword">int</span> c_wherey()
{
    <span class="keyword">if</span> (hConsole == NULL)
        hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  CONSOLE_SCREEN_BUFFER_INFO cbsi;
  <span class="keyword">if</span> (GetConsoleScreenBufferInfo(hConsole, &amp;cbsi))
  {
    <span class="keyword">return</span> cbsi.dwCursorPosition.Y;
  }
  <span class="keyword">return</span> <span class="number">-1</span>;
}

<span class="keyword">void</span> c_gotoxy(<span class="keyword">int</span> x, <span class="keyword">int</span> y)
{
    <span class="keyword">if</span> (hConsole == NULL)
        hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  COORD point;
  point.X = x - (<span class="keyword">short</span>)<span class="number">1</span>;
  point.Y = y;
  SetConsoleCursorPosition(hConsole, point);
}

<span class="keyword">void</span> c_clrscr()
{
    <span class="keyword">if</span> (hConsole == NULL)
        hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  COORD coordScreen = { <span class="number">0</span>, <span class="number">0</span> };
  <span class="keyword">unsigned</span> <span class="keyword">long</span> cCharsWritten;
  CONSOLE_SCREEN_BUFFER_INFO csbi;
  <span class="keyword">unsigned</span> <span class="keyword">long</span> dwConSize;
  <span class="comment">//HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
</span>  GetConsoleScreenBufferInfo(hConsole, &amp;csbi);
  dwConSize = csbi.dwSize.X * csbi.dwSize.Y;
  FillConsoleOutputCharacter(hConsole, TEXT(<span class="string">' '</span>), dwConSize, coordScreen, &amp;cCharsWritten);
  GetConsoleScreenBufferInfo(hConsole, &amp;csbi);
  FillConsoleOutputAttribute(hConsole, csbi.wAttributes, dwConSize, coordScreen, &amp;cCharsWritten);
  SetConsoleCursorPosition(hConsole, coordScreen);
}



#elif __linux__


<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;termios.h&gt;
<span class="keyword">#include</span> &lt;unistd.h&gt;
<span class="keyword">#include</span> &lt;fcntl.h&gt;
<span class="keyword">#include</span> &lt;sys/ioctl.h&gt;
<span class="keyword">#include</span> <span class="string">&quot;conio.h&quot;</span>

<span class="keyword">int</span> c_kbhit(<span class="keyword">void</span>)
{
  <span class="keyword">struct</span> termios oldt, newt;
  <span class="keyword">int</span> ch;
  <span class="keyword">int</span> oldf;

  tcgetattr(STDIN_FILENO, &amp;oldt);
  newt = oldt;
  newt.c_lflag &amp;= ~(ICANON | ECHO);
  tcsetattr(STDIN_FILENO, TCSANOW, &amp;newt);
  oldf = fcntl(STDIN_FILENO, F_GETFL, <span class="number">0</span>);
  fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

  ch = getchar();

  tcsetattr(STDIN_FILENO, TCSANOW, &amp;oldt);
  fcntl(STDIN_FILENO, F_SETFL, oldf);

  <span class="keyword">if</span> (ch != EOF)
  {
    ungetc(ch, stdin);
    <span class="keyword">return</span> <span class="number">1</span>;
  }

  <span class="keyword">return</span> <span class="number">0</span>;
}


<span class="keyword">static</span> <span class="keyword">int</span> getCursorPosition2(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)
{
  *x = <span class="number">-1</span>;
  *y = <span class="number">-1</span>;

  <span class="keyword">char</span> buf[<span class="number">32</span>];
  <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;
  <span class="keyword">int</span> ch;

  printf(&quot;\x1B[<span class="number">6</span>n&quot;);

  <span class="keyword">while</span> (i &lt; <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>)
  {
    ch = c_getch();
    <span class="keyword">if</span> (ch == EOF || ch == <span class="string">'R'</span>) <span class="keyword">break</span>;
    buf[i++] = ch;
  }
  buf[i] = <span class="string">'\0'</span>;

  <span class="keyword">if</span> (buf[<span class="number">0</span>] != '\x1b<span class="string">' || buf[1] != '</span>[') return -1;

  <span class="keyword">if</span> (sscanf(&amp;buf[<span class="number">2</span>], <span class="string">&quot;%d;%d&quot;</span>, y, x) != <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;

  <span class="keyword">return</span> <span class="number">0</span>;
}

<span class="keyword">int</span> c_wherex(<span class="keyword">void</span>)
{
  <span class="keyword">int</span> x, y;
  getCursorPosition2(&amp;x, &amp;y);
  <span class="keyword">return</span> x;
}

<span class="keyword">int</span> c_wherey(<span class="keyword">void</span>)
{
  <span class="keyword">int</span> x, y;
  getCursorPosition2(&amp;x, &amp;y);
  <span class="keyword">return</span> y;
}


<span class="keyword">void</span> c_gotoxy(<span class="keyword">int</span> x, <span class="keyword">int</span> y)
{
  printf(&quot;\x1b[%d;%dH&quot;, y, x);
  fflush(stdout);
}

<span class="keyword">void</span> c_clrscr()
{
  puts(&quot;\x1b[<span class="number">2</span>J\x1b[<span class="number">1</span>;<span class="number">1</span>H&quot;);
  fflush(stdout);
}

<span class="keyword">void</span> c_textcolor(<span class="keyword">int</span> newcolor)
{
  <span class="comment">//https://en.wikipedia.org/wiki/ANSI_escape_code
</span>
  <span class="keyword">const</span> <span class="keyword">char</span> * s = &quot;\x1b[<span class="number">30</span>m&quot;;

  <span class="keyword">switch</span> (newcolor)
  {
  <span class="keyword">case</span> BLACK:
    s = &quot;\x1b[<span class="number">30</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> BLUE:
    s = &quot;\x1b[<span class="number">34</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> GREEN:
    s = &quot;\x1b[<span class="number">32</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> CYAN:
    s = &quot;\x1b[<span class="number">36</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> RED:
    s = &quot;\x1b[<span class="number">31</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> MAGENTA:
    s = &quot;\x1b[<span class="number">35</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> BROWN:
    s = &quot;\x1b[<span class="number">31</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTGRAY:
    s = &quot;\x1b[<span class="number">30</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> DARKGRAY:
    s = &quot;\x1b[<span class="number">30</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTBLUE:
    s = &quot;\x1b[<span class="number">34</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTGREEN:
    s = &quot;\x1b[<span class="number">32</span>,<span class="number">1</span>m&quot;;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTCYAN:
    s = &quot;\x1b[<span class="number">36</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTRED:
    s = &quot;\x1b[<span class="number">31</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTMAGENTA:
    s = &quot;\x1b[<span class="number">35</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> YELLOW:
    s = &quot;\x1b[<span class="number">33</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> WHITE:
    s = &quot;\x1b[<span class="number">37</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> BLINK:
    s = &quot;\x1b[<span class="number">30</span>m&quot;;
    <span class="keyword">break</span>;
  };

  printf(<span class="string">&quot;%s&quot;</span>, s);
}

<span class="keyword">void</span> c_textbackground(<span class="keyword">int</span> newcolor)
{
  <span class="comment">//https://en.wikipedia.org/wiki/ANSI_escape_code
</span>
  <span class="keyword">const</span> <span class="keyword">char</span> * s = &quot;\x1b[<span class="number">40</span>m&quot;;

  <span class="keyword">switch</span> (newcolor)
  {
  <span class="keyword">case</span> BLACK:
    s = &quot;\x1b[<span class="number">40</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> BLUE:
    s = &quot;\x1b[<span class="number">44</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> GREEN:
    s = &quot;\x1b[<span class="number">42</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> CYAN:
    s = &quot;\x1b[<span class="number">46</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> RED:
    s = &quot;\x1b[<span class="number">41</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> MAGENTA:
    s = &quot;\x1b[<span class="number">45</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> BROWN:
    s = &quot;\x1b[<span class="number">41</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTGRAY:
    s = &quot;\x1b[<span class="number">40</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> DARKGRAY:
    s = &quot;\x1b[<span class="number">40</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTBLUE:
    s = &quot;\x1b[<span class="number">44</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTGREEN:
    s = &quot;\x1b[<span class="number">42</span>,<span class="number">1</span>m&quot;;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTCYAN:
    s = &quot;\x1b[<span class="number">46</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTRED:
    s = &quot;\x1b[<span class="number">41</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> LIGHTMAGENTA:
    s = &quot;\x1b[<span class="number">45</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> YELLOW:
    s = &quot;\x1b[<span class="number">43</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> WHITE:
    s = &quot;\x1b[<span class="number">47</span>;<span class="number">1</span>m&quot;;
    <span class="keyword">break</span>;

  <span class="keyword">case</span> BLINK:
    s = &quot;\x1b[<span class="number">40</span>m&quot;;
    <span class="keyword">break</span>;
  };

  puts(s);
}


<span class="comment">/* Read 1 character - echo defines echo mode */</span>
<span class="comment">/*
static char getch_(int echo)
{
  struct termios old, new;
  int ch;

  tcgetattr(0, &amp;old);

  new = old;
  new.c_lflag &amp;= ~ICANON;
  if (!echo)
  {
    new.c_lflag &amp;= ~ECHO;
  }
  tcsetattr(0, TCSANOW, &amp;new);

  ch = getchar();

  tcsetattr(0, TCSANOW, &amp;old);

  return ch;
}
*/</span>

<span class="comment">/* Read 1 character without echo */</span>
<span class="keyword">int</span> c_getch(<span class="keyword">void</span>)
{
  <span class="keyword">struct</span> termios old, <span class="keyword">new</span>;
  <span class="keyword">int</span> ch;

  tcgetattr(<span class="number">0</span>, &amp;old);

  <span class="keyword">new</span> = old;
  <span class="keyword">new</span>.c_lflag &amp;= ~ICANON;
  <span class="keyword">new</span>.c_lflag &amp;= ~ECHO;
  tcsetattr(<span class="number">0</span>, TCSANOW, &amp;<span class="keyword">new</span>);

  ch = getchar();

  tcsetattr(<span class="number">0</span>, TCSANOW, &amp;old);

  <span class="keyword">return</span> ch;
}

<span class="comment">/* Read 1 character with echo */</span>
<span class="keyword">int</span> c_getche(<span class="keyword">void</span>)
{
  <span class="keyword">struct</span> termios old, <span class="keyword">new</span>;
  <span class="keyword">int</span> ch;

  tcgetattr(<span class="number">0</span>, &amp;old);

  <span class="keyword">new</span> = old;
  <span class="keyword">new</span>.c_lflag &amp;= ~ICANON;
  <span class="comment">//new.c_lflag &amp;= ~ECHO;
</span>  tcsetattr(<span class="number">0</span>, TCSANOW, &amp;<span class="keyword">new</span>);

  ch = getchar();

  tcsetattr(<span class="number">0</span>, TCSANOW, &amp;old);
  <span class="keyword">return</span> ch;
}


<span class="keyword">void</span> c_setcursortype(<span class="keyword">int</span> cur_t)
{
  <span class="keyword">switch</span> (cur_t)
  {
  <span class="keyword">case</span> _NOCURSOR:
    printf(&quot;\x1b[?<span class="number">25</span>l&quot;);
    <span class="keyword">break</span>;

  <span class="keyword">case</span> _NORMALCURSOR:
    printf(&quot;\x1b[?<span class="number">25</span>h&quot;);
    <span class="keyword">break</span>;

  <span class="keyword">case</span> _SOLIDCURSOR:<span class="comment">//TODO
</span>    printf(&quot;\x1b[?<span class="number">25</span>h&quot;);
    <span class="keyword">break</span>;
  }
}

<span class="keyword">void</span> c_gettextinfo(<span class="keyword">struct</span> text_info *r)
{

  <span class="keyword">struct</span> winsize w;
  ioctl(<span class="number">0</span>, TIOCGWINSZ, &amp;w);

  r-&gt;screenheight = w.ws_row;
  r-&gt;screenwidth = w.ws_col;

  <span class="keyword">int</span> x, y;
  getCursorPosition2(&amp;x, &amp;y);


  r-&gt;curx = x;
  r-&gt;cury = y;

}

<span class="keyword">void</span> c_textattr(<span class="keyword">int</span> newattr)
{
  <span class="comment">//tODO
</span>}

<span class="keyword">#endif</span> <span class="comment">//linux
</span>
</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  