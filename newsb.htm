
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<p>String formatter that allocates memory when necessary.</p>

<pre>
<span class="keyword">#pragma</span> once

<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;stdarg.h&gt;

<span class="keyword">struct</span> sb
{
    <span class="keyword">char</span>* c_str;
    <span class="keyword">int</span> size;
    <span class="keyword">int</span> capacity;
    <span class="keyword">bool</span> heap;
} ;

<span class="keyword">#define</span> SB_INIT(N)  {.size = <span class="number">0</span>, .capacity = N, .c_str = (<span class="keyword">char</span>[N + <span class="number">1</span>]){<span class="number">0</span>}, .heap = <span class="number">0</span> }

<span class="keyword">void</span> sb_free(<span class="keyword">struct</span> sb* p);
<span class="keyword">int</span> sb_reserve(<span class="keyword">struct</span> sb* p, <span class="keyword">int</span> nelements);
<span class="keyword">int</span> sb_printf(<span class="keyword">struct</span> sb* stream, <span class="keyword">const</span> <span class="keyword">char</span>* fmt, ...);
<span class="keyword">int</span> ss_vafprintf(<span class="keyword">struct</span> sb* stream, <span class="keyword">const</span> <span class="keyword">char</span>* fmt, va_list args);

</pre>


<pre>

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;sb.h&quot;

void sb_free(struct sb* p)
{
    if (p-&gt;heap)
        free(p-&gt;c_str);
}

int sb_reserve(struct sb* p, int nelements)
{
    int result = 0;
    if (nelements &gt; p-&gt;capacity)
    {
        char* pnew = NULL;
        if (!p-&gt;heap)
        {
            pnew = (char*)malloc((nelements + 1) * sizeof(char));
            if (pnew)
            {
                memcpy(pnew, p-&gt;c_str, nelements);
                p-&gt;heap = true;
            }
        }
        else
        {
            pnew = (char*)realloc(p-&gt;c_str, (nelements + 1) * sizeof(char));
        }
        if (pnew)
        {
            p-&gt;c_str = pnew;
            p-&gt;capacity = nelements;
            result = p-&gt;capacity;
        }
    }
    else
    {
        result = p-&gt;capacity;
    }

    return result;
}



int ss_vafprintf(struct sb* stream, const char* fmt, va_list args)
{
    va_list tmpa;
    va_copy(tmpa, args);

    int size = vsnprintf(stream-&gt;c_str, stream-&gt;capacity, fmt, tmpa);

    va_end(tmpa);

    if (size &lt; 0)
    {
        return -1;
    }

    if (size &gt; stream-&gt;capacity)
    {
        if (sb_reserve(stream, size) == 0)
        {
            return -1;
        }

        size = vsprintf(stream-&gt;c_str, fmt, args);
        if (size &gt; 0)
        {
            stream-&gt;size = size;
        }
    }
   


    return size;
}

int sb_printf(struct sb* stream, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    int size = ss_vafprintf(stream, fmt, args);
    va_end(args);
    return size;
}

</pre>

<pre>
#include &lt;stdio.h&gt;
#include &quot;sb.h&quot;

int main()
{
    struct sb sb = SB_INIT(10);

    sb_printf(&amp;sb, &quot;%s&quot;, &quot;test&quot;);

    sb_printf(&amp;sb, &quot;%s&quot;, &quot;big string test&quot;);

    sb_printf(&amp;sb, &quot;%s&quot;, &quot;small&quot;);

    sb_reserve(&amp;sb, 400);

    sb_free(&amp;sb);
}
</pre>

<!-- Page content end --> 
</article> 
 
</body> 
</html>  