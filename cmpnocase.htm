<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<p>cmp</p>

<pre>
<span class="keyword">int</span> cmp_nocase(<span class="keyword">const</span> std::<span class="keyword2">string</span>&amp; s, <span class="keyword">const</span> std::<span class="keyword2">string</span>&amp; s2)
{
  std::<span class="keyword2">string</span>::const_iterator p  = s.begin();
  std::<span class="keyword2">string</span>::const_iterator p2 = s2.begin();

  <span class="keyword">while</span> (p != s.end() &amp;&amp; p2 != s2.end())
  {
    <span class="keyword">if</span> (toupper(*p) != toupper(*p2))
    {
      <span class="keyword">return</span> (toupper(*p) &lt; toupper(*p2)) ? <span class="number">-1</span> : <span class="number">1</span>;
    }
    ++p;
    ++p2;
  }
  <span class="keyword">return</span> (s2.size()==s.size()) ? <span class="number">0</span> : (s.size() &lt; s2.size()) ? <span class="number">-1</span> : <span class="number">1</span>;
}

<span class="comment">//From book: The C++ Programming Language
</span>See also find_replace



<span class="keyword">int</span> cmp_nocase(<span class="keyword">const</span> std::<span class="keyword2">wstring</span>&amp; s, <span class="keyword">const</span> std::<span class="keyword2">wstring</span>&amp; s2)
{
  std::<span class="keyword2">wstring</span>::const_iterator p  = s.begin();
  std::<span class="keyword2">wstring</span>::const_iterator p2 = s2.begin();

  <span class="keyword">while</span> (p != s.end() &amp;&amp; p2 != s2.end())
  {
    <span class="keyword">if</span> (toupper(*p) != toupper(*p2))
    {
      <span class="keyword">return</span> (toupper(*p) &lt; toupper(*p2)) ? <span class="number">-1</span> : <span class="number">1</span>;
    }
    ++p;
    ++p2;
  }
  <span class="keyword">return</span> (s2.size()==s.size()) ? <span class="number">0</span> : (s.size() &lt; s2.size()) ? <span class="number">-1</span> : <span class="number">1</span>;
}



<span class="keyword">template</span>&lt;<span class="keyword">class</span> CharType&gt;
<span class="keyword">int</span> cmp_nocase(<span class="keyword">const</span> std::basic_string&lt;CharType&gt;&amp; s, <span class="keyword">const</span> std::basic_string&lt;CharType&gt;&amp; s2)
{
  std::basic_string&lt;CharType&gt;::const_iterator p  = s.begin();
  std::basic_string&lt;CharType&gt;::const_iterator p2 = s2.begin();

  <span class="keyword">while</span> (p != s.end() &amp;&amp; p2 != s2.end())
  {
    <span class="keyword">if</span> (toupper(*p) != toupper(*p2))
    {
      <span class="keyword">return</span> (toupper(*p) &lt; toupper(*p2)) ? <span class="number">-1</span> : <span class="number">1</span>;
    }
    ++p;
    ++p2;
  }
  <span class="keyword">return</span> (s2.size()==s.size()) ? <span class="number">0</span> : (s.size() &lt; s2.size()) ? <span class="number">-1</span> : <span class="number">1</span>;
}
</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  