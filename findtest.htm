
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 




<p>C code for generating string-switch</p>

<p>Se <a href="switchgenerator.html">Online</a></p>


<pre>

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;time.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;stdbool.h&gt;


<span class="keyword">struct</span> Stopwatch
{
    clock_t m_StartCount;
    clock_t m_StopCount;
};

<span class="keyword">bool</span> Stopwatch_IsRunning(<span class="keyword">struct</span> Stopwatch* stopwatch)
{
    <span class="keyword">return</span> stopwatch-&gt;m_StartCount != <span class="number">0</span> &amp;&amp; stopwatch-&gt;m_StopCount == <span class="number">0</span>;
}

size_t GetFrequency() <span class="comment">//in milliseconds
</span>{
    <span class="keyword">return</span> CLOCKS_PER_SEC / <span class="number">1000</span>;
}

<span class="keyword">void</span> Stopwatch_Reset(<span class="keyword">struct</span> Stopwatch* stopwatch)
{
    stopwatch-&gt;m_StopCount = <span class="number">0</span>;
    stopwatch-&gt;m_StartCount = <span class="number">0</span>;


}

<span class="keyword">void</span> Stopwatch_Start(<span class="keyword">struct</span> Stopwatch* stopwatch)
{
    <span class="keyword">bool</span> resume = (stopwatch-&gt;m_StartCount != <span class="number">0</span>);
    <span class="keyword">if</span> (resume)
        stopwatch-&gt;m_StopCount = <span class="number">0</span>;
    <span class="keyword">else</span>
    {
        stopwatch-&gt;m_StartCount = clock();
    }

    <span class="comment">//assert(Stopwatch_IsRunning());
</span>}

<span class="keyword">void</span> Stopwatch_Stop(<span class="keyword">struct</span> Stopwatch* stopwatch)
{
    stopwatch-&gt;m_StopCount = clock();
}

clock_t Stopwatch_GetElapsedTicks(<span class="keyword">struct</span> Stopwatch* stopwatch)
{
    <span class="keyword">if</span> (Stopwatch_IsRunning(stopwatch))
        <span class="keyword">return</span> (clock() - stopwatch-&gt;m_StartCount);

    <span class="keyword">return</span> (stopwatch-&gt;m_StopCount - stopwatch-&gt;m_StartCount);
}

clock_t Stopwatch_GetElapsedMilliseconds(<span class="keyword">struct</span> Stopwatch* stopwatch)
{
    <span class="keyword">return</span> Stopwatch_GetElapsedTicks(stopwatch) / (CLOCKS_PER_SEC / <span class="number">1000</span>);
}



<span class="keyword">void</span> GenerateCore(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> first, <span class="keyword">int</span> last, <span class="keyword">int</span> level, <span class="keyword">int</span>* count)
{
    <span class="keyword">int</span> ident = (level + <span class="number">1</span>) * <span class="number">2</span>;
    printf(<span class="string">&quot;%*cswitch (text[%d])\n&quot;</span>, ident, <span class="string">' '</span>, level);
    printf(<span class="string">&quot;%*c{\n&quot;</span>, ident, <span class="string">' '</span>);

    <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++)
    {
        <span class="keyword">int</span> begin = i;
        <span class="keyword">int</span> end = begin;
        <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= last; k++)
        {
            <span class="keyword">if</span> (keywords[k][level] == keywords[begin][level])
            {
                i++;
                end++;
            }
            <span class="keyword">else</span>
                <span class="keyword">break</span>;
        }

        <span class="comment">//we have the range
</span>        <span class="keyword">if</span> (begin == end)
        {
            <span class="comment">//just one
</span>            printf(<span class="string">&quot;%*ccase '%c': /*%s*/ if (&quot;</span>,
                ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level], keywords[i]);

            <span class="keyword">int</span> len = strlen(keywords[i]);

            <span class="keyword">int</span> j = level + <span class="number">1</span>;
            <span class="keyword">for</span> (; j &lt; len; j++)
            {
                <span class="keyword">if</span> (j != level + <span class="number">1</span>)
                    printf(<span class="string">&quot;&amp;&amp;&quot;</span>);

                printf(<span class="string">&quot;text[%d]=='%c'&quot;</span>, j, keywords[i][j]);
            }
            <span class="keyword">if</span> (j != level + <span class="number">1</span>)
                printf(<span class="string">&quot;&amp;&amp;&quot;</span>);
            printf(<span class="string">&quot;text[%d]=='\\0'&quot;</span>, j);

            printf(<span class="string">&quot;) result = %d; break;\n&quot;</span>, *count);

            (*count)++;
        }
        <span class="keyword">else</span>
        {
            printf(<span class="string">&quot;%*ccase '%c':\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level]);
            GenerateCore(keywords, begin, end, level + <span class="number">1</span>, count);
            printf(<span class="string">&quot;%*cbreak;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);
        }

    }
    printf(<span class="string">&quot;%*cdefault : break;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);

    printf(<span class="string">&quot;%*c}\n&quot;</span>, ident, <span class="string">' '</span>);
}


<span class="keyword">void</span> GenerateCore1(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> first, <span class="keyword">int</span> last, <span class="keyword">int</span> level, <span class="keyword">int</span>* count)
{
    <span class="keyword">int</span> ident = (level + <span class="number">1</span>) * <span class="number">2</span>;
    printf(<span class="string">&quot;%*cswitch (text[%d])\n&quot;</span>, ident, <span class="string">' '</span>, level);
    printf(<span class="string">&quot;%*c{\n&quot;</span>, ident, <span class="string">' '</span>);

    <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++)
    {
        <span class="keyword">int</span> begin = i;
        <span class="keyword">int</span> end = begin;
        <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= last; k++)
        {
            <span class="keyword">if</span> (keywords[k][level] == keywords[begin][level])
            {
                i++;
                end++;
            }
            <span class="keyword">else</span>
                <span class="keyword">break</span>;
        }

        <span class="comment">//we have the range
</span>        <span class="keyword">if</span> (begin == end)
        {
            <span class="comment">//just one
</span>            printf(<span class="string">&quot;%*ccase '%c': /*%s*/ if (strcmp(text, \&quot;%s\&quot;) == 0) result = %d; break;\n&quot;</span>, 
                ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level], keywords[i],
                keywords[i],
                *count);

            (*count)++;
        }
        <span class="keyword">else</span>
        {
            printf(<span class="string">&quot;%*ccase '%c':\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level]);
            GenerateCore1(keywords, begin, end, level + <span class="number">1</span>, count);
            printf(<span class="string">&quot;%*cbreak;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);
        }

    }
    printf(<span class="string">&quot;%*cdefault : break;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);

    printf(<span class="string">&quot;%*c}\n&quot;</span>, ident, <span class="string">' '</span>);
}


<span class="keyword">void</span> GenerateCore10(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> first, <span class="keyword">int</span> last, <span class="keyword">int</span> level, <span class="keyword">int</span>* count)
{
    <span class="keyword">int</span> ident = (level + <span class="number">1</span>) * <span class="number">2</span>;
    printf(<span class="string">&quot;%*cswitch (text[%d])\n&quot;</span>, ident, <span class="string">' '</span>, level);
    printf(<span class="string">&quot;%*c{\n&quot;</span>, ident, <span class="string">' '</span>);

    <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++)
    {
        <span class="keyword">int</span> begin = i;
        <span class="keyword">int</span> end = begin;
        <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= last; k++)
        {
            <span class="keyword">if</span> (keywords[k][level] == keywords[begin][level])
            {
                i++;
                end++;
            }
            <span class="keyword">else</span>
                <span class="keyword">break</span>;
        }

        <span class="comment">//we have the range
</span>        <span class="keyword">if</span> (begin == end)
        {
            <span class="comment">//just one
</span>            printf(<span class="string">&quot;%*ccase '%c': /*%s*/ if (strcmp(&amp;text[%d], \&quot;%s\&quot;) == 0) result = %d; break;\n&quot;</span>,
                ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level], keywords[i],
                level + <span class="number">1</span>, &amp;keywords[i][level + <span class="number">1</span>],
                *count);

            (*count)++;
        }
        <span class="keyword">else</span>
        {
            printf(<span class="string">&quot;%*ccase '%c':\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level]);
            GenerateCore10(keywords, begin, end, level + <span class="number">1</span>, count);
            printf(<span class="string">&quot;%*cbreak;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);
        }

    }
    printf(<span class="string">&quot;%*cdefault : break;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);

    printf(<span class="string">&quot;%*c}\n&quot;</span>, ident, <span class="string">' '</span>);
}



<span class="keyword">void</span> GenerateCore2(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> first, <span class="keyword">int</span> last, <span class="keyword">int</span> level, <span class="keyword">int</span>* count)
{
    <span class="keyword">int</span> ident = (level + <span class="number">1</span>) * <span class="number">2</span>;
    printf(<span class="string">&quot;%*cswitch (text[%d])\n&quot;</span>, ident, <span class="string">' '</span>, level);
    printf(<span class="string">&quot;%*c{\n&quot;</span>, ident, <span class="string">' '</span>);

    <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++)
    {
        <span class="keyword">int</span> begin = i;
        <span class="keyword">int</span> end = begin;
        <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= last; k++)
        {
            <span class="keyword">if</span> (keywords[k][level] == keywords[begin][level])
            {
                i++;
                end++;
            }
            <span class="keyword">else</span>
                <span class="keyword">break</span>;
        }

        printf(<span class="string">&quot;%*ccase '%c':\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>, keywords[i][level]);
        <span class="keyword">for</span> (<span class="keyword">int</span> j = begin; j &lt;= end; j++)
        {
            printf(<span class="string">&quot;%*c&quot;</span>, ident * <span class="number">3</span>, <span class="string">' '</span>);
            <span class="keyword">if</span> (j != begin)
                printf(<span class="string">&quot;else &quot;</span>);

            printf(<span class="string">&quot;if (strcmp(\&quot;%s\&quot;, text) == 0) result = %d;\n&quot;</span>, keywords[j], *count);

            (*count)++;
        }

        printf(<span class="string">&quot;%*cbreak;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);


    }
    printf(<span class="string">&quot;%*cdefault : break;\n&quot;</span>, ident * <span class="number">2</span>, <span class="string">' '</span>);

    printf(<span class="string">&quot;%*c}\n&quot;</span>, ident, <span class="string">' '</span>);
}


<span class="keyword">void</span> Generate(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> size)
{
    printf(<span class="string">&quot;int find(const char* text)\n&quot;</span>);
    printf(<span class="string">&quot;{\n&quot;</span>);
    <span class="keyword">int</span> count = <span class="number">0</span>;
    printf(<span class="string">&quot;%*cint result = -1;\n&quot;</span>, <span class="number">2</span>, <span class="string">' '</span>);
    GenerateCore(keywords, <span class="number">0</span>, size - <span class="number">1</span>, <span class="number">0</span>, &amp;count);
    printf(<span class="string">&quot;%*creturn result;\n&quot;</span>, <span class="number">2</span>, <span class="string">' '</span>);
    printf(<span class="string">&quot;}\n&quot;</span>);
}

<span class="keyword">void</span> Generate2(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> size)
{
    printf(<span class="string">&quot;int find2(const char* text)\n&quot;</span>);
    printf(<span class="string">&quot;{\n&quot;</span>);
    <span class="keyword">int</span> count = <span class="number">0</span>;
    printf(<span class="string">&quot;%*cint result = -1;\n&quot;</span>, <span class="number">2</span>, <span class="string">' '</span>);
    GenerateCore2(keywords, <span class="number">0</span>, size - <span class="number">1</span>, <span class="number">0</span>, &amp;count);
    printf(<span class="string">&quot;%*creturn result;\n&quot;</span>, <span class="number">2</span>, <span class="string">' '</span>);
    printf(<span class="string">&quot;}\n&quot;</span>);
}

<span class="keyword">void</span> Generate1(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> size)
{
    printf(<span class="string">&quot;int find1(const char* text)\n&quot;</span>);
    printf(<span class="string">&quot;{\n&quot;</span>);
    <span class="keyword">int</span> count = <span class="number">0</span>;
    printf(<span class="string">&quot;%*cint result = -1;\n&quot;</span>, <span class="number">2</span>, <span class="string">' '</span>);
    GenerateCore1(keywords, <span class="number">0</span>, size - <span class="number">1</span>, <span class="number">0</span>, &amp;count);
    printf(<span class="string">&quot;%*creturn result;\n&quot;</span>, <span class="number">2</span>, <span class="string">' '</span>);
    printf(<span class="string">&quot;}\n&quot;</span>);
}


<span class="keyword">int</span> find(<span class="keyword">const</span> <span class="keyword">char</span>* text)
{
    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">switch</span> (text[<span class="number">0</span>])
    {
    <span class="keyword">case</span> <span class="string">'a'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*alignof*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'g'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'f'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'\0'</span>) result = <span class="number">0</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">/*auto*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">1</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'b'</span>: <span class="comment">/*break*/</span> <span class="keyword">if</span> (text[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">2</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'k'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">2</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'c'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'a'</span>: <span class="comment">/*case*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'s'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">3</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">/*char*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">4</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'n'</span>:
                <span class="keyword">switch</span> (text[<span class="number">3</span>])
                {
                <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*const*/</span> <span class="keyword">if</span> (text[<span class="number">4</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">5</span>; <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*continue*/</span> <span class="keyword">if</span> (text[<span class="number">4</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'u'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">6</span>; <span class="keyword">break</span>;
                <span class="keyword">default</span>: <span class="keyword">break</span>;
                }
                <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'d'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'e'</span>: <span class="comment">/*default*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'f'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'u'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'\0'</span>) result = <span class="number">7</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">' '</span>: <span class="comment">/*do*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'\0'</span>) result = <span class="number">8</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">/*double*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'b'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">9</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'e'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*else*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'s'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">10</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'n'</span>: <span class="comment">/*enum*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'m'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">11</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'x'</span>: <span class="comment">/*extern*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">12</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'f'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*float*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">13</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>: <span class="comment">/*for*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'\0'</span>) result = <span class="number">14</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*goto*/</span> <span class="keyword">if</span> (text[<span class="number">1</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">2</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">15</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'i'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'f'</span>: <span class="comment">/*if*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'\0'</span>) result = <span class="number">16</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'n'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*inline*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">17</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*int*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'\0'</span>) result = <span class="number">18</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*long*/</span> <span class="keyword">if</span> (text[<span class="number">1</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">2</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'g'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">19</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'r'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'e'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*register*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'s'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">20</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*restrict*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">21</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*return*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'u'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">22</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'s'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">/*short*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">23</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'i'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*signed*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'d'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">24</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'z'</span>: <span class="comment">/*sizeof*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'f'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">25</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'t'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'a'</span>: <span class="comment">/*static*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">26</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'r'</span>: <span class="comment">/*struct*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'u'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">27</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'w'</span>: <span class="comment">/*switch*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'h'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'\0'</span>) result = <span class="number">28</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*typedef*/</span> <span class="keyword">if</span> (text[<span class="number">1</span>] == <span class="string">'y'</span> &amp;&amp; text[<span class="number">2</span>] == <span class="string">'p'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'d'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'f'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'\0'</span>) result = <span class="number">29</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'u'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'n'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'i'</span>: <span class="comment">/*union*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">30</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*unsigned*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'g'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'d'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">31</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'v'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'i'</span>: <span class="comment">/*void*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'d'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'\0'</span>) result = <span class="number">32</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*volatile*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">33</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'w'</span>: <span class="comment">/*while*/</span> <span class="keyword">if</span> (text[<span class="number">1</span>] == <span class="string">'h'</span> &amp;&amp; text[<span class="number">2</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">34</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'_'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'A'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*_Alignas*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'g'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'s'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">35</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*_Atomic*/</span> <span class="keyword">if</span> (text[<span class="number">3</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'m'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'\0'</span>) result = <span class="number">36</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'B'</span>: <span class="comment">/*_Bool*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'\0'</span>) result = <span class="number">37</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'C'</span>: <span class="comment">/*_Complex*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'m'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'p'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'x'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">38</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'G'</span>: <span class="comment">/*_Generic*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'\0'</span>) result = <span class="number">39</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'I'</span>: <span class="comment">/*_Imaginary*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'m'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'g'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">9</span>] == <span class="string">'y'</span> &amp;&amp; text[<span class="number">10</span>] == <span class="string">'\0'</span>) result = <span class="number">40</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'N'</span>: <span class="comment">/*_Noreturn*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'u'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'n'</span> &amp;&amp; text[<span class="number">9</span>] == <span class="string">'\0'</span>) result = <span class="number">41</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'S'</span>: <span class="comment">/*_Static_assert*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'i'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'_'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">9</span>] == <span class="string">'s'</span> &amp;&amp; text[<span class="number">10</span>] == <span class="string">'s'</span> &amp;&amp; text[<span class="number">11</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">12</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">13</span>] == <span class="string">'t'</span> &amp;&amp; text[<span class="number">14</span>] == <span class="string">'\0'</span>) result = <span class="number">42</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'T'</span>: <span class="comment">/*_Thread_local*/</span> <span class="keyword">if</span> (text[<span class="number">2</span>] == <span class="string">'h'</span> &amp;&amp; text[<span class="number">3</span>] == <span class="string">'r'</span> &amp;&amp; text[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; text[<span class="number">5</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">6</span>] == <span class="string">'d'</span> &amp;&amp; text[<span class="number">7</span>] == <span class="string">'_'</span> &amp;&amp; text[<span class="number">8</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">9</span>] == <span class="string">'o'</span> &amp;&amp; text[<span class="number">10</span>] == <span class="string">'c'</span> &amp;&amp; text[<span class="number">11</span>] == <span class="string">'a'</span> &amp;&amp; text[<span class="number">12</span>] == <span class="string">'l'</span> &amp;&amp; text[<span class="number">13</span>] == <span class="string">'\0'</span>) result = <span class="number">43</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">default</span>: <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> result;
}


<span class="keyword">int</span> find2(<span class="keyword">const</span> <span class="keyword">char</span>* text)
{

    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">switch</span> (text[<span class="number">0</span>])
    {
    <span class="keyword">case</span> <span class="string">'a'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;alignof&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">0</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;auto&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">1</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'b'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;break&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">2</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'c'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;case&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">3</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;char&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">4</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;const&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">5</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;continue&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">6</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'d'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;default&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">7</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;do&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">8</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;double&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">9</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'e'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;else&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">10</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;enum&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">11</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;extern&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">12</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'f'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;float&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">13</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;for&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">14</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'g'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;goto&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">15</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'i'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;if&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">16</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;inline&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">17</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;int&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">18</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'l'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;long&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">19</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'r'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;register&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">20</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;restrict&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">21</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;return&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">22</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'s'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;short&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">23</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;signed&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">24</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;sizeof&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">25</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;static&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">26</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;struct&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">27</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;switch&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">28</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'t'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;typedef&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">29</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'u'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;union&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">30</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;unsigned&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">31</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'v'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;void&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">32</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;volatile&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">33</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'w'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;while&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">34</span>;
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'_'</span>:
        <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Alignas&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">35</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Atomic&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">36</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Bool&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">37</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Complex&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">38</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Generic&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">39</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Imaginary&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">40</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Noreturn&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">41</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Static_assert&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">42</span>;
        <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(<span class="string">&quot;_Thread_local&quot;</span>, text) == <span class="number">0</span>) result = <span class="number">43</span>;
        <span class="keyword">break</span>;
    <span class="keyword">default</span>: <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> result;
}

<span class="comment">//#define GENERATE 1
</span>
<span class="keyword">int</span> linear_search_str(<span class="keyword">const</span> <span class="keyword">char</span>* sorted_array[],
    <span class="keyword">int</span> n_elements,
    <span class="keyword">const</span> <span class="keyword">char</span>* searchItem)
{
    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_elements; i++)
    {
        <span class="keyword">if</span> (strcmp(sorted_array[i], searchItem) == <span class="number">0</span>)
        {
            result = i;
            <span class="keyword">break</span>;
        }
    }
    <span class="keyword">return</span> result;
}

<span class="keyword">int</span> binary_search_str(<span class="keyword">const</span> <span class="keyword">char</span>* sorted_array[],
    <span class="keyword">int</span> n_elements,
    <span class="keyword">const</span> <span class="keyword">char</span>* searchItem)
{
    <span class="keyword">int</span> mid;
    <span class="keyword">int</span> c = <span class="number">0</span>;
    <span class="keyword">int</span> l = <span class="number">0</span>;
    <span class="keyword">int</span> u = n_elements - <span class="number">1</span>;

    <span class="keyword">while</span> (l &lt;= u)
    {
        mid = (l + u) / <span class="number">2</span>;

        <span class="keyword">int</span> cmp = strcmp(searchItem, sorted_array[mid]);

        <span class="keyword">if</span> (cmp == <span class="number">0</span>)
        {
            c = <span class="number">1</span>;
            <span class="keyword">break</span>;
        }
        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)
        {
            u = mid - <span class="number">1</span>;
        }
        <span class="keyword">else</span>
        {
            l = mid + <span class="number">1</span>;
        }
    }

    <span class="keyword">return</span> c == <span class="number">0</span> ? <span class="number">-1</span> : mid;
}


<span class="keyword">void</span> Generate3(<span class="keyword">const</span> <span class="keyword">char</span>* keywords[], <span class="keyword">int</span> size)
{
    printf(<span class="string">&quot;int find3(const char* text)\n&quot;</span>);
    printf(<span class="string">&quot;{\n&quot;</span>);

    printf(<span class="string">&quot;int result = -1;\n&quot;</span>
        <span class="string">&quot;unsigned u = 0; \n&quot;</span>
        <span class="string">&quot;for (int j = 0; j &lt; 4 &amp;&amp; text[j]; j++)\n&quot;</span>
        <span class="string">&quot;{\n&quot;</span>
        <span class="string">&quot;  u |= ((unsigned)text[j]) &lt;&lt; (j * 8); \n&quot;</span>
        <span class="string">&quot;}\n&quot;</span>);


    printf(<span class="string">&quot;  switch (u)\n&quot;</span>);
    printf(<span class="string">&quot;  {\n&quot;</span>);


    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)
    {
        <span class="keyword">unsigned</span> u = <span class="number">0</span>;
        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> &amp;&amp; keywords[i][j]; j++)
        {
            u |= ((<span class="keyword">unsigned</span>)keywords[i][j]) &lt;&lt; (j * <span class="number">8</span>);
        }

        printf(<span class="string">&quot;case 0x%04x: /*%s*/result = %d; break;\n&quot;</span>, u % size, keywords[i], i);
    }
    printf(<span class="string">&quot;  }\n&quot;</span>);
    printf(<span class="string">&quot;  return result;\n&quot;</span>);
    printf(<span class="string">&quot;}\n&quot;</span>);
}



<span class="keyword">int</span> find3(<span class="keyword">const</span> <span class="keyword">char</span>* text)
{
    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">unsigned</span> u = <span class="number">0</span>;
    
    <span class="keyword">if</span> (text[<span class="number">0</span>])
     u |= ((<span class="keyword">unsigned</span>)text[<span class="number">0</span>]) &lt;&lt; (<span class="number">0</span>);
    
    <span class="keyword">if</span> (text[<span class="number">1</span>])
        u |= ((<span class="keyword">unsigned</span>)text[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>;

    <span class="keyword">if</span> (text[<span class="number">2</span>])
        u |= ((<span class="keyword">unsigned</span>)text[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>;

    <span class="keyword">if</span> (text[<span class="number">3</span>])
        u |= ((<span class="keyword">unsigned</span>)text[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>;


    <span class="keyword">switch</span> (u)
    {
    <span class="keyword">case</span> <span class="number">0</span>x67696c<span class="number">61</span>: <span class="comment">/*alignof*/</span>result = <span class="number">0</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6f<span class="number">747561</span>: <span class="comment">/*auto*/</span>result = <span class="number">1</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x61657262: <span class="comment">/*break*/</span>result = <span class="number">2</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x65736163: <span class="comment">/*case*/</span>result = <span class="number">3</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x72616863: <span class="comment">/*char*/</span>result = <span class="number">4</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x736e<span class="number">6</span>f63: <span class="comment">/*const*/</span>result = <span class="number">5</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x746e<span class="number">6</span>f63: <span class="comment">/*continue*/</span>result = <span class="number">6</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x61666564: <span class="comment">/*default*/</span>result = <span class="number">7</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6f<span class="number">64</span>: <span class="comment">/*do*/</span>result = <span class="number">8</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x62756f<span class="number">64</span>: <span class="comment">/*double*/</span>result = <span class="number">9</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x65736c<span class="number">65</span>: <span class="comment">/*else*/</span>result = <span class="number">10</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6d<span class="number">756e6</span><span class="number">5</span>: <span class="comment">/*enum*/</span>result = <span class="number">11</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x65747865: <span class="comment">/*extern*/</span>result = <span class="number">12</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x616f<span class="number">6</span>c66: <span class="comment">/*float*/</span>result = <span class="number">13</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x726f<span class="number">66</span>: <span class="comment">/*for*/</span>result = <span class="number">14</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6f<span class="number">746</span>f67: <span class="comment">/*goto*/</span>result = <span class="number">15</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6669: <span class="comment">/*if*/</span>result = <span class="number">16</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x696c<span class="number">6e6</span><span class="number">9</span>: <span class="comment">/*inline*/</span>result = <span class="number">17</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x746e<span class="number">69</span>: <span class="comment">/*int*/</span>result = <span class="number">18</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x676e<span class="number">6</span>f6c: <span class="comment">/*long*/</span>result = <span class="number">19</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x69676572: <span class="comment">/*register*/</span>result = <span class="number">20</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x74736572: <span class="comment">/*restrict*/</span>result = <span class="number">21</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x75746572: <span class="comment">/*return*/</span>result = <span class="number">22</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x726f<span class="number">6873</span>: <span class="comment">/*short*/</span>result = <span class="number">23</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6e<span class="number">676973</span>: <span class="comment">/*signed*/</span>result = <span class="number">24</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x657a<span class="number">6973</span>: <span class="comment">/*sizeof*/</span>result = <span class="number">25</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x74617473: <span class="comment">/*static*/</span>result = <span class="number">26</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x75727473: <span class="comment">/*struct*/</span>result = <span class="number">27</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x74697773: <span class="comment">/*switch*/</span>result = <span class="number">28</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x65707974: <span class="comment">/*typedef*/</span>result = <span class="number">29</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6f<span class="number">696e7</span><span class="number">5</span>: <span class="comment">/*union*/</span>result = <span class="number">30</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x69736e<span class="number">75</span>: <span class="comment">/*unsigned*/</span>result = <span class="number">31</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x64696f<span class="number">76</span>: <span class="comment">/*void*/</span>result = <span class="number">32</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x616c<span class="number">6</span>f76: <span class="comment">/*volatile*/</span>result = <span class="number">33</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6c<span class="number">696877</span>: <span class="comment">/*while*/</span>result = <span class="number">34</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x696c<span class="number">415</span>f: <span class="comment">/*_Alignas*/</span>result = <span class="number">35</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6f<span class="number">74415</span>f: <span class="comment">/*_Atomic*/</span>result = <span class="number">36</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6f<span class="number">6</span>f425f: <span class="comment">/*_Bool*/</span>result = <span class="number">37</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6d<span class="number">6</span>f435f: <span class="comment">/*_Complex*/</span>result = <span class="number">38</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6e<span class="number">65475</span>f: <span class="comment">/*_Generic*/</span>result = <span class="number">39</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x616d<span class="number">495</span>f: <span class="comment">/*_Imaginary*/</span>result = <span class="number">40</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x726f<span class="number">4e5</span>f: <span class="comment">/*_Noreturn*/</span>result = <span class="number">41</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x6174535f: <span class="comment">/*_Static_assert*/</span>result = <span class="number">42</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">0</span>x7268545f: <span class="comment">/*_Thread_local*/</span>result = <span class="number">43</span>; <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> result;
}

<span class="keyword">int</span> find1(<span class="keyword">const</span> <span class="keyword">char</span>* text)
{
    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">switch</span> (text[<span class="number">0</span>])
    {
    <span class="keyword">case</span> <span class="string">'a'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*alignof*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;alignof&quot;</span>) == <span class="number">0</span>) result = <span class="number">0</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">/*auto*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;auto&quot;</span>) == <span class="number">0</span>) result = <span class="number">1</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'b'</span>: <span class="comment">/*break*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;break&quot;</span>) == <span class="number">0</span>) result = <span class="number">2</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'c'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'a'</span>: <span class="comment">/*case*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;case&quot;</span>) == <span class="number">0</span>) result = <span class="number">3</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">/*char*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;char&quot;</span>) == <span class="number">0</span>) result = <span class="number">4</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'n'</span>:
                <span class="keyword">switch</span> (text[<span class="number">3</span>])
                {
                <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*const*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;const&quot;</span>) == <span class="number">0</span>) result = <span class="number">5</span>; <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*continue*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;continue&quot;</span>) == <span class="number">0</span>) result = <span class="number">6</span>; <span class="keyword">break</span>;
                <span class="keyword">default</span>: <span class="keyword">break</span>;
                }
                <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'d'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'e'</span>: <span class="comment">/*default*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;default&quot;</span>) == <span class="number">0</span>) result = <span class="number">7</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">' '</span>: <span class="comment">/*do*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;do&quot;</span>) == <span class="number">0</span>) result = <span class="number">8</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">/*double*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;double&quot;</span>) == <span class="number">0</span>) result = <span class="number">9</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'e'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*else*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;else&quot;</span>) == <span class="number">0</span>) result = <span class="number">10</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'n'</span>: <span class="comment">/*enum*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;enum&quot;</span>) == <span class="number">0</span>) result = <span class="number">11</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'x'</span>: <span class="comment">/*extern*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;extern&quot;</span>) == <span class="number">0</span>) result = <span class="number">12</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'f'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*float*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;float&quot;</span>) == <span class="number">0</span>) result = <span class="number">13</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>: <span class="comment">/*for*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;for&quot;</span>) == <span class="number">0</span>) result = <span class="number">14</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*goto*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;goto&quot;</span>) == <span class="number">0</span>) result = <span class="number">15</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'i'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'f'</span>: <span class="comment">/*if*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;if&quot;</span>) == <span class="number">0</span>) result = <span class="number">16</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'n'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*inline*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;inline&quot;</span>) == <span class="number">0</span>) result = <span class="number">17</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*int*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;int&quot;</span>) == <span class="number">0</span>) result = <span class="number">18</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*long*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;long&quot;</span>) == <span class="number">0</span>) result = <span class="number">19</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'r'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'e'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*register*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;register&quot;</span>) == <span class="number">0</span>) result = <span class="number">20</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*restrict*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;restrict&quot;</span>) == <span class="number">0</span>) result = <span class="number">21</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*return*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;return&quot;</span>) == <span class="number">0</span>) result = <span class="number">22</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'s'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">/*short*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;short&quot;</span>) == <span class="number">0</span>) result = <span class="number">23</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'i'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*signed*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;signed&quot;</span>) == <span class="number">0</span>) result = <span class="number">24</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'z'</span>: <span class="comment">/*sizeof*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;sizeof&quot;</span>) == <span class="number">0</span>) result = <span class="number">25</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'t'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'a'</span>: <span class="comment">/*static*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;static&quot;</span>) == <span class="number">0</span>) result = <span class="number">26</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'r'</span>: <span class="comment">/*struct*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;struct&quot;</span>) == <span class="number">0</span>) result = <span class="number">27</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'w'</span>: <span class="comment">/*switch*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;switch&quot;</span>) == <span class="number">0</span>) result = <span class="number">28</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*typedef*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;typedef&quot;</span>) == <span class="number">0</span>) result = <span class="number">29</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'u'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'n'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'i'</span>: <span class="comment">/*union*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;union&quot;</span>) == <span class="number">0</span>) result = <span class="number">30</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*unsigned*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;unsigned&quot;</span>) == <span class="number">0</span>) result = <span class="number">31</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'v'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'i'</span>: <span class="comment">/*void*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;void&quot;</span>) == <span class="number">0</span>) result = <span class="number">32</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*volatile*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;volatile&quot;</span>) == <span class="number">0</span>) result = <span class="number">33</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'w'</span>: <span class="comment">/*while*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;while&quot;</span>) == <span class="number">0</span>) result = <span class="number">34</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'_'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'A'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*_Alignas*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Alignas&quot;</span>) == <span class="number">0</span>) result = <span class="number">35</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*_Atomic*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Atomic&quot;</span>) == <span class="number">0</span>) result = <span class="number">36</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'B'</span>: <span class="comment">/*_Bool*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Bool&quot;</span>) == <span class="number">0</span>) result = <span class="number">37</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'C'</span>: <span class="comment">/*_Complex*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Complex&quot;</span>) == <span class="number">0</span>) result = <span class="number">38</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'G'</span>: <span class="comment">/*_Generic*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Generic&quot;</span>) == <span class="number">0</span>) result = <span class="number">39</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'I'</span>: <span class="comment">/*_Imaginary*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Imaginary&quot;</span>) == <span class="number">0</span>) result = <span class="number">40</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'N'</span>: <span class="comment">/*_Noreturn*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Noreturn&quot;</span>) == <span class="number">0</span>) result = <span class="number">41</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'S'</span>: <span class="comment">/*_Static_assert*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Static_assert&quot;</span>) == <span class="number">0</span>) result = <span class="number">42</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'T'</span>: <span class="comment">/*_Thread_local*/</span> <span class="keyword">if</span> (strcmp(text, <span class="string">&quot;_Thread_local&quot;</span>) == <span class="number">0</span>) result = <span class="number">43</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">default</span>: <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> result;
}

<span class="keyword">int</span> find10(<span class="keyword">const</span> <span class="keyword">char</span>* text)
{
    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">switch</span> (text[<span class="number">0</span>])
    {
    <span class="keyword">case</span> <span class="string">'a'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*alignof*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;ignof&quot;</span>) == <span class="number">0</span>) result = <span class="number">0</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">/*auto*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;to&quot;</span>) == <span class="number">0</span>) result = <span class="number">1</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'b'</span>: <span class="comment">/*break*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">1</span>], <span class="string">&quot;reak&quot;</span>) == <span class="number">0</span>) result = <span class="number">2</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'c'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'a'</span>: <span class="comment">/*case*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;se&quot;</span>) == <span class="number">0</span>) result = <span class="number">3</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">/*char*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;ar&quot;</span>) == <span class="number">0</span>) result = <span class="number">4</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'n'</span>:
                <span class="keyword">switch</span> (text[<span class="number">3</span>])
                {
                <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*const*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">4</span>], <span class="string">&quot;t&quot;</span>) == <span class="number">0</span>) result = <span class="number">5</span>; <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*continue*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">4</span>], <span class="string">&quot;inue&quot;</span>) == <span class="number">0</span>) result = <span class="number">6</span>; <span class="keyword">break</span>;
                <span class="keyword">default</span>: <span class="keyword">break</span>;
                }
                <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'d'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'e'</span>: <span class="comment">/*default*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;fault&quot;</span>) == <span class="number">0</span>) result = <span class="number">7</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">' '</span>: <span class="comment">/*do*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;&quot;</span>) == <span class="number">0</span>) result = <span class="number">8</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">/*double*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;ble&quot;</span>) == <span class="number">0</span>) result = <span class="number">9</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'e'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*else*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;se&quot;</span>) == <span class="number">0</span>) result = <span class="number">10</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'n'</span>: <span class="comment">/*enum*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;um&quot;</span>) == <span class="number">0</span>) result = <span class="number">11</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'x'</span>: <span class="comment">/*extern*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;tern&quot;</span>) == <span class="number">0</span>) result = <span class="number">12</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'f'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*float*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;oat&quot;</span>) == <span class="number">0</span>) result = <span class="number">13</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'o'</span>: <span class="comment">/*for*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>) result = <span class="number">14</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*goto*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">1</span>], <span class="string">&quot;oto&quot;</span>) == <span class="number">0</span>) result = <span class="number">15</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'i'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'f'</span>: <span class="comment">/*if*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;&quot;</span>) == <span class="number">0</span>) result = <span class="number">16</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'n'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*inline*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;ine&quot;</span>) == <span class="number">0</span>) result = <span class="number">17</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*int*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;&quot;</span>) == <span class="number">0</span>) result = <span class="number">18</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*long*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">1</span>], <span class="string">&quot;ong&quot;</span>) == <span class="number">0</span>) result = <span class="number">19</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'r'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'e'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*register*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;ister&quot;</span>) == <span class="number">0</span>) result = <span class="number">20</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*restrict*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;trict&quot;</span>) == <span class="number">0</span>) result = <span class="number">21</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*return*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;urn&quot;</span>) == <span class="number">0</span>) result = <span class="number">22</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'s'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'h'</span>: <span class="comment">/*short*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;ort&quot;</span>) == <span class="number">0</span>) result = <span class="number">23</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'i'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'g'</span>: <span class="comment">/*signed*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;ned&quot;</span>) == <span class="number">0</span>) result = <span class="number">24</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'z'</span>: <span class="comment">/*sizeof*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;eof&quot;</span>) == <span class="number">0</span>) result = <span class="number">25</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'t'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'a'</span>: <span class="comment">/*static*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;tic&quot;</span>) == <span class="number">0</span>) result = <span class="number">26</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'r'</span>: <span class="comment">/*struct*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;uct&quot;</span>) == <span class="number">0</span>) result = <span class="number">27</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'w'</span>: <span class="comment">/*switch*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;itch&quot;</span>) == <span class="number">0</span>) result = <span class="number">28</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*typedef*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">1</span>], <span class="string">&quot;ypedef&quot;</span>) == <span class="number">0</span>) result = <span class="number">29</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'u'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'n'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'i'</span>: <span class="comment">/*union*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;on&quot;</span>) == <span class="number">0</span>) result = <span class="number">30</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'s'</span>: <span class="comment">/*unsigned*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;igned&quot;</span>) == <span class="number">0</span>) result = <span class="number">31</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'v'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'o'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'i'</span>: <span class="comment">/*void*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;d&quot;</span>) == <span class="number">0</span>) result = <span class="number">32</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*volatile*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;atile&quot;</span>) == <span class="number">0</span>) result = <span class="number">33</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'w'</span>: <span class="comment">/*while*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">1</span>], <span class="string">&quot;hile&quot;</span>) == <span class="number">0</span>) result = <span class="number">34</span>; <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'_'</span>:
        <span class="keyword">switch</span> (text[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="string">'A'</span>:
            <span class="keyword">switch</span> (text[<span class="number">2</span>])
            {
            <span class="keyword">case</span> <span class="string">'l'</span>: <span class="comment">/*_Alignas*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;ignas&quot;</span>) == <span class="number">0</span>) result = <span class="number">35</span>; <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">/*_Atomic*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">3</span>], <span class="string">&quot;omic&quot;</span>) == <span class="number">0</span>) result = <span class="number">36</span>; <span class="keyword">break</span>;
            <span class="keyword">default</span>: <span class="keyword">break</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'B'</span>: <span class="comment">/*_Bool*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;ool&quot;</span>) == <span class="number">0</span>) result = <span class="number">37</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'C'</span>: <span class="comment">/*_Complex*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;omplex&quot;</span>) == <span class="number">0</span>) result = <span class="number">38</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'G'</span>: <span class="comment">/*_Generic*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;eneric&quot;</span>) == <span class="number">0</span>) result = <span class="number">39</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'I'</span>: <span class="comment">/*_Imaginary*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;maginary&quot;</span>) == <span class="number">0</span>) result = <span class="number">40</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'N'</span>: <span class="comment">/*_Noreturn*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;oreturn&quot;</span>) == <span class="number">0</span>) result = <span class="number">41</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'S'</span>: <span class="comment">/*_Static_assert*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;tatic_assert&quot;</span>) == <span class="number">0</span>) result = <span class="number">42</span>; <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'T'</span>: <span class="comment">/*_Thread_local*/</span> <span class="keyword">if</span> (strcmp(&amp;text[<span class="number">2</span>], <span class="string">&quot;hread_local&quot;</span>) == <span class="number">0</span>) result = <span class="number">43</span>; <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">default</span>: <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> result;
}

<span class="comment">//#include &lt;string.h&gt;
</span><span class="comment">//#include &lt;stdio.h&gt;
</span>
<span class="keyword">unsigned</span> hash(<span class="keyword">unsigned</span> d, <span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">int</span> str_length) {
    <span class="keyword">if</span> (d == <span class="number">0</span>) { d = <span class="number">0</span>x811c<span class="number">9</span>dc5; }
    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; str_length; i++) {
        <span class="comment">// http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
</span>        <span class="comment">// http://isthe.com/chongo/src/fnv/hash_32.c
</span>        <span class="comment">// multiply by the 32 bit FNV magic prime mod 2^32
</span>        d += (d &lt;&lt; <span class="number">1</span>) + (d &lt;&lt; <span class="number">4</span>) + (d &lt;&lt; <span class="number">7</span>) + (d &lt;&lt; <span class="number">8</span>) + (d &lt;&lt; <span class="number">24</span>);
        <span class="comment">// xor the bottom with the current octet
</span>        d ^= str[i];
    }
    <span class="keyword">return</span> d &amp; <span class="number">0</span>x7fffffff;
}

<span class="keyword">unsigned</span> lookup(<span class="keyword">int</span> G[], <span class="keyword">int</span> G_length, <span class="keyword">int</span> V[], <span class="keyword">int</span> V_length, <span class="keyword">const</span> <span class="keyword">char</span>* key)
{
    <span class="keyword">unsigned</span> d = G[hash(<span class="number">0</span>, key, strlen(key)) % G_length];
    <span class="keyword">if</span> (d &lt; <span class="number">0</span>) <span class="keyword">return</span> V[<span class="number">0</span> - d - <span class="number">1</span>];
    <span class="keyword">return</span> V[hash(d, key, strlen(key)) % V_length];
};

<span class="keyword">#define</span> undefined <span class="number">0</span>xFFFFFFFF

<span class="keyword">int</span> findhash(<span class="keyword">const</span> <span class="keyword">char</span>* keyword)
{
    <span class="keyword">int</span> G[] =
    {
     undefined, undefined, <span class="number">-44</span>, <span class="number">-42</span>, <span class="number">9</span>, <span class="number">-39</span>, <span class="number">-38</span>, <span class="number">-34</span>,
     undefined, <span class="number">1</span>, <span class="number">-27</span>, undefined, <span class="number">-25</span>, <span class="number">1</span>, <span class="number">-23</span>, undefined,
     undefined, <span class="number">-13</span>, undefined, <span class="number">2</span>, undefined, undefined,
     <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, undefined, <span class="number">1</span>, <span class="number">-9</span>, <span class="number">-6</span>, <span class="number">-3</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">-10</span>, <span class="number">3</span>, <span class="number">-16</span>,
     <span class="number">-20</span>, <span class="number">-26</span>, undefined, <span class="number">-30</span>, undefined, <span class="number">1</span>, undefined,
     undefined, <span class="number">1</span>
    };

    <span class="keyword">int</span> G_length = <span class="keyword">sizeof</span>(G) / <span class="keyword">sizeof</span>(G[<span class="number">0</span>]);

    <span class="keyword">int</span> V[] = {
    <span class="number">19</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">42</span>, <span class="number">27</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">11</span>,
    <span class="number">37</span>, <span class="number">26</span>, <span class="number">25</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">38</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">36</span>, <span class="number">44</span>,
    <span class="number">22</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">41</span>, <span class="number">31</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">4</span>,
    <span class="number">8</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">43</span>, <span class="number">40</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">34</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">28</span>, <span class="number">18</span>
    };
    <span class="keyword">int</span> V_length = <span class="keyword">sizeof</span>(V) / <span class="keyword">sizeof</span>(V[<span class="number">0</span>]);

    <span class="keyword">unsigned</span> r = lookup(G, G_length, V, V_length, keyword);

    <span class="comment">//printf(&quot;%d&quot;, r);
</span>    <span class="keyword">return</span> r;
}
<span class="keyword">int</span> Day(<span class="keyword">const</span> <span class="keyword">char</span>* key)
{
    <span class="keyword">int</span> result = <span class="number">-1</span>;
    <span class="keyword">switch</span> (key[<span class="number">0</span>])
    {
    <span class="keyword">case</span> <span class="comment">/*Friday*/</span> <span class="string">'F'</span>:
        <span class="keyword">if</span> (key[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; key[<span class="number">2</span>] == <span class="string">'i'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'\0'</span>) {
            result = <span class="number">0</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="comment">/*Monday*/</span> <span class="string">'M'</span>:
        <span class="keyword">if</span> (key[<span class="number">1</span>] == <span class="string">'o'</span> &amp;&amp; key[<span class="number">2</span>] == <span class="string">'n'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'\0'</span>) {
            result = <span class="number">1</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'S'</span>:
        <span class="keyword">switch</span> (key[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="comment">/*Saturday*/</span> <span class="string">'a'</span>:
            <span class="keyword">if</span> (key[<span class="number">2</span>] == <span class="string">'t'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'u'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'r'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">7</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">8</span>] == <span class="string">'\0'</span>) {
                result = <span class="number">2</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="comment">/*Sunday*/</span> <span class="string">'u'</span>:
            <span class="keyword">if</span> (key[<span class="number">2</span>] == <span class="string">'n'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'\0'</span>) {
                result = <span class="number">3</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="string">'T'</span>:
        <span class="keyword">switch</span> (key[<span class="number">1</span>])
        {
        <span class="keyword">case</span> <span class="comment">/*Thursday*/</span> <span class="string">'h'</span>:
            <span class="keyword">if</span> (key[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'r'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'s'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">7</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">8</span>] == <span class="string">'\0'</span>) {
                result = <span class="number">4</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="comment">/*Tuesday*/</span> <span class="string">'u'</span>:
            <span class="keyword">if</span> (key[<span class="number">2</span>] == <span class="string">'e'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">7</span>] == <span class="string">'\0'</span>) {
                result = <span class="number">5</span>;
            }
            <span class="keyword">break</span>;
        <span class="keyword">default</span>: <span class="keyword">break</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="comment">/*Wednesday*/</span> <span class="string">'W'</span>:
        <span class="keyword">if</span> (key[<span class="number">1</span>] == <span class="string">'e'</span> &amp;&amp; key[<span class="number">2</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">3</span>] == <span class="string">'n'</span> &amp;&amp; key[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; key[<span class="number">5</span>] == <span class="string">'s'</span> &amp;&amp; key[<span class="number">6</span>] == <span class="string">'d'</span> &amp;&amp; key[<span class="number">7</span>] == <span class="string">'a'</span> &amp;&amp; key[<span class="number">8</span>] == <span class="string">'y'</span> &amp;&amp; key[<span class="number">9</span>] == <span class="string">'\0'</span>) {
            result = <span class="number">6</span>;
        }
        <span class="keyword">break</span>;
    <span class="keyword">default</span>: <span class="keyword">break</span>;
    }
    <span class="keyword">return</span> result;
}


<span class="comment">//#define NITER 2147483647
</span><span class="keyword">#define</span> NITER (<span class="number">2147483646</span>)
<span class="keyword">int</span> main()
{
    
    

    <span class="keyword">const</span> <span class="keyword">char</span>* keywords[] = {
    <span class="string">&quot;alignof&quot;</span>, <span class="string">&quot;auto&quot;</span>, <span class="string">&quot;break&quot;</span>, <span class="string">&quot;case&quot;</span>,	<span class="string">&quot;char&quot;</span>, <span class="string">&quot;const&quot;</span>,
        <span class="string">&quot;continue&quot;</span>,	<span class="string">&quot;default&quot;</span>,		<span class="string">&quot;do&quot;</span>, <span class="string">&quot;double&quot;</span>,	<span class="string">&quot;else&quot;</span>,
        <span class="string">&quot;enum&quot;</span>,	<span class="string">&quot;extern&quot;</span>, <span class="string">&quot;float&quot;</span>, <span class="string">&quot;for&quot;</span>,
        <span class="string">&quot;goto&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;inline&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;long&quot;</span>,
        <span class="string">&quot;register&quot;</span>, <span class="string">&quot;restrict&quot;</span>, <span class="string">&quot;return&quot;</span>, <span class="string">&quot;short&quot;</span>,
        <span class="string">&quot;signed&quot;</span>, <span class="string">&quot;sizeof&quot;</span>, <span class="string">&quot;static&quot;</span>, <span class="string">&quot;struct&quot;</span>,
        <span class="string">&quot;switch&quot;</span>, <span class="string">&quot;typedef&quot;</span>, <span class="string">&quot;union&quot;</span>, <span class="string">&quot;unsigned&quot;</span>,
        <span class="string">&quot;void&quot;</span>, <span class="string">&quot;volatile&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;_Alignas&quot;</span>,
        <span class="string">&quot;_Atomic&quot;</span>, <span class="string">&quot;_Bool&quot;</span>, <span class="string">&quot;_Complex&quot;</span>, <span class="string">&quot;_Generic&quot;</span>,
        <span class="string">&quot;_Imaginary&quot;</span>, <span class="string">&quot;_Noreturn&quot;</span>, <span class="string">&quot;_Static_assert&quot;</span>, <span class="string">&quot;_Thread_local&quot;</span> };

    <span class="comment">//Generate(keywords, sizeof(keywords) / sizeof(keywords[0]));
</span>    <span class="comment">//Generate1(keywords, sizeof(keywords) / sizeof(keywords[0]));
</span>    <span class="comment">//Generate2(keywords, sizeof(keywords) / sizeof(keywords[0]));
</span>    <span class="comment">//Generate3(keywords, sizeof(keywords) / sizeof(keywords[0]));
</span>    <span class="comment">//Generate4(keywords, sizeof(keywords) / sizeof(keywords[0]));
</span>    

    <span class="keyword">char</span> search[<span class="number">122</span>];<span class="comment">// = &quot;goto&quot;;
</span>    printf(<span class="string">&quot;Enter a C keyword:\n&quot;</span>);
    scanf(<span class="string">&quot;%[^\n]&quot;</span>, search);


    <span class="comment">//find3(search);
</span>    <span class="keyword">struct</span> Stopwatch s = { <span class="number">0</span> };


    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r2 = <span class="number">0</span>;

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r2 = find2(search);
    }

    Stopwatch_Stop(&amp;s);
    printf(<span class="string">&quot;strcmp %d %d\n&quot;</span>, r2, Stopwatch_GetElapsedTicks(&amp;s));

    Stopwatch_Reset(&amp;s);

    
    <span class="comment">//////////////////
</span>
    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r22 = <span class="number">0</span>;

    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r22 = find1(search);
    }

    Stopwatch_Stop(&amp;s);
    printf(<span class="string">&quot;switch + strcmp %d %d\n&quot;</span>, r22, Stopwatch_GetElapsedTicks(&amp;s));
    Stopwatch_Reset(&amp;s);

    
    <span class="comment">//////////////////
</span>
    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r1 = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r1 = find(search);
    }
    Stopwatch_Stop(&amp;s);
    
    printf(<span class="string">&quot;switches %d %d\n&quot;</span>, r1, Stopwatch_GetElapsedTicks(&amp;s));

    Stopwatch_Reset(&amp;s);
    <span class="comment">////////////
</span>    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r3 = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r3 = binary_search_str(keywords, <span class="keyword">sizeof</span>(keywords) / <span class="keyword">sizeof</span>(keywords[<span class="number">0</span>]), search);
    }
    Stopwatch_Stop(&amp;s);
    printf(<span class="string">&quot;Binary Search %d %d\n&quot;</span>, r3, Stopwatch_GetElapsedTicks(&amp;s));

    Stopwatch_Reset(&amp;s);
    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r5 = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r5 = find3(search);
    }
    Stopwatch_Stop(&amp;s);
    printf(<span class="string">&quot;Hash %d %d\n&quot;</span>, r5, Stopwatch_GetElapsedTicks(&amp;s));

    
    <span class="comment">///////////
</span>    Stopwatch_Reset(&amp;s);
    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r6 = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r6 = findhash(search);
    }
    Stopwatch_Stop(&amp;s);
    
    printf(<span class="string">&quot;Haash %d %d\n&quot;</span>, r6, Stopwatch_GetElapsedTicks(&amp;s));
    Stopwatch_Reset(&amp;s);
    <span class="comment">////////////
</span>
    Stopwatch_Start(&amp;s);
    <span class="keyword">int</span> r4 = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NITER; i++)
    {
        r4 = linear_search_str(keywords, <span class="keyword">sizeof</span>(keywords) / <span class="keyword">sizeof</span>(keywords[<span class="number">0</span>]), search);
    }
    Stopwatch_Stop(&amp;s);
    
    printf(<span class="string">&quot;Linear %d %d\n&quot;</span>, r4, Stopwatch_GetElapsedTicks(&amp;s));
    Stopwatch_Reset(&amp;s);

}



</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  