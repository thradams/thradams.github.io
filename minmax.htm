<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h2> Statistics</h2>

<p>Some statistics algorithm</p>

<pre>
<span class="keyword">struct</span> Min
{
  <span class="keyword">double</span> m_v;
<span class="keyword">public</span>:
  Min()
  {
    m_v = (std::numeric_limits&lt;<span class="keyword">double</span>&gt;::max)();
  }
  <span class="keyword">void</span> <span class="keyword">operator</span>() (<span class="keyword">double</span> v)
  {
    <span class="keyword">if</span> (v &lt; m_v)
      m_v = v;
  }
  <span class="keyword">double</span> Minimun() <span class="keyword">const</span> { <span class="keyword">return</span> m_v; }
};

<span class="keyword">struct</span> Max
{
  <span class="keyword">double</span> m_v;
<span class="keyword">public</span>:
  Max()
  {
    m_v = -(std::numeric_limits&lt;<span class="keyword">double</span>&gt;::max)();
  }
  <span class="keyword">void</span> <span class="keyword">operator</span>() (<span class="keyword">double</span> v)
  {
    <span class="keyword">if</span> (v &gt; m_v)
      m_v = v;
  }
  <span class="keyword">double</span> Maximun() <span class="keyword">const</span> { <span class="keyword">return</span> m_v; }
};

<span class="keyword">struct</span> Avg
{
  <span class="keyword">double</span> m_v;
  <span class="keyword">int</span>   m_count;
<span class="keyword">public</span>:
  Avg()
  {
    m_count = <span class="number">0</span>;
    m_v = <span class="number">0</span>;
  }
  <span class="keyword">void</span> <span class="keyword">operator</span>() (<span class="keyword">double</span> v)
  {
    m_v += v;
    ++m_count;
  }
  <span class="keyword">double</span> Average() <span class="keyword">const</span> { <span class="keyword">return</span> m_v / <span class="keyword">double</span>(m_count); }
};

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;
<span class="keyword">struct</span> TBind : <span class="keyword">public</span> T1, <span class="keyword">public</span> T2 {
  <span class="keyword">void</span> <span class="keyword">operator</span>() (<span class="keyword">double</span> v)
  {
    T1::<span class="keyword">operator</span>()(v);
    T2::<span class="keyword">operator</span>()(v);
  }
};

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;
TBind&lt;T1, T2&gt; <span class="keyword">operator</span> &amp;&amp; (<span class="keyword">const</span> T1&amp;, <span class="keyword">const</span> T2&amp;)
{
  <span class="keyword">return</span> TBind&lt;T1, T2&gt;();
}

<span class="keyword">int</span> main()
{
  <span class="keyword">using</span> <span class="keyword">namespace</span> std;
  <span class="keyword2">vector</span>&lt;<span class="keyword">int</span>&gt; v;
  v.push_back(<span class="number">2</span>);
  v.push_back(<span class="number">1</span>);
  v.push_back(<span class="number">3</span>);

  <span class="comment">//auto r = 
</span>  cout &lt;&lt; for_each(v.begin(),
                   v.end(),
                   Min() &amp;&amp; Max() &amp;&amp; Avg()).Minimun();

  <span class="comment">//cout &lt;&lt; r.Maximum();
</span>
}

<span class="comment">//*c++0x*/
</span>
<span class="keyword">int</span> main()
{
  <span class="keyword">using</span> <span class="keyword">namespace</span> std;
  <span class="keyword2">vector</span>&lt;<span class="keyword">int</span>&gt; v;
  v.push_back(<span class="number">2</span>);
  v.push_back(<span class="number">1</span>);
  v.push_back(<span class="number">3</span>);

  <span class="keyword">auto</span> r = for_each(v.begin(),
                   v.end(),
                   Min() &amp;&amp; Max() &amp;&amp; Avg());
  cout &lt;&lt;  r.Minimun() &lt;&lt; endl;
  cout &lt;&lt; r.Maximun() &lt;&lt; endl;
  cout &lt;&lt; r.Average() &lt;&lt; endl;

}
</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  