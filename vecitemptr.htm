
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<p><a href="makecontainer.htm">Make container</a></p>

<pre>


<span class="keyword">#pragma</span> once
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;

<span class="keyword">struct</span> item
{
    <span class="keyword">int</span> index;
    <span class="keyword">int</span> count;
};

<span class="keyword">void</span> item_delete(<span class="keyword">struct</span> item* p) {
    free(p); 
}

<span class="keyword">struct</span> itemptr_array
{
    <span class="keyword">struct</span> item** data;
    <span class="keyword">int</span> size;
    <span class="keyword">int</span> capacity;
};

<span class="keyword">int</span> int_array_reserve(<span class="keyword">struct</span> itemptr_array* p, <span class="keyword">int</span> n)
{
    <span class="keyword">if</span> (n &gt; p-&gt;capacity)
    {
        <span class="keyword">void</span>* pnew = realloc(p-&gt;data, n * <span class="keyword">sizeof</span>(p-&gt;data[<span class="number">0</span>]));
        <span class="keyword">if</span> (pnew)
        {
            p-&gt;data = pnew;
            p-&gt;capacity = n;
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/*out of mem*/</span>
        }
    }
    
    <span class="keyword">return</span> p-&gt;capacity;
}

<span class="keyword">int</span> itemptr_array_push(<span class="keyword">struct</span> itemptr_array* p, <span class="keyword">struct</span> item* pitem)
{
    <span class="keyword">if</span> (p-&gt;size + <span class="number">1</span> &gt; p-&gt;capacity)
    {
        <span class="keyword">int</span> n = p-&gt;capacity * <span class="number">2</span>;
        <span class="keyword">if</span> (n == <span class="number">0</span>)
        {
            n = <span class="number">1</span>;
        }
        <span class="keyword">if</span> (int_array_reserve(p, n) == <span class="number">0</span>)
        {
            item_delete(pitem);
            <span class="keyword">return</span> <span class="number">0</span>;
        }
    }

    p-&gt;data[p-&gt;size] = pitem;    
    p-&gt;size++;

    <span class="keyword">return</span> p-&gt;size;
}

<span class="keyword">void</span> itemptr_array_destroy(<span class="keyword">struct</span> itemptr_array* p)
{
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p-&gt;size; i++)
    {
        item_delete(p-&gt;data[i]);
    }

    free(p-&gt;data);
}


<span class="keyword">#include</span> &lt;stdio.h&gt;

<span class="keyword">int</span> main()
{
    <span class="keyword">struct</span> itemptr_array a = { <span class="number">0</span> };
    itemptr_array_push(&amp;a, calloc(<span class="number">1</span>, <span class="keyword">sizeof</span> (<span class="keyword">struct</span> item)));    
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size; i++)
    {
        printf(<span class="string">&quot;%d %d\n&quot;</span>, a.data[i]-&gt;index, a.data[i]-&gt;count);
    }
    itemptr_array_destroy(&amp;a);
}


</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  