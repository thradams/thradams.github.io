
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p><a href="algorithms.htm">Algorithms</a></p>


<h3>Division</h3>
<p>Divides two numbers.</p>

<hr>
<h3>Declaration</h3>
<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator &gt;
    <span class="keyword">void</span> divide_in_place(LeftIterator left_first,
                         LeftIterator left_last,
                         <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> value);

</pre>

<hr>
<h3>Sample</h3>
<pre>
Input:
    { 4 8 9}
            10
         {3}
            10
Ouput:
    { 1 6 3}
            10
         {3}
            10

</pre>


<hr>

<h3>Sample</h3>
<pre>
 <span class="keyword">using</span> <span class="keyword">namespace</span> std;
 <span class="keyword">int</span> u[] = {<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>, <span class="number">0</span>};
 divide_in_place&lt;<span class="number">10</span>&gt;(std::begin(u), std::end(u), <span class="number">3</span>);
</pre>

<hr>
<h3>Implementation</h3>

<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator &gt;
    <span class="keyword">void</span> divide_in_place(LeftIterator left_first,
                         LeftIterator left_last,
                         <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> value)
    {
        <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span>, <span class="string">&quot;base must be &gt; 1&quot;</span>);
        <span class="comment">//base sanity check
</span>        assert(check_digits&lt;base&gt;(left_first, left_last));

        assert(value != <span class="number">0</span>);
        assert(value &lt; base);

        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> carry = <span class="number">0</span>;
        --left_last;
        <span class="comment">//out_last = out_first + (left_last - left_first);
</span>
        <span class="keyword">for</span> (;;)
        {
            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ui = *left_last;
            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> temp = carry * base + ui;
            *left_last = temp / value;
            carry = temp % value;

            <span class="keyword">if</span> (left_last == left_first)
            {
                <span class="keyword">break</span>;
            }

            --left_last;
        }
    }
</pre>

<hr>
<h3>Declaration</h3>
<pre>
    <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> divide(LeftIterator left_first,
                LeftIterator left_last,
                OutIterator out_first,
                OutIterator out_last,
                <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> value)
</pre>

<hr>
<h3>Sample</h3>
<pre>
Input:
      { 4 8 9}
              10
            {9}
               10
      { 1 1 1}
              10
Output:
      { 4 8 9}
              10
           {9}
              10
      { 0 5 4}
              10
</pre>
<hr>

<h3>Sample</h3>
<pre>
 <span class="keyword">using</span> <span class="keyword">namespace</span> std;
 <span class="keyword">int</span> u[] = {<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>};
 <span class="keyword">int</span> r[] = {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>};
 divide&lt;<span class="number">10</span>&gt;(std::begin(u), std::end(u), std::begin(r), std::end(r), <span class="number">9</span>);
</pre>


<hr>
<h3>Implementation</h3>
<pre>
    <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> divide(LeftIterator left_first,
                LeftIterator left_last,
                OutIterator out_first,
                OutIterator out_last,
                <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> value)
    {
        <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span>, <span class="string">&quot;base must be &gt; 1&quot;</span>);
        <span class="comment">//base sanity check
</span>        assert(check_digits&lt;base&gt;(left_first, left_last));


        assert(value != <span class="number">0</span>);
        assert(value &lt; base);
        assert(out_last - out_first  &gt;=  left_last - left_first);

        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> carry = <span class="number">0</span>;
        --left_last;
        out_last = out_first + (left_last - left_first);

        <span class="keyword">for</span> (;;)
        {
            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ui = *left_last;
            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> temp = carry * base + ui;
            *out_last = temp / value;
            carry = temp % value;

            <span class="keyword">if</span> (left_last == left_first)
            {
                <span class="keyword">break</span>;
            }

            --left_last;
            --out_last;
        }
    }
</pre>

<hr>
<h3>Longdiv</h3>
<h3>Declaration</h3>
<pre>
    <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> longdiv(LeftIterator left_first,
                 LeftIterator left_last,
                 RightIterator right_first,
                 RightIterator right_last,
                 OutIterator out_first,
                 OutIterator out_last)
</pre>

<hr>
<h3>Sample</h3>
<pre>
Input:
    { 0 4 8 9}
              10
      { 0 1 2}
              10
      { 1 1 1}
              10
Output:
    { 2 0 4 5}
              10
      { 0 6 0}
              10
      { 0 4 0}
              10

</pre>
<hr>
<h3>Sample</h3>
<pre>
<span class="keyword">void</span> longdiv_test()
{
 <span class="keyword">using</span> <span class="keyword">namespace</span> std;
 <span class="keyword">int</span> u[] = {<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>, <span class="number">0</span>};
 <span class="keyword">int</span> v[] = {<span class="number">2</span>,<span class="number">1</span>, <span class="number">0</span>};
 <span class="keyword">int</span> r[] = {<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>};

 longdiv&lt;<span class="number">10</span>&gt;(std::begin(u), std::end(u), 
             std::begin(v), std::end(v),
             std::begin(r), std::end(r));
}
</pre>

<hr>
<h3>Implementation</h3>

<pre>

    <span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base, <span class="keyword">class</span> U, <span class="keyword">class</span> V&gt;
    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> trialdigit2(U r,
                                   V d,
                                   size_t k,
                                   size_t m)
    {
        <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span>, <span class="string">&quot;base must be &gt; 1&quot;</span>);
        <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ulong;
        <span class="comment">// r{3} = r[k + m .. k + m - 2]
</span>        <span class="comment">// d{2} = d[m - 1..m-2]
</span>        size_t km = k + m;
        <span class="keyword">double</span> rkm = r[km];
        <span class="keyword">double</span> rkm_1 = r[km - <span class="number">1</span>];
        <span class="keyword">double</span> rkm_2 = r[km - <span class="number">2</span>];
        <span class="keyword">double</span> dm_1 = d[m - <span class="number">1</span>];
        <span class="keyword">double</span> dm_2 = d[m - <span class="number">2</span>];
        <span class="keyword">double</span> r3 = (rkm * base + rkm_1) * base + rkm_2;
        <span class="keyword">double</span> d2 = dm_1 * base + dm_2;
        <span class="keyword">return</span> std::min(r3 / d2, <span class="keyword">double</span>(base - <span class="number">1</span>));
    }

    <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> longdiv(LeftIterator left_first,
                 LeftIterator left_last,
                 RightIterator right_first,
                 RightIterator right_last,
                 OutIterator out_first,
                 OutIterator out_last)
    {
        <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span>, <span class="string">&quot;base must be &gt; 1&quot;</span>);
        <span class="comment">//base sanity check
</span>        assert(check_digits&lt;base&gt;(left_first, left_last));
        assert(check_digits&lt;base&gt;(right_first, right_last));

        <span class="keyword">const</span> size_t n = sig_digits(left_first, left_last);
        <span class="keyword">const</span> size_t m = sig_digits(right_first , right_last);
        <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  <span class="keyword">long</span> ulong;

        RightIterator sigvlast = sig_digit_end(right_first, right_last);
        ulong ym_1 = *(sigvlast - <span class="number">1</span>);
        ulong f = base / (ym_1 + <span class="number">1</span>);
        multiply_in_place&lt;base&gt;(left_first, left_last, f);
        multiply_in_place&lt;base&gt;(right_first, right_last, f);

        <span class="keyword">for</span> (<span class="keyword">int</span> k = n - m; k &gt;= <span class="number">0</span>; k--)
        {
            ulong qt = trialdigit2&lt;base&gt;(left_first, right_first, (size_t)k, (size_t)m);
            std::<span class="keyword2">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; dq((right_last - right_first) + <span class="number">1</span>);
            multiply&lt;base&gt;(right_first, right_last, qt, dq.begin(), dq.end());

            <span class="keyword">if</span> (compare(left_first + k, left_first + k + m,
                        dq.begin(), dq.begin() + m) == <span class="number">-1</span>)
            {
                qt = qt - <span class="number">1</span>;
                multiply&lt;base&gt;(left_first, left_last, qt, dq.begin(), dq.end());
            }

            out_first[k] = qt;
            subtract_in_place&lt;base&gt;(left_first + k, left_first + k + m, dq.begin(),  dq.begin() + m);
        }
        
        <span class="comment">//fill leading zeroes
</span>        <span class="keyword">for</span>(size_t i = n - m + <span class="number">1</span>; i &lt; out_last-out_first; i++)
        {
          out_first[i] = <span class="number">0</span>;
        }
    };
</pre>


<hr>
<h3>References</h3>

<ul>
<li> <a href="http://www.brinch-hansen.net/papers/1994b.pdf">http://www.brinch-hansen.net/papers/1994b.pdf</a></li>
</ul>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  