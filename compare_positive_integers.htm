
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<p><a href="algorithms.htm">Algorithms</a></p>

<p>Compares two numbers, assuming they have the same base.</p>


<p>Returns:</p>

<ul>
<li> 0  : if u == v</li>
<li> 1  : if u &gt; v</li>
<li> -1 : if u &lt; v</li>
</ul>

<hr>
<h3>Declaration</h3>
<pre>
<span class="keyword">template</span> &lt; <span class="keyword">class</span> LeftIterator, <span class="keyword">class</span> RightIterator &gt;
    <span class="keyword">int</span> compare(LeftIterator left_first,
                LeftIterator left_last,
                RightIterator right_first,
                RightIterator right_last);
</pre>

<hr>
<h3>Sample</h3>
<pre>
  { 1, 0 } , { 1 }   -&gt; 0
         10      10
</pre>

<hr>
<h3>Sample</h3>

<pre>
<span class="keyword">void</span> compare_test()
{
    <span class="keyword">using</span> <span class="keyword">namespace</span> std;
    <span class="keyword">int</span> a[] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>}; <span class="comment">//a = 010
</span>    <span class="keyword">int</span> b[] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>}; <span class="comment">//b = 010
</span>    <span class="keyword">int</span> c[] = {<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>}; <span class="comment">//c = 001
</span>    <span class="keyword">int</span> d[] = {<span class="number">0</span>}; <span class="comment">//d = 0
</span>    <span class="keyword">int</span> e[] = {<span class="number">0</span>}; <span class="comment">//e = 0
</span>
    assert(compare(begin(a), end(a), begin(b), end(b)) == <span class="number">0</span>);
    assert(compare(begin(a), end(a), begin(c), end(c)) == <span class="number">1</span>);
    assert(compare(begin(c), end(c), begin(a), end(a)) == <span class="number">-1</span>);
    assert(compare(begin(d), end(d), begin(e), end(e)) == <span class="number">0</span>);
    
    assert(compare(begin(c), end(c), begin(d), end(d)) == <span class="number">1</span>);
    assert(compare(begin(d), end(d), begin(c), end(c)) == <span class="number">-1</span>);
}
</pre>

<hr>
<h3>Implementation</h3>
<pre>

    <span class="keyword">template</span> &lt; <span class="keyword">class</span> LeftIterator, <span class="keyword">class</span> RightIterator &gt;
    <span class="keyword">int</span> compare(LeftIterator left_first,
                LeftIterator left_last,
                RightIterator right_first,
                RightIterator right_last)
    {
        <span class="keyword">const</span> size_t left_digits = left_last - left_first;
        <span class="keyword">const</span> size_t right_digits = right_last - right_first;
        size_t i = std::max(left_digits, right_digits);

        <span class="keyword">for</span> (;;)
        {
            <span class="keyword">auto</span> left_comp = (i &lt; left_digits) ? left_first[i] : <span class="number">0</span>;
            <span class="keyword">auto</span> right_comp = (i &lt; right_digits) ? right_first[i] : <span class="number">0</span>;

            <span class="keyword">if</span> (left_comp &lt; right_comp)
            {
                <span class="keyword">return</span> <span class="number">-1</span>;
            }
            <span class="keyword">else</span> <span class="keyword">if</span> (left_comp &gt; right_comp)
            {
                <span class="keyword">return</span>  <span class="number">1</span>;
            }

            <span class="keyword">if</span> (i == <span class="number">0</span>)
            {
                <span class="keyword">break</span>;
            }

            i--;
        }

        <span class="keyword">return</span> <span class="number">0</span>;
    }
</pre>




<!-- Page content end --> 
</article> 
 
</body> 
</html>  