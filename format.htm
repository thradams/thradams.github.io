<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->


<pre>

<span class="keyword">#define</span> _CRT_SECURE_NO_WARNINGS

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;stdarg.h&gt;

<span class="keyword">int</span> format(<span class="keyword">char</span>* s, size_t n, <span class="keyword">const</span> <span class="keyword">char</span>* format, ...)
{
    <span class="keyword">const</span> <span class="keyword">char</span>* arg[<span class="number">10</span>] = { <span class="number">0</span> };
    _Static_assert(<span class="keyword">sizeof</span>(arg) / <span class="keyword">sizeof</span>(arg[<span class="number">0</span>]) == <span class="number">10</span>, <span class="string">&quot;0-9&quot;</span>);

    va_list args;
    va_start(args, format);
    <span class="keyword">const</span> <span class="keyword">char</span>* p = format;
    <span class="keyword">while</span> (*p)
    {
        <span class="keyword">if</span> (*p == <span class="string">'%'</span> &amp;&amp; (*(p + <span class="number">1</span>) != <span class="string">'%'</span>))
        {
            p++;
            <span class="keyword">int</span> index = (*p - <span class="string">'0'</span>);
            <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="number">9</span>)
            {
                <span class="keyword">if</span> (arg[index] == <span class="number">0</span>)
                {
                    arg[index] = va_arg(args, <span class="keyword">char</span>*);
                    printf(<span class="string">&quot;SET %d = %s\n&quot;</span>, index, arg[index]);
                }
            }

        }
        p++;
    }
    va_end(args);


    p = format;
    <span class="keyword">int</span> count = <span class="number">0</span>;
    <span class="keyword">while</span> (*p)
    {
        <span class="keyword">if</span> (*p == <span class="string">'%'</span>)
        {
            p++; <span class="comment">//skip %
</span>            <span class="keyword">if</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>)
            {
                <span class="keyword">int</span> index = (*p - <span class="string">'0'</span>);
                <span class="keyword">const</span> <span class="keyword">char</span>* from = arg[index];
                
                <span class="keyword">if</span> (from == NULL)
                {
                    from = <span class="string">&quot;???&quot;</span>;
                }

                <span class="keyword">while</span> (from &amp;&amp; *from)
                {
                    <span class="keyword">if</span> (count &lt; n - <span class="number">1</span>)
                    {
                        s[count] = *from;
                    }
                    count++;
                    from++;
                }
                p++;
            }
            <span class="keyword">else</span> <span class="keyword">if</span> (*p == <span class="string">'%'</span>)
            {
                <span class="keyword">if</span> (count &lt; n - <span class="number">1</span>)
                {
                    s[count] = *p;
                }
                count++;
                p++;
            }
            <span class="keyword">else</span>
            {
                <span class="comment">/*error?*/</span>
            }
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">if</span> (count &lt; n - <span class="number">1</span>)
            {
                s[count] = *p;
            }
            count++;
            p++;
        }
    }

    <span class="keyword">if</span> (count &lt; n)
    {
        s[count] = <span class="number">0</span>;
    }
    <span class="keyword">else</span>
    {
        <span class="keyword">if</span> (n &gt; <span class="number">0</span>)
          s[n - <span class="number">1</span>] = <span class="number">0</span>;
    }

    <span class="keyword">return</span> count;
}

<span class="keyword">int</span> main()
{
    printf(<span class="string">&quot;A %1$s B %2$s C %1$s&quot;</span>, <span class="string">&quot;ONE&quot;</span>, <span class="string">&quot;TWO&quot;</span>);

    <span class="keyword">char</span> buffer[<span class="number">50</span>];
    <span class="keyword">int</span> n = format(buffer, <span class="keyword">sizeof</span> buffer, <span class="string">&quot;A %% %1&quot;</span>, <span class="string">&quot;ONE&quot;</span>);
    assert(strcmp(buffer, <span class="string">&quot;A % ONE&quot;</span>) == <span class="number">0</span>);
    assert(n == <span class="number">7</span>);

    n = format(buffer, <span class="keyword">sizeof</span> buffer, <span class="string">&quot;A %0 B %1 C %0&quot;</span>, <span class="string">&quot;ONE&quot;</span>, <span class="string">&quot;TWO&quot;</span>);
    assert(n == <span class="number">17</span>);
    assert(strcmp(buffer, <span class="string">&quot;A ONE B TWO C ONE&quot;</span>) == <span class="number">0</span>);


    <span class="keyword">char</span> buffer3[<span class="number">3</span>];
    n = format(buffer3, <span class="keyword">sizeof</span> buffer3, <span class="string">&quot;%0&quot;</span>, <span class="string">&quot;ABC&quot;</span>);
    assert(n == <span class="number">3</span>);
    assert(strcmp(buffer3, <span class="string">&quot;AB&quot;</span>) == <span class="number">0</span>);

}
</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  