
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 




<pre>


<span class="keyword">int</span> vadsprintf(<span class="keyword">char</span>** str, <span class="keyword">int</span>* sz, <span class="keyword">const</span> <span class="keyword">char</span>* fmt, va_list args)
{
    va_list tmpa;
    va_copy(tmpa, args);

    <span class="keyword">int</span> size = vsnprintf(*str, *sz, fmt, tmpa);

    va_end(tmpa);

    <span class="keyword">if</span> (size &lt; <span class="number">0</span>)
    {
        <span class="keyword">return</span> <span class="number">-1</span>;
    }

    <span class="keyword">if</span> ((size + <span class="number">1</span>) &gt; *sz)
    {
        <span class="keyword">char</span>* newstr = malloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (size + <span class="number">1</span>));
        <span class="keyword">if</span> (newstr == <span class="number">0</span>)
        {
            <span class="keyword">return</span> <span class="number">-1</span>;
        }

        size = vsprintf(newstr, fmt, args);
        <span class="keyword">if</span> (size &gt; <span class="number">0</span>)
        {
            *sz = size;
            free(*str);
            *str = newstr;
        }
    }

    <span class="keyword">return</span> size;
}

<span class="keyword">int</span> dsprintf(<span class="keyword">char</span>** str, <span class="keyword">int</span>* sz, <span class="keyword">const</span> <span class="keyword">char</span>* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    <span class="keyword">int</span> size = vadsprintf(str, sz, fmt, args);
    va_end(args);
    <span class="keyword">return</span> size;
}

<span class="keyword">int</span> asprintf(<span class="keyword">char</span>** ptr, <span class="keyword">const</span> <span class="keyword">char</span>* format, ...)
{
    <span class="comment">//http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1248.pdf
</span>    <span class="keyword">char</span>* str = <span class="number">0</span>;
    <span class="keyword">int</span> sz = <span class="number">0</span>;
    va_list args;
    va_start(args, format);
    <span class="keyword">int</span> size = vadsprintf(&amp;str, &amp;sz, format, args);
    <span class="keyword">if</span> (size &gt; <span class="number">0</span>)
    {
        *ptr = str;
    }
    va_end(args);
    <span class="keyword">return</span> size;
}

<span class="keyword">int</span> vasprintf(<span class="keyword">char</span>** ptr, <span class="keyword">const</span> <span class="keyword">char</span>* format, va_list arg)
{
    <span class="comment">//http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1248.pdf
</span>    <span class="keyword">char</span>* str = <span class="number">0</span>;
    <span class="keyword">int</span> sz = <span class="number">0</span>;
    
    <span class="keyword">int</span> size = vadsprintf(&amp;str, &amp;sz, format, arg);
    <span class="keyword">if</span> (size &gt; <span class="number">0</span>)
    {
        *ptr = str;
    }
    
    <span class="keyword">return</span> size;
}

<span class="keyword">void</span> Test1()
{
    <span class="keyword">int</span> sz = <span class="number">11</span>;
    <span class="keyword">char</span>* text = malloc(sz);
    
    <span class="keyword">int</span> r = dsprintf(&amp;text, &amp;sz, <span class="string">&quot;ola %s&quot;</span>, <span class="string">&quot;thiago&quot;</span>);
    free(text);
}

<span class="keyword">int</span> main()
{
    Test1();
}


</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  