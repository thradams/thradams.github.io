
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h2>DateTime class for windows(FILETIME/SYSTEMTIME)</h2>

<p>Sometimes conversion between FILETIME and SYSTEMTIME is quite repetitive in a source code. </p>

<p>This class helps to work with this kind of situation being compatible with existing APIs that are using SYSTEMTIME and/or FILETIME data. </p>

<pre>

<span class="comment">// Copyright (C) 2009, Thiago Adams (thiago.adams@gmail.com)
</span><span class="comment">// Permission to copy, use, modify, sell and distribute this software
</span><span class="comment">// is granted provided this copyright notice appears in all copies.
</span><span class="comment">// This software is provided &quot;as is&quot; without express or implied
</span><span class="comment">// warranty, and with no claim as to its suitability for any purpose.
</span>
<span class="keyword">class</span> DateTimeException : <span class="keyword">public</span> std::exception
{
<span class="keyword">public</span>:
    DateTimeException(<span class="keyword">const</span> <span class="keyword">char</span>* s = <span class="string">&quot;invalid date&quot;</span>) : std::exception(s) {}
};

<span class="comment">//TODO
</span><span class="comment">//class DateTimeSpan{};
</span>
<span class="comment">//The FILETIME structure is a 64-bit value representing the
</span><span class="comment">//number of 100-nanosecond intervals since January 1, 1601.
</span>
<span class="keyword">class</span> DateTime
{
    FILETIME m_ft;
    SYSTEMTIME m_st;

    <span class="keyword">static</span> <span class="keyword">const</span> ULONGLONG MillisecondUnit = <span class="number">10000</span>;
    <span class="keyword">static</span> <span class="keyword">const</span> ULONGLONG SecondUnit = MillisecondUnit * <span class="keyword">static_cast</span>&lt;ULONGLONG&gt;(<span class="number">1000</span>);
    <span class="keyword">static</span> <span class="keyword">const</span> ULONGLONG MinuteUnit = SecondUnit * <span class="keyword">static_cast</span>&lt;ULONGLONG&gt;(<span class="number">60</span>);
    <span class="keyword">static</span> <span class="keyword">const</span> ULONGLONG HourUnit = MinuteUnit * <span class="keyword">static_cast</span>&lt;ULONGLONG&gt;(<span class="number">60</span>);
    <span class="keyword">static</span> <span class="keyword">const</span> ULONGLONG DayUnit = HourUnit * <span class="keyword">static_cast</span>&lt;ULONGLONG&gt;(<span class="number">24</span>);
    <span class="keyword">static</span> <span class="keyword">const</span> ULONGLONG WeekUnit = DayUnit * <span class="keyword">static_cast</span>&lt;ULONGLONG&gt;(<span class="number">7</span>);

    <span class="keyword">bool</span> UpdateSystemTime(<span class="keyword">const</span> FILETIME&amp; ft, SYSTEMTIME&amp; st)
    {
        SYSTEMTIME st2;
        <span class="keyword">if</span> (!FileTimeToSystemTime(&amp;ft, &amp;st2))
            <span class="keyword">return</span> <span class="keyword">false</span>;
        st = st2;
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }

    <span class="keyword">bool</span> UpdateFileTime(FILETIME&amp; ft, <span class="keyword">const</span> SYSTEMTIME&amp; st)
    {
        FILETIME ft2;
        <span class="keyword">if</span> (!SystemTimeToFileTime(&amp;st, &amp;ft2))
            <span class="keyword">return</span> <span class="keyword">false</span>;
        ft = ft2;
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }

<span class="keyword">public</span>:

    DateTime()
    {
        m_ft.dwHighDateTime = <span class="number">0</span>;
        m_ft.dwLowDateTime = <span class="number">0</span>;
        <span class="keyword">if</span> (!UpdateSystemTime(m_ft, m_st))
            <span class="keyword">throw</span> std::exception(<span class="string">&quot;&quot;</span>);
    }

    DateTime(<span class="keyword">const</span> DateTime&amp; other) : m_ft(other.m_ft), m_st(other.m_st)
    {
    }

    DateTime(<span class="keyword">const</span> FILETIME&amp; ft) : m_ft(ft)
    {
        <span class="keyword">if</span> (!UpdateSystemTime(m_ft, m_st))
            <span class="keyword">throw</span> DateTimeException();
    }

    DateTime(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ticks)
    {
        m_ft.dwLowDateTime = DWORD(ticks);
        m_ft.dwHighDateTime = DWORD(ticks &gt;&gt; <span class="number">32</span>);
        <span class="keyword">if</span> (!UpdateSystemTime(m_ft, m_st))
            <span class="keyword">throw</span> DateTimeException();
    }

    DateTime(<span class="keyword">const</span> SYSTEMTIME&amp; st) : m_st(st)
    {
        <span class="keyword">if</span> (!UpdateFileTime(m_ft, m_st))
            <span class="keyword">throw</span> DateTimeException();
    }

    DateTime(<span class="keyword">int</span> year,
             <span class="keyword">int</span> month,
             <span class="keyword">int</span> day,
             <span class="keyword">int</span> hour = <span class="number">0</span>,
             <span class="keyword">int</span> minute = <span class="number">0</span>,
             <span class="keyword">int</span> second = <span class="number">0</span>,
             <span class="keyword">int</span> milliseconds = <span class="number">0</span>)
    {
        m_st.wYear = year;
        m_st.wMonth = month;
        m_st.wDay = day;
        m_st.wHour = hour;
        m_st.wMinute = minute;
        m_st.wSecond = second;
        m_st.wMilliseconds = milliseconds;
        <span class="keyword">if</span> (!UpdateFileTime(m_ft, m_st))
            <span class="keyword">throw</span> DateTimeException();
    }

    <span class="keyword">void</span> AddDays(<span class="keyword">int</span> days)
    {
        <span class="keyword">operator</span> = (DateTime(GetTicks() + days * DayUnit));
    }

    <span class="keyword">void</span> AddHour(<span class="keyword">int</span> hours)
    {
        <span class="keyword">operator</span> = (DateTime(GetTicks() + hours * HourUnit));
    }

    <span class="keyword">void</span> AddMinutes(<span class="keyword">int</span> minutes)
    {
        <span class="keyword">operator</span> = (DateTime(GetTicks() + minutes * MinuteUnit));
    }

    <span class="keyword">void</span> AddSeconds(<span class="keyword">int</span> seconds)
    {
        <span class="keyword">operator</span> = (DateTime(GetTicks() + seconds * SecondUnit));
    }

    <span class="keyword">void</span> AddMilliseconds(<span class="keyword">int</span> milliseconds)
    {
        <span class="keyword">operator</span> = (DateTime(GetTicks() + milliseconds * MillisecondUnit));
    }

    <span class="keyword">void</span> AddTicks(<span class="keyword">int</span> ticks)
    {
        <span class="keyword">operator</span> = (DateTime(GetTicks() + ticks));
    }

    DateTime&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> DateTime&amp; other)
    {
        m_ft = other.m_ft;
        m_st = other.m_st;
        <span class="keyword">return</span> *<span class="keyword">this</span>;
    }

    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> GetTicks() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> ((ULONGLONG(m_ft.dwHighDateTime) &lt;&lt; <span class="number">32</span>) | m_ft.dwLowDateTime);
    }

    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> DateTime&amp; other) <span class="keyword">const</span>
    {
        <span class="keyword">return</span> GetTicks() == other.GetTicks();
    }

    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> DateTime&amp; other) <span class="keyword">const</span>
    {
        <span class="keyword">return</span> !<span class="keyword">operator</span> == (other);
    }

    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> DateTime&amp; other) <span class="keyword">const</span>
    {
        <span class="keyword">return</span> GetTicks() &gt; other.GetTicks();
    }

    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> DateTime&amp; other) <span class="keyword">const</span>
    {
        <span class="keyword">return</span> GetTicks() &lt; other.GetTicks();
    }

    <span class="keyword">int</span> GetYear() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wYear;
    }
    <span class="keyword">int</span> GetMonth() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wMonth;
    }
    <span class="keyword">int</span> GetDay() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wDay;
    }
    <span class="keyword">int</span> GetHour() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wHour;
    }
    <span class="keyword">int</span> GetMinute() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wMinute;
    }
    <span class="keyword">int</span> GetSecond() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wSecond;
    }
    <span class="keyword">int</span> GetMillisecond() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st.wMilliseconds;
    }

    <span class="keyword">const</span> FILETIME&amp; GetFileTime() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_ft;
    }

    <span class="keyword">const</span> SYSTEMTIME&amp; GetSystemTime() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_st;
    }
};

DateTime GetCurrentDateTime()
{
    FILETIME ft;
    GetSystemTimeAsFileTime(&amp;ft);
    <span class="keyword">return</span> DateTime(ft);
}

</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  