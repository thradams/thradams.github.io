<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h1> opendir windows</h1>

<p>This is a port of opendir for windows.</p>

<p>This code only works for the cases you test.</p>

<p>dirent.h</p>

<pre>
<span class="keyword">#pragma</span> once

<span class="keyword">#include</span> &lt;sys/types.h&gt;

<span class="comment">/* File types for `d_type'.  */</span>
<span class="keyword">enum</span>
{
    DT_UNKNOWN = <span class="number">0</span>,
    DT_FIFO = <span class="number">1</span>,
    DT_CHR = <span class="number">2</span>,
    DT_DIR = <span class="number">4</span>,
    DT_BLK = <span class="number">6</span>,
    DT_REG = <span class="number">8</span>,
    DT_LNK = <span class="number">10</span>,
    DT_SOCK = <span class="number">12</span>,
    DT_WHT = <span class="number">14</span>
};


<span class="keyword">struct</span> dirent {
    ino_t          d_ino;       <span class="comment">/* Inode number */</span>
    off_t          d_off;       <span class="comment">/* Not an offset; see below */</span>
    <span class="keyword">unsigned</span> <span class="keyword">short</span> d_reclen;    <span class="comment">/* Length of this record */</span>
    <span class="keyword">unsigned</span> <span class="keyword">char</span>  d_type;      <span class="comment">/* Type of file; not supported
                                   by all filesystem types*/</span>
    <span class="keyword">char</span>           d_name[<span class="number">256</span>]; <span class="comment">/* Null-terminated filename */</span>
};

<span class="keyword">typedef</span> <span class="keyword">struct</span> {
    <span class="keyword">void</span>* handle;
    <span class="keyword">struct</span> dirent dirent;
} DIR;


<span class="comment">//https://www.man7.org/linux/man-pages/man3/fdopendir.3.html
</span>DIR* opendir(<span class="keyword">const</span> <span class="keyword">char</span>* name);

<span class="keyword">int</span> closedir(DIR* dirp);
<span class="keyword">struct</span> dirent* readdir(DIR* dirp);

</pre>


<p>dirent.c</p>

<pre>

<span class="keyword">#include</span> <span class="string">&quot;dirent.h&quot;</span>
<span class="keyword">#include</span> &lt;Windows.h&gt;


DIR* opendir(<span class="keyword">const</span> <span class="keyword">char</span>* name)
{
    WIN32_FIND_DATAA fdFile;

    <span class="keyword">char</span> sPath[MAX_PATH] = { <span class="number">0</span> };
    strcat(sPath, name);
    strcat(sPath, <span class="string">&quot;\\*.*&quot;</span>);

    HANDLE handle = FindFirstFileA(sPath, &amp;fdFile);

    <span class="keyword">if</span> (handle != INVALID_HANDLE_VALUE)
    {
        DIR* p = calloc(<span class="number">1</span>, <span class="keyword">sizeof</span> * p);
        <span class="keyword">if</span> (p)
        {
            p-&gt;handle = handle;
            <span class="keyword">return</span> p;
        }
        <span class="keyword">else</span>
        {
            FindClose(handle);
        }
    }
    <span class="keyword">else</span>
    {
        errno = GetLastError();
    }

    <span class="keyword">return</span> NULL;
}

<span class="keyword">int</span> closedir(DIR* dirp)
{
    FindClose(dirp-&gt;handle);
    free(dirp);
    <span class="keyword">return</span> <span class="number">0</span>;
}

<span class="keyword">struct</span> dirent* readdir(DIR* dirp)
{
    WIN32_FIND_DATAA fdFile;
    BOOL b = FindNextFileA(dirp-&gt;handle, &amp;fdFile);
    <span class="keyword">if</span> (b)
    {
        <span class="keyword">if</span> (fdFile.dwFileAttributes &amp; FILE_ATTRIBUTE_DIRECTORY)
        {
            dirp-&gt;dirent.d_type = DT_DIR;
        }
        <span class="keyword">else</span>
        {
            dirp-&gt;dirent.d_type = DT_REG;
        }

        strcpy(dirp-&gt;dirent.d_name, fdFile.cFileName);
        <span class="keyword">return</span> &amp;dirp-&gt;dirent;
    }
    <span class="keyword">else</span>
    {
        errno = GetLastError();
    }
    <span class="keyword">return</span> NULL;
}


</pre>


<p>sample</p>

<pre>
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;sys/types.h&gt;
<span class="keyword">#include</span> &lt;sys/stat.h&gt;
<span class="keyword">#include</span> <span class="string">&quot;dirent.h&quot;</span>
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;

<span class="keyword">#define</span> MAX_PATH <span class="number">1024</span>

<span class="comment">//int stat(char*, struct stat*);
</span><span class="keyword">void</span> dirwalk(<span class="keyword">char</span>*, <span class="keyword">void</span> (*fcn)(<span class="keyword">char</span>*));

<span class="comment">/* fsize:  print size of file &quot;name&quot; */</span>
<span class="keyword">void</span> fsize(<span class="keyword">char</span>* name)
{
    <span class="keyword">struct</span> stat stbuf;

    <span class="keyword">if</span> (stat(name, &amp;stbuf) == <span class="number">-1</span>) {
        fprintf(stderr, <span class="string">&quot;fsize: can't access %s\n&quot;</span>, name);
        <span class="keyword">return</span>;
    }
    <span class="keyword">if</span> ((stbuf.st_mode &amp; S_IFMT) == S_IFDIR)
        dirwalk(name, fsize);
    printf(<span class="string">&quot;%8ld %s\n&quot;</span>, stbuf.st_size, name);
}


<span class="comment">/* dirwalk:  apply fcn to all files in dir */</span>
<span class="keyword">void</span> dirwalk(<span class="keyword">char</span>* dir, <span class="keyword">void</span> (*fcn)(<span class="keyword">char</span>*))
{
	<span class="keyword">char</span> name[MAX_PATH];
	<span class="keyword">struct</span> dirent* dp;
	DIR* dfd;

	<span class="keyword">if</span> ((dfd = opendir(dir)) == NULL) {
		fprintf(stderr, <span class="string">&quot;dirwalk: can't open %s\n&quot;</span>, dir);
		<span class="keyword">return</span>;
	}
	<span class="keyword">while</span> ((dp = readdir(dfd)) != NULL) {
		<span class="keyword">if</span> (strcmp(dp-&gt;d_name, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>
			|| strcmp(dp-&gt;d_name, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>)
			<span class="keyword">continue</span>;	<span class="comment">/* skip self and parent */</span>
		<span class="keyword">if</span> (strlen(dir) + strlen(dp-&gt;d_name) + <span class="number">2</span> &gt; <span class="keyword">sizeof</span>(name))
			fprintf(stderr, <span class="string">&quot;dirwalk: name %s/%s too long\n&quot;</span>,
					dir, dp-&gt;d_name);
		<span class="keyword">else</span> {
			sprintf(name, <span class="string">&quot;%s%s&quot;</span>, dir, dp-&gt;d_name);
			(*fcn)(name);
		}
	}
	closedir(dfd);
}

<span class="keyword">void</span> callback(<span class="keyword">const</span> <span class="keyword">char</span>* name)
{
	printf(<span class="string">&quot;%s\n&quot;</span>, name);
}

<span class="keyword">int</span> main(<span class="keyword">void</span>)
{

	fsize(<span class="string">&quot;C:/Users/thiago/source/repos/iteratedir/&quot;</span>);
    
    <span class="keyword">return</span> EXIT_SUCCESS;
}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  