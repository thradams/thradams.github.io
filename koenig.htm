
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h1>Using the Koenig lookup - Argument dependent name lookup (ADL)</h1>
<p>1 August 2005</p>

<p>The Koenig lookup or Argument dependent name lookup (ADL), can be used in many situations.</p>

<p>I am going to show one example that I think in quite useful. Imagine one class where you want to declare the operator &lt;&lt; to use with streams. If you are using templates, you should provide the operator &lt;&lt; for each type that you instantiate. Using the ADL this is not necessary, because the declaration of the function can be done inline inside a class type.</p>

<pre>
<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">class</span> X
{
    T m_value;

    <span class="keyword">friend</span> std::ostream &amp; <span class="keyword">operator</span> &lt;&lt; (std::ostream &amp;os, <span class="keyword">const</span> X &amp; x)
    {
        os &lt;&lt; x.m_value;
        <span class="keyword">return</span> os;
    }

    <span class="keyword">friend</span> <span class="keyword">void</span> swap(X &amp;a, X &amp; b)
    {
        X temp(b);
        a = b;
        b = temp;
    }

<span class="keyword">public</span>:
    X(<span class="keyword">const</span> T&amp; v) : m_value(v){}
};

<span class="keyword">int</span> main()
{
    X&lt;<span class="keyword">double</span>&gt; x(<span class="number">2.3</span>);
    cout &lt;&lt; x;

    X&lt;<span class="keyword">double</span>&gt; y(<span class="number">1</span>);
    swap(x, y);

    std::swap(x,y); <span class="comment">// compare with this one.
</span>}
</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  