#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stdio.h>
#include <memory.h>

#include "[VECTOR_NAME].h"


#define CHECKBOUNDS(p, index) assert(p != NULL); assert(index < p->size); assert(index >= 0)
#define INITIAL_CAPACITY (4)
#define MAX_CAPACITY     ((size_t)(UINT_MAX/sizeof([VECTOR_ITEM_TYPE])))
#define DESTRUCTOR(x)

inline void destroy_elements([VECTOR_ITEM_TYPE]* p,
                             size_t nelements)
{
    [VECTOR_ITEM_TYPE]* end = p + nelements;
    for (; p != end; p++)
    {
        [VECTOR_ITEM_TYPE]_destructor(p);
    }
}

inline void erase_n([VECTOR_ITEM_TYPE]* p,
    size_t position,
    size_t nelements)
{
    if (nelements > 0)
    {
        /*Destroy elements if necessary*/
        destroy_elements(&p[position], nelements);

        /*assuming byte-move works*/
        memmove(p + position,
                p + position + nelements,
                sizeof([VECTOR_ITEM_TYPE]) * nelements);
    }
}

void insert_n([VECTOR_ITEM_TYPE]* dest,
              size_t destsize,
              size_t position, 
              const [VECTOR_ITEM_TYPE]* source,
              size_t nelements)
{
    if (position < destsize)
    {
        /*assuming byte-move works*/
        memmove(dest + position + nelements,
                dest + position,
                (sizeof([VECTOR_ITEM_TYPE])) * (position - position));
    }

    /*assuming byte-copy works*/
    memcpy(dest + position, source, sizeof([VECTOR_ITEM_TYPE]) * nelements);
}

static inline size_t reserve([VECTOR_ITEM_TYPE]** p,
              size_t size,
              size_t capacity,
              size_t newCapacity)
{
    if (newCapacity > capacity)
    {
        if (*p == NULL)
        {
            *p = ([VECTOR_ITEM_TYPE]*) malloc(newCapacity * sizeof([VECTOR_ITEM_TYPE]));
        }
        else
        {
            /*assuming that byte-copy works*/
            *p = ([VECTOR_ITEM_TYPE]*) realloc(*p, sizeof([VECTOR_ITEM_TYPE]) * newCapacity);
        }
    }
    
    return (*p != 0) ? newCapacity : 0;
}

static inline size_t grow_if_necessary([VECTOR_ITEM_TYPE]** p,
    size_t size,
    size_t capacity,
    size_t newCapacity)
{
    if (newCapacity > capacity)
    {
        size_t newCalculatedCapacity = capacity == 0 ? INITIAL_CAPACITY : capacity;
        while (newCalculatedCapacity < newCapacity)
        {
            newCalculatedCapacity *= 2;
            
            if (newCalculatedCapacity < newCapacity ||
                newCalculatedCapacity > MAX_CAPACITY)
            {
                /*overflow check*/
                newCalculatedCapacity = MAX_CAPACITY;
            }
        }
        return reserve(p, size, capacity, newCalculatedCapacity);
    }
    return capacity;
}

size_t [VECTOR_NAME]_reserve(struct [VECTOR_NAME]* p, size_t nelements)
{
    p->capacity = reserve(&(p->data), p->size, p->capacity, nelements);
    return p->capacity;
}

static size_t [VECTOR_NAME]_grow_if_necessary(struct [VECTOR_NAME]* p,
    size_t nelements)
{
    p->capacity = grow_if_necessary(&(p->data), p->size, p->capacity, nelements);
    return p->capacity;
}

void [VECTOR_NAME]_destructor(struct [VECTOR_NAME]* p)
{
    [VECTOR_NAME]_clear(p);
    free(p->data);
    p->data = 0;
}

size_t [VECTOR_NAME]_insert_n(struct [VECTOR_NAME]* p,
                           size_t index,
                           const [VECTOR_ITEM_TYPE]* pSource,
                           size_t nelements)
{
    size_t result = [VECTOR_NAME]_grow_if_necessary(p, p->size + nelements);
    if (result == 0)
    {
        return 0;
    }

    insert_n(p->data, p->size, index, pSource, nelements);
    p->size += nelements;
    return nelements;
}

void [VECTOR_NAME]_erase_n(struct [VECTOR_NAME]* p, 
    size_t position,
    size_t nelements)
{
    erase_n(p->data, position, nelements);
    p->size = p->size - nelements;
}

void [VECTOR_NAME]_set(struct [VECTOR_NAME]* p,
    size_t position,
                    [VECTOR_ITEM_TYPE] value)
{
    CHECKBOUNDS(p, position);
    [VECTOR_ITEM_TYPE]_destructor(&(p->data[position]));
    p->data[position] = value;
}

void [VECTOR_NAME]_print(struct [VECTOR_NAME]* v)
{
    printf("{\n");
    printf(" size     : %d\n", v->size);
    printf(" capacity : %d\n", v->capacity);
    printf(" data     : [");
    for (size_t i = 0; i < v->size; i++)
    {
        if (i > 0)
            printf(", ");
        printf("%d", (int) v->data[i]);
    }
    printf("] [");
    for (size_t i = v->size; i < v->capacity; i++)
    {
        if (i > v->size)
            printf(", ");
        printf("%d", (int) v->data[i]);
    }
    printf("]\n");
    printf("}\n");
}


