<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<h2> TklGen</h2>

<h3> Introduction</h3>
<p>Tklgen is a scanner and parser generator.</p>

<p>The grammar used by tklgen is LL(1) and the generated parser is C++ top-down recursive-descendent.</p>

<p>The input file is a grammar LL(1) describing productions and terminals.</p>

<h3> Grammar syntax</h3>

<pre>
<span class="keyword">module</span> tklgen
{
  <span class="keyword">language</span> tklgen
  {
    <span class="comment">//tokens (terminals)
</span>    <span class="comment">//syntax (productions)
</span>  }
}
</pre>


<p>You can comment your grammar using line or block comments in the same way of C++.</p>

<p>The identifier after the <strong>module</strong> keyword is used to name the output files. </p>

<p>The identifer after the <strong>language</strong> keyword is used as C++ namespaces to avoid name conflits.</p>

<p>Inside the language there are token declarations (terminals), and syntax declarations (productions).  </p>

<p>The <strong>token</strong> declaration is used to tell all the terminal symbols.</p>

<p>Sample:</p>
<pre>
  <span class="keyword">token</span> Integer  = (<span class="string">'0'</span>..<span class="string">'9'</span>)+;
</pre>


<p>Tokens operators</p>

<pre>
 ?         : Optional
 +         : One or more
 *         : Zero or more
 |         : Or operator
 'a'...'z' : Range
 &quot;string&quot;  : Sequence of characteres
 'c'       : One characteres

 Escape
 '\0' '\t' '\b' '\f' '\n' '\t'

 Unicode
 &quot;\u0000&quot;
 '\u0000'
</pre>

<p>Tklgen don't suport negation. &quot;Any char except this one&quot;For this task I use this script </p>

<p>The <strong>interleave</strong> is an especial token that is ignored by the scanner. </p>

<p>Sample:</p>
<pre>
  <span class="keyword">interleave</span> Blanks = (<span class="string">' '</span> | <span class="string">'\n'</span> | <span class="string">'\r'</span>)+;
</pre>



<p>The <strong>syntax</strong> declaration declares the production. The &quot;Main&quot; production is obrigatory.</p>

<p>Sample:</p>
<pre>
  <span class="keyword">syntax</span> Main = A;
  <span class="keyword">syntax</span> A = Integer | <span class="keyword">empty</span>;
</pre>


<p>The <strong>empty</strong> keyword declares an empty production.\\The or &quot;|&quot; symbol is used to declare multiple productions.</p>

<p>A complete sample is the tklgen grammar used to describe itself:</p>

<p><a href="tklgengrammar2.htm">TKLGEN Grammar</a></p>


<h3> Parser components:</h3>

<p>Generated files:</p>

<p>  </p>

<p>Existing files:</p>

<p>   </p>

<h2> Calculator</h2>

<p><a href="expressionsample2.htm">Expression Sample</a></p>

<p><a href="jsonsample.htm">JSON grammar sample</a></p>


<h3> References</h3>

<ul>
<li> &quot;Compilers: Principles, Techniques, and Tools&quot;, Alfred V. Aho , Ravi Sethi , Jeffrey D. Ullman</li>
</ul>


<h3> Download</h3>
<p>Requires a serial key. Please send me an e-mail.</p>

<p>Download : 
<!-- Page content end --> 
</article> 
 
</body> 
</html>  