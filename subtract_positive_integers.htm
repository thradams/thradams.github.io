<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<p><a href="algorithms.htm">Algorithms</a></p>

<h3>Subtraction </h3>
<hr>

<h3>Declaration</h3>
<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator,
             <span class="keyword">class</span> OutIterator &gt;
    <span class="keyword">void</span> subtract(LeftIterator left_first,
                  LeftIterator left_last,
                  RightIterator right_first,
                  RightIterator right_last,
                  OutIterator out_first,
                  OutIterator out_last)

</pre>



<p>Subtract two positive integers assuming same base.</p>
<hr>
<h3>Sample</h3>
<pre>
Input:
      { 1 9 9}
              10
-       { 1 2}
              10
{ 5 5 5 5 5 5}
              10
Output:
      { 1 9 9}
              10
        { 1 2}
              10
{ 0 0 0 1 8 7}
              10


</pre>

<hr>
<h3>Sample</h3>

<pre>
<span class="keyword">void</span> subtract_test()
{
    <span class="keyword">using</span> <span class="keyword">namespace</span> std;
    <span class="keyword">int</span> u[] = { <span class="number">9</span>, <span class="number">9</span>, <span class="number">0</span> };
    <span class="keyword">int</span> v[] = { <span class="number">0</span>, <span class="number">0</span> };
    <span class="keyword">int</span> r[] = { <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> };
    subtract&lt;<span class="number">10</span>&gt;(begin(u), end(u),
                 begin(v), end(v),
                 begin(r), end(r));
    assert(r[<span class="number">3</span>] == <span class="number">0</span> &amp;&amp; r[<span class="number">2</span>] == <span class="number">0</span> &amp;&amp; r[<span class="number">1</span>] == <span class="number">9</span> &amp;&amp; r[<span class="number">0</span>] == <span class="number">9</span>);
    v[<span class="number">1</span>] = <span class="number">0</span>;
    v[<span class="number">0</span>] = <span class="number">1</span>;
    subtract&lt;<span class="number">10</span>&gt;(begin(u), end(u),
                 begin(v), end(v),
                 begin(r), end(r));
    assert(r[<span class="number">3</span>] == <span class="number">0</span> &amp;&amp; r[<span class="number">2</span>] == <span class="number">0</span> &amp;&amp; r[<span class="number">1</span>] == <span class="number">9</span> &amp;&amp; r[<span class="number">0</span>] == <span class="number">8</span>);
}
</pre>

<hr>
<h3>Implementation</h3>
<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
         <span class="keyword">class</span> LeftIterator,
         <span class="keyword">class</span> RightIterator,
         <span class="keyword">class</span> OutIterator &gt;
<span class="keyword">void</span> subtract(LeftIterator left_first,
              LeftIterator left_last,
              RightIterator right_first,
              RightIterator right_last,
              OutIterator out_first,
              OutIterator out_last)
{
    <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span> , <span class="string">&quot;base must be &gt; 1&quot;</span>);
    <span class="comment">//base sanity check
</span>    assert(check_digits&lt;base&gt;(left_first, left_last));
    assert(check_digits&lt;base&gt;(right_first, right_last));

    assert(left_last - left_first &gt;= right_last - right_first);
    assert(out_last - out_first &gt;= left_last - left_first);

    <span class="comment">//u &gt;= v ?
</span>    assert(compare(left_first, left_last, right_first, right_last) != <span class="number">-1</span>);

    <span class="keyword">long</span> <span class="keyword">long</span> borrow = <span class="number">0</span>;

    <span class="keyword">while</span> (left_first != left_last || right_first != right_last)
    {
        <span class="keyword">long</span> <span class="keyword">long</span>  ri_k = left_first != left_last ? *left_first++ : <span class="number">0</span>;
        <span class="keyword">long</span> <span class="keyword">long</span>  dqi = right_first != right_last ? *right_first++ : <span class="number">0</span>;
        <span class="keyword">long</span> <span class="keyword">long</span>  diff = ri_k - dqi;
        diff = diff - borrow + base;
        *out_first = diff % base;
        borrow = <span class="number">1</span> - diff / base;
        ++out_first;
    }

    assert(borrow == <span class="number">0</span>);

    <span class="comment">//fills remaning
</span>    <span class="keyword">for</span> (; out_first != out_last; ++out_first)
    {
        *out_first = <span class="number">0</span>;
    }
}

</pre>




<hr>
<h3>Declaration</h3>
<pre>
 <span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
             <span class="keyword">class</span> LeftIterator,
             <span class="keyword">class</span> RightIterator &gt;
    <span class="keyword">void</span> subtract_in_place(LeftIterator left_first,
                           LeftIterator left_last,
                           RightIterator right_first,
                           RightIterator right_last)

</pre>

<hr>
<h3>Sample</h3>
<pre>
Input:
    { 5 4 3 1}
              10
      { 5 4 3}
              10
Ouput:
    { 4 8 8 8}
              10
      { 5 4 3}
              10
</pre>
<hr>
<h3>Sample:</h3>
<pre>

<span class="keyword">void</span> subtract_in_place_test()
{
    <span class="keyword">using</span> <span class="keyword">namespace</span> std;
    <span class="keyword">int</span> i [] =    {<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>};
    <span class="keyword">int</span> j [] =    {<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>};
    <span class="keyword">int</span> r [] =  {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>};
    subtract_in_place&lt;<span class="number">10</span>&gt;(begin(i), end(i), begin(j), end(j));
    assert(compare(begin(i), end(i), begin(r), end(r)) == <span class="number">0</span>);
}
</pre>


<hr>
<h3>Implementation</h3>
<pre>
<span class="keyword">template</span> &lt; <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> base,
         <span class="keyword">class</span> LeftIterator,
         <span class="keyword">class</span> RightIterator &gt;
<span class="keyword">void</span> subtract_in_place(LeftIterator left_first,
              LeftIterator left_last,
              RightIterator right_first,
              RightIterator right_last)
{
    <span class="keyword">static_assert</span>(base &gt; <span class="number">1</span> , <span class="string">&quot;base must be &gt; 1&quot;</span>);
    <span class="comment">//base sanity check
</span>    assert(check_digits&lt;base&gt;(left_first, left_last));
    assert(check_digits&lt;base&gt;(right_first, right_last));

    assert(left_last - left_first &gt;= right_last - right_first);

    <span class="comment">//left &gt;= right ?
</span>    assert(compare(left_first, left_last, right_first, right_last) != <span class="number">-1</span>);

    <span class="keyword">long</span> <span class="keyword">long</span> borrow = <span class="number">0</span>;

    <span class="keyword">while</span> (left_first != left_last)
    {
        <span class="keyword">long</span> <span class="keyword">long</span>  ri_k = *left_first;
        <span class="keyword">long</span> <span class="keyword">long</span>  dqi = right_first != right_last ? *right_first++ : <span class="number">0</span>;
        <span class="keyword">long</span> <span class="keyword">long</span>  diff = ri_k - dqi;
        diff = diff - borrow + base;
        *left_first = diff % base;
        borrow = <span class="number">1</span> - diff / base;
        *left_first++;
    }

    assert(borrow == <span class="number">0</span>);    
}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  