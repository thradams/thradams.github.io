
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h2>Virtual iterator</h2>

<p>How to iterate in any kind of STL container with using the same iterator?</p>

<pre>

<span class="keyword">using</span> <span class="keyword">namespace</span> std;

<span class="keyword">int</span> main()
{
    <span class="keyword2">vector</span>&lt;<span class="keyword">int</span>&gt; vec;
    vec.push_back(<span class="number">1</span>);
    vec.push_back(<span class="number">2</span>);

    <span class="keyword2">list</span>&lt;<span class="keyword">int</span>&gt; lst;
    lst.push_back(<span class="number">3</span>);
    lst.push_back(<span class="number">4</span>);

    <span class="keyword">for</span> (v_iterator&lt;<span class="keyword">int</span>&gt; it(vec); it.next() ; )
    {
      cout &lt;&lt; *it &lt;&lt; endl;
    }

    v_iterator&lt;<span class="keyword">int</span>&gt; it(vec, <span class="keyword">true</span>); <span class="comment">// true arg means &quot;reverse&quot;
</span>    <span class="keyword">while</span>(it.next())
    {
        cout &lt;&lt; it.get() &lt;&lt; endl;
    }

    it.reset();
    <span class="keyword">while</span>(it.next())
    {
        cout &lt;&lt; it.get() &lt;&lt; endl;
    }

    it.reset(lst);
    <span class="keyword">while</span>(it.next())
    {
        cout &lt;&lt; *it &lt;&lt; endl;
    }

    it.reset();
    <span class="keyword">if</span> (it.next())
    {
        v_iterator&lt;<span class="keyword">int</span>&gt; it2(it);
        cout &lt;&lt; *it2 &lt;&lt; endl;
        v_iterator&lt;<span class="keyword">int</span>&gt; it3;
        it3 = it2;
        cout &lt;&lt; *it3 &lt;&lt; endl;
    }
}
Source code <span class="keyword">for</span> the iterator

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">struct</span> virtual_iterator
{
    <span class="keyword">virtual</span> <span class="keyword">void</span> start() = <span class="number">0</span>;
    <span class="keyword">virtual</span> <span class="keyword">bool</span> end() <span class="keyword">const</span> = <span class="number">0</span>;
    <span class="keyword">virtual</span> <span class="keyword">void</span> next() = <span class="number">0</span>;
    <span class="keyword">virtual</span> <span class="keyword">const</span> T &amp; get() <span class="keyword">const</span> = <span class="number">0</span>;
    <span class="keyword">virtual</span> virtual_iterator * clone() <span class="keyword">const</span> = <span class="number">0</span>;
    <span class="keyword">virtual</span> ~virtual_iterator() {}
};

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">class</span> virtual_iterator_imp : <span class="keyword">public</span> virtual_iterator&lt; <span class="keyword">typename</span> T::value_type &gt;
{
    <span class="keyword">const</span> <span class="keyword">typename</span> T::const_iterator m_begin;
    <span class="keyword">const</span> <span class="keyword">typename</span> T::const_iterator m_end;
    <span class="keyword">typename</span> T::const_iterator m_it;

    <span class="keyword">void</span> start() { m_it = m_begin;  }

    <span class="keyword">void</span> next()  { ++m_it; }

    <span class="keyword">bool</span> end() <span class="keyword">const</span> { <span class="keyword">return</span> m_it != m_end; }

    <span class="keyword">typename</span> <span class="keyword">const</span> T::value_type &amp; get() <span class="keyword">const</span> { <span class="keyword">return</span> *m_it; }

    virtual_iterator_imp * clone() <span class="keyword">const</span> { <span class="keyword">return</span> <span class="keyword">new</span> virtual_iterator_imp(*<span class="keyword">this</span>); }

    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> virtual_iterator_imp &amp;); <span class="comment">//not imp
</span>    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> virtual_iterator_imp &amp;); <span class="comment">//not imp
</span>
<span class="keyword">public</span>:
    virtual_iterator_imp(<span class="keyword">const</span> T &amp; container) :
      m_begin(container.begin()),
          m_end(container.end()),
          m_it()
      {
      }

      virtual_iterator_imp(<span class="keyword">const</span> virtual_iterator_imp &amp; it) :
      m_begin(it.m_begin),
          m_end(it.m_end),
          m_it(it.m_it)
      {
      }

      virtual_iterator_imp &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> virtual_iterator_imp &amp; it)
      {
          m_begin = it.m_begin;
          m_end = it.end;
          m_it = it.m_it;
          <span class="keyword">return</span> *<span class="keyword">this</span>;
      }
};



<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">class</span> virtual_rev_iterator_imp : <span class="keyword">public</span> virtual_iterator&lt; <span class="keyword">typename</span> T::value_type &gt;
{
    <span class="keyword">const</span> <span class="keyword">typename</span> T::const_reverse_iterator m_rbegin;
    <span class="keyword">const</span> <span class="keyword">typename</span> T::const_reverse_iterator m_rend;
    <span class="keyword">typename</span> T::const_reverse_iterator m_it;

    <span class="keyword">void</span> start() { m_it = m_rbegin;  }

    <span class="keyword">void</span> next()  { ++m_it; }

    <span class="keyword">bool</span> end() <span class="keyword">const</span> { <span class="keyword">return</span> m_it != m_rend; }

    <span class="keyword">typename</span> <span class="keyword">const</span> T::value_type &amp; get() <span class="keyword">const</span> { <span class="keyword">return</span> *m_it; }

    virtual_rev_iterator_imp * clone() <span class="keyword">const</span> { <span class="keyword">return</span> <span class="keyword">new</span> virtual_rev_iterator_imp(*<span class="keyword">this</span>); }

    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> virtual_rev_iterator_imp &amp;); <span class="comment">//not imp
</span>    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> virtual_rev_iterator_imp &amp;); <span class="comment">//not imp
</span>
<span class="keyword">public</span>:
    virtual_rev_iterator_imp(<span class="keyword">const</span> T &amp; container) :
      m_rbegin(container.rbegin()),
          m_rend(container.rend()),
          m_it()
      {
      }

      virtual_rev_iterator_imp(<span class="keyword">const</span> virtual_rev_iterator_imp &amp; it) :
      m_rbegin(it.m_rbegin),
          m_rend(it.m_rend),
          m_it(it.m_it)
      {
      }

      virtual_rev_iterator_imp &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> virtual_rev_iterator_imp &amp; it)
      {
          m_rbegin = it.m_rbegin;
          m_rend = it.rend;
          m_it = it.m_it;
          <span class="keyword">return</span> *<span class="keyword">this</span>;
      }
};

<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">class</span> v_iterator
{
    virtual_iterator&lt;T&gt; * m_pIt;
    <span class="keyword">bool</span> m_first;

<span class="keyword">public</span>:

    <span class="keyword">template</span>&lt;<span class="keyword">class</span> ContainerType&gt;
    v_iterator(<span class="keyword">const</span> ContainerType &amp; container, <span class="keyword">bool</span> bReverse = <span class="keyword">false</span>) :
    m_first(<span class="keyword">true</span>)
    {
        <span class="keyword">if</span> (bReverse)
            m_pIt = <span class="keyword">new</span> virtual_rev_iterator_imp&lt;ContainerType&gt;(container);
        <span class="keyword">else</span>
            m_pIt = <span class="keyword">new</span> virtual_iterator_imp&lt;ContainerType&gt;(container);
    }

    v_iterator() : m_first(<span class="keyword">true</span>), m_pIt(<span class="number">0</span>)
    {
    }

    v_iterator(<span class="keyword">const</span> v_iterator &amp;it) :
    m_first(it.m_first),
        m_pIt(it.m_pIt-&gt;clone())
    {
    }

    <span class="keyword">void</span> swap(v_iterator &amp;it)
    {
        std::swap(it.m_first, m_first);
        std::swap(it.m_pIt, m_pIt);
    }

    ~v_iterator() { <span class="keyword">delete</span> m_pIt;  }
    <span class="keyword">void</span> reset() {  m_first = <span class="keyword">true</span>;  }

    <span class="keyword">template</span>&lt;<span class="keyword">class</span> ContainerType&gt;
    <span class="keyword">void</span> reset(<span class="keyword">const</span> ContainerType &amp; container, <span class="keyword">bool</span> reverse = <span class="keyword">false</span>)
    {
        v_iterator(container, reverse).swap(*<span class="keyword">this</span>);
    }

    v_iterator&amp; <span class="keyword">operator</span> =(<span class="keyword">const</span> v_iterator &amp; it)
    {
        v_iterator(it).swap(*<span class="keyword">this</span>);
        <span class="keyword">return</span> *<span class="keyword">this</span>;
    }

    <span class="keyword">bool</span> next()
    {
        <span class="keyword">if</span> (!m_pIt)
            <span class="keyword">return</span> <span class="keyword">false</span>;

        <span class="keyword">if</span> (m_first)
        {
            m_pIt-&gt;start();
            m_first = <span class="keyword">false</span>;
        }
        <span class="keyword">else</span>
        {
            m_pIt-&gt;next();
        }

        <span class="keyword">return</span> m_pIt-&gt;end();
    }

    <span class="keyword">const</span> T &amp; get() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> m_pIt-&gt;get();
    }

    <span class="keyword">const</span> T &amp; <span class="keyword">operator</span> *() <span class="keyword">const</span>
    {
        <span class="keyword">return</span> get();
    }
};
</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  