<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h2> Input function like in BASIC</h2>

<p>Have you ever written a program in BASIC?</p>

<p>My first computer was one MSX and my first experience with computer languages was using MSX BASIC.</p>

<p>With 3 lines of code was possible to perform input and calculation.</p>

<p>(I run this code using the BlueMSX emulator)</p>
<pre>
10 CLS 
20 INPUT &quot;Please enter a number&quot;; i 
30 PRINT &quot;Your number multiplied by 2 is &quot;; I * 2
</pre>

<p>I was missing this input so I did a similar function in C++. :) </p>

<pre>

<span class="keyword">#include</span> &lt;iostream&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>&gt;
<span class="keyword">#include</span> &lt;sstream&gt;
<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">bool</span> read(T &amp;i)
{
    std::<span class="keyword2">wstring</span> s;
    <span class="keyword">if</span> (!std::getline(std::wcin, s))
        <span class="keyword">return</span> <span class="keyword">false</span>;
    i = T();

    <span class="keyword">if</span> (s.empty())
    {
        <span class="keyword">return</span> <span class="keyword">true</span>;
    }

    std::wstringstream ss(s);
    ss &gt;&gt; i &gt;&gt; std::ws;
    <span class="keyword">return</span> (ss &amp;&amp; ss.eof());
}

<span class="keyword">bool</span> read(std::<span class="keyword2">wstring</span> &amp;s)
{
    s.clear();
    <span class="keyword">if</span> (!std::getline(std::wcin, s))
        <span class="keyword">return</span> <span class="keyword">false</span>;
    <span class="keyword">return</span> <span class="keyword">true</span>;
}

<span class="keyword">bool</span> read(std::<span class="keyword2">string</span> &amp;s)
{
    s.clear();
    <span class="keyword">if</span> (!std::getline(std::cin, s))
        <span class="keyword">return</span> <span class="keyword">false</span>;
    <span class="keyword">return</span> <span class="keyword">true</span>;
}


<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">void</span> input(<span class="keyword">const</span> <span class="keyword">char</span> * msg, T&amp; value)
{
    <span class="keyword">for</span> (;;)
    {
        std::cout &lt;&lt; msg &lt;&lt; <span class="string">&quot;? &quot;</span>;
        <span class="keyword">if</span> (read(value))
            <span class="keyword">return</span>;
        <span class="keyword">else</span>
            std::cout &lt;&lt; <span class="string">&quot;?Redo from start&quot;</span> &lt;&lt; std::endl;
    }
}
Sample of use

<span class="keyword">int</span> main () 
{ 
  <span class="keyword">using</span> <span class="keyword">namespace</span> std;
  <span class="keyword">int</span> i; 
  input(<span class="string">&quot;Please enter a number&quot;</span>, i); 
  cout &lt;&lt; <span class="string">&quot;Your number multiplied by 2 is &quot;</span> &lt;&lt; i*<span class="number">2</span> &lt;&lt; std::endl; 
  cout &lt;&lt; <span class="string">&quot;Ok&quot;</span> &lt;&lt; std::endl; <span class="comment">//Getting feedback from computer :)
</span>  cin.get(); 
} 

</pre>


<h3> History</h3>
<ul>
<li> Updated 28 october 2009</li>
</ul>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  