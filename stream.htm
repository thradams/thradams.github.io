
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h1> Stream</h1>


<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;assert.h&gt;
#include &lt;string.h&gt;
#include &lt;stdbool.h&gt;

struct Stream
{
    //utf8 encoded text
    char* data;

    wchar_t CurrentChar;
    int CurrentLine;
    int CurrentCol;
    int CurrentBytePos;
    int NextBytePos;
};

#define STREAM_INIT {0}

wchar_t Stream_Match(struct Stream* stream);
void Stream_Close(struct Stream* stream);
void Stream_Attach(struct Stream* stream, char* text);
bool Stream_Set(struct Stream* stream, const char* text);
bool Stream_Open(struct Stream* stream, const char* path);
wchar_t Stream_LookAhead(const struct Stream* stream);
wchar_t Stream_Match(struct Stream* stream);
void Stream_Close(struct Stream* stream);

</pre>

<pre>

#include &quot;Stream.h&quot;

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;assert.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;



void Stream_Attach(struct Stream* stream, char* text)
{
    Stream_Close(stream);
    stream-&gt;data = text;        
}

bool Stream_Set(struct Stream* stream, const char* text)
{
    char* data = _strdup(text);
    if (data)
    {
        Stream_Attach(stream, data);
    }
    return data != NULL;
}

bool Stream_Open(struct Stream* stream, const char* path)
{
    bool result = false;
    struct _stat info;
    int r = _stat(
        path,
        &amp;info);
    if (r == 0)
    {
        char* data = (char*)malloc(sizeof(char) * info.st_size + 1);
        if (data != NULL)
        {
            FILE* file = fopen(path, &quot;r&quot;);
            if (file != NULL)
            {
                //SKIP BOM
                if (info.st_size &gt;= 3)
                {
                    fread(data, 1, 3, file);
                    if (data[0] == (char)0xEF &amp;&amp;
                        data[1] == (char)0xBB &amp;&amp;
                        data[2] == (char)0xBF)
                    {
                        size_t n = fread(data, 1, info.st_size - 3, file);
                        data[n] = 0;
                    }
                    else
                    {
                        size_t n = fread(data + 3, 1, info.st_size - 3, file);
                        data[3 + n] = 0;
                    }
                }
                else
                {
                    size_t n = fread(data, 1, info.st_size, file);
                    data[n] = 0;
                }

                fclose(file);
                result = true;
                Stream_Attach(stream, data);
            }
        }
    }
    return result;
}

static wchar_t Stream_ReadNextChar(const struct Stream* stream, int* bytes)
{
    //https://www.ietf.org/rfc/rfc3629.txt
    //https://www.fileformat.info/info/unicode/utf8.htm

    unsigned u = EOF;
    int currentPos = stream-&gt;NextBytePos;
    if (stream-&gt;data != NULL)
    {
        int c = stream-&gt;data[currentPos];

        if (c == '\0' /*EOF*/)
        {
            u = EOF;
        }
        else if ((c &amp; 0x80) == 0)
        {
            currentPos++;
            u = c;
        }
        else if ((c &amp; 0xC0) == 0x80)
        {
            u = EOF;
        }
        else
        {
            currentPos++;
            u = (c &amp; 0xE0) == 0xC0 ? (c &amp; 0x1F)
                : (c &amp; 0xF0) == 0xE0 ? (c &amp; 0x0F)
                : (c &amp; 0xF8) == 0xF0 ? (c &amp; 0x07)
                : 0;

            if (u == 0)
            {
                u = EOF;
            }
            else
            {
                for (;;)
                {
                    c = stream-&gt;data[currentPos];
                    currentPos++;

                    if (c == EOF)
                    {
                        break;
                    }
                    else if ((c &amp; 0xC0) == 0x80)
                    {
                        u = (u &lt;&lt; 6) | (c &amp; 0x3F);
                    }
                    else
                    {
                        currentPos--;
                        break;
                    }
                }
            }
        }
    }

    *bytes = currentPos - stream-&gt;NextBytePos;
    return u;
}

wchar_t Stream_LookAhead(const struct Stream* stream)
{
    int bytes = 0;
    wchar_t ch =
        Stream_ReadNextChar(stream, &amp;bytes);

    return ch;
}

wchar_t Stream_Match(struct Stream* stream)
{
    //assert(stream-&gt;data != NULL);

    int bytes = 0;
    wchar_t ch =
        Stream_ReadNextChar(stream, &amp;bytes);

    if (stream-&gt;CurrentLine == 0)
    {
        stream-&gt;CurrentLine = 1;
    }

    if (bytes &gt; 0)
    {
        stream-&gt;CurrentBytePos = stream-&gt;NextBytePos;
        stream-&gt;NextBytePos += bytes;
        stream-&gt;CurrentCol++;
        
        if (ch == '\n')
        {
            stream-&gt;CurrentLine++;
            stream-&gt;CurrentCol = 0;
        }
    }
    stream-&gt;CurrentChar = ch;
    return ch;
}

void Stream_Close(struct Stream* stream)
{
    free(stream-&gt;data);
    stream-&gt;CurrentCol = 0;
    stream-&gt;CurrentLine = 0;
    stream-&gt;NextBytePos = 0;
    stream-&gt;CurrentBytePos = 0;
}


</pre>


<pre>

#include  &quot;Stream.h&quot;
#include &lt;assert.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;io.h&gt;

void Test3()
{
    struct Stream stream = STREAM_INIT;

    assert(stream.CurrentCol == 0);
    assert(stream.CurrentLine == 0);
    assert(stream.CurrentChar == 0);
    assert(stream.NextBytePos == 0);
    assert(stream.data == NULL);

    //Stream_Set(&amp;stream, u8&quot;maçã&quot;);
    if (Stream_Set(&amp;stream, u8&quot;ábç\n dêf\n&quot;))
    {
        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 0);
        assert(stream.CurrentChar == 0);
        assert(stream.NextBytePos == 0);
        assert(stream.data != NULL);


        Stream_Match(&amp;stream);

        assert(stream.CurrentCol == 1);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'á');
        assert(stream.NextBytePos == 2);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 2);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'b');
        assert(stream.NextBytePos == 3);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 3);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'ç');
        assert(stream.NextBytePos == 5);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 2);
        assert(stream.CurrentChar == L'\n');
        assert(stream.NextBytePos == 6);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 1);
        assert(stream.CurrentLine == 2);
        assert(stream.CurrentChar == L' ');
        assert(stream.NextBytePos == 7);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 2);
        assert(stream.CurrentLine == 2);
        assert(stream.CurrentChar == L'd');
        assert(stream.NextBytePos == 8);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 3);
        assert(stream.CurrentLine == 2);
        assert(stream.CurrentChar == L'ê');
        assert(stream.NextBytePos == 10);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 4);
        assert(stream.CurrentLine == 2);
        assert(stream.CurrentChar == L'f');
        assert(stream.NextBytePos == 11);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 3);
        assert(stream.CurrentChar == L'\n');
        assert(stream.NextBytePos == 12);

    }

    Stream_Close(&amp;stream);
}



void Test1()
{
    struct Stream stream = STREAM_INIT;

    //Stream_Set(&amp;stream, u8&quot;maçã&quot;);
    if (Stream_Open(&amp;stream, &quot;utf8maca.txt&quot;))
    {
        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 0);
        assert(stream.CurrentChar == 0);
        assert(stream.NextBytePos == 0);
        assert(stream.data != NULL);


        Stream_Match(&amp;stream);

        assert(stream.CurrentCol == 1);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == 'm');
        assert(stream.CurrentBytePos == 0);
        assert(stream.NextBytePos == 1);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 2);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == 'a');        
        assert(stream.CurrentBytePos == 1);
        assert(stream.NextBytePos == 2);

        assert(Stream_LookAhead(&amp;stream) == L'ç');

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 3);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'ç');
        assert(stream.CurrentBytePos == 2);
        assert(stream.NextBytePos == 4);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 4);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'ã');

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 4);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == (wchar_t)EOF);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 4);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == (wchar_t)EOF);
    }

    Stream_Close(&amp;stream);
}


void Test1L()
{
    struct Stream stream = STREAM_INIT;

    assert(stream.CurrentCol == 0);
    assert(stream.CurrentLine == 0);
    assert(stream.CurrentChar == 0);
    assert(stream.NextBytePos == 0);
    assert(stream.data == NULL);


    if (Stream_Set(&amp;stream, u8&quot;maçã&quot;))
    {
        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 0);
        assert(stream.CurrentChar == 0);
        assert(stream.NextBytePos == 0);
        assert(stream.data != NULL);


        Stream_Match(&amp;stream);

        assert(stream.CurrentCol == 1);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == 'm');
        assert(stream.NextBytePos == 1);

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 2);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == 'a');

        assert(Stream_LookAhead(&amp;stream) == L'ç');

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 3);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'ç');

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 4);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == L'ã');

        Stream_Match(&amp;stream);
        assert(stream.CurrentCol == 4);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == (wchar_t)EOF);
    }

    Stream_Close(&amp;stream);
}

void Test2()
{
    struct Stream stream = STREAM_INIT;
    
    if (Stream_Open(&amp;stream, &quot;bomutf8empty.txt&quot;))
    {
        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 0);
        assert(stream.CurrentChar == 0);
        assert(stream.NextBytePos== 0);

        Stream_Match(&amp;stream);

        assert(stream.CurrentCol == 0);
        assert(stream.CurrentLine == 1);
        assert(stream.CurrentChar == WEOF);
        assert(stream.NextBytePos == 0);
    }

    Stream_Close(&amp;stream);
}

void Test0()
{
    struct Stream stream = STREAM_INIT;

    assert(stream.CurrentCol == 0);
    assert(stream.CurrentLine == 0);
    assert(stream.CurrentChar == 0);

    Stream_Match(&amp;stream);

    Stream_Close(&amp;stream);
}


void PrintLine(const char* source, int pos)
{
    const char* pHead = source[pos];
    while (pHead &gt; source)
    {
        if (*pHead == '\n')
            break;
        pHead--;
    }

    const char* pTail = source[pos];
    while (*pTail)
    {
        if (*pTail == '\n')
            break;
        pTail--;
    }
}

int main()
{
    _setmode(_fileno(stdout), _O_U16TEXT);
    
    Test0();
    Test1();
    Test1L();
    Test2();
    Test3();


   wprintf(L&quot;maçã&quot;);
}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  