
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<h1> Maps string to struct item*</h1>

<p><a href="makecontainer.htm">Make container</a></p>




<pre>

<span class="keyword">#pragma</span> once
<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;assert.h&gt;

<span class="keyword">#define</span> strdup _strdup

<span class="keyword">struct</span> item
{
    <span class="keyword">int</span> i;
};

<span class="keyword">void</span> item_delete(<span class="keyword">struct</span> item* p) {
    free(p);
}

<span class="keyword">struct</span> hashmap {
    <span class="keyword">struct</span> mapentry {
        <span class="keyword">struct</span> mapentry* next;
        <span class="keyword">unsigned</span> <span class="keyword">int</span> hash;
        <span class="keyword">char</span>* key;
        <span class="keyword">struct</span> item* p;
    };
    <span class="keyword">struct</span> mapentry** table;
    <span class="keyword">unsigned</span> <span class="keyword">int</span> capacity;
    <span class="keyword">int</span>  size;
};


<span class="keyword">unsigned</span> <span class="keyword">int</span> stringhash(<span class="keyword">const</span> <span class="keyword">char</span>* key)
{
    <span class="comment">// hash key to unsigned int value by pseudorandomizing transform
</span>    <span class="comment">// (algorithm copied from STL char hash in xfunctional)
</span>    <span class="keyword">unsigned</span> <span class="keyword">int</span> uHashVal = <span class="number">2166136261</span>U;
    <span class="keyword">unsigned</span> <span class="keyword">int</span> uFirst = <span class="number">0</span>;
    <span class="keyword">unsigned</span> <span class="keyword">int</span> uLast = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)strlen(key);
    <span class="keyword">unsigned</span> <span class="keyword">int</span> uStride = <span class="number">1</span> + uLast / <span class="number">10</span>;

    <span class="keyword">for</span> (; uFirst &lt; uLast; uFirst += uStride)
    {
        uHashVal = <span class="number">16777619</span>U * uHashVal ^ (<span class="keyword">unsigned</span> <span class="keyword">int</span>)key[uFirst];
    }

    <span class="keyword">return</span> (uHashVal);
}


<span class="keyword">void</span> hashmap_remove_all(<span class="keyword">struct</span> hashmap* pMap) {
    <span class="keyword">if</span> (pMap-&gt;table != NULL)
    {
        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pMap-&gt;capacity; i++)
        {
            <span class="keyword">struct</span> mapentry* pentry = pMap-&gt;table[i];

            <span class="keyword">while</span> (pentry != NULL)
            {
                <span class="keyword">struct</span> mapentry* pentryCurrent = pentry;

                item_delete(pentryCurrent-&gt;p);

                pentry = pentry-&gt;next;                
                free(pentryCurrent-&gt;key);
                free(pentryCurrent);
            }
        }

        free(pMap-&gt;table);
        pMap-&gt;table = NULL;
        pMap-&gt;size = <span class="number">0</span>;
    }
}

<span class="keyword">void</span> hashmap_destroy(<span class="keyword">struct</span> hashmap* pMap)
{
    hashmap_remove_all(pMap);
}

<span class="keyword">struct</span> item* hashmap_find(<span class="keyword">struct</span> hashmap* pMap, <span class="keyword">const</span> <span class="keyword">char</span>* key)
{
    <span class="keyword">struct</span> item* p = NULL;
    
    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = stringhash(key);
    <span class="keyword">int</span> index = hash % pMap-&gt;capacity;

    <span class="keyword">struct</span> mapentry* pentry = pMap-&gt;table[index];

    <span class="keyword">for</span> (; pentry != NULL; pentry = pentry-&gt;next) 
    {
        <span class="keyword">if</span> (pentry-&gt;hash == hash &amp;&amp; strcmp(pentry-&gt;key, key) == <span class="number">0</span>) {
            p = pentry-&gt;p;
            <span class="keyword">break</span>;
        }
    }

    <span class="keyword">return</span> p;
}


<span class="keyword">struct</span> item* hashmap_remove(<span class="keyword">struct</span> hashmap* map, <span class="keyword">const</span> <span class="keyword">char</span>* key)
{
    <span class="keyword">struct</span> item* p = <span class="number">0</span>;

    <span class="keyword">if</span> (map-&gt;table != NULL)
    {
        <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = stringhash(key);
        <span class="keyword">struct</span> mapentry** preventry = &amp;map-&gt;table[hash % map-&gt;capacity];
        <span class="keyword">struct</span> mapentry* pentry = *preventry;

        <span class="keyword">for</span> (; pentry != NULL; pentry = pentry-&gt;next)
        {
            <span class="keyword">if</span> ((pentry-&gt;hash == hash) &amp;&amp; (strcmp(pentry-&gt;key, key) == <span class="number">0</span>))
            {
                *preventry = pentry-&gt;next;
                p = pentry-&gt;p;
                free(pentry-&gt;key);
                free(pentry);
                <span class="keyword">break</span>;
            }
            preventry = &amp;pentry-&gt;next;
        }
    }

    <span class="keyword">return</span> p;
}

<span class="keyword">int</span> hashmap_set(<span class="keyword">struct</span> hashmap* pMap, <span class="keyword">const</span> <span class="keyword">char</span>* key, <span class="keyword">struct</span> item* pNew)
{
    <span class="keyword">int</span> result = <span class="number">0</span>;

    <span class="keyword">if</span> (pMap-&gt;table == NULL)
    {
        <span class="keyword">if</span> (pMap-&gt;capacity &lt; <span class="number">1</span>) {
            pMap-&gt;capacity = <span class="number">1000</span>;
        }

        pMap-&gt;table = calloc(pMap-&gt;capacity, <span class="keyword">sizeof</span>(pMap-&gt;table[<span class="number">0</span>]));        
    }

    <span class="keyword">if</span> (pMap-&gt;table != NULL)
    {
        <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = stringhash(key);
        <span class="keyword">int</span> index = hash % pMap-&gt;capacity;

        <span class="keyword">struct</span> mapentry* pentry = pMap-&gt;table[index];

        <span class="keyword">for</span> (; pentry != NULL; pentry = pentry-&gt;next) {
            <span class="keyword">if</span> (pentry-&gt;hash == hash &amp;&amp; strcmp(pentry-&gt;key, key) == <span class="number">0</span>){
                <span class="keyword">break</span>;
            }
        }

        <span class="keyword">if</span> (pentry == NULL)
        {
            pentry = calloc(<span class="number">1</span>, <span class="keyword">sizeof</span>(*pentry));
            pentry-&gt;hash = hash;
            pentry-&gt;p = pNew;
            pentry-&gt;key = strdup(key);
            pentry-&gt;next = pMap-&gt;table[index];
            pMap-&gt;table[index] = pentry;
            pMap-&gt;size++;
            result = <span class="number">0</span>;
        }
        <span class="keyword">else</span>
        {
            result = <span class="number">1</span>;         
            pentry-&gt;p = pNew;
        }
    }

    <span class="keyword">return</span> result;
}


<span class="keyword">int</span> main()
{
    <span class="keyword">struct</span> hashmap map = { .capacity = <span class="number">100</span> };

    <span class="keyword">struct</span> item* p = calloc(<span class="number">1</span>, <span class="keyword">sizeof</span>*p);

    hashmap_set(&amp;map, <span class="string">&quot;a&quot;</span>, p);
    hashmap_set(&amp;map, <span class="string">&quot;a&quot;</span>, p);
    assert(hashmap_find(&amp;map, <span class="string">&quot;a&quot;</span>) != NULL);
    assert(hashmap_find(&amp;map, <span class="string">&quot;b&quot;</span>) == NULL);
    
    p = hashmap_remove(&amp;map, <span class="string">&quot;a&quot;</span>);
    item_delete(p);

    hashmap_destroy(&amp;map);
}

</pre>

<!-- Page content end --> 
</article> 
 
</body> 
</html>  