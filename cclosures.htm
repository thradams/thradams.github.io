
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>sample</p>

<pre>
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> <span class="string">&quot;closure.h&quot;</span>
<span class="keyword">#include</span> <span class="string">&quot;vclosures.h&quot;</span>

<span class="keyword">void</span> f(<span class="keyword">void</span>*)
{
  printf(<span class="string">&quot;hello closure!\n&quot;</span>);
}

<span class="keyword">void</span> f2(<span class="keyword">struct</span> closure_void_str* p)
{
  printf(<span class="string">&quot;hello %s!\n&quot;</span>, p-&gt;text);
}

<span class="keyword">int</span> main()
{
  vclosures vclosures = VCLOSURES_INIT;

  vclosures_append(&amp;vclosures, closure_void_new(&amp;f));
  vclosures_append(&amp;vclosures, closure_void_str_new(&amp;f2, <span class="string">&quot;thiago&quot;</span>));

  <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; vclosures_size(&amp;vclosures); i++)
  {
    closure_void_call(vclosures_get(&amp;vclosures, i));
  }

  vclosures_destructor(&amp;vclosures);
  <span class="keyword">return</span> <span class="number">0</span>;
}
</pre>


<p>header</p>

<pre>
<span class="keyword">#ifndef</span> _vclosures_H
<span class="keyword">#define</span> _vclosures_H

<span class="keyword">#include</span> <span class="string">&quot;closure.h&quot;</span>

<span class="keyword">typedef</span> <span class="keyword">struct</span> vclosures_t
{
  size_t    size;
  size_t    capacity;
  closure_void** data;
} vclosures;

<span class="keyword">#define</span> VCLOSURES_INIT { <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> }

<span class="keyword">void</span>           vclosures_destructor(vclosures* p);
size_t         vclosures_reserve(vclosures* p, size_t size);
<span class="keyword">void</span>           vclosures_erase_n(vclosures* p, size_t index, size_t count);
size_t         vclosures_append(vclosures* p, closure_void* pItem);
closure_void*  vclosures_get(<span class="keyword">const</span> vclosures* p, size_t index);
size_t         vclosures_size(vclosures* p);
closure_void*  vclosures_back(vclosures* p);
closure_void*  vclosures_front(vclosures* p);
<span class="keyword">bool</span>           vclosures_empty(vclosures* p);
<span class="keyword">void</span>           vclosures_clear(vclosures* p);
<span class="keyword">void</span>           vclosures_erase(vclosures* p, size_t index);
size_t         vclosures_capacity(vclosures* p);
closure_void** vclosures_data(vclosures* p);

<span class="keyword">#endif</span>  <span class="comment">//_vclosures_H
</span>

</pre>


<p>source</p>

<pre>
<span class="keyword">#include</span> <span class="string">&quot;stdafx.h&quot;</span>
<span class="keyword">#include</span> <span class="string">&quot;vclosures.h&quot;</span>
<span class="keyword">#include</span> &lt;stdlib.h&gt;


<span class="keyword">inline</span> <span class="keyword">void</span> delete_elements(closure_void** p, size_t nelements)
{
  <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; nelements; i++)
  {
    closure_void_delete(p[i]);
  }
}

size_t vclosures_reserve(vclosures* p, size_t nelements)
{
  <span class="keyword">if</span> (nelements &gt; p-&gt;capacity)
  {
    size_t nelem = nelements;

    <span class="keyword">if</span> (p-&gt;data == NULL)
    {
      p-&gt;data = (closure_void**)malloc(nelem * <span class="keyword">sizeof</span>(closure_void*));
    }
    <span class="keyword">else</span>
    {
      p-&gt;data = (closure_void**)realloc((<span class="keyword">void</span>*)p-&gt;data, nelem * <span class="keyword">sizeof</span>(closure_void*));
    }
    p-&gt;capacity = nelements;
  }

  <span class="keyword">return</span> (p-&gt;data != <span class="number">0</span>) ? nelements : <span class="number">0</span>;
}

<span class="keyword">static</span> size_t vclosures_grow(vclosures* p, size_t nelements)
{
  <span class="keyword">const</span> size_t INITIAL_CAPACITY = <span class="number">4</span>;
  <span class="keyword">const</span> size_t MAX_CAPACITY = (size_t)(UINT_MAX / <span class="keyword">sizeof</span>(closure_void*));
  <span class="keyword">if</span> (nelements &gt; p-&gt;capacity)
  {
    size_t newCap = p-&gt;capacity == <span class="number">0</span> ? INITIAL_CAPACITY : p-&gt;capacity;
    <span class="keyword">while</span> (newCap &lt; nelements)
    {
      newCap *= <span class="number">2</span>;

      <span class="keyword">if</span> (newCap &lt; nelements ||
        newCap &gt; MAX_CAPACITY)
      {
        <span class="comment">/*overflow check*/</span>
        newCap = MAX_CAPACITY;
      }
    }
    <span class="keyword">return</span> vclosures_reserve(p, newCap);
  }
  <span class="keyword">return</span> p-&gt;capacity;
}

<span class="keyword">void</span> vclosures_destructor(vclosures* p)
{
  vclosures_clear(p);
  free(p-&gt;data);
  p-&gt;data = <span class="number">0</span>;
}

<span class="keyword">static</span> size_t vclosures_insert_n(vclosures* p,
  size_t index,
  closure_void** pSource,
  size_t nelements)
{
  size_t result = vclosures_grow(p, p-&gt;size + nelements);

  <span class="keyword">if</span> (result == <span class="number">0</span>)
  {
    delete_elements(pSource, nelements);
    <span class="keyword">return</span> <span class="number">0</span>;
  }

  <span class="keyword">if</span> (index &lt; p-&gt;size)
  {
    memmove(&amp;p-&gt;data[index + nelements],
      &amp;p-&gt;data[index],
      (<span class="keyword">sizeof</span>(closure_void*)) * (p-&gt;size - index));
  }

  memcpy((<span class="keyword">void</span>*)&amp;p-&gt;data[index], &amp;pSource[<span class="number">0</span>], <span class="keyword">sizeof</span>(closure_void*) * nelements);
  
  p-&gt;size += nelements;

  <span class="keyword">return</span> nelements;
}

<span class="keyword">void</span> vclosures_erase_n(vclosures* p,
  size_t position,
  size_t nelements)
{
  <span class="keyword">if</span> (nelements &gt; <span class="number">0</span>)
  {
    delete_elements(&amp;p-&gt;data[position], nelements);
    memmove(p-&gt;data + position,
      p-&gt;data + position + nelements,
      <span class="keyword">sizeof</span>(closure_void*) * nelements);

    p-&gt;size = p-&gt;size - nelements;
  }
}

size_t vclosures_append(vclosures* p, closure_void* pItem)
{
  <span class="keyword">return</span> vclosures_insert_n(p, p-&gt;size, &amp;pItem, <span class="number">1</span>);
}

closure_void* vclosures_get(<span class="keyword">const</span> vclosures* p, size_t index)
{
  <span class="keyword">return</span> p-&gt;data[index];
}

size_t vclosures_size(vclosures* p)
{
  <span class="keyword">return</span> p-&gt;size;
}

closure_void* vclosures_back(vclosures* p)
{
  <span class="keyword">return</span> vclosures_get(p, vclosures_size(p) - <span class="number">1</span>);
}

closure_void* vclosures_front(vclosures* p)
{
  <span class="keyword">return</span> vclosures_get(p, <span class="number">0</span>);
}

<span class="keyword">bool</span> vclosures_empty(vclosures* p)
{
  <span class="keyword">return</span> vclosures_size(p) == <span class="number">0</span>;
}

<span class="keyword">void</span> vclosures_clear(vclosures* p)
{
  vclosures_erase_n(p, <span class="number">0</span>, p-&gt;size);
}

<span class="keyword">void</span> vclosures_erase(vclosures* p, size_t index)
{
  vclosures_erase_n(p, index, <span class="number">1</span>);
}

size_t vclosures_capacity(vclosures* p)
{
  <span class="keyword">return</span> p-&gt;capacity;
}

closure_void** vclosures_data(vclosures* p)
{
  <span class="keyword">return</span> p-&gt;data;
}


</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  