module MGrammar
{
    //linha de comando
    //tkgen "cppgrammar.txt" "out.h" --m --reduce 

    // fazer replace
    // /*&& ch <= L'\u007f'*/
    
    language MGrammar
    {   
       token NEWLINE = ("\n" | "\r\n");
       token SPACES = " "+;
       token TAB = "\t";
       token DEFINE = "#"  " "* ("a".."z" | "A".. "Z")+;
       token LINECOMMENT = ("//" (' '..'-' | '/'.."\u007F") (" ".."\u007F")* ("\n" | "\r\n" | "\0"))
                           | ("//" ("\n" | "\r\n" | "\0"));
       
       
       token NOWIKI_BLOCK_CLOSE = "}}}";
       
       
       token COMMENT =  ( "/*" (((" "..")" | "+".."\u007F" | "\n" | "\r" | "\t")) | ("*" (" ".."." | "0".."\u007F" | "\n" | "\r" | "\t")))* "*/");

       token CHAR         = "'" ((' '..'&' | '('..'[' | ']'.."\u007F") | "\\" any) * "'";
       token STRING       = '"' ((' '..'!' | '#'..'[' | ']'.."\u007F") | "\\" any) * '"';
       
       
        //c++ keywords begin
		token KY_ASM = "asm";
		token KY_AUTO = "auto";
		token KY_BOOL = "bool";
		token KY_BREAK = "break";
		token KY_CASE = "case";
		token KY_CATCH = "catch";
		token KY_CHAR = "char";
		token KY_CLASS = "class";
		token KY_CONST = "const";
		token KY_CONST_CAST = "const_cast";
		token KY_CONTINUE = "continue";
		token KY_DEFAULT = "default";
		token KY_DELETE = "delete";
		token KY_DO = "do";
		token KY_DOUBLE = "double";
		token KY_DYNAMIC_CAST = "dynamic_cast";
		token KY_ELSE = "else";
		token KY_ENUM = "enum";
		token KY_EXPLICIT = "explicit";
		token KY_EXPORT = "export";
		token KY_EXTERN = "extern";
		token KY_FALSE = "false";
		token KY_FLOAT = "float";
		token KY_FOR = "for";
		token KY_FRIEND = "friend";
		token KY_GOTO = "goto";
		token KY_IF = "if";
		token KY_INLINE = "inline";
		token KY_INT = "int";
		token KY_LONG = "long";
		token KY_MUTABLE = "mutable";
		token KY_NAMESPACE = "namespace";
		token KY_NEW = "new";
		token KY_OPERATOR = "operator";
		token KY_PRIVATE = "private";
		token KY_PROTECTED = "protected";
		token KY_PUBLIC = "public";
		token KY_REGISTER = "register";
		token KY_REINTERPRET_CAST = "reinterpret_cast";
		token KY_RETURN = "return";
		token KY_SHORT = "short";
		token KY_SIGNED = "signed";
		token KY_SIZEOF = "sizeof";
		token KY_STATIC = "static";
		token KY_STATIC_CAST = "static_cast";
		token KY_STRUCT = "struct";
		token KY_SWITCH = "switch";
		token KY_TEMPLATE = "template";
		token KY_THIS = "this";
		token KY_THROW = "throw";
		token KY_TRUE = "true";
		token KY_TRY = "try";
		token KY_TYPEDEF = "typedef";
		token KY_TYPEID = "typeid";
		token KY_TYPENAME = "typename";
		token KY_UNION = "union";
		token KY_UNSIGNED = "unsigned";
		token KY_USING = "using";
		token KY_VIRTUAL = "virtual";
		token KY_VOID = "void";
		token KY_VOLATILE = "volatile";
		token KY_WCHAR_T = "wchar_t";
		token KY_WHILE = "while";
		token KY_NULL = "nullptr";
		token KY_CONSTEXPR = "constexpr";
		token KY_DECLTYPE = "decltype";
		token KY_STATIC_ASSERT = "static_assert";
		token KY_ALIGNOF = "alignof";
        //c++ keywords end (atualizar o if buscando pela ultima ky)
        
        //punctuators        
        token PT_NOT = "!";
        token PT_PERCENT = "%";
        token PT_NOTXOT = "^";
        token PT_AND = "&";
        token PT_MULTI = "*";
        token PT_OPENP = "(";
        token PT_CLOSEP = ")";
        token PT_MINUS = "-";
        token PT_PLUS = "+";
        token PT_EQUAL = "=";
        token PT_OPENB = "{";
        token PT_CLOSEB = "}";
        token PT_OR = "|";
        token PT_NOTBIT = "~";
		token PT_OPENBL = "[";
		token PT_CLOSEBL = "]";
		token PT_SLASH = "\\";
		token PT_DOTCOMA = ";";
		token PT_SINGLEQ = "'";
		token PT_DOTDOT = ":";
		token PT_DOUBLEQ = "\"";
		token PT_LESSTHAN = "<";
		token PT_MORETHAN = ">";
		token PT_QUESTION = "?";
		token PT_COMA = ",";
		token PT_DOT = ".";
		token PT_INVSLASH = "/";
		token PT_NUMBER = "#";
        // END OF PUNCTUATORS
        
        token NUMBER = ( ("-" | "+" )? "0".."9"+) ("." "0".."9"+)?;
        
        
        token SYMBOL = ( "a".."z" | "A".."Z" | "_" | "$")+ ( "0".."9"+ ("a".."z" | "A".."Z" | "_" | "$")+)?;
                
		token INSIGNIFICANT_CHAR = ' '..'\u007F';
    }
}
