// Generated by tkgen - Version Dec 17 2009
// tkgen was developed by Thiago Adams
// www.thradams.com
//
// Copyright (C) 2009, Thiago Adams (thiago.adams@gmail.com)
// http://www.thradams.com/
// Permission to copy, use, modify, sell and distribute this software
// is granted provided this copyright notice appears in all copies.
// This software is provided "as is" without express or implied
// warranty, and with no claim as to its suitability for any purpose.
//

#ifndef __CREOLE_H__
#define __CREOLE_H__

namespace Creole
{

enum Tokens
{
    BLANKS,
    NEXTLINE,
    COMMENTSTART,
    NOWIKI_BLOCK_CLOSE,
    NEWLINE2,
    NEWLINE,
    SPACES,
    ESCAPE,
    COLON_SLASH,
    ITAL,
    CODEPRE,
    NOWIKI_CPPOPEN,
    NOWIKI_OPEN,
    NOWIKI_CLOSE,
    LINK_OPEN,
    LINK_CLOSE,
    IMAGE_OPEN,
    IMAGE_CLOSE,
    FORCED_LINEBREAK,
    EQUAL,
    PIPE,
    POUND,
    DASH,
    STAR,
    SLASH,
    INSIGNIFICANT_CHAR,
};

inline const wchar_t* TokensToString(Tokens e)
{
    switch(e)
    {
    case BLANKS: return L"BLANKS";
    case NEXTLINE: return L"NEXTLINE";
    case COMMENTSTART: return L"COMMENTSTART";
    case NOWIKI_BLOCK_CLOSE: return L"NOWIKI_BLOCK_CLOSE";
    case NEWLINE2: return L"NEWLINE2";
    case NEWLINE: return L"NEWLINE";
    case SPACES: return L"SPACES";
    case ESCAPE: return L"ESCAPE";
    case COLON_SLASH: return L"COLON_SLASH";
    case ITAL: return L"ITAL";
    case CODEPRE: return L"CODEPRE";
    case NOWIKI_CPPOPEN: return L"NOWIKI_CPPOPEN";
    case NOWIKI_OPEN: return L"NOWIKI_OPEN";
    case NOWIKI_CLOSE: return L"NOWIKI_CLOSE";
    case LINK_OPEN: return L"LINK_OPEN";
    case LINK_CLOSE: return L"LINK_CLOSE";
    case IMAGE_OPEN: return L"IMAGE_OPEN";
    case IMAGE_CLOSE: return L"IMAGE_CLOSE";
    case FORCED_LINEBREAK: return L"FORCED_LINEBREAK";
    case EQUAL: return L"EQUAL";
    case PIPE: return L"PIPE";
    case POUND: return L"POUND";
    case DASH: return L"DASH";
    case STAR: return L"STAR";
    case SLASH: return L"SLASH";
    case INSIGNIFICANT_CHAR: return L"INSIGNIFICANT_CHAR";
    default:break;
    }
    return L"";
}

struct Creole
{
    typedef Tokens TokenType;

    static int GetNext(int state, wchar_t ch)
    {
        switch (state)
        {
            case 0:
            if (ch == L'\t')
                return 1;
            else if (ch == L'\n')
                return 2;
            else if (ch == L'\r')
                return 3;
            else if (ch == L' ')
                return 4;
        else if (ch >= L'!' && ch <= L'"')
          return 5;
            else if (ch == L'#')
                return 6;
        else if (ch >= L'$' && ch <= L'&')
          return 5;
            else if (ch == L'\'')
                return 7;
        else if (ch >= L'(' && ch <= L')')
          return 5;
            else if (ch == L'*')
                return 8;
        else if (ch >= L'+' && ch <= L',')
          return 5;
            else if (ch == L'-')
                return 9;
            else if (ch == L'.')
                return 5;
            else if (ch == L'/')
                return 10;
        else if (ch >= L'0' && ch <= L'9')
          return 5;
            else if (ch == L':')
                return 11;
        else if (ch >= L';' && ch <= L'<')
          return 5;
            else if (ch == L'=')
                return 12;
        else if (ch >= L'>' && ch <= L'Z')
          return 5;
            else if (ch == L'[')
                return 13;
            else if (ch == L'\\')
                return 14;
            else if (ch == L']')
                return 15;
        else if (ch >= L'^' && ch <= L'z')
          return 5;
            else if (ch == L'{')
                return 16;
            else if (ch == L'|')
                return 17;
            else if (ch == L'}')
                return 18;
            else if (ch == L'~')
                return 19;
        else// if (ch == L'\u007f')
          return 5;
    break; // 
            case 1:
            if (ch == L'\t')
                return 1;
        //BLANKS
    break; // 
            case 2:
            if (ch == L'\n')
                return 21;
            else if (ch == L'\r')
                return 22;
            else if (ch == L' ')
                return 23;
            else if (ch == L'/')
                return 24;
            else if (ch == L'}')
                return 25;
        //NEWLINE
    break; // 
            case 3:
        if (ch == L'\n')
          return 2;
    break; // 
            case 4:
            if (ch == L' ')
                return 26;
        //SPACES
        //SPACES
    break; // 
            case 5:
        //INSIGNIFICANT_CHAR
    break; // 
            case 6:
        //POUND
        //POUND
    break; // 
            case 7:
            if (ch == L'\'')
                return 27;
        //INSIGNIFICANT_CHAR
    break; // 
            case 8:
        //STAR
        //STAR
    break; // 
            case 9:
        //DASH
        //DASH
    break; // 
            case 10:
            if (ch == L'/')
                return 28;
        //SLASH
    break; // 
            case 11:
            if (ch == L'/')
                return 29;
        //INSIGNIFICANT_CHAR
    break; // 
            case 12:
        //EQUAL
        //EQUAL
    break; // 
            case 13:
            if (ch == L'[')
                return 30;
        //INSIGNIFICANT_CHAR
    break; // 
            case 14:
            if (ch == L'\\')
                return 31;
        //INSIGNIFICANT_CHAR
    break; // 
            case 15:
            if (ch == L']')
                return 32;
        //INSIGNIFICANT_CHAR
    break; // 
            case 16:
            if (ch == L'{')
                return 33;
        //INSIGNIFICANT_CHAR
    break; // 
            case 17:
        //PIPE
        //PIPE
    break; // 
            case 18:
            if (ch == L'}')
                return 34;
        //INSIGNIFICANT_CHAR
    break; // 
            case 19:
        //ESCAPE
        //ESCAPE
    break; // 
            case 20:
  return -1;
    break; // 
            case 21:
            if (ch == L' ')
                return 21;
        //NEWLINE2
    break; // 
            case 22:
        if (ch == L'\n')
          return 21;
    break; // 
            case 23:
            if (ch == L'\n')
                return 21;
            else if (ch == L'\r')
                return 22;
            else if (ch == L' ')
                return 23;
        //NEWLINE
    break; // 
            case 24:
        if (ch == L'/')
          return 35;
    break; // 
            case 25:
        if (ch == L'}')
          return 36;
    break; // 
            case 26:
            if (ch == L' ')
                return 26;
        //SPACES
    break; // 
            case 27:
        //CODEPRE
    break; // 
            case 28:
        //ITAL
    break; // 
            case 29:
        //COLON_SLASH
    break; // 
            case 30:
        //LINK_OPEN
    break; // 
            case 31:
        //FORCED_LINEBREAK
    break; // 
            case 32:
        //LINK_CLOSE
    break; // 
            case 33:
            if (ch == L'{')
                return 37;
        //IMAGE_OPEN
    break; // 
            case 34:
            if (ch == L'}')
                return 38;
        //IMAGE_CLOSE
    break; // 
            case 35:
            if (ch == L'\0')
                return 39;
            else if (ch == L'\n')
                return 39;
            else if (ch == L'\r')
                return 40;
        else if (ch >= L' ' && ch <= L'-')
          return 41;
            else if (ch == L'.')
                return 42;
        else if (ch >= L'/' /*&& ch <= L'\u007f'*/)
           return 41;
    break; // 
            case 36:
        if (ch == L'}')
          return 43;
    break; // 
            case 37:
            if (ch == L'\n')
                return 44;
            else if (ch == L'\r')
                return 45;
        else if (ch == L'c')
          return 46;
    break; // 
            case 38:
        //NOWIKI_CLOSE
    break; // 
            case 39:
        //COMMENTSTART
    break; // 
            case 40:
        if (ch == L'\n')
          return 39;
    break; // 
            case 41:
            if (ch == L'\0')
                return 39;
            else if (ch == L'\n')
                return 39;
            else if (ch == L'\r')
                return 40;
        else if (ch >= L' ' /*&& ch <= L'\u007f'*/)
           return 41;
    break; // 
            case 42:
        //NEXTLINE
    break; // 
            case 43:
        //NOWIKI_BLOCK_CLOSE
    break; // 
            case 44:
        //NOWIKI_OPEN
    break; // 
            case 45:
        if (ch == L'\n')
          return 44;
    break; // 
            case 46:
        if (ch == L'p')
          return 47;
    break; // 
            case 47:
        if (ch == L'p')
          return 48;
    break; // 
            case 48:
            if (ch == L'\n')
                return 49;
        else if (ch == L'\r')
          return 50;
    break; // 
            case 49:
        //NOWIKI_CPPOPEN
    break; // 
            case 50:
        if (ch == L'\n')
          return 49;
    break; // 
        } //switch
        return -1;
    }

    static bool IsInterleave(Tokens tk)
    {
        return tk == BLANKS;
    }

    static bool GetTokenFromState(int state, Tokens& tk)
    {
        switch(state)
        {
            case 1: tk = BLANKS; break;
            case 2: tk = NEWLINE; break;
            case 4: tk = SPACES; break;
            case 5: tk = INSIGNIFICANT_CHAR; break;
            case 6: tk = POUND; break;
            case 7: tk = INSIGNIFICANT_CHAR; break;
            case 8: tk = STAR; break;
            case 9: tk = DASH; break;
            case 10: tk = SLASH; break;
            case 11: tk = INSIGNIFICANT_CHAR; break;
            case 12: tk = EQUAL; break;
            case 13: tk = INSIGNIFICANT_CHAR; break;
            case 14: tk = INSIGNIFICANT_CHAR; break;
            case 15: tk = INSIGNIFICANT_CHAR; break;
            case 16: tk = INSIGNIFICANT_CHAR; break;
            case 17: tk = PIPE; break;
            case 18: tk = INSIGNIFICANT_CHAR; break;
            case 19: tk = ESCAPE; break;
            case 21: tk = NEWLINE2; break;
            case 23: tk = NEWLINE; break;
            case 26: tk = SPACES; break;
            case 27: tk = CODEPRE; break;
            case 28: tk = ITAL; break;
            case 29: tk = COLON_SLASH; break;
            case 30: tk = LINK_OPEN; break;
            case 31: tk = FORCED_LINEBREAK; break;
            case 32: tk = LINK_CLOSE; break;
            case 33: tk = IMAGE_OPEN; break;
            case 34: tk = IMAGE_CLOSE; break;
            case 38: tk = NOWIKI_CLOSE; break;
            case 39: tk = COMMENTSTART; break;
            case 42: tk = NEXTLINE; break;
            case 43: tk = NOWIKI_BLOCK_CLOSE; break;
            case 44: tk = NOWIKI_OPEN; break;
            case 49: tk = NOWIKI_CPPOPEN; break;
            default:
                return false;
        }
        return true;
    }
};
} //namespace
#endif //header
