
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>This sample converts in compile time a string into a constant.</p>

<p>I have the strings &quot;right&quot;, &quot;center&quot;, &quot;end&quot; and &quot;start&quot;.Each string correspond to a const value in enum.</p>


<p>C++ 11</p>

<pre>
<span class="keyword">enum</span> TextAlign 
{ 
    TextAlignStart, 
    TextAlignEnd, 
    TextAlignLeft, 
    TextAlignRight, 
    TextAlignCenter
}; 

<span class="keyword">constexpr</span> TextAlign CaseCenter(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">return</span> (p[<span class="number">0</span>] == L<span class="string">'e'</span> &amp;&amp; p[<span class="number">1</span>] == L<span class="string">'n'</span> &amp;&amp;  p[<span class="number">2</span>] == L<span class="string">'t'</span> &amp;&amp; p[<span class="number">3</span>] == L<span class="string">'e'</span> &amp;&amp; p[<span class="number">4</span>] == L<span class="string">'r'</span>) ? TextAlignCenter : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>; 
} 

<span class="keyword">constexpr</span> TextAlign CaseEnd(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">return</span> (p[<span class="number">0</span>] == L<span class="string">'n'</span> &amp;&amp; p[<span class="number">1</span>] == L<span class="string">'d'</span>) ? TextAlignEnd : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>; 
} 

<span class="keyword">constexpr</span> TextAlign CaseLeft(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">return</span> (p[<span class="number">0</span>] == L<span class="string">'e'</span> &amp;&amp; p[<span class="number">1</span>] == L<span class="string">'f'</span> &amp;&amp;  p[<span class="number">2</span>] == L<span class="string">'t'</span>) ? TextAlignLeft : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>; 
} 


<span class="keyword">constexpr</span> TextAlign CaseRight(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">return</span> (p[<span class="number">0</span>] == L<span class="string">'i'</span> &amp;&amp; p[<span class="number">1</span>] == L<span class="string">'g'</span> &amp;&amp;  p[<span class="number">2</span>] == L<span class="string">'h'</span> &amp;&amp; p[<span class="number">3</span>] == L<span class="string">'t'</span>) ? TextAlignRight : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>; 
} 

<span class="keyword">constexpr</span> TextAlign CaseStart(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">return</span> (p[<span class="number">0</span>] == L<span class="string">'t'</span> &amp;&amp; p[<span class="number">1</span>] == L<span class="string">'a'</span> &amp;&amp;  p[<span class="number">2</span>] == L<span class="string">'r'</span> &amp;&amp; p[<span class="number">3</span>] == L<span class="string">'t'</span>) 
                    ? TextAlignStart : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>; 
} 

<span class="keyword">constexpr</span> TextAlign TextAlign(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">return</span> (*p == L<span class="string">'c'</span>) ? CaseCenter(p + <span class="number">1</span>) : (*p == L<span class="string">'e'</span>) ? CaseEnd(p + <span class="number">1</span>) : (*p == L<span class="string">'l'</span>) 
                        ? CaseLeft(p + <span class="number">1</span>) : (*p == L<span class="string">'r'</span>) ? CaseRight(p + <span class="number">1</span>) : (*p == L<span class="string">'s'</span>) 
                        ? CaseStart(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>; 
}

<span class="keyword">int</span> main() 
{ 
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">&quot;right&quot;</span>) == TextAlignRight, <span class="string">&quot;right ops&quot;</span>); 
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">&quot;center&quot;</span>) == TextAlignCenter, <span class="string">&quot;center ops&quot;</span>); 
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">&quot;end&quot;</span>) == TextAlignEnd, <span class="string">&quot;end ops&quot;</span>); 
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">&quot;start&quot;</span>) == TextAlignStart, <span class="string">&quot;start ops&quot;</span>); 
    <span class="keyword">const</span> <span class="keyword">char</span>* p = <span class="string">&quot;center&quot;</span>; 
    std::cout &lt;&lt; <span class="string">&quot;Test = &quot;</span> &lt;&lt; Test(p); 
} 

</pre>



<p>C++ 03</p>

<pre>

<span class="keyword">#include</span> &lt;cstring&gt;
<span class="keyword">#include</span> &lt;iostream&gt;

<span class="keyword">enum</span> TextAlign
{
    TextAlignStart,
    TextAlignEnd,
    TextAlignLeft,
    TextAlignRight,
    TextAlignCenter
};


<span class="keyword">#define</span> CaseCenter(p0, p1, p2, p3, p4) ((p0 == L<span class="string">'e'</span> &amp;&amp; p1 == L<span class="string">'n'</span> &amp;&amp;  p2 == L<span class="string">'t'</span> &amp;&amp; p3 == L<span class="string">'e'</span> &amp;&amp; p4 == L<span class="string">'r'</span>) ? TextAlignCenter : <span class="number">-1</span>)
<span class="keyword">#define</span> CaseEnd(p0, p1, p2, p3, p4) ((p0 == L<span class="string">'n'</span> &amp;&amp; p1 == L<span class="string">'d'</span>) ? TextAlignEnd : <span class="number">-1</span>)
<span class="keyword">#define</span> CaseLeft(p0, p1, p2, p3, p4) ((p0 == L<span class="string">'e'</span> &amp;&amp; p1 == L<span class="string">'f'</span> &amp;&amp;  p2 == L<span class="string">'t'</span>) ? TextAlignLeft : <span class="number">-1</span>)
<span class="keyword">#define</span> CaseRight(p0, p1, p2, p3, p4) ((p0 == L<span class="string">'i'</span> &amp;&amp; p1 == L<span class="string">'g'</span> &amp;&amp;  p2 == L<span class="string">'h'</span> &amp;&amp; p3 == L<span class="string">'t'</span>) ? TextAlignRight : <span class="number">-1</span>)
<span class="keyword">#define</span> CaseStart(p0, p1, p2, p3, p4) ((p0 == L<span class="string">'t'</span> &amp;&amp; p1 == L<span class="string">'a'</span> &amp;&amp;  p2 == L<span class="string">'r'</span> &amp;&amp; p3 == L<span class="string">'t'</span>) ? TextAlignStart : <span class="number">-1</span>)
<span class="keyword">#define</span> TextAlign(p0, p1, p2, p3, p4, p5)  ((p0 == L<span class="string">'c'</span>) ? CaseCenter(p1, p2, p3, p4, p5) : (p0 == L<span class="string">'e'</span>) ? CaseEnd(p1, p2, p3, p4, p5) : (p0 == L<span class="string">'l'</span>) ? CaseLeft(p1, p2, p3, p4, p5) : (p0 == L<span class="string">'r'</span>) ? CaseRight(p1, p2, p3, p4, p5) : (p0 == L<span class="string">'s'</span>) ? CaseStart(p1, p2, p3, p4, p5) : <span class="number">-1</span>)


<span class="keyword">int</span> Test(<span class="keyword">const</span> <span class="keyword">char</span>* p) 
{ 
    <span class="keyword">switch</span> (TextAlign(p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>], p[<span class="number">3</span>], p[<span class="number">4</span>], p[<span class="number">5</span>])) 
    { 
    <span class="keyword">case</span> TextAlign(<span class="string">'r'</span>, <span class="string">'i'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'t'</span>, <span class="string">'\0'</span>):  <span class="keyword">return</span> <span class="number">1</span>; 
    <span class="keyword">case</span> TextAlign(<span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'n'</span>, <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>): <span class="keyword">return</span> <span class="number">2</span>; 
    <span class="keyword">case</span> TextAlign(<span class="string">'e'</span>, <span class="string">'n'</span>, <span class="string">'d'</span>, <span class="string">'\0'</span>, <span class="string">'\0'</span>, <span class="string">'\0'</span>):    <span class="keyword">return</span> <span class="number">3</span>; 
    <span class="keyword">case</span> TextAlign(<span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'\0'</span>):  <span class="keyword">return</span> <span class="number">4</span>; 
    } 
    <span class="keyword">return</span> <span class="number">0</span>; 
} 

<span class="keyword">int</span> main()
{
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'\0'</span>) == TextAlignStart, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'n'</span>, <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>) == TextAlignCenter, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'t'</span>, <span class="string">'\0'</span>, <span class="string">'\0'</span>) == TextAlignLeft, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">'e'</span>, <span class="string">'n'</span>, <span class="string">'d'</span>, <span class="string">'\0'</span>, <span class="string">'\0'</span>, <span class="string">'\0'</span>) == TextAlignEnd, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(TextAlign(<span class="string">'r'</span>, <span class="string">'i'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'t'</span>, <span class="string">'\0'</span>) == TextAlignRight, <span class="string">&quot;&quot;</span>);

    std::cout &lt;&lt; Test(<span class="string">&quot;center&quot;</span>);
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  