
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 




<p>This program compares the call cost of using shared</p>





<p>See also: <a href="Stopwatch class">http://www.thradams.com/codeblog/stopwatch2.htm</a></p>

<p>Source Code:</p>

<pre>

<span class="keyword">#include</span> &lt;memory&gt;
<span class="keyword">#include</span> <span class="string">&quot;Stopwatch.h&quot;</span>
<span class="keyword">#include</span> &lt;iostream&gt;

<span class="keyword">struct</span> Base 
{ 
    <span class="keyword">virtual</span> <span class="keyword">void</span> f(<span class="keyword">int</span>&amp; i) <span class="keyword">const</span> {i += <span class="number">1</span>;}
};

<span class="keyword">struct</span> Derived : <span class="keyword">public</span> Base 
{ 
  <span class="keyword">virtual</span> <span class="keyword">void</span> f(<span class="keyword">int</span>&amp; i) <span class="keyword">const</span>  {i += <span class="number">2</span>;}
};

<span class="keyword">void</span> f1(<span class="keyword">int</span>&amp; i, std::<span class="keyword2">shared_ptr</span>&lt;Base&gt; sp) {sp-&gt;f(i);}
<span class="keyword">void</span> f2(<span class="keyword">int</span>&amp; i,std::<span class="keyword2">shared_ptr</span>&lt;<span class="keyword">const</span> Base&gt; sp) {sp-&gt;f(i);}
<span class="keyword">void</span> f3(<span class="keyword">int</span>&amp; i,<span class="keyword">const</span> std::<span class="keyword2">shared_ptr</span>&lt;Base&gt;&amp; sp) {sp-&gt;f(i);}
<span class="keyword">void</span> f4(<span class="keyword">int</span>&amp; i,<span class="keyword">const</span> std::<span class="keyword2">shared_ptr</span>&lt;<span class="keyword">const</span> Base&gt;&amp; sp) { sp-&gt;f(i);}

<span class="keyword">void</span> f5(<span class="keyword">int</span>&amp; i,std::<span class="keyword2">shared_ptr</span>&lt;Derived&gt; sp) {sp-&gt;f(i);}
<span class="keyword">void</span> f6(<span class="keyword">int</span>&amp; i,std::<span class="keyword2">shared_ptr</span>&lt;<span class="keyword">const</span> Derived&gt; sp) {sp-&gt;f(i);}
<span class="keyword">void</span> f7(<span class="keyword">int</span>&amp; i,<span class="keyword">const</span> std::<span class="keyword2">shared_ptr</span>&lt;Derived&gt;&amp; sp) {sp-&gt;f(i);}
<span class="keyword">void</span> f8(<span class="keyword">int</span>&amp; i,<span class="keyword">const</span> std::<span class="keyword2">shared_ptr</span>&lt;<span class="keyword">const</span> Derived&gt;&amp; sp) { sp-&gt;f(i);}

<span class="keyword">void</span> ff1(<span class="keyword">int</span>&amp; i,Base* p) { p-&gt;f(i);}
<span class="keyword">void</span> ff2(<span class="keyword">int</span>&amp; i,<span class="keyword">const</span> Base* p) { p-&gt;f(i);}
<span class="keyword">void</span> ff3(<span class="keyword">int</span>&amp; i,<span class="keyword">const</span> Derived* p) { p-&gt;f(i);}
<span class="keyword">void</span> ff4(<span class="keyword">int</span>&amp; i,Derived* p) {p-&gt;f(i);}

<span class="keyword">#define</span> TOTAL <span class="number">10000000</span>

<span class="keyword">#define</span> TestShared(F)\
{ \
    <span class="keyword">int</span> i = <span class="number">0</span>; \
    std::<span class="keyword2">shared_ptr</span>&lt;Derived&gt; sp ( <span class="keyword">new</span> Derived());\
    Stopwatch s(<span class="keyword">true</span>);\
    <span class="keyword">int</span> k = <span class="number">0</span>;\
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TOTAL; i++)\
    {\
      F(k, sp);\
    }\
    std::cout &lt;&lt; #F &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s.GetElapsedMilliseconds() &lt;&lt; <span class="string">&quot;ms &quot;</span> &lt;&lt;  k &lt;&lt; std::endl;\
}

<span class="keyword">#define</span> TestPtr(F)\
{ \
    <span class="keyword">int</span> i = <span class="number">0</span>; \
    Derived* p ( <span class="keyword">new</span> Derived());\
    Stopwatch s(<span class="keyword">true</span>);\
    <span class="keyword">int</span> k = <span class="number">0</span>;\
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TOTAL; i++)\
    {\
      F(k, p);\
    }\
    std::cout &lt;&lt; #F &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s.GetElapsedMilliseconds() &lt;&lt; <span class="string">&quot;ms &quot;</span> &lt;&lt;  k &lt;&lt; std::endl;\
    <span class="keyword">delete</span> p; \
}


<span class="keyword">int</span> main()
{
   
   std::cout &lt;&lt; <span class="string">&quot;Using shared_ptr&quot;</span> &lt;&lt; std::endl;
   std::cout &lt;&lt; <span class="string">&quot;------------------------&quot;</span> &lt;&lt; std::endl;
   TestShared(f1)
   TestShared(f2)
   TestShared(f3)
   TestShared(f4)
   TestShared(f5)
   TestShared(f6)
   TestShared(f7)
   TestShared(f8)
   
   std::cout &lt;&lt; std::endl;
   std::cout &lt;&lt; std::endl;

   std::cout &lt;&lt; <span class="string">&quot;Using Pointer&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
   std::cout &lt;&lt; <span class="string">&quot;------------------------&quot;</span> &lt;&lt; std::endl;

   TestPtr(ff1)
   TestPtr(ff2)
   TestPtr(ff3)
   TestPtr(ff4)
   
   std::cout &lt;&lt; std::endl;
   std::cout &lt;&lt; std::endl;
}

</pre>


<p>Output: (VC++ 2010 express)</p>

<pre>
Using shared_ptr
------------------------
f1  278ms 20000000
f2  241ms 20000000
f3  263ms 20000000
f4  225ms 20000000
f5  273ms 20000000
f6  203ms 20000000
f7  58ms 20000000
f8  208ms 20000000


Using Pointer

------------------------
ff1  40ms 20000000
ff2  62ms 20000000
ff3  40ms 20000000
ff4  40ms 20000000

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  