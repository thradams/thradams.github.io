
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>Reading all lines from an utf8 file and return a vector of wstring.</p>


<p>Fast version</p>

<pre>

<span class="keyword">void</span> ReadAllLines(<span class="keyword">const</span> <span class="keyword">wchar_t</span>* filename,
               <span class="keyword">wchar_t</span>* buffer,
               size_t bufferSize,
               std::<span class="keyword2">vector</span>&lt;std::<span class="keyword2">wstring</span>&gt;&amp; v)
{
  FILE* hfile;
  errno_t err = _wfopen_s(&amp;hfile, filename, L<span class="string">&quot;r,ccs=UTF-8&quot;</span>);

  <span class="keyword">if</span> (err != <span class="number">0</span>)
    <span class="keyword">return</span>;

  std::<span class="keyword2">wstring</span> lastString;

  size_t r = <span class="number">1</span>;

  <span class="keyword">while</span> (r != <span class="number">0</span>)
  {
    r = fread(buffer, <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>), bufferSize - <span class="number">1</span>, hfile);

    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>)
    {
      buffer[r] = <span class="number">0</span>;
    }

    <span class="keyword">wchar_t</span>* p = buffer;
    <span class="keyword">wchar_t</span>* pFirst = p;

    <span class="keyword">while</span> (*p)
    {
      <span class="keyword">if</span> (*p == <span class="string">'\n'</span>)
      {
        <span class="keyword">if</span> (!lastString.empty())
        {
          lastString.append(pFirst, p - pFirst);
          v.emplace_back(std::move(lastString));
        }
        <span class="keyword">else</span>
        {
          v.emplace_back(std::<span class="keyword2">wstring</span>(pFirst, p - pFirst));
        }

        pFirst = p + <span class="number">1</span>;
      }

      p++;
    }

    lastString.append(pFirst, p - pFirst);
  }

  <span class="keyword">if</span> (!lastString.empty())
  {
    v.emplace_back(std::move(lastString));
  }
}

std::<span class="keyword2">vector</span>&lt;std::<span class="keyword2">wstring</span>&gt; ReadAllLines(<span class="keyword">const</span> <span class="keyword">wchar_t</span>* filename)
{
  std::<span class="keyword2">vector</span>&lt;std::<span class="keyword2">wstring</span>&gt; v;
  <span class="keyword">wchar_t</span> buffer[<span class="number">10000</span>];
  ReadAllLines(filename, buffer, <span class="keyword">sizeof</span>(buffer) / <span class="keyword">sizeof</span>(buffer[<span class="number">0</span>]), v);
  <span class="keyword">return</span> v;
}
</pre>



<p>Easy version</p>
<pre>
std::<span class="keyword2">vector</span>&lt;std::<span class="keyword2">wstring</span>&gt; ReadAllLines2(<span class="keyword">const</span> <span class="keyword">wchar_t</span>* filename)
{
  std::<span class="keyword2">vector</span>&lt;std::<span class="keyword2">wstring</span>&gt; result;
  std::locale ulocale(std::locale(), <span class="keyword">new</span> std::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;);
  std::wifstream ifs(filename);
  ifs.imbue(ulocale);

  <span class="keyword">if</span> (ifs.is_open())
  {
    std::<span class="keyword2">wstring</span> ws;
    <span class="keyword">bool</span> newline = <span class="keyword">false</span>;

    <span class="keyword">while</span> (std::getline(ifs, ws))
    {
      result.emplace_back(ws);
    }
  }

  <span class="keyword">return</span> result;
}
</pre>


<p>Sample</p>
<pre>
<span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])
{
  <span class="keyword">auto</span> v1 = ReadAllLines(argv[<span class="number">1</span>]);
}
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  