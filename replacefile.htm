<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->
<h1> Replacing parts of a file</h1>

<p>Replacing lines that are between BEGIN INSERT and END INSERT</p>

<pre>

<span class="keyword">#include</span> &lt;stdio.h&gt;

<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;sys/stat.h&gt;
<span class="keyword">#include</span> &lt;errno.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;stdbool.h&gt;
<span class="keyword">#include</span> &lt;errno.h&gt;
<span class="keyword">#include</span> &lt;varargs.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>&gt;
<span class="keyword">#include</span> &lt;stdarg.h&gt;


<span class="keyword">inline</span> <span class="keyword">bool</span> fread2(<span class="keyword">void</span>* buffer, size_t size, size_t count, FILE* stream, size_t* sz)
{
    *sz = <span class="number">0</span>;<span class="comment">//out
</span>
    <span class="keyword">bool</span> result = <span class="keyword">false</span>;
    size_t n = fread(buffer, size, count, stream);
    <span class="keyword">if</span> (n == count) {
        *sz = n;
        result = <span class="keyword">true</span>;
    }
    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; count) {
        <span class="keyword">if</span> (feof(stream))
        {
            *sz = n;
            result = <span class="keyword">true</span>;
        }
    }
    <span class="keyword">return</span> result;
}

<span class="keyword">char</span>* readfile(<span class="keyword">const</span> <span class="keyword">char</span>* path)
{
    <span class="keyword">char</span>* result = NULL;

    <span class="keyword">struct</span> stat info;
    <span class="keyword">if</span> (stat(path, &amp;info) == <span class="number">0</span>)
    {
        <span class="keyword">char</span>* data = (<span class="keyword">char</span>*)malloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * info.st_size + <span class="number">1</span>);
        <span class="keyword">if</span> (data != NULL)
        {
            FILE* file = fopen(path, <span class="string">&quot;r&quot;</span>);
            <span class="keyword">if</span> (file != NULL)
            {
                <span class="keyword">if</span> (info.st_size &gt;= <span class="number">3</span>)
                {
                    size_t n = <span class="number">0</span>;
                    <span class="keyword">if</span> (fread2(data, <span class="number">1</span>, <span class="number">3</span>, file, &amp;n))
                    {
                        <span class="keyword">if</span> (n == <span class="number">3</span>)
                        {
                            <span class="keyword">if</span> (data[<span class="number">0</span>] == (<span class="keyword">char</span>)<span class="number">0</span>xEF &amp;&amp;
                                data[<span class="number">1</span>] == (<span class="keyword">char</span>)<span class="number">0</span>xBB &amp;&amp;
                                data[<span class="number">2</span>] == (<span class="keyword">char</span>)<span class="number">0</span>xBF)
                            {
                                <span class="keyword">if</span> (fread2(data, <span class="number">1</span>, info.st_size - <span class="number">3</span>, file, &amp;n))
                                {
                                    <span class="comment">//ok
</span>                                    data[n] = <span class="number">0</span>;
                                    result = data; data = <span class="number">0</span>;
                                }
                            }
                            <span class="keyword">else</span> <span class="keyword">if</span> (fread2(data + <span class="number">3</span>, <span class="number">1</span>, info.st_size - <span class="number">3</span>, file, &amp;n))
                            {
                                data[<span class="number">3</span> + n] = <span class="number">0</span>;
                                result = data; data = <span class="number">0</span>;
                            }
                        }
                        <span class="keyword">else</span>
                        {
                            data[n] = <span class="number">0</span>;
                            result = data; data = <span class="number">0</span>;
                        }
                    }
                }
                <span class="keyword">else</span>
                {
                    size_t n = <span class="number">0</span>;
                    <span class="keyword">if</span> (fread2(data, <span class="number">1</span>, info.st_size, file, &amp;n))
                    {
                        data[n] = <span class="number">0</span>;
                        result = data; data = <span class="number">0</span>;
                    }
                }
                fclose(file);
            }
            free(data);
        }
    }
    <span class="keyword">return</span> result;
}


<span class="keyword">struct</span> osstream
{
    <span class="keyword">char</span>* c_str;
    <span class="keyword">int</span> size;
    <span class="keyword">int</span> capacity;
};


<span class="keyword">int</span> osstream_putc(<span class="keyword">int</span> ch, <span class="keyword">struct</span> osstream* sb)
{
    <span class="keyword">if</span> (sb-&gt;size + <span class="number">1</span> &gt; sb-&gt;capacity)
    {
        <span class="keyword">int</span> n = sb-&gt;capacity + sb-&gt;capacity / <span class="number">2</span>;
        <span class="keyword">if</span> (n &lt; sb-&gt;size + <span class="number">1</span>)
        {
            n = sb-&gt;size + <span class="number">1</span>;
        }

        <span class="keyword">char</span>* pnew = sb-&gt;c_str;
        pnew = (<span class="keyword">char</span>*)realloc(pnew, (n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));
        <span class="keyword">if</span> (pnew)
        {
            sb-&gt;c_str = pnew;
            sb-&gt;capacity = n;
        }
        <span class="keyword">else</span>
        {
            errno = ENOMEM;
            ch = EOF;
        }
    }

    <span class="keyword">if</span> (ch != EOF)
    {
        sb-&gt;c_str[sb-&gt;size] = ch;
        sb-&gt;c_str[sb-&gt;size + <span class="number">1</span>] = <span class="number">0</span>;
        sb-&gt;size++;
    }

    <span class="keyword">return</span> ch;
}

<span class="keyword">int</span> osstream_close(<span class="keyword">struct</span> osstream* stream)
{
    free(stream-&gt;c_str);
    <span class="keyword">return</span> <span class="number">0</span>;
}


<span class="keyword">int</span> osstream_vafprintf(<span class="keyword">struct</span> osstream* stream, <span class="keyword">const</span> <span class="keyword">char</span>* fmt, va_list args)
{
    <span class="keyword">int</span> size = <span class="number">0</span>;
    va_list tmpa;

    va_copy(tmpa, args);

    size = vsnprintf(stream-&gt;c_str + stream-&gt;size, stream-&gt;capacity - stream-&gt;size, fmt, tmpa);

    va_end(tmpa);

    <span class="keyword">if</span> (size &lt; <span class="number">0</span>)
    {
        <span class="keyword">return</span> <span class="number">-1</span>;
    }

    <span class="keyword">if</span> (stream-&gt;size + size &gt; stream-&gt;capacity)
    {
        <span class="keyword">char</span>* pnew = stream-&gt;c_str;
        pnew = (<span class="keyword">char</span>*)realloc(pnew, (stream-&gt;size + size + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));
        <span class="keyword">if</span> (pnew)
        {
            stream-&gt;c_str = pnew;
            stream-&gt;capacity = stream-&gt;size + size;
        }
        <span class="keyword">else</span>
        {
            errno = ENOMEM;
            size = <span class="number">-1</span>;
        }
    }

    size = vsprintf(stream-&gt;c_str + stream-&gt;size, fmt, args);
    <span class="keyword">if</span> (size &gt; <span class="number">0</span>)
    {
        stream-&gt;size += size;
    }
    <span class="keyword">return</span> size;
}

<span class="keyword">int</span> osstream_printf(<span class="keyword">struct</span> osstream* stream, <span class="keyword">const</span> <span class="keyword">char</span>* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    <span class="keyword">int</span> size = osstream_vafprintf(stream, fmt, args);
    va_end(args);
    <span class="keyword">return</span> size;
}

<span class="keyword">int</span> savefile(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">const</span> <span class="keyword">char</span>* content)
{
    <span class="keyword">int</span> result = <span class="number">0</span>;

    FILE* f = fopen(filename, <span class="string">&quot;w&quot;</span>);
    <span class="keyword">if</span> (f)
    {
        <span class="keyword">int</span> count = strlen(content);
        <span class="keyword">int</span> result = fwrite(content, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), count, f);
        <span class="keyword">if</span> (count != result)
        {
            <span class="comment">//fwrite error
</span>            result = ferror(f);
        }
        fclose(f);
    }
    <span class="keyword">else</span>
    {
        <span class="comment">//fopen error
</span>        result = errno;
    }

    <span class="keyword">return</span> result;
}

<span class="keyword">int</span> change_text(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">const</span> <span class="keyword">char</span>* newcontent)
{
    <span class="keyword">char</span>* s = readfile(<span class="string">&quot;file.txt&quot;</span>);
    <span class="keyword">if</span> (s != NULL)
    {
        <span class="keyword">struct</span> osstream ss = { <span class="number">0</span> };
        <span class="keyword">const</span> <span class="keyword">char</span>* p1 = strstr(s, <span class="string">&quot;&lt;!--BEGIN INSERT--&gt;&quot;</span>);
        <span class="keyword">if</span> (p1)
        {
            osstream_printf(&amp;ss, <span class="string">&quot;%.*s&quot;</span>, (<span class="keyword">int</span>)(p1 - s), s);
            osstream_printf(&amp;ss, <span class="string">&quot;&lt;!--BEGIN INSERT--&gt;\n&quot;</span>);

            <span class="keyword">const</span> <span class="keyword">char</span>* p2 = strstr(p1 + <span class="number">1</span>, <span class="string">&quot;&lt;!--END INSERT--&gt;&quot;</span>);
            <span class="keyword">if</span> (p2)
            {
                osstream_printf(&amp;ss, <span class="string">&quot;%s\n&quot;</span>, newcontent);

                osstream_printf(&amp;ss, <span class="string">&quot;&lt;!--END INSERT--&gt;\n&quot;</span>);
                osstream_printf(&amp;ss, <span class="string">&quot;%s&quot;</span>, p2 + <span class="keyword">sizeof</span>(<span class="string">&quot;&lt;!--END INSERT--&gt;&quot;</span>));
            }
        }
        free(s);
        savefile(<span class="string">&quot;file.txt&quot;</span>, ss.c_str);
        osstream_close(&amp;ss);
    }
    <span class="keyword">else</span>
    {
        printf(<span class="string">&quot;%s\n&quot;</span>, strerror(errno));
    }
    <span class="keyword">return</span> <span class="number">0</span>;
}

<span class="keyword">int</span> main()
{
    change_text(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;new content&quot;</span>);
}

</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  