
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>Usage:</p>

<pre>

<span class="keyword">#include</span> <span class="string">&quot;shared.h&quot;</span>

<span class="keyword">struct</span> X {
    <span class="keyword">int</span> i;
};

<span class="keyword">int</span> main()
{
    <span class="keyword">struct</span> X* p1 = malloc_shared(<span class="keyword">sizeof</span> * p1);
    p1-&gt;i = <span class="number">2</span>;
    
    <span class="keyword">if</span> (p1)
    {
        <span class="keyword">struct</span> X* p2 = NULL;
        p2 = share(p1);
        release(p2);
        release(p1);
    }
}

</pre>


<p>Header</p>

<pre>

<span class="comment">/*shared.h*/</span>

<span class="keyword">#include</span> &lt;stdlib.h&gt;

<span class="keyword">void</span>* malloc_shared(size_t sz);
<span class="keyword">void</span>* share(<span class="keyword">void</span>* p);
<span class="keyword">int</span> release(<span class="keyword">void</span>* p);


</pre>


<p>Source</p>

<pre>
<span class="comment">/*shared.c*/</span>
<span class="keyword">#include</span> <span class="string">&quot;shared.h&quot;</span>

<span class="keyword">#if</span> defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)
<span class="keyword">#include</span> &lt;Windows.h&gt;
<span class="keyword">#else</span>
<span class="keyword">#endif</span>

<span class="keyword">struct</span> shared_object_counter
{
    <span class="keyword">int</span> counter;
};

<span class="keyword">void</span>* malloc_shared(size_t sz) {
    <span class="keyword">struct</span> shared_object_counter* p1 = malloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shared_object_counter) + sz);
    <span class="keyword">if</span> (p1)
    {
        p1-&gt;counter = <span class="number">1</span>;
    }
    <span class="keyword">return</span> p1 + <span class="number">1</span>;
}

<span class="keyword">void</span>* share(<span class="keyword">void</span>* p) {
    <span class="keyword">struct</span> shared_object_counter* p1 = ((<span class="keyword">struct</span> shared_object_counter*)p - <span class="number">1</span>);
    InterlockedIncrement(&amp;p1-&gt;counter);
    <span class="keyword">return</span> p;
}

<span class="keyword">int</span> release(<span class="keyword">void</span>* p) {
    <span class="keyword">struct</span> shared_object_counter* p1 = ((<span class="keyword">struct</span> shared_object_counter*)p - <span class="number">1</span>);
    <span class="keyword">int</span> c = InterlockedDecrement(&amp;p1-&gt;counter);
    <span class="keyword">if</span> (<span class="number">0</span> == c)
    {
        free(p1);
    }
    <span class="keyword">return</span> c;
}


</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  