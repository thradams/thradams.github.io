<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>With C++ 11 constexpr is possible create parsers in compile time.</p>


<p>The first sample is :</p>

<pre>
Color color(&quot;#FF00FF&quot;);

static_assert(Color(&quot;#FF00FF&quot;).r = 255, &quot;&quot;);
</pre>
<p>In this sample the color will be initiazed using the values parsed from the string in compile time.</p>


<pre>

<span class="keyword">constexpr</span> <span class="keyword">int</span> HEXVAL(<span class="keyword">char</span> c)
{
    <span class="keyword">return</span> ((c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt; <span class="string">'9'</span>) ? c - <span class="string">'0'</span> : <span class="number">10</span> + c - <span class="string">'A'</span>);
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> getRFromHexColor(<span class="keyword">const</span> <span class="keyword">char</span>* psz)
{
    <span class="keyword">return</span> HEXVAL(psz[<span class="number">1</span>]) * <span class="number">16</span> + HEXVAL(psz[<span class="number">2</span>]);
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> getGFromHexColor(<span class="keyword">const</span> <span class="keyword">char</span>* psz)
{
    <span class="keyword">return</span> HEXVAL(psz[<span class="number">3</span>]) * <span class="number">16</span> + HEXVAL(psz[<span class="number">4</span>]);
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> getBFromHexColor(<span class="keyword">const</span> <span class="keyword">char</span>* psz)
{
    <span class="keyword">return</span> HEXVAL(psz[<span class="number">5</span>]) * <span class="number">16</span> + HEXVAL(psz[<span class="number">6</span>]);
}

<span class="keyword">struct</span> Color
{
    <span class="keyword">int</span> r;
    <span class="keyword">int</span> g;
    <span class="keyword">int</span> b;

    <span class="keyword">constexpr</span> Color(<span class="keyword">int</span> rr, <span class="keyword">int</span> gg, <span class="keyword">int</span> bb) : r(rr), g(gg), b(bb)
    {
    }

    <span class="keyword">constexpr</span> Color(<span class="keyword">const</span> <span class="keyword">char</span>* psz) :
        r(getRFromHexColor(psz)),
        g(getGFromHexColor(psz)),
        b(getBFromHexColor(psz))
    {
    }
};

<span class="keyword">int</span> main(<span class="keyword">void</span>)
{
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;#FFC0C0&quot;</span>).r == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    
}
</pre>


<p>But I also want to initialize colors using the folowing syntax;</p>

<pre>

Color color(<span class="string">&quot;#FF00FF&quot;</span>);
<span class="keyword">or</span>
Color color(<span class="string">&quot;rgb(255,0,0)&quot;</span>);
</pre>


<p>For this task I created a function to extract each value. GetR, GetG, GetB</p>

<p>The regular expression to parse the first GetR is this:</p>

<pre>
token TK_HEX1 = '#' ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F');   
token TK_RGB1 = &quot;rgb(&quot; &quot; &quot;* ('0'..'9') ('0'..'9')? ('0'..'9')?;
</pre>

<p>GetG</p>
<pre>
token TK_HEX2 = '#' ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F');
token TK_RGB2 = &quot;rgb(&quot; &quot; &quot;* ('0'..'9') ('0'..'9')? ('0'..'9')? &quot; &quot;* &quot;,&quot; &quot; &quot;* ('0'..'9') ('0'..'9')? ('0'..'9')?;
</pre>

<p>GetB</p>
<pre>
token TK_HEX3 = '#' ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F') ('0'..'9' | 'A'..'F');
token TK_RGB3 = &quot;rgb(&quot; &quot; &quot;* ('0'..'9') ('0'..'9')? ('0'..'9')? &quot; &quot;* &quot;,&quot; &quot; &quot;* ('0'..'9') ('0'..'9')? ('0'..'9')? &quot; &quot;* &quot;,&quot; &quot; &quot;* ('0'..'9') ('0'..'9')? ('0'..'9')?;

</pre>
<pre>
Where:
 * Means one or more 
 | Means or
 ? Means optional
 '0'..'9' Means '0' or '1' ..  or '9'
</pre>

<p>Running a program called tkgen </p>

<p>Then I changed the DFA table to recursive functions calls to allow it to be used in const expressions.</p>

<pre>
<span class="keyword">constexpr</span> <span class="keyword">int</span> DECVAL(<span class="keyword">char</span> c)
{
    <span class="keyword">return</span> c - <span class="string">'0'</span>;
}
<span class="keyword">constexpr</span> <span class="keyword">int</span> HEXVAL(<span class="keyword">char</span> c)
{
    <span class="keyword">return</span> ((c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt; <span class="string">'9'</span>) ? c - <span class="string">'0'</span> : <span class="number">10</span> + c - <span class="string">'A'</span>);
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State10(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? val * <span class="number">10</span> + DECVAL(*p) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State9(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? State10(p + <span class="number">1</span>, val * <span class="number">10</span> + DECVAL(*p)) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State8(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? State8(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? State9(p + <span class="number">1</span>, DECVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State6(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'('</span>) ? State8(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State4(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'b'</span>) ? State6(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State3(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? val * <span class="number">16</span> + HEXVAL(*p) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State2(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'g'</span>) ? State4(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> State1(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? State3(p + <span class="number">1</span>, HEXVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GetR(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'#'</span>) ? State1(p + <span class="number">1</span>) : (*p == <span class="string">'r'</span>) ? State2(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">struct</span> Color
{
    <span class="keyword">int</span> r;
    <span class="keyword">int</span> g;
    <span class="keyword">int</span> b;

    <span class="keyword">constexpr</span> Color(<span class="keyword">int</span> rr, <span class="keyword">int</span> gg, <span class="keyword">int</span> bb) : r(rr), g(gg), b(bb)
    {
    }

    <span class="keyword">constexpr</span> Color(<span class="keyword">const</span> <span class="keyword">char</span>* psz) :
        r(GetR(psz)),
        g(<span class="number">0</span>),
        b(<span class="number">0</span>)
    {
    }
};



<span class="keyword">int</span> main(<span class="keyword">void</span>)
{
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;#FFC0C0&quot;</span>).r == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(255, 1, 2)&quot;</span>).r == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(1, 1, 2)&quot;</span>).r == <span class="number">1</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(12, 1, 2)&quot;</span>).r == <span class="number">12</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(123, 1, 2)&quot;</span>).r == <span class="number">123</span>, <span class="string">&quot;&quot;</span>);
    
}

</pre>


<h3> References:</h3>

<p><a href="http://akrzemi1.wordpress.com/2011/05/20/parsing-strings-at-compile-time-part-ii/">http://akrzemi1.wordpress.com/2011/05/20/parsing-strings-at-compile-time-part-ii/</a></p>

<p>Note:</p>

<p>To compile this sample, I got mingw 4.7 from this project.</p>

<p><a href="http://code.google.com/p/mingw-builds/">http://code.google.com/p/mingw-builds/</a></p>

<hr>

<h2>Complete code</h2>

<p>Some states can be shared (I didn't make it yet)</p>

<pre>

<span class="keyword">constexpr</span> <span class="keyword">int</span> DECVAL(<span class="keyword">char</span> c)
{
    <span class="keyword">return</span> c - <span class="string">'0'</span>;
}
<span class="keyword">constexpr</span> <span class="keyword">int</span> HEXVAL(<span class="keyword">char</span> c)
{
    <span class="keyword">return</span> ((c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt; <span class="string">'9'</span>) ? c - <span class="string">'0'</span> : <span class="number">10</span> + c - <span class="string">'A'</span>);
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState10(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? val * <span class="number">10</span> + DECVAL(*p) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState9(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? RState10(p + <span class="number">1</span>, val * <span class="number">10</span> + DECVAL(*p)) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState8(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? RState8(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? RState9(p + <span class="number">1</span>, DECVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState6(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'('</span>) ? RState8(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState4(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'b'</span>) ? RState6(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState3(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? val * <span class="number">16</span> + HEXVAL(*p) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState2(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'g'</span>) ? RState4(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> RState1(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? RState3(p + <span class="number">1</span>, HEXVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GetR(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'#'</span>) ? RState1(p + <span class="number">1</span>) : (*p == <span class="string">'r'</span>) ? RState2(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState12(<span class="keyword">const</span> <span class="keyword">char</span>* p);
<span class="keyword">constexpr</span> <span class="keyword">int</span> GState13(<span class="keyword">const</span> <span class="keyword">char</span>* p);

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState16(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="comment">//TK_RGB2
</span>    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? val * <span class="number">10</span> + DECVAL(*p) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState15(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? GState16(p + <span class="number">1</span>, val * <span class="number">10</span> + DECVAL(*p)) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState14(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? GState12(p + <span class="number">1</span>) : (*p == <span class="string">','</span>)  ? GState13(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? GState12(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState13(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? GState13(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? GState15(p + <span class="number">1</span>, DECVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState12(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? GState12(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? GState13(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState10(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? GState12(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? GState13(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? GState14(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState8(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? GState8(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? GState10(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState7(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? val * <span class="number">16</span> + HEXVAL(*p) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState6(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'('</span>) ? GState8(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState5(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? GState7(p + <span class="number">1</span>, HEXVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState4(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'b'</span>) ? GState6(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState3(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? GState5(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState2(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'g'</span>) ? GState4(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GState1(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? GState3(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GetG(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'#'</span>) ? GState1(p + <span class="number">1</span>) : (*p == <span class="string">'r'</span>) ? GState2(p + <span class="number">1</span>) :  <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState22(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="comment">//TK_RGB3
</span>    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? val * <span class="number">10</span> + DECVAL(*p) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState21(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="comment">//TK_RGB3
</span>    <span class="keyword">return</span> (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState22(p + <span class="number">1</span>, val * <span class="number">10</span> + DECVAL(*p)) : val;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState18(<span class="keyword">const</span> <span class="keyword">char</span>* p);
<span class="keyword">constexpr</span> <span class="keyword">int</span> BState19(<span class="keyword">const</span> <span class="keyword">char</span>* p);

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState20(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState18(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? BState19(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState18(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState19(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState19(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState21(p + <span class="number">1</span>, DECVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState18(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState18(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? BState19(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState16(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState18(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? BState19(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState20(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState12(<span class="keyword">const</span> <span class="keyword">char</span>* p);
<span class="keyword">constexpr</span> <span class="keyword">int</span> BState13(<span class="keyword">const</span> <span class="keyword">char</span>* p);

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState14(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState12(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? BState13(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState12(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState13(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState13(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState16(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState12(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState12(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? BState13(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState11(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">int</span> val)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? val * <span class="number">16</span> + HEXVAL(*p) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState10(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState12(p + <span class="number">1</span>) : (*p == <span class="string">','</span>) ? BState13(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState14(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState9(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? BState11(p + <span class="number">1</span>, HEXVAL(*p)) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState8(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">' '</span>) ? BState8(p + <span class="number">1</span>) : (*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) ? BState10(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState7(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? BState9(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState6(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'('</span>) ? BState8(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState5(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ?  BState7(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState4(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'b'</span>) ? BState6(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> BState3(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? BState5(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}


<span class="keyword">constexpr</span> <span class="keyword">int</span> BState2(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'g'</span>) ? BState4(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}


<span class="keyword">constexpr</span> <span class="keyword">int</span> BState1(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> ((*p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) || (*p &gt;= <span class="string">'A'</span> &amp;&amp; *p &lt;= <span class="string">'F'</span>)) ? BState3(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}

<span class="keyword">constexpr</span> <span class="keyword">int</span> GetB(<span class="keyword">const</span> <span class="keyword">char</span>* p)
{
    <span class="keyword">return</span> (*p == <span class="string">'#'</span>) ? BState1(p + <span class="number">1</span>) : (*p == <span class="string">'r'</span>) ? BState2(p + <span class="number">1</span>) : <span class="keyword">throw</span> <span class="string">&quot;error&quot;</span>;
}


<span class="keyword">struct</span> Color
{
    <span class="keyword">int</span> r;
    <span class="keyword">int</span> g;
    <span class="keyword">int</span> b;

    <span class="keyword">constexpr</span> Color(<span class="keyword">int</span> rr, <span class="keyword">int</span> gg, <span class="keyword">int</span> bb) : r(rr), g(gg), b(bb)
    {
    }

    <span class="keyword">constexpr</span> Color(<span class="keyword">const</span> <span class="keyword">char</span>* psz) :
        r(GetR(psz)),
        g(GetG(psz)),
        b(GetB(psz))
    {
    }
};


<span class="keyword">int</span> main(<span class="keyword">void</span>)
{
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;#FFC0C0&quot;</span>).r == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(255, 1, 2)&quot;</span>).r == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(1, 1, 2)&quot;</span>).r == <span class="number">1</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(12, 1, 2)&quot;</span>).r == <span class="number">12</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(123, 1, 2)&quot;</span>).r == <span class="number">123</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;#FFFFC0&quot;</span>).g == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(255, 1, 2)&quot;</span>).g == <span class="number">1</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(1, 12, 2)&quot;</span>).g == <span class="number">12</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(12, 123, 2)&quot;</span>).g == <span class="number">123</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;#FFFFFF&quot;</span>).b == <span class="number">255</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(255, 1, 2)&quot;</span>).b == <span class="number">2</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(1, 12, 12)&quot;</span>).b == <span class="number">12</span>, <span class="string">&quot;&quot;</span>);
    <span class="keyword">static_assert</span>(Color(<span class="string">&quot;rgb(12, 123, 123)&quot;</span>).b == <span class="number">123</span>, <span class="string">&quot;&quot;</span>);
}

</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  