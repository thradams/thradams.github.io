
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<pre>
<span class="keyword">#include</span> <span class="string">&quot;stdafx.h&quot;</span>

<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;
<span class="keyword">#include</span> &lt;time.h&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>.h&gt;


<span class="keyword">#include</span> &lt;stack&gt;
<span class="keyword">#include</span> &lt;functional&gt;
<span class="keyword">#include</span> &lt;<span class="keyword2">string</span>&gt;

<span class="keyword">typedef</span> <span class="keyword">void</span>(*clsr_void_call_t)(<span class="keyword">void</span>*);
<span class="keyword">typedef</span> <span class="keyword">void</span>(*clsr_void_destroy_t)(<span class="keyword">void</span>*);

<span class="keyword">typedef</span> <span class="keyword">struct</span> clsr_void_t
{
	clsr_void_call_t call;
	clsr_void_destroy_t destroy;
} clsr_void;

<span class="keyword">#define</span> CLSR_VOID_INIT(f) { f , <span class="number">0</span> }

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_destroy(clsr_void* p)
{
	<span class="keyword">if</span> (p-&gt;destroy)
		p-&gt;destroy(p);
}

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_delete(clsr_void* p)
{
	<span class="keyword">if</span> (p)
	{
		clsr_void_destroy(p);
		free(p);
	}
}

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_init(clsr_void* closure,
	clsr_void_call_t call,
	clsr_void_destroy_t destroy)
{
	closure-&gt;call = call;
	closure-&gt;destroy = destroy;
}

<span class="keyword">inline</span> clsr_void* clsr_void_create(clsr_void_call_t call,
	clsr_void_destroy_t destroy)
{
	clsr_void* closure = (clsr_void*)malloc(<span class="keyword">sizeof</span>(clsr_void));
	<span class="keyword">if</span> (closure)
	{
		clsr_void_init(closure, call, destroy);
	}
	<span class="keyword">return</span> closure;
}

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_call(clsr_void* p)
{
	p-&gt;call(p);
}

<span class="keyword">struct</span> clsr_void_str_t;
<span class="keyword">typedef</span> <span class="keyword">void</span>(*clsr_void_str_call_t)(clsr_void_str_t*);
<span class="keyword">typedef</span> <span class="keyword">void</span>(*clsr_void_str_call_t2)(<span class="keyword">const</span> <span class="keyword">char</span>*);

<span class="keyword">typedef</span> <span class="keyword">struct</span> clsr_void_str_t
{
	clsr_void_t base;
	<span class="keyword">const</span> <span class="keyword">char</span>* text;
} clsr_void_str;

<span class="keyword">#define</span> CLST_VOID_STR_INIT {<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>}

<span class="keyword">int</span> clsr_void_str_init(clsr_void_str * closure,
	clsr_void_str_call_t call,
	<span class="keyword">const</span> <span class="keyword">char</span>* text);

<span class="keyword">static</span> <span class="keyword">void</span> clsr_void_str_destroy(<span class="keyword">void</span>* pv)
{
	clsr_void_str * p = (clsr_void_str *)(pv);
	free((<span class="keyword">void</span>*)p-&gt;text);
}

<span class="keyword">int</span> clsr_void_str_init(clsr_void_str * closure,
	clsr_void_str_call_t call,
	<span class="keyword">const</span> <span class="keyword">char</span>* text)
{
	clsr_void_init((clsr_void*)closure,
		(clsr_void_call_t)call,
		&amp;clsr_void_str_destroy);

	closure-&gt;text = (<span class="keyword">const</span> <span class="keyword">char</span>*)malloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (strlen(text) + <span class="number">1</span>));
	<span class="keyword">if</span> (closure-&gt;text)
	{
		strcpy((<span class="keyword">char</span>*)closure-&gt;text, text);
		<span class="keyword">return</span> <span class="number">0</span>;
	}
	<span class="keyword">return</span> <span class="number">1</span>;
}

clsr_void* clsr_void_str_create(clsr_void_str_call_t call, <span class="keyword">const</span> <span class="keyword">char</span>* text)
{
	clsr_void_str * closure = (clsr_void_str*)malloc(<span class="keyword">sizeof</span>(clsr_void_str));
	<span class="keyword">if</span> (closure)
	{
		<span class="keyword">if</span> (clsr_void_str_init(closure, call, text) != <span class="number">0</span>)
		{
			free(closure);
			closure = <span class="number">0</span>;
		}
	}
	<span class="keyword">return</span> (clsr_void*)closure;
}


<span class="keyword">typedef</span> <span class="keyword">struct</span> clsr_void_stack_t
{
	size_t      size;
	size_t      capacity;
	clsr_void** data;
} clsr_void_stack;

<span class="keyword">#define</span> CLSR_VOID_STACK_INIT { <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> }

<span class="keyword">inline</span> clsr_void* clsr_void_stack_top(clsr_void_stack* p)
{
	<span class="keyword">return</span> p-&gt;data[p-&gt;size - <span class="number">1</span>];
}

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_stack_pop(clsr_void_stack* p, clsr_void** ppItem)
{
	*ppItem = p-&gt;data[p-&gt;size - <span class="number">1</span>];
	p-&gt;size -= <span class="number">1</span>;
}

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_stack_destroy(clsr_void_stack* p)
{
	<span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; p-&gt;size; i++)
	{
		clsr_void_delete(p-&gt;data[i]);
	}
	free(p-&gt;data);
	p-&gt;size = <span class="number">0</span>;
	p-&gt;data = <span class="number">0</span>;
	p-&gt;capacity = <span class="number">0</span>;
}

size_t clsr_void_stack_reserve(clsr_void_stack* p, size_t nelements)
{
	<span class="keyword">if</span> (nelements &gt; p-&gt;capacity)
	{
		size_t nelem = nelements;

		<span class="keyword">if</span> (p-&gt;data == NULL)
		{
			p-&gt;data = (clsr_void**)malloc(nelem * <span class="keyword">sizeof</span>(clsr_void*));
		}
		<span class="keyword">else</span>
		{
			p-&gt;data = (clsr_void**)realloc((<span class="keyword">void</span>*)p-&gt;data, nelem * <span class="keyword">sizeof</span>(clsr_void*));
		}
		p-&gt;capacity = nelements;
	}

	<span class="keyword">return</span> (p-&gt;data != <span class="number">0</span>) ? nelements : <span class="number">0</span>;
}

<span class="keyword">static</span> size_t clsr_void_stack_grow(clsr_void_stack* p, size_t nelements)
{
	<span class="keyword">const</span> size_t INITIAL_CAPACITY = <span class="number">4</span>;
	<span class="keyword">const</span> size_t MAX_CAPACITY = (size_t)(UINT_MAX / <span class="keyword">sizeof</span>(clsr_void*));
	<span class="keyword">if</span> (nelements &gt; p-&gt;capacity)
	{
		size_t newCap = p-&gt;capacity == <span class="number">0</span> ? INITIAL_CAPACITY : p-&gt;capacity;
		<span class="keyword">while</span> (newCap &lt; nelements)
		{
			newCap *= <span class="number">2</span>;

			<span class="keyword">if</span> (newCap &lt; nelements ||
				newCap &gt; MAX_CAPACITY)
			{
				<span class="comment">/*overflow check*/</span>
				newCap = MAX_CAPACITY;
			}
		}
		<span class="keyword">return</span> clsr_void_stack_reserve(p, newCap);
	}
	<span class="keyword">return</span> p-&gt;capacity;
}

<span class="keyword">inline</span> size_t clsr_void_stack_push(clsr_void_stack* p, clsr_void* pItem)
{
	size_t result = clsr_void_stack_grow(p, p-&gt;size + <span class="number">1</span>);

	<span class="keyword">if</span> (result == <span class="number">0</span>)
	{
		clsr_void_delete(pItem);
		<span class="keyword">return</span> <span class="number">0</span>;
	}

	p-&gt;data[p-&gt;size] = pItem;
	p-&gt;size += <span class="number">1</span>;
	<span class="keyword">return</span> <span class="number">1</span>;
}

<span class="keyword">inline</span> <span class="keyword">void</span> clsr_void_stack_pop_call(clsr_void_stack* stack)
{
	clsr_void* p;
	clsr_void_stack_pop(stack, &amp;p);

	clsr_void_call(p);
	clsr_void_destroy(p);
}

<span class="keyword">void</span> clsr_void_stack_clear(clsr_void_stack* p)
{
	<span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; p-&gt;size; i++)
	{
		clsr_void_delete(p-&gt;data[i]);
	}
	p-&gt;size = <span class="number">0</span>;
}

<span class="keyword">#define</span> MAX_COUNT <span class="number">10000000</span>

<span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;

<span class="keyword">static</span> <span class="keyword">void</span> f(<span class="keyword">void</span>*)
{
	counter++;
}

<span class="keyword">static</span> <span class="keyword">void</span> f2(clsr_void_str* p)
{
	counter += strlen(p-&gt;text);
}

<span class="keyword">void</span> Test1()
{


	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_COUNT; i++)
	{
		clsr_void_stack stack = CLSR_VOID_STACK_INIT;

		clsr_void_stack_push(&amp;stack, clsr_void_create(&amp;f, <span class="number">0</span>));
		clsr_void_stack_push(&amp;stack, clsr_void_str_create(&amp;f2, <span class="string">&quot;thiago&quot;</span>));

		<span class="keyword">while</span> (stack.size)
		{
			clsr_void_stack_pop_call(&amp;stack);
		}

		clsr_void_stack_destroy(&amp;stack);
	}

}

<span class="comment">//#define HAS_MOVE_CAPTURE
</span>
<span class="keyword">void</span> Test2()
{


	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_COUNT; i++)
	{
		std::stack&lt;std::<span class="keyword2">function</span>&lt;<span class="keyword">void</span>(<span class="keyword">void</span>)&gt;&gt; st;

		st.emplace([]()
		{
			counter++;
		});

		std::<span class="keyword2">string</span> s2 = <span class="string">&quot;thiago&quot;</span>;
<span class="keyword">#ifdef</span> HAS_MOVE_CAPTURE
		st.emplace([s2 = std::move(s2)]()
<span class="keyword">#else</span>
		st.emplace([s2]()
<span class="keyword">#endif</span>		
		{
			counter += s2.size();
		});

		<span class="keyword">while</span> (st.size())
		{
			st.top()();
			st.pop();
		}
	}
}


<span class="keyword">void</span> RunTest(<span class="keyword">const</span> <span class="keyword">char</span>* message, <span class="keyword">void</span>(*test)(<span class="keyword">void</span>))
{
	counter = <span class="number">0</span>;
	time_t start = clock();
	test();
	printf(<span class="string">&quot;%s %d %d\n&quot;</span>, message, <span class="keyword">int</span>(clock() - start), counter);
}

<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])
{
	RunTest(<span class="string">&quot;C++&quot;</span>, &amp;Test2);
	RunTest(<span class="string">&quot;C  &quot;</span>, &amp;Test1);
	<span class="keyword">return</span> <span class="number">0</span>;
}


</pre>



<p>Output 2013</p>
<pre>
C++ 6453 70000000
C   4116 70000000
</pre>

<p>HASOutput 2015. {{{C++ 5333 70000000C   4048 70000000</p>
<pre>

Output 2015. 
</pre>
<p>C++ 5452 70000000C   4083 70000000</p>
<pre>


C 23% faster


Just construction/destruction of stack

</pre>

<p>        //C</p>

<p>        //C++        for (int i = 0; i &lt; MAX</p>

<pre>

</pre>
<p>C++ 1063 0C   58 0</p>
<pre>

statck out of the loop - first call

</pre>

<p>void Test1(){}</p>

<p>void Test2(){</p>

<p></p>

<p>}</p>
<pre>

VC++ 2015
</pre>
<p>C++ 152 10000000C   25 10000000</p>
<pre>


statck out of the loop - second call

</pre>

<p>void Test1(){}</p>

<p>void Test2(){</p>

<p></p>

<p>}</p>

<pre>

</pre>
<p>C++ 161 60000000C   72 60000000</p>
<pre>

</pre>

<!-- Page content end --> 
</article> 
 
</body> 
</html>  