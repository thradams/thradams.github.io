
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 


<h1> Memory leak detector</h1>

<p>Memory leaks detector for malloc, realloc and free.</p>

<p>It adds the allocated memory into a linked list with source name and line.</p>

<p>free removes the node.</p>

<p>If there are remaing itens, they are leaks.</p>

<pre>
<span class="keyword">#pragma</span> once
<span class="keyword">#include</span> &lt;stdlib.h&gt;

<span class="keyword">#ifdef</span> _DEBUG

<span class="keyword">void</span>* MallocDbg(<span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span>* file, size_t size);
<span class="keyword">void</span> FreeDbg(<span class="keyword">void</span>* p);
<span class="keyword">void</span>* ReallocDbg(<span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span>* file, <span class="keyword">void</span>* p, size_t s);

<span class="keyword">void</span> PrintLeaksDbg();

<span class="keyword">#define</span> malloc(s) MallocDbg(__LINE__, __FILE__, (s))
<span class="keyword">#define</span> free(p) FreeDbg((p))
<span class="keyword">#define</span> realloc(p, s) ReallocDbg(__LINE__, __FILE__, (p), (s))

<span class="keyword">#endif</span> <span class="comment">// DEBUG
</span>

</pre>


<pre>

<span class="keyword">#include</span> &lt;stdlib.h&gt;
<span class="keyword">#include</span> &lt;stdio.h&gt;

<span class="keyword">void</span>* MallocDbg(<span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span>* file, size_t size);
<span class="keyword">void</span> FreeDbg(<span class="keyword">void</span>* p);
<span class="keyword">void</span>* ReallocDbg(<span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span>* file, <span class="keyword">void</span>* p, size_t s);
<span class="keyword">void</span> PrintLeaksDbg();

<span class="keyword">struct</span> Mem
{
    <span class="keyword">struct</span> Mem* pPrev;
    <span class="keyword">struct</span> Mem* pNext;
    <span class="keyword">const</span> <span class="keyword">char</span>* file;
    size_t line;
};

<span class="keyword">struct</span> Mem* pHead = <span class="number">0</span>;

<span class="keyword">void</span>* MallocDbg(<span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span>* file, size_t size)
{
    <span class="keyword">struct</span> Mem* p = (<span class="keyword">struct</span> Mem*) (malloc)(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem) + size);
    <span class="keyword">if</span> (p)
    {
        p-&gt;line = line;
        p-&gt;file = file;
        p-&gt;pPrev = <span class="number">0</span>;
        p-&gt;pNext = pHead;

        <span class="keyword">if</span> (pHead)
        {
            pHead-&gt;pPrev = p;
        }
        pHead = p;        
        p = ((<span class="keyword">char</span>*)p) + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem);
    }

    <span class="keyword">return</span> p;
}

<span class="keyword">void</span>* ReallocDbg(<span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span>* file, <span class="keyword">void</span>* p, size_t s)
{
    <span class="keyword">struct</span> Mem* pMem = <span class="number">0</span>;
    <span class="keyword">if</span> (p)
    {
        
        pMem = (<span class="keyword">struct</span> Mem*)((<span class="keyword">char</span>*)p - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem));
        

        pMem = (<span class="keyword">struct</span> Mem*)(realloc)(pMem, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem) + s);
        <span class="keyword">if</span> (pMem)
        {
            <span class="comment">//update line and source
</span>            pMem-&gt;line = line;
            pMem-&gt;file = file;
            
            <span class="keyword">if</span> (pMem-&gt;pPrev)
            {
                pMem-&gt;pPrev-&gt;pNext = pMem;
            }
            
            <span class="keyword">if</span> (pMem-&gt;pNext)
            {
                pMem-&gt;pNext-&gt;pPrev = pMem;
            }

            <span class="keyword">if</span> (pHead == (<span class="keyword">struct</span> Mem*)((<span class="keyword">char</span>*)p - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem)))
            {
                pHead = pMem;
            }

            pMem = ((<span class="keyword">char</span>*)pMem) + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem);
        }
    }
    <span class="keyword">else</span>
    {
        pMem = MallocDbg(line, file, s);
    }
    <span class="keyword">return</span> pMem;
}

<span class="keyword">void</span> FreeDbg(<span class="keyword">void</span>* p)
{
    <span class="keyword">if</span> (p)
    {
        <span class="keyword">struct</span> Mem* pMem = (<span class="keyword">struct</span> Mem*)((<span class="keyword">char</span>*)p - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Mem));

        <span class="keyword">if</span> (pMem == pHead)
        {
            pHead = pHead-&gt;pNext;
        }
        <span class="keyword">else</span>
        {
            pMem-&gt;pPrev-&gt;pNext = pMem-&gt;pNext;
        }

        (free)(pMem);
    }
}

<span class="keyword">void</span> PrintLeaksDbg()
{
    <span class="keyword">struct</span> Mem* p = pHead;
    <span class="keyword">while</span> (p)
    {
        printf(<span class="string">&quot;%s %d\n&quot;</span>, p-&gt;file, p-&gt;line);
        p = p-&gt;pNext;
    }
}



</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  