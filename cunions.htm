
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<pre>
<span class="keyword">#include</span> &lt;stdio.h&gt;
<span class="keyword">#include</span> &lt;stdlib.h&gt;


<span class="keyword">typedef</span> <span class="keyword">struct</span> Box {
  <span class="keyword">int</span> BoxId;
  <span class="keyword">int</span> w, h;
} Box;

<span class="keyword">typedef</span> <span class="keyword">struct</span> Circle {
  <span class="keyword">int</span> CircleId;
  <span class="keyword">int</span> r;
} Circle;

<span class="keyword">typedef</span> <span class="keyword">union</span> Shape {
  
  <span class="keyword">int</span> ShapeId;
  Box;
  Circle;

} Shape;


<span class="keyword">void</span> Circle_Print(Circle* pCircle)
{
  printf(<span class="string">&quot;r = %d\n&quot;</span>, pCircle-&gt;r);
}

<span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)
{
  Box* pBox = malloc(<span class="keyword">sizeof</span>(Box));
  *pBox = (Box) { .BoxId = <span class="number">1</span>, .w = <span class="number">1</span>, .h = <span class="number">2</span> };

  Circle* pCircle = malloc(<span class="keyword">sizeof</span>(Box));
  *pCircle = (Circle) { .CircleId = <span class="number">2</span>, .r = <span class="number">3</span> };

  Shape* p[<span class="number">2</span>] = { (Shape*)pBox, (Shape*)pCircle };

  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) {
    <span class="keyword">switch</span> (p[i]-&gt;ShapeId) {
    <span class="keyword">case</span> <span class="number">1</span>:
      printf(<span class="string">&quot;w = %d, h = %d\n&quot;</span>, p[i]-&gt;w, p[i]-&gt;h);
      <span class="keyword">break</span>;
    <span class="keyword">case</span> <span class="number">2</span>:
      Circle_Print((Circle*)p[i]);
      printf(<span class="string">&quot;r = %d\n&quot;</span>, p[i]-&gt;r);
      <span class="keyword">break</span>;
    }
  }

  <span class="keyword">return</span> <span class="number">0</span>;
}
</pre>


<!-- Page content end --> 
</article> 
 
</body> 
</html>  