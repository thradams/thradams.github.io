
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml"> 
 <head> 
 <title>Thiago's website</title> 
 <link href="trastyle.css" type="text/css" rel="stylesheet"/>    
 <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" /> 
</head> 
 <script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script> 

 <script type="text/javascript"> try {var pageTracker = _gat._getTracker("UA-9617326-1");pageTracker._trackPageview();} catch(err) {}</script> 
 <body>     <div  class="pageheader">

 <h2>Thiago R. Adams website</h2> <p>     
 
 <a class="linkbox" href="index.htm">HOME</a>     
 <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
 <a class="linkbox" href="about.htm">ABOUT</a>     
 <br /> </p> </div>
 
 <article>

 <!-- Page content begin --> 



<p>threadpool.h</p>

<pre>


<span class="keyword">#pragma</span> once
<span class="keyword">typedef</span> <span class="keyword">void</span>(*task_func)(<span class="keyword">void</span>*);

<span class="keyword">int</span> async_pool_init();
<span class="keyword">void</span> async_pool_run(task_func f, <span class="keyword">void</span>* arg);
<span class="keyword">void</span> async_pool_reset();

</pre>


<p>threadpool.c</p>

<pre>
<span class="keyword">#include</span> <span class="string">&quot;stdafx.h&quot;</span>
<span class="keyword">#include</span> <span class="string">&quot;threadpool.h&quot;</span>
<span class="keyword">#include</span> <span class="string">&quot;tinythread.h&quot;</span>
<span class="keyword">#include</span> &lt;assert.h&gt;

<span class="keyword">#define</span> POOL_SIZE <span class="number">2</span>

<span class="keyword">struct</span> Task
{
  <span class="keyword">void</span>* arg;
  task_func f;
};

<span class="keyword">static</span> mtx_t  s_queue_mutex;
<span class="keyword">static</span> thrd_t s_threads[POOL_SIZE];
<span class="keyword">static</span> <span class="keyword">bool</span>   s_stop = <span class="keyword">false</span>;
<span class="keyword">static</span> cnd_t  s_condition;
<span class="keyword">static</span> size_t s_taskssize = <span class="number">0</span>;
<span class="keyword">static</span> Task   s_tasks[<span class="number">100</span>];

<span class="keyword">int</span> tfunc(<span class="keyword">void</span>*)
{
  <span class="keyword">for</span> (;;)
  {
    mtx_lock(&amp;s_queue_mutex);
    <span class="keyword">while</span> (!s_stop &amp;&amp; s_taskssize == <span class="number">0</span>)
    {
      cnd_wait(&amp;s_condition, &amp;s_queue_mutex);
    }
    <span class="keyword">if</span> (s_stop &amp;&amp; s_taskssize == <span class="number">0</span>)
    {
      mtx_unlock(&amp;s_queue_mutex);
      <span class="keyword">break</span>;
    }
    <span class="keyword">else</span>
    {
      Task *p = &amp;s_tasks[s_taskssize - <span class="number">1</span>];
      s_taskssize--;
      mtx_unlock(&amp;s_queue_mutex);
      (*p-&gt;f)(p-&gt;arg);
    }    
  }
  <span class="keyword">return</span> <span class="number">0</span>;
}

<span class="keyword">int</span> async_pool_init()
{
  <span class="keyword">int</span> r = mtx_init(&amp;s_queue_mutex, mtx_plain);
  <span class="keyword">if</span> (r == thrd_success)
  {
    r = cnd_init(&amp;s_condition);
    <span class="keyword">if</span> (r == thrd_success)
    {
      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++)
      {
        r = thrd_create(&amp;s_threads[i], &amp;tfunc, <span class="number">0</span>);
        <span class="keyword">if</span> (r == thrd_success)
        {
        }
      }
    }
  }
  <span class="keyword">return</span> thrd_success;
}

<span class="keyword">void</span> async_pool_run(task_func f, <span class="keyword">void</span>* arg)
{
  mtx_lock(&amp;s_queue_mutex);
  s_tasks[s_taskssize].arg = arg;
  s_tasks[s_taskssize].f = f;
  s_taskssize++;
  mtx_unlock(&amp;s_queue_mutex);
  cnd_broadcast(&amp;s_condition);
}

<span class="keyword">void</span> async_pool_reset()
{
  <span class="keyword">bool</span> wasstoped = <span class="keyword">false</span>;
  mtx_lock(&amp;s_queue_mutex);
  wasstoped = s_stop;
  s_stop = <span class="keyword">true</span>;
  mtx_unlock(&amp;s_queue_mutex);

  <span class="keyword">if</span> (wasstoped)
  {
    <span class="keyword">return</span>;
  }

  cnd_broadcast(&amp;s_condition);

  <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; POOL_SIZE; ++i)
  {
    <span class="keyword">int</span> res;
    <span class="keyword">int</span> r = thrd_join(s_threads[i], &amp;res);
    <span class="keyword">if</span> (r == thrd_success)
    {
    }
  }

}

</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  