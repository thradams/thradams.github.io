<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
   <title>Thiago's website</title>
   <link href="trastyle.css" type="text/css" rel="stylesheet" />
   <link rel="alternate" type="application/rss+xml" title="RSS" href="http://wwww.thradams/codeblog/rss.xml" />
</head>

<body>
   <div class="pageheader">

      <h2>Thiago R. Adams website</h2>
      <p>
         <a class="linkbox" href="index.htm">HOME</a>
         <a class="linkbox" href="codeblog.htm">CODE-BLOG</a>
         <a class="linkbox" href="about.htm">ABOUT</a>
         <br />
      </p>
   </div>

   <article>
  
      <!-- Page content begin -->

<p>See:</p>

<p><a href="http://en.wikipedia.org/wiki/Levenshtein_distance">http://en.wikipedia.org/wiki/Levenshtein_distance</a></p>

<p>And </p>

<p></p>

<pre>


<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;
<span class="keyword">int</span> LevenshteinDistance(<span class="keyword">const</span> T&amp; s1, <span class="keyword">const</span> T&amp; s2, Array&lt;<span class="keyword">int</span>&gt;&amp; d)
 {
   <span class="keyword">const</span> size_t m = s1.size();
   <span class="keyword">const</span> size_t n = s2.size();
  
   <span class="comment">// for all i and j, d[i,j] will hold the Levenshtein distance between
</span>   <span class="comment">// the first i characters of s1 and the first j characters of s2;
</span>   <span class="comment">// note that d has (m+1)x(n+1) values
</span>   d.ResizeConservative(m + <span class="number">1</span>, n + <span class="number">1</span>);
  
   <span class="comment">// the distance of any first string to an empty second string
</span>   <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m; i++)
       d.At(i, <span class="number">0</span>) = i; 

   <span class="comment">// the distance of any second string to an empty first string
</span>   <span class="keyword">for</span> (size_t j = <span class="number">0</span>; j &lt; n; j++)
     d.At(<span class="number">0</span>, j) = j; 
  
   <span class="keyword">for</span> (size_t j = <span class="number">1</span>; j &lt;=  n; j++)
   {
     <span class="keyword">for</span> (size_t i = <span class="number">1</span>; i &lt;= m; i++)
     {
       <span class="keyword">if</span> (s1[i] == s2[j])
       {
         <span class="comment">// no operation required
</span>         d.At(i, j) = d.At(i<span class="number">-1</span>, j<span class="number">-1</span>);
       }
       <span class="keyword">else</span>
       {
         d.At(i, j) = (std::min)((std::min)(d.At(i - <span class="number">1</span>, j) + <span class="number">1</span>,  <span class="comment">// a deletion
</span>                                  d.At(i, j - <span class="number">1</span>) + <span class="number">1</span>),  <span class="comment">// an insertion
</span>                                  d.At(i - <span class="number">1</span>, j - <span class="number">1</span>) + <span class="number">1</span> <span class="comment">// a substitution
</span>                                 );
       }
     }
   }
  
   <span class="keyword">return</span> d.At(m, n);
 }
</pre>



<!-- Page content end --> 
</article> 
 
</body> 
</html>  